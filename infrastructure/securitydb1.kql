
.create-merge table AADManagedIdentitySignInLogsRaw (records:dynamic)

.create-or-alter table AADManagedIdentitySignInLogsRaw ingestion json mapping 'AADManagedIdentitySignInLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AADManagedIdentitySignInLogs(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
ResourceGroup:string,
Identity:string,
Level:string,
Location:string,
AppId:string,
AuthenticationContextClassReferences:string,
AuthenticationProcessingDetails:string,
ConditionalAccessPolicies:string,
ConditionalAccessPoliciesV2:dynamic,
ConditionalAccessStatus:string,
FederatedCredentialId:string,
Id:string,
IPAddress:string,
LocationDetails:string,
ResourceDisplayName:string,
ResourceIdentity:string,
ResourceServicePrincipalId:string,
ServicePrincipalCredentialKeyId:string,
ServicePrincipalCredentialThumbprint:string,
ServicePrincipalId:string,
ServicePrincipalName:string,
UniqueTokenIdentifier:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AADManagedIdentitySignInLogsExpand {
AADManagedIdentitySignInLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
SourceSystem=tostring(''),
TimeGenerated=todatetime(events.['time']),
OperationName=tostring(events.operationName),
OperationVersion=tostring(events.operationVersion),
Category=tostring(events.category),
ResultType=tostring(events.resultType),
ResultSignature=tostring(events.resultSignature),
ResultDescription=tostring(events.resultDescription),
DurationMs=tolong(events.durationMs),
CorrelationId=tostring(events.correlationId),
ResourceGroup=tostring(events.ResourceGroup),
Identity=tostring(events.Identity),
Level=tostring(events.Level),
Location=tostring(events.properties.location.countryOrRegion),
AppId=tostring(events.properties.appId),
AuthenticationContextClassReferences=tostring(events.properties.authenticationContextClassReferences),
AuthenticationProcessingDetails=tostring(events.properties.authenticationProcessingDetails),
ConditionalAccessPolicies=tostring(events.properties.conditionalAccessPolicies),
ConditionalAccessPoliciesV2=todynamic(events.properties.conditionalAccessPoliciesV2),
ConditionalAccessStatus=tostring(events.properties.conditionalAccessStatus),
FederatedCredentialId=tostring(events.properties.federatedCredentialId),
Id=tostring(events.properties.id),
IPAddress=tostring(events.properties.ipAddress),
LocationDetails=tostring(events.properties.location),
ResourceDisplayName=tostring(events.properties.resourceDisplayName),
ResourceIdentity=tostring(events.properties.resourceId),
ResourceServicePrincipalId=tostring(events.properties.resourceServicePrincipalId),
ServicePrincipalCredentialKeyId=tostring(events.properties.servicePrincipalCredentialKeyId),
ServicePrincipalCredentialThumbprint=tostring(events.properties.servicePrincipalCredentialThumbprint),
ServicePrincipalId=tostring(events.properties.servicePrincipalId),
ServicePrincipalName=tostring(events.properties.servicePrincipalName),
UniqueTokenIdentifier=tostring(events.properties.uniqueTokenIdentifier),
Type=tostring(events.category),
_ItemId=tostring(events.properties.id),
_ResourceId=tostring(events.resourceId),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table AADManagedIdentitySignInLogs policy update @'[{"Source": "AADManagedIdentitySignInLogsRaw", "Query": "AADManagedIdentitySignInLogsExpand()", "IsEnabled": "false", "IsTransactional": true}]'

.alter table AADManagedIdentitySignInLogs policy update @'[{"Source": "AADManagedIdentitySignInLogsRaw", "Query": "AADManagedIdentitySignInLogsExpand()", "IsEnabled": "true", "IsTransactional": true}]'






.create-merge table AADNonInteractiveUserSignInLogsRaw (records:dynamic)

.create-or-alter table AADNonInteractiveUserSignInLogsRaw ingestion json mapping 'AADNonInteractiveUserSignInLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AADNonInteractiveUserSignInLogs(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
ResourceGroup:string,
Identity:string,
Level:string,
Location:string,
AlternateSignInName:string,
AppDisplayName:string,
AppId:string,
AppliedEventListeners:dynamic,
AuthenticationContextClassReferences:string,
AuthenticationDetails:string,
AuthenticationMethodsUsed:string,
AuthenticationProcessingDetails:string,
AuthenticationProtocol:string,
AuthenticationRequirement:string,
AuthenticationRequirementPolicies:string,
AutonomousSystemNumber:string,
ClientAppUsed:string,
ConditionalAccessPolicies:string,
ConditionalAccessPoliciesV2:dynamic,
ConditionalAccessStatus:string,
CreatedDateTime:datetime,
CrossTenantAccessType:string,
DeviceDetail:string,
HomeTenantId:string,
Id:string,
IPAddress:string,
IsInteractive:bool,
IsRisky:bool,
LocationDetails:string,
MfaDetail:string,
NetworkLocationDetails:string,
OriginalRequestId:string,
ProcessingTimeInMs:string,
ResourceDisplayName:string,
ResourceIdentity:string,
ResourceServicePrincipalId:string,
ResourceTenantId:string,
RiskDetail:string,
RiskEventTypes:string,
RiskEventTypes_V2:string,
RiskLevelAggregated:string,
RiskLevelDuringSignIn:string,
RiskState:string,
ServicePrincipalId:string,
SessionLifetimePolicies:string,
SignInEventTypes:string,
SignInIdentifierType:string,
Status:string,
TokenIssuerName:string,
TokenIssuerType:string,
UniqueTokenIdentifier:string,
UserAgent:string,
UserDisplayName:string,
UserId:string,
UserPrincipalName:string,
UserType:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AADNonInteractiveUserSignInLogsExpand {
AADNonInteractiveUserSignInLogsRaw
//| extend events = records
| mv-expand events = records
| extend ResultDescription = iff(events.resultType == "0","Success","Failure")
| project
TenantId=tostring(events.tenantId),
SourceSystem=tostring('Azure AD'),
TimeGenerated=todatetime(events.['time']),
OperationName = tostring(events.operationName),
OperationVersion = tostring(events.operationVersion),
Category = tostring(events.category),
ResultType = tostring(events.resultType),
ResultSignature = tostring(events.resultSignature),
ResultDescription = tostring(ResultDescription),
DurationMs = tolong(events.durationMs),
CorrelationId = tostring(events.properties.correlationId),
ResourceGroup = tostring('Microsoft.aadiam'),
Identity=tostring(events.Identity),
Level=tostring(events.Level),
Location = tostring(events.properties.location.countryOrRegion),
AlternateSignInName=tostring(events.AlternateSignInName),
AppDisplayName = tostring(events.properties.resourceDisplayName),
AppId = tostring(events.properties.appId),
AppliedEventListeners = todynamic(events.properties.appliedEventListeners), 
AuthenticationContextClassReferences=tostring(events.AuthenticationContextClassReferences),
AuthenticationDetails = tostring(events.properties.authenticationDetails),
AuthenticationMethodsUsed = tostring(events.properties.authenticationMethodsUsed), 
AuthenticationProcessingDetails = tostring(events.properties.authenticationProcessingDetails),
AuthenticationProtocol = tostring(events.properties.authenticationProtocol), 
AuthenticationRequirement = tostring(events.properties.authenticationRequirement),
AuthenticationRequirementPolicies = tostring(events.AuthenticationRequirementPolicies),
AutonomousSystemNumber=tostring(events.AutonomousSystemNumber),
ClientAppUsed=tostring(events.properties.ClientAppUsed),
ConditionalAccessPolicies = tostring(events.properties.appliedConditionalAccessPolicies),
ConditionalAccessPoliciesV2 = todynamic(events.properties.appliedConditionalAccessPolicies),
ConditionalAccessStatus = tostring(events.properties.conditionalAccessStatus),
CreatedDateTime = todatetime(events.properties.createdDateTime),
CrossTenantAccessType = tostring(events.properties.crossTenantAccessType),
DeviceDetail = tostring(events.properties.deviceDetail),
HomeTenantId = tostring(events.properties.homeTenantId),
Id = tostring(events.properties.id),
IPAddress = tostring(events.properties.ipAddress),
IsInteractive = tobool(events.properties.isInteractive),
IsRisky = tobool(events.properties.riskLevelAggregated),
LocationDetails = tostring(events.properties.location),
MfaDetail = tostring(events.properties.mfaDetail),
NetworkLocationDetails = tostring(events.properties.networkLocationDetails),
OriginalRequestId = tostring(events.properties.originalRequestId),
ProcessingTimeInMs = tostring(events.properties.processingTimeInMilliseconds),
ResourceDisplayName = tostring(events.properties.resourceDisplayName),
ResourceIdentity = tostring(events.properties.resourceId),
ResourceServicePrincipalId = tostring(events.properties.resourceServicePrincipalId),
ResourceTenantId = tostring(events.properties.resourceTenantId),
RiskDetail = tostring(events.properties.riskDetail),
RiskEventTypes = tostring(events.properties.riskEventTypes),
RiskEventTypes_V2 = tostring(events.properties.riskEventTypes_V2),
RiskLevelAggregated = tostring(events.properties.riskLevelAggregated),
RiskLevelDuringSignIn = tostring(events.properties.riskLevelDuringSignIn),
RiskState = tostring(events.properties.riskState),
ServicePrincipalId = tostring(events.properties.servicePrincipalId),
SessionLifetimePolicies = tostring(events.properties.sessionLifetimePolicies),
SignInEventTypes = tostring(events.properties.signInEventTypes),
SignInIdentifierType = tostring(events.properties.signInIdentifierType),
Status = tostring(events.properties.status),
TokenIssuerName = tostring(events.properties.tokenIssuerName),
TokenIssuerType = tostring(events.properties.tokenIssuerType),
UniqueTokenIdentifier = tostring(events.properties.uniqueTokenIdentifier),
UserAgent = tostring(events.properties.userAgent),
UserDisplayName = tostring(events.properties.userDisplayName),
UserId = tostring(events.properties.userId),
UserPrincipalName = tostring(events.properties.userPrincipalName),
UserType = tostring(events.properties.userType),
Type = tostring(events.category),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AADNonInteractiveUserSignInLogs policy update @'[{"Source": "AADNonInteractiveUserSignInLogsRaw", "Query": "AADNonInteractiveUserSignInLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AADNonInteractiveUserSignInLogs policy update @'[{"Source": "AADNonInteractiveUserSignInLogsRaw", "Query": "AADNonInteractiveUserSignInLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AADProvisioningLogsRaw (records:dynamic)

.create-or-alter table AADProvisioningLogsRaw ingestion json mapping 'AADProvisioningLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AADProvisioningLogs(
TenantId:string,
AADTenantId:string,
TimeGenerated:datetime,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
Action:string,
ChangeId:string,
CycleId:string,
Id:string,
InitiatedBy:string,
JobId:string,
ModifiedProperties:string,
ProvisioningSteps:string,
ServicePrincipal:string,
SourceIdentity:string,
SourceSystem:string,
StatusInfo:string,
TargetIdentity:string,
TargetSystem:string,
ProvisioningAction:string,
ProvisioningStatusInfo:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AADProvisioningLogsExpand {
AADProvisioningLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
AADTenantId=tostring(events.properties.tenantId),
TimeGenerated=todatetime(events.['time']),
OperationName=tostring(events.OperationName),
OperationVersion=tostring(events.OperationVersion),
Category=tostring(events.Category),
ResultType=tostring(events.resultType),
ResultSignature=tostring(''),
ResultDescription=tostring(events.ResultDescription),
DurationMs=tolong(events.durationMs),
CorrelationId=tostring(events.correlationId),
Action=tostring(events.properties.action),
ChangeId=tostring(events.properties.changeId),
CycleId=tostring(events.properties.cycleId),
Id=tostring(events.properties.id),
InitiatedBy=tostring(events.properties.initiatedBy),
JobId=tostring(events.properties.jobId),
ModifiedProperties=tostring(events.properties.modifiedProperties),
ProvisioningSteps=tostring(events.properties.provisioningSteps),
ServicePrincipal=tostring(events.properties.servicePrincipal),
SourceIdentity=tostring(events.properties.sourceIdentity),
SourceSystem=tostring(events.properties.sourceSystem),
StatusInfo=tostring(events.properties.statusInfo),
TargetIdentity=tostring(events.properties.targetIdentity),
TargetSystem=tostring(events.properties.targetSystem),
ProvisioningAction=tostring(events.properties.provisioningAction),
ProvisioningStatusInfo=tostring(events.properties.provisioningStatusInfo),
Type=tostring('AADProvisioningLogs'),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table AADProvisioningLogs policy update @'[{"Source": "AADProvisioningLogsRaw", "Query": "AADProvisioningLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AADProvisioningLogs policy update @'[{"Source": "AADProvisioningLogsRaw", "Query": "AADProvisioningLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AADRiskyUsersRaw (records:dynamic)

.create-or-alter table AADRiskyUsersRaw ingestion json mapping 'AADRiskyUsersRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AADRiskyUsers(
TenantId:string,
Id:string,
IsDeleted:bool,
IsProcessing:bool,
RiskDetail:string,
RiskLastUpdatedDateTime:datetime,
RiskLevel:string,
RiskState:string,
UserDisplayName:string,
UserPrincipalName:string,
TimeGenerated:datetime,
OperationName:string,
CorrelationId:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AADRiskyUsersExpand {
AADRiskyUsersRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
Id=tostring(events.properties.id),
IsDeleted=tobool(events.properties.isDeleted),
IsProcessing=tobool(events.properties.isProcessing),
RiskDetail=tostring(events.properties.isDeleted),
RiskLastUpdatedDateTime=todatetime(events.properties.riskLastUpdatedDateTime),
RiskLevel=tostring(events.properties.riskLevel),
RiskState=tostring(events.properties.riskState),
UserDisplayName=tostring(events.properties.userDisplayName),
UserPrincipalName=tostring(events.properties.userPrincipalName),
TimeGenerated=todatetime(events.['time']),
OperationName=tostring(events.operationName),
CorrelationId=tostring(events.correlationId),
SourceSystem=tostring(events.resourceId),
Type=tostring(events.category),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AADRiskyUsers policy update @'[{"Source": "AADRiskyUsersRaw", "Query": "AADRiskyUsersExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AADRiskyUsers policy update @'[{"Source": "AADRiskyUsersRaw", "Query": "AADRiskyUsersExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AADServicePrincipalSignInLogsRaw (records:dynamic)

.create-or-alter table AADServicePrincipalSignInLogsRaw ingestion json mapping 'AADServicePrincipalSignInLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AADServicePrincipalSignInLogs(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
ResourceGroup:string,
Identity:string,
Level:string,
Location:string,
AppId:string,
AuthenticationContextClassReferences:string,
AuthenticationProcessingDetails:string,
ConditionalAccessPolicies:string,
ConditionalAccessPoliciesV2:dynamic,
ConditionalAccessStatus:string,
FederatedCredentialId:string,
Id:string,
IPAddress:string,
LocationDetails:string,
ResourceDisplayName:string,
ResourceIdentity:string,
ResourceServicePrincipalId:string,
ServicePrincipalCredentialKeyId:string,
ServicePrincipalCredentialThumbprint:string,
ServicePrincipalId:string,
ServicePrincipalName:string,
UniqueTokenIdentifier:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AADServicePrincipalSignInLogsExpand {
AADServicePrincipalSignInLogsRaw
//| extend events = records
| mv-expand events = records
| extend ResultDescription = iff(events.resultType == "0","Success","Failure")
| project
TenantId=tostring(events.tenantId),
SourceSystem=tostring(''),
TimeGenerated=todatetime(events.['time']),
OperationName=tostring(events.operationName),
OperationVersion=tostring(events.operationVersion),
Category=tostring(events.category),
ResultType=tostring(events.resultType),
ResultSignature=tostring(events.resultSignature),
ResultDescription=tostring(ResultDescription),
DurationMs=tolong(events.durationMs),
CorrelationId=tostring(events.correlationId),
ResourceGroup=tostring(events.resourceGroup),
Identity=tostring(events.Identity),
Level=tostring(events.Level),
Location=tostring(events.properties.location.countryOrRegion),
AppId=tostring(events.properties.appId),
AuthenticationContextClassReferences=tostring(events.properties.authenticationContextClassReferences),
AuthenticationProcessingDetails=tostring(events.properties.authenticationProcessingDetails),
ConditionalAccessPolicies=tostring(events.properties.conditionalAccessPolicies),
ConditionalAccessPoliciesV2=todynamic(events.properties.conditionalAccessPoliciesV2),
ConditionalAccessStatus=tostring(events.properties.conditionalAccessStatus),
FederatedCredentialId=tostring(events.properties.federatedCredentialId),
Id=tostring(events.properties.id),
IPAddress=tostring(events.properties.ipAddress),
LocationDetails=tostring(events.properties.location),
ResourceDisplayName=tostring(events.properties.resourceDisplayName),
ResourceIdentity=tostring(events.properties.resourceId),
ResourceServicePrincipalId=tostring(events.properties.resourceServicePrincipalId),
ServicePrincipalCredentialKeyId=tostring(events.properties.servicePrincipalCredentialKeyId),
ServicePrincipalCredentialThumbprint=tostring(events.properties.servicePrincipalCredentialThumbprint),
ServicePrincipalId=tostring(events.properties.servicePrincipalId),
ServicePrincipalName=tostring(events.properties.servicePrincipalName),
UniqueTokenIdentifier=tostring(events.uniqueTokenIdentifier),
Type=tostring(events.category),
_ItemId=tostring(''),
_ResourceId=tostring(events.resourceId),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table AADServicePrincipalSignInLogs policy update @'[{"Source": "AADServicePrincipalSignInLogsRaw", "Query": "AADServicePrincipalSignInLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AADServicePrincipalSignInLogs policy update @'[{"Source": "AADServicePrincipalSignInLogsRaw", "Query": "AADServicePrincipalSignInLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AADUserRiskEventsRaw (records:dynamic)

.create-or-alter table AADUserRiskEventsRaw ingestion json mapping 'AADUserRiskEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AADUserRiskEvents(
TenantId:string,
Activity:string,
ActivityDateTime:datetime,
AdditionalInfo:dynamic,
CorrelationId:string,
DetectedDateTime:datetime,
DetectionTimingType:string,
Id:string,
IpAddress:string,
LastUpdatedDateTime:datetime,
Location:dynamic,
RequestId:string,
RiskDetail:string,
RiskEventType:string,
RiskLevel:string,
RiskState:string,
Source:string,
TokenIssuerType:string,
UserDisplayName:string,
UserId:string,
UserPrincipalName:string,
TimeGenerated:datetime,
OperationName:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AADUserRiskEventsExpand {
AADUserRiskEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
Activity=tostring(events.properties.activity),
ActivityDateTime=todatetime(events.properties.activityDateTime),
AdditionalInfo=todynamic(events.properties.additionalInfo),
CorrelationId=tostring(events.correlationId),
DetectedDateTime=todatetime(events.properties.detectedDateTime),
DetectionTimingType=tostring(events.properties.detectionTimingType),
Id=tostring(events.properties.id),
IpAddress=tostring(events.properties.ipAddress),
LastUpdatedDateTime=todatetime(events.properties.lastUpdatedDateTime),
Location=todynamic(events.properties.location),
RequestId=tostring(events.properties.requestId),
RiskDetail=tostring(events.properties.riskDetail),
RiskEventType=tostring(events.properties.riskEventType),
RiskLevel=tostring(events.properties.riskLevel),
RiskState=tostring(events.properties.riskState),
Source=tostring(events.properties.source),
TokenIssuerType=tostring(events.properties.tokenIssuerType),
UserDisplayName=tostring(events.properties.userDisplayName),
UserId=tostring(events.properties.userId),
UserPrincipalName=tostring(events.properties.userPrincipalName),
TimeGenerated=todatetime(events.['time']),
OperationName=tostring(events.operationName),
SourceSystem=tostring(''),
Type=tostring(events.category),
_ItemId=tostring(''),
_ResourceId=tostring(events.resourceId),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table AADUserRiskEvents policy update @'[{"Source": "AADUserRiskEventsRaw", "Query": "AADUserRiskEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AADUserRiskEvents policy update @'[{"Source": "AADUserRiskEventsRaw", "Query": "AADUserRiskEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AlertEvidenceRaw (records:dynamic)

.create-or-alter table AlertEvidenceRaw ingestion json mapping 'AlertEvidenceRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AlertEvidence(
TenantId:string,
TimeGenerated:datetime,
Timestamp:datetime,
AlertId:string,
Title:string,
Categories:string,
AttackTechniques:string,
ServiceSource:string,
DetectionSource:string,
EntityType:string,
EvidenceRole:string,
EvidenceDirection:string,
FileName:string,
FolderPath:string,
SHA1:string,
SHA256:string,
FileSize:long,
ThreatFamily:string,
RemoteIP:string,
RemoteUrl:string,
AccountName:string,
AccountDomain:string,
AccountSid:string,
AccountObjectId:string,
AccountUpn:string,
DeviceId:string,
DeviceName:string,
LocalIP:string,
NetworkMessageId:string,
EmailSubject:string,
ApplicationId:int,
Application:string,
OAuthApplicationId:string,
ProcessCommandLine:string,
AdditionalFields:dynamic,
RegistryKey:string,
RegistryValueName:string,
RegistryValueData:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AlertEvidenceExpand {
AlertEvidenceRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.['time']),
AlertId=tostring(events.properties.AlertId),
Title=tostring(events.properties.Title),
Categories=tostring(events.properties.Categories),
AttackTechniques=tostring(events.properties.AttackTechniques),
ServiceSource=tostring(events.properties.ServiceSource),
DetectionSource=tostring(events.properties.DetectionSource),
EntityType=tostring(events.properties.EntityType),
EvidenceRole=tostring(events.properties.EvidenceRole),
EvidenceDirection=tostring(events.properties.EvidenceDirection),
FileName=tostring(events.properties.FileName),
FolderPath=tostring(events.properties.FolderPath),
SHA1=tostring(events.properties.SHA1),
SHA256=tostring(events.properties.SHA256),
FileSize=tolong(events.properties.FileSize),
ThreatFamily=tostring(events.properties.ThreatFamily),
RemoteIP=tostring(events.properties.RemoteIP),
RemoteUrl=tostring(events.properties.RemoteUrl),
AccountName=tostring(events.properties.AccountName),
AccountDomain=tostring(events.properties.AccountDomain),
AccountSid=tostring(events.properties.AccountSid),
AccountObjectId=tostring(events.properties.AccountObjectId),
AccountUpn=tostring(events.properties.AccountUpn),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
LocalIP=tostring(events.properties.LocalIP),
NetworkMessageId=tostring(events.properties.NetworkMessageId),
EmailSubject=tostring(events.properties.EmailSubject),
ApplicationId=toint(events.properties.ApplicationId),
Application=tostring(events.properties.Application),
OAuthApplicationId=tostring(events.properties.OAuthApplicationId),
ProcessCommandLine=tostring(events.properties.ProcessCommandLine),
AdditionalFields=todynamic(events.properties.AdditionalFields),
RegistryKey=tostring(events.properties.RegistryKey),
RegistryValueName=tostring(events.properties.RegistryValueName),
RegistryValueData=tostring(events.properties.RegistryValueData),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring(events.properties.Type),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table AlertEvidence policy update @'[{"Source": "AlertEvidenceRaw", "Query": "AlertEvidenceExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AlertEvidence policy update @'[{"Source": "AlertEvidenceRaw", "Query": "AlertEvidenceExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AlertInfoRaw (records:dynamic)

.create-or-alter table AlertInfoRaw ingestion json mapping 'AlertInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AlertInfo(
TenantId:string,
TimeGenerated:datetime,
Timestamp:datetime,
AlertId:string,
Title:string,
Category:string,
Severity:string,
ServiceSource:string,
DetectionSource:string,
AttackTechniques:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AlertInfoExpand {
AlertInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.properties.Timestamp),
AlertId=tostring(events.properties.AlertId),
Title=tostring(events.properties.Title),
Category=tostring(events.properties.Category),
Severity=tostring(events.properties.Severity),
ServiceSource=tostring(events.properties.ServiceSource),
DetectionSource=tostring(events.properties.DetectionSource),
AttackTechniques=tostring(events.properties.AttackTechniques),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring('AlertInfo'),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AlertInfo policy update @'[{"Source": "AlertInfoRaw", "Query": "AlertInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AlertInfo policy update @'[{"Source": "AlertInfoRaw", "Query": "AlertInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AnomaliesRaw (records:dynamic)

.create-or-alter table AnomaliesRaw ingestion json mapping 'AnomaliesRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table Anomalies(
TenantId:string,
Id:string,
WorkspaceId:string,
VendorName:string,
TimeGenerated:datetime,
AnomalyTemplateId:string,
AnomalyTemplateName:string,
AnomalyTemplateVersion:string,
RuleId:string,
RuleStatus:string,
RuleName:string,
RuleConfigVersion:string,
Score:real,
Description:string,
StartTime:datetime,
EndTime:datetime,
ExtendedLinks:dynamic,
Tactics:string,
Techniques:string,
UserName:string,
UserPrincipalName:string,
SourceIpAddress:string,
SourceLocation:dynamic,
SourceDevice:string,
DestinationIpAddress:string,
DestinationLocation:dynamic,
DestinationDevice:string,
ActivityInsights:dynamic,
DeviceInsights:dynamic,
UserInsights:dynamic,
AnomalyReasons:dynamic,
Entities:dynamic,
ExtendedProperties:dynamic,
AnomalyDetails:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AnomaliesExpand {
AnomaliesRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
Id=tostring(events.Id),
WorkspaceId=tostring(events.WorkspaceId),
VendorName=tostring(events.VendorName),
TimeGenerated=todatetime(events.TimeGenerated),
AnomalyTemplateId=tostring(events.AnomalyTemplateId),
AnomalyTemplateName=tostring(events.AnomalyTemplateName),
AnomalyTemplateVersion=tostring(events.AnomalyTemplateVersion),
RuleId=tostring(events.RuleId),
RuleStatus=tostring(events.RuleStatus),
RuleName=tostring(events.RuleName),
RuleConfigVersion=tostring(events.RuleConfigVersion),
Score=toreal(events.Score),
Description=tostring(events.Description),
StartTime=todatetime(events.StartTime),
EndTime=todatetime(events.EndTime),
ExtendedLinks=todynamic(events.ExtendedLinks),
Tactics=tostring(events.Tactics),
Techniques=tostring(events.Techniques),
UserName=tostring(events.UserName),
UserPrincipalName=tostring(events.UserPrincipalName),
SourceIpAddress=tostring(events.SourceIpAddress),
SourceLocation=todynamic(events.SourceLocation),
SourceDevice=tostring(events.SourceDevice),
DestinationIpAddress=tostring(events.DestinationIpAddress),
DestinationLocation=todynamic(events.DestinationLocation),
DestinationDevice=tostring(events.DestinationDevice),
ActivityInsights=todynamic(events.ActivityInsights),
DeviceInsights=todynamic(events.DeviceInsights),
UserInsights=todynamic(events.UserInsights),
AnomalyReasons=todynamic(events.AnomalyReasons),
Entities=todynamic(events.Entities),
ExtendedProperties=todynamic(events.ExtendedProperties),
AnomalyDetails=todynamic(events.AnomalyDetails),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(events.['_TimeReceived'])}

.alter table Anomalies policy update @'[{"Source": "AnomaliesRaw", "Query": "AnomaliesExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table Anomalies policy update @'[{"Source": "AnomaliesRaw", "Query": "AnomaliesExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimAuditEventLogsRaw (records:dynamic)

.create-or-alter table ASimAuditEventLogsRaw ingestion json mapping 'ASimAuditEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimAuditEventLogs(
TenantId:string,
TimeGenerated:datetime,
AdditionalFields:dynamic,
EventMessage:string,
EventCount:int,
EventStartTime:datetime,
EventEndTime:datetime,
EventType:string,
EventSubType:string,
EventResult:string,
EventResultDetails:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventSeverity:string,
EventOriginalSeverity:string,
EventProduct:string,
EventProductVersion:string,
EventVendor:string,
EventSchemaVersion:string,
EventOwner:string,
EventReportUrl:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
ThreatField:string,
ThreatIpAddr:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcDescription:string,
DvcId:string,
DvcIdType:string,
DvcMacAddr:string,
DvcZone:string,
DvcOs:string,
DvcOsVersion:string,
DvcAction:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcScopeId:string,
DvcScope:string,
ActorUserId:string,
ActorUserAadId:string,
ActorUserSid:string,
ActorUserIdType:string,
ActorScopeId:string,
ActorScope:string,
ActorUsername:string,
ActorUsernameType:string,
ActorUserType:string,
ActorOriginalUserType:string,
ActorSessionId:string,
TargetAppId:string,
TargetAppName:string,
TargetAppType:string,
TargetOriginalAppType:string,
TargetUrl:string,
ActingAppId:string,
ActingAppName:string,
ActingAppType:string,
ActingOriginalAppType:string,
HttpUserAgent:string,
SrcIpAddr:string,
SrcPortNumber:int,
SrcHostname:string,
SrcDomain:string,
SrcDomainType:string,
SrcFQDN:string,
SrcDescription:string,
SrcDvcId:string,
SrcDvcIdType:string,
SrcDvcScopeId:string,
SrcDvcScope:string,
SrcDeviceType:string,
SrcGeoCountry:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcRiskLevel:int,
SrcOriginalRiskLevel:string,
TargetIpAddr:string,
TargetPortNumber:int,
TargetHostname:string,
TargetDomain:string,
TargetDomainType:string,
TargetFQDN:string,
TargetDescription:string,
TargetDvcId:string,
TargetDvcIdType:string,
TargetDvcScopeId:string,
TargetDvcScope:string,
TargetDeviceType:string,
TargetGeoCountry:string,
TargetGeoLatitude:real,
TargetGeoLongitude:real,
TargetGeoRegion:string,
TargetGeoCity:string,
TargetRiskLevel:int,
TargetOriginalRiskLevel:string,
TargetDvcOs:string,
Operation:string,
ObjectId:string,
Object:string,
ObjectType:string,
OriginalObjectType:string,
OldValue:string,
NewValue:string,
ValueType:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimAuditEventLogsExpand {
ASimAuditEventLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AdditionalFields=todynamic(events.AdditionalFields),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
EventType=tostring(events.EventType),
EventSubType=tostring(events.EventSubType),
EventResult=tostring(events.EventResult),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventSeverity=tostring(events.EventSeverity),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProduct=tostring(events.EventProduct),
EventProductVersion=tostring(events.EventProductVersion),
EventVendor=tostring(events.EventVendor),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventOwner=tostring(events.EventOwner),
EventReportUrl=tostring(events.EventReportUrl),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatField=tostring(events.ThreatField),
ThreatIpAddr=tostring(events.ThreatIpAddr),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcDescription=tostring(events.DvcDescription),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcAction=tostring(events.DvcAction),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcScopeId=tostring(events.DvcScopeId),
DvcScope=tostring(events.DvcScope),
ActorUserId=tostring(events.ActorUserId),
ActorUserAadId=tostring(events.ActorUserAadId),
ActorUserSid=tostring(events.ActorUserSid),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorScopeId=tostring(events.ActorScopeId),
ActorScope=tostring(events.ActorScope),
ActorUsername=tostring(events.ActorUsername),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUserType=tostring(events.ActorUserType),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorSessionId=tostring(events.ActorSessionId),
TargetAppId=tostring(events.TargetAppId),
TargetAppName=tostring(events.TargetAppName),
TargetAppType=tostring(events.TargetAppType),
TargetOriginalAppType=tostring(events.TargetOriginalAppType),
TargetUrl=tostring(events.TargetUrl),
ActingAppId=tostring(events.ActingAppId),
ActingAppName=tostring(events.ActingAppName),
ActingAppType=tostring(events.ActingAppType),
ActingOriginalAppType=tostring(events.ActingOriginalAppType),
HttpUserAgent=tostring(events.HttpUserAgent),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
SrcHostname=tostring(events.SrcHostname),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDescription=tostring(events.SrcDescription),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
TargetIpAddr=tostring(events.TargetIpAddr),
TargetPortNumber=toint(events.TargetPortNumber),
TargetHostname=tostring(events.TargetHostname),
TargetDomain=tostring(events.TargetDomain),
TargetDomainType=tostring(events.TargetDomainType),
TargetFQDN=tostring(events.TargetFQDN),
TargetDescription=tostring(events.TargetDescription),
TargetDvcId=tostring(events.TargetDvcId),
TargetDvcIdType=tostring(events.TargetDvcIdType),
TargetDvcScopeId=tostring(events.TargetDvcScopeId),
TargetDvcScope=tostring(events.TargetDvcScope),
TargetDeviceType=tostring(events.TargetDeviceType),
TargetGeoCountry=tostring(events.TargetGeoCountry),
TargetGeoLatitude=toreal(events.TargetGeoLatitude),
TargetGeoLongitude=toreal(events.TargetGeoLongitude),
TargetGeoRegion=tostring(events.TargetGeoRegion),
TargetGeoCity=tostring(events.TargetGeoCity),
TargetRiskLevel=toint(events.TargetRiskLevel),
TargetOriginalRiskLevel=tostring(events.TargetOriginalRiskLevel),
TargetDvcOs=tostring(events.TargetDvcOs),
Operation=tostring(events.Operation),
ObjectId=tostring(events.ObjectId),
Object=tostring(events.Object),
ObjectType=tostring(events.ObjectType),
OriginalObjectType=tostring(events.OriginalObjectType),
OldValue=tostring(events.OldValue),
NewValue=tostring(events.NewValue),
ValueType=tostring(events.ValueType),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimAuditEventLogs policy update @'[{"Source": "ASimAuditEventLogsRaw", "Query": "ASimAuditEventLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimAuditEventLogs policy update @'[{"Source": "ASimAuditEventLogsRaw", "Query": "ASimAuditEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimAuthenticationEventLogsRaw (records:dynamic)

.create-or-alter table ASimAuthenticationEventLogsRaw ingestion json mapping 'ASimAuthenticationEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimAuthenticationEventLogs(
TenantId:string,
TimeGenerated:datetime,
AdditionalFields:dynamic,
EventMessage:string,
EventCount:int,
EventStartTime:datetime,
EventEndTime:datetime,
EventType:string,
EventSubType:string,
EventResult:string,
EventResultDetails:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventSeverity:string,
EventOriginalSeverity:string,
EventProduct:string,
EventProductVersion:string,
EventVendor:string,
EventSchemaVersion:string,
EventOwner:string,
EventReportUrl:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
ThreatField:string,
ThreatIpAddr:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcDescription:string,
DvcId:string,
DvcIdType:string,
DvcMacAddr:string,
DvcZone:string,
DvcOs:string,
DvcOsVersion:string,
DvcAction:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcScopeId:string,
DvcScope:string,
ActorUserId:string,
ActorUserIdType:string,
ActorScopeId:string,
ActorScope:string,
ActorUsername:string,
ActorUsernameType:string,
ActorUserType:string,
ActorOriginalUserType:string,
ActorSessionId:string,
ActingAppId:string,
ActingAppName:string,
ActingAppType:string,
ActingOriginalAppType:string,
HttpUserAgent:string,
TargetUserId:string,
TargetUserIdType:string,
TargetUserScopeId:string,
TargetUserScope:string,
TargetUsername:string,
TargetUsernameType:string,
TargetUserType:string,
TargetOriginalUserType:string,
TargetSessionId:string,
TargetAppId:string,
TargetAppName:string,
TargetAppType:string,
TargetOriginalAppType:string,
TargetUrl:string,
SrcIpAddr:string,
SrcPortNumber:int,
SrcHostname:string,
SrcDomain:string,
SrcDomainType:string,
SrcFQDN:string,
SrcDescription:string,
SrcDvcId:string,
SrcDvcIdType:string,
SrcDvcScopeId:string,
SrcDvcScope:string,
SrcDeviceType:string,
SrcGeoCountry:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcRiskLevel:int,
SrcOriginalRiskLevel:string,
SrcIsp:string,
SrcDvcOs:string,
TargetIpAddr:string,
TargetPortNumber:int,
TargetHostname:string,
TargetDomain:string,
TargetDomainType:string,
TargetFQDN:string,
TargetDescription:string,
TargetDvcId:string,
TargetDvcIdType:string,
TargetDvcScopeId:string,
TargetDvcScope:string,
TargetDeviceType:string,
TargetGeoCountry:string,
TargetGeoLatitude:real,
TargetGeoLongitude:real,
TargetGeoRegion:string,
TargetGeoCity:string,
TargetRiskLevel:int,
TargetOriginalRiskLevel:string,
TargetDvcOs:string,
LogonMethod:string,
LogonProtocol:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimAuthenticationEventLogsExpand {
ASimAuthenticationEventLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AdditionalFields=todynamic(events.AdditionalFields),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
EventType=tostring(events.EventType),
EventSubType=tostring(events.EventSubType),
EventResult=tostring(events.EventResult),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventSeverity=tostring(events.EventSeverity),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProduct=tostring(events.EventProduct),
EventProductVersion=tostring(events.EventProductVersion),
EventVendor=tostring(events.EventVendor),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventOwner=tostring(events.EventOwner),
EventReportUrl=tostring(events.EventReportUrl),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatField=tostring(events.ThreatField),
ThreatIpAddr=tostring(events.ThreatIpAddr),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcDescription=tostring(events.DvcDescription),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcAction=tostring(events.DvcAction),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcScopeId=tostring(events.DvcScopeId),
DvcScope=tostring(events.DvcScope),
ActorUserId=tostring(events.ActorUserId),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorScopeId=tostring(events.ActorScopeId),
ActorScope=tostring(events.ActorScope),
ActorUsername=tostring(events.ActorUsername),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUserType=tostring(events.ActorUserType),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorSessionId=tostring(events.ActorSessionId),
ActingAppId=tostring(events.ActingAppId),
ActingAppName=tostring(events.ActingAppName),
ActingAppType=tostring(events.ActingAppType),
ActingOriginalAppType=tostring(events.ActingOriginalAppType),
HttpUserAgent=tostring(events.HttpUserAgent),
TargetUserId=tostring(events.TargetUserId),
TargetUserIdType=tostring(events.TargetUserIdType),
TargetUserScopeId=tostring(events.TargetUserScopeId),
TargetUserScope=tostring(events.TargetUserScope),
TargetUsername=tostring(events.TargetUsername),
TargetUsernameType=tostring(events.TargetUsernameType),
TargetUserType=tostring(events.TargetUserType),
TargetOriginalUserType=tostring(events.TargetOriginalUserType),
TargetSessionId=tostring(events.TargetSessionId),
TargetAppId=tostring(events.TargetAppId),
TargetAppName=tostring(events.TargetAppName),
TargetAppType=tostring(events.TargetAppType),
TargetOriginalAppType=tostring(events.TargetOriginalAppType),
TargetUrl=tostring(events.TargetUrl),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
SrcHostname=tostring(events.SrcHostname),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDescription=tostring(events.SrcDescription),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
SrcIsp=tostring(events.SrcIsp),
SrcDvcOs=tostring(events.SrcDvcOs),
TargetIpAddr=tostring(events.TargetIpAddr),
TargetPortNumber=toint(events.TargetPortNumber),
TargetHostname=tostring(events.TargetHostname),
TargetDomain=tostring(events.TargetDomain),
TargetDomainType=tostring(events.TargetDomainType),
TargetFQDN=tostring(events.TargetFQDN),
TargetDescription=tostring(events.TargetDescription),
TargetDvcId=tostring(events.TargetDvcId),
TargetDvcIdType=tostring(events.TargetDvcIdType),
TargetDvcScopeId=tostring(events.TargetDvcScopeId),
TargetDvcScope=tostring(events.TargetDvcScope),
TargetDeviceType=tostring(events.TargetDeviceType),
TargetGeoCountry=tostring(events.TargetGeoCountry),
TargetGeoLatitude=toreal(events.TargetGeoLatitude),
TargetGeoLongitude=toreal(events.TargetGeoLongitude),
TargetGeoRegion=tostring(events.TargetGeoRegion),
TargetGeoCity=tostring(events.TargetGeoCity),
TargetRiskLevel=toint(events.TargetRiskLevel),
TargetOriginalRiskLevel=tostring(events.TargetOriginalRiskLevel),
TargetDvcOs=tostring(events.TargetDvcOs),
LogonMethod=tostring(events.LogonMethod),
LogonProtocol=tostring(events.LogonProtocol),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimAuthenticationEventLogs policy update @'[{"Source": "ASimAuthenticationEventLogsRaw", "Query": "ASimAuthenticationEventLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimAuthenticationEventLogs policy update @'[{"Source": "ASimAuthenticationEventLogsRaw", "Query": "ASimAuthenticationEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimDhcpEventLogsRaw (records:dynamic)

.create-or-alter table ASimDhcpEventLogsRaw ingestion json mapping 'ASimDhcpEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimDhcpEventLogs(
TenantId:string,
TimeGenerated:datetime,
EventProduct:string,
EventVendor:string,
EventResult:string,
EventSeverity:string,
EventType:string,
SrcHostname:string,
SrcIpAddr:string,
SrcMacAddr:string,
DhcpCircuitId:string,
DhcpLeaseDuration:int,
DhcpSessionDuration:int,
DhcpSessionId:string,
DhcpSrcDHCId:string,
DhcpSubscriberId:string,
DhcpUserClass:string,
DhcpUserClassId:string,
DhcpVendorClass:string,
DhcpVendorClassId:string,
EventResultDetails:string,
DvcIpAddr:string,
DvcHostname:string,
DvcAction:string,
DvcDescription:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcId:string,
DvcIdType:string,
DvcInterface:string,
DvcMacAddr:string,
DvcOriginalAction:string,
DvcOs:string,
DvcOsVersion:string,
DvcScope:string,
DvcScopeId:string,
DvcZone:string,
SrcDomain:string,
EventCount:int,
EventMessage:string,
EventOriginalResultDetails:string,
EventOriginalSeverity:string,
EventOriginalSubType:string,
EventOriginalType:string,
EventOriginalUid:string,
EventOwner:string,
EventProductVersion:string,
EventReportUrl:string,
EventSubType:string,
RequestedIpAddr:string,
SrcDeviceType:string,
SrcDomainType:string,
SrcDvcId:string,
SrcDvcIdType:string,
SrcDvcScope:string,
SrcDvcScopeId:string,
SrcFQDN:string,
SrcDescription:string,
SrcOriginalUserType:string,
SrcPortNumber:int,
SrcUserId:string,
SrcUserIdType:string,
SrcUsername:string,
SrcUsernameType:string,
SrcUserScope:string,
SrcUserScopeId:string,
SrcUserSessionId:string,
SrcUserType:string,
SrcUserUid:string,
SrcGeoCountry:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcRiskLevel:int,
SrcOriginalRiskLevel:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatField:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
EventSchema:string,
EventSchemaVersion:string,
EventStartTime:datetime,
EventEndTime:datetime,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimDhcpEventLogsExpand {
ASimDhcpEventLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
EventResult=tostring(events.EventResult),
EventSeverity=tostring(events.EventSeverity),
EventType=tostring(events.EventType),
SrcHostname=tostring(events.SrcHostname),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcMacAddr=tostring(events.SrcMacAddr),
DhcpCircuitId=tostring(events.DhcpCircuitId),
DhcpLeaseDuration=toint(events.DhcpLeaseDuration),
DhcpSessionDuration=toint(events.DhcpSessionDuration),
DhcpSessionId=tostring(events.DhcpSessionId),
DhcpSrcDHCId=tostring(events.DhcpSrcDHCId),
DhcpSubscriberId=tostring(events.DhcpSubscriberId),
DhcpUserClass=tostring(events.DhcpUserClass),
DhcpUserClassId=tostring(events.DhcpUserClassId),
DhcpVendorClass=tostring(events.DhcpVendorClass),
DhcpVendorClassId=tostring(events.DhcpVendorClassId),
EventResultDetails=tostring(events.EventResultDetails),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcAction=tostring(events.DvcAction),
DvcDescription=tostring(events.DvcDescription),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcInterface=tostring(events.DvcInterface),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcScope=tostring(events.DvcScope),
DvcScopeId=tostring(events.DvcScopeId),
DvcZone=tostring(events.DvcZone),
SrcDomain=tostring(events.SrcDomain),
EventCount=toint(events.EventCount),
EventMessage=tostring(events.EventMessage),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOwner=tostring(events.EventOwner),
EventProductVersion=tostring(events.EventProductVersion),
EventReportUrl=tostring(events.EventReportUrl),
EventSubType=tostring(events.EventSubType),
RequestedIpAddr=tostring(events.RequestedIpAddr),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcDomainType=tostring(events.SrcDomainType),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcFQDN=tostring(events.SrcFQDN),
SrcDescription=tostring(events.SrcDescription),
SrcOriginalUserType=tostring(events.SrcOriginalUserType),
SrcPortNumber=toint(events.SrcPortNumber),
SrcUserId=tostring(events.SrcUserId),
SrcUserIdType=tostring(events.SrcUserIdType),
SrcUsername=tostring(events.SrcUsername),
SrcUsernameType=tostring(events.SrcUsernameType),
SrcUserScope=tostring(events.SrcUserScope),
SrcUserScopeId=tostring(events.SrcUserScopeId),
SrcUserSessionId=tostring(events.SrcUserSessionId),
SrcUserType=tostring(events.SrcUserType),
SrcUserUid=tostring(events.SrcUserUid),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatField=tostring(events.ThreatField),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
EventSchema=tostring(events.EventSchema),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimDhcpEventLogs policy update @'[{"Source": "ASimDhcpEventLogsRaw", "Query": "ASimDhcpEventLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimDhcpEventLogs policy update @'[{"Source": "ASimDhcpEventLogsRaw", "Query": "ASimDhcpEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimDnsActivityLogsRaw (records:dynamic)

.create-or-alter table ASimDnsActivityLogsRaw ingestion json mapping 'ASimDnsActivityLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimDnsActivityLogs(
TenantId:string,
TimeGenerated:datetime,
EventCount:int,
EventType:string,
EventSubType:string,
EventResult:string,
EventResultDetails:string,
EventOriginalType:string,
EventProduct:string,
EventVendor:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcOs:string,
DvcOsVersion:string,
AdditionalFields:dynamic,
SrcIpAddr:string,
SrcPortNumber:int,
SrcGeoCountry:string,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
DstIpAddr:string,
DstGeoCountry:string,
DstGeoRegion:string,
DstGeoCity:string,
DstGeoLatitude:real,
DstGeoLongitude:real,
DnsQuery:string,
DnsQueryType:int,
DnsQueryTypeName:string,
DnsResponseCode:int,
DnsResponseName:string,
TransactionIdHex:string,
DstDescription:string,
DstDvcScope:string,
DstOriginalRiskLevel:string,
DstRiskLevel:int,
DvcDescription:string,
DvcInterface:string,
DvcOriginalAction:string,
DvcScope:string,
DvcScopeId:string,
EventOriginalSeverity:string,
NetworkProtocolVersion:string,
RuleName:string,
RuleNumber:int,
DnsResponseIpCountry:string,
DnsResponseIpLatitude:real,
DnsResponseIpLongitude:real,
NetworkProtocol:string,
DnsQueryClass:int,
DnsQueryClassName:string,
DnsNetworkDuration:int,
DnsFlagsAuthenticated:bool,
DnsFlagsAuthoritative:bool,
DnsFlagsRecursionDesired:bool,
DnsSessionId:string,
SrcDescription:string,
SrcDvcScope:string,
SrcDvcScopeId:string,
SrcOriginalRiskLevel:string,
SrcUserScope:string,
SrcUserScopeId:string,
SrcUserSessionId:string,
ThreatId:string,
ThreatIpAddr:string,
ThreatField:string,
UrlCategory:string,
ThreatCategory:string,
ThreatName:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel_s:string,
ThreatOriginalRiskLevel:int,
ThreatIsActive:bool,
ThreatFirstReportedTime:string,
ThreatFirstReportedTime_d:datetime,
ThreatLastReportedTime:string,
ThreatLastReportedTime_d:datetime,
EventStartTime:datetime,
EventEndTime:datetime,
EventMessage:string,
EventOriginalUid:string,
EventReportUrl:string,
EventSchemaVersion:string,
Dvc:string,
DvcFQDN:string,
DvcId:string,
DvcIdType:string,
DvcMacAddr:string,
DvcZone:string,
DnsResponseIpCity:string,
DnsResponseIpRegion:string,
EventOwner:string,
EventProductVersion:string,
EventSeverity:string,
Src:string,
SrcHostname:string,
SrcDomain:string,
SrcDomainType:string,
SrcFQDN:string,
SrcDvcId:string,
SrcDvcIdType:string,
SrcDeviceType:string,
SrcRiskLevel:int,
SrcUserId:string,
SrcUserIdType:string,
SrcUsername:string,
SrcUsernameType:string,
SrcUserType:string,
SrcOriginalUserType:string,
SrcProcessName:string,
SrcProcessId:string,
SrcProcessGuid:string,
Dst:string,
DstPortNumber:int,
DstHostname:string,
DstDomain:string,
DstDomainType:string,
DstFQDN:string,
DstDvcId:string,
DstDvcScopeId:string,
DstDvcIdType:string,
DstDeviceType:string,
DvcAction:string,
DnsFlags:string,
DnsFlagsCheckingDisabled:bool,
DnsFlagsRecursionAvailable:bool,
DnsFlagsTruncated:bool,
DnsFlagsZ:bool,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimDnsActivityLogsExpand {
ASimDnsActivityLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
EventCount=toint(events.EventCount),
EventType=tostring(events.EventType),
EventSubType=tostring(events.EventSubType),
EventResult=tostring(events.EventResult),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalType=tostring(events.EventOriginalType),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
AdditionalFields=todynamic(events.AdditionalFields),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
DstIpAddr=tostring(events.DstIpAddr),
DstGeoCountry=tostring(events.DstGeoCountry),
DstGeoRegion=tostring(events.DstGeoRegion),
DstGeoCity=tostring(events.DstGeoCity),
DstGeoLatitude=toreal(events.DstGeoLatitude),
DstGeoLongitude=toreal(events.DstGeoLongitude),
DnsQuery=tostring(events.DnsQuery),
DnsQueryType=toint(events.DnsQueryType),
DnsQueryTypeName=tostring(events.DnsQueryTypeName),
DnsResponseCode=toint(events.DnsResponseCode),
DnsResponseName=tostring(events.DnsResponseName),
TransactionIdHex=tostring(events.TransactionIdHex),
DstDescription=tostring(events.DstDescription),
DstDvcScope=tostring(events.DstDvcScope),
DstOriginalRiskLevel=tostring(events.DstOriginalRiskLevel),
DstRiskLevel=toint(events.DstRiskLevel),
DvcDescription=tostring(events.DvcDescription),
DvcInterface=tostring(events.DvcInterface),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcScope=tostring(events.DvcScope),
DvcScopeId=tostring(events.DvcScopeId),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
NetworkProtocolVersion=tostring(events.NetworkProtocolVersion),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
DnsResponseIpCountry=tostring(events.DnsResponseIpCountry),
DnsResponseIpLatitude=toreal(events.DnsResponseIpLatitude),
DnsResponseIpLongitude=toreal(events.DnsResponseIpLongitude),
NetworkProtocol=tostring(events.NetworkProtocol),
DnsQueryClass=toint(events.DnsQueryClass),
DnsQueryClassName=tostring(events.DnsQueryClassName),
DnsNetworkDuration=toint(events.DnsNetworkDuration),
DnsFlagsAuthenticated=tobool(events.DnsFlagsAuthenticated),
DnsFlagsAuthoritative=tobool(events.DnsFlagsAuthoritative),
DnsFlagsRecursionDesired=tobool(events.DnsFlagsRecursionDesired),
DnsSessionId=tostring(events.DnsSessionId),
SrcDescription=tostring(events.SrcDescription),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
SrcUserScope=tostring(events.SrcUserScope),
SrcUserScopeId=tostring(events.SrcUserScopeId),
SrcUserSessionId=tostring(events.SrcUserSessionId),
ThreatId=tostring(events.ThreatId),
ThreatIpAddr=tostring(events.ThreatIpAddr),
ThreatField=tostring(events.ThreatField),
UrlCategory=tostring(events.UrlCategory),
ThreatCategory=tostring(events.ThreatCategory),
ThreatName=tostring(events.ThreatName),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel_s=tostring(events.ThreatOriginalRiskLevel_s),
ThreatOriginalRiskLevel=toint(events.ThreatOriginalRiskLevel),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=tostring(events.ThreatFirstReportedTime),
ThreatFirstReportedTime_d=todatetime(events.ThreatFirstReportedTime_d),
ThreatLastReportedTime=tostring(events.ThreatLastReportedTime),
ThreatLastReportedTime_d=todatetime(events.ThreatLastReportedTime_d),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
EventMessage=tostring(events.EventMessage),
EventOriginalUid=tostring(events.EventOriginalUid),
EventReportUrl=tostring(events.EventReportUrl),
EventSchemaVersion=tostring(events.EventSchemaVersion),
Dvc=tostring(events.Dvc),
DvcFQDN=tostring(events.DvcFQDN),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DnsResponseIpCity=tostring(events.DnsResponseIpCity),
DnsResponseIpRegion=tostring(events.DnsResponseIpRegion),
EventOwner=tostring(events.EventOwner),
EventProductVersion=tostring(events.EventProductVersion),
EventSeverity=tostring(events.EventSeverity),
Src=tostring(events.Src),
SrcHostname=tostring(events.SrcHostname),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcUserId=tostring(events.SrcUserId),
SrcUserIdType=tostring(events.SrcUserIdType),
SrcUsername=tostring(events.SrcUsername),
SrcUsernameType=tostring(events.SrcUsernameType),
SrcUserType=tostring(events.SrcUserType),
SrcOriginalUserType=tostring(events.SrcOriginalUserType),
SrcProcessName=tostring(events.SrcProcessName),
SrcProcessId=tostring(events.SrcProcessId),
SrcProcessGuid=tostring(events.SrcProcessGuid),
Dst=tostring(events.Dst),
DstPortNumber=toint(events.DstPortNumber),
DstHostname=tostring(events.DstHostname),
DstDomain=tostring(events.DstDomain),
DstDomainType=tostring(events.DstDomainType),
DstFQDN=tostring(events.DstFQDN),
DstDvcId=tostring(events.DstDvcId),
DstDvcScopeId=tostring(events.DstDvcScopeId),
DstDvcIdType=tostring(events.DstDvcIdType),
DstDeviceType=tostring(events.DstDeviceType),
DvcAction=tostring(events.DvcAction),
DnsFlags=tostring(events.DnsFlags),
DnsFlagsCheckingDisabled=tobool(events.DnsFlagsCheckingDisabled),
DnsFlagsRecursionAvailable=tobool(events.DnsFlagsRecursionAvailable),
DnsFlagsTruncated=tobool(events.DnsFlagsTruncated),
DnsFlagsZ=tobool(events.DnsFlagsZ),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimDnsActivityLogs policy update @'[{"Source": "ASimDnsActivityLogsRaw", "Query": "ASimDnsActivityLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimDnsActivityLogs policy update @'[{"Source": "ASimDnsActivityLogsRaw", "Query": "ASimDnsActivityLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimFileEventLogsRaw (records:dynamic)

.create-or-alter table ASimFileEventLogsRaw ingestion json mapping 'ASimFileEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimFileEventLogs(
TenantId:string,
TimeGenerated:datetime,
EventProduct:string,
EventVendor:string,
EventResult:string,
EventSeverity:string,
EventType:string,
TargetFilePath:string,
TargetFilePathType:string,
ActorUsername:string,
EventResultDetails:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcId:string,
DvcIdType:string,
DvcAction:string,
TargetFileName:string,
HashType:string,
SrcFileName:string,
SrcFilePath:string,
SrcFilePathType:string,
ActorUserId:string,
SrcIpAddr:string,
SrcHostname:string,
SrcMacAddr:string,
SrcDomain:string,
EventMessage:string,
EventCount:int,
EventSubType:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventOriginalSeverity:string,
EventProductVersion:string,
EventReportUrl:string,
EventOwner:string,
DvcDescription:string,
DvcMacAddr:string,
DvcZone:string,
DvcOs:string,
DvcOsVersion:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcScopeId:string,
DvcScope:string,
TargetFileCreationTime:datetime,
TargetFileDirectory:string,
TargetFileExtension:string,
TargetFileMimeType:string,
TargetFileMD5:string,
TargetFileSHA1:string,
TargetFileSHA256:string,
TargetFileSHA512:string,
TargetFileSize:long,
SrcFileCreationTime:datetime,
SrcFileDirectory:string,
SrcFileExtension:string,
SrcFileMimeType:string,
SrcFileMD5:string,
SrcFileSHA1:string,
SrcFileSHA256:string,
SrcFileSHA512:string,
SrcFileSize:long,
ActorUserAadId:string,
ActorUserSid:string,
ActorScope:string,
ActorScopeId:string,
ActorUserIdType:string,
ActorUsernameType:string,
ActorSessionId:string,
ActorUserType:string,
ActorOriginalUserType:string,
ActingProcessCommandLine:string,
ActingProcessName:string,
ActingProcessId:string,
ActingProcessGuid:string,
HttpUserAgent:string,
NetworkApplicationProtocol:string,
SrcOriginalRiskLevel:string,
SrcPortNumber:int,
SrcRiskLevel:int,
SrcDomainType:string,
SrcFQDN:string,
SrcDescription:string,
SrcDvcId:string,
SrcDvcScopeId:string,
SrcDvcScope:string,
SrcDvcIdType:string,
SrcDeviceType:string,
SrcGeoCountry:string,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
TargetAppName:string,
TargetAppId:string,
TargetAppType:string,
TargetOriginalAppType:string,
TargetUrl:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatFilePath:string,
ThreatField:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
EventSchema:string,
EventSchemaVersion:string,
EventStartTime:datetime,
EventEndTime:datetime,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimFileEventLogsExpand {
ASimFileEventLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
EventResult=tostring(events.EventResult),
EventSeverity=tostring(events.EventSeverity),
EventType=tostring(events.EventType),
TargetFilePath=tostring(events.TargetFilePath),
TargetFilePathType=tostring(events.TargetFilePathType),
ActorUsername=tostring(events.ActorUsername),
EventResultDetails=tostring(events.EventResultDetails),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcAction=tostring(events.DvcAction),
TargetFileName=tostring(events.TargetFileName),
HashType=tostring(events.HashType),
SrcFileName=tostring(events.SrcFileName),
SrcFilePath=tostring(events.SrcFilePath),
SrcFilePathType=tostring(events.SrcFilePathType),
ActorUserId=tostring(events.ActorUserId),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcHostname=tostring(events.SrcHostname),
SrcMacAddr=tostring(events.SrcMacAddr),
SrcDomain=tostring(events.SrcDomain),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventSubType=tostring(events.EventSubType),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProductVersion=tostring(events.EventProductVersion),
EventReportUrl=tostring(events.EventReportUrl),
EventOwner=tostring(events.EventOwner),
DvcDescription=tostring(events.DvcDescription),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcScopeId=tostring(events.DvcScopeId),
DvcScope=tostring(events.DvcScope),
TargetFileCreationTime=todatetime(events.TargetFileCreationTime),
TargetFileDirectory=tostring(events.TargetFileDirectory),
TargetFileExtension=tostring(events.TargetFileExtension),
TargetFileMimeType=tostring(events.TargetFileMimeType),
TargetFileMD5=tostring(events.TargetFileMD5),
TargetFileSHA1=tostring(events.TargetFileSHA1),
TargetFileSHA256=tostring(events.TargetFileSHA256),
TargetFileSHA512=tostring(events.TargetFileSHA512),
TargetFileSize=tolong(events.TargetFileSize),
SrcFileCreationTime=todatetime(events.SrcFileCreationTime),
SrcFileDirectory=tostring(events.SrcFileDirectory),
SrcFileExtension=tostring(events.SrcFileExtension),
SrcFileMimeType=tostring(events.SrcFileMimeType),
SrcFileMD5=tostring(events.SrcFileMD5),
SrcFileSHA1=tostring(events.SrcFileSHA1),
SrcFileSHA256=tostring(events.SrcFileSHA256),
SrcFileSHA512=tostring(events.SrcFileSHA512),
SrcFileSize=tolong(events.SrcFileSize),
ActorUserAadId=tostring(events.ActorUserAadId),
ActorUserSid=tostring(events.ActorUserSid),
ActorScope=tostring(events.ActorScope),
ActorScopeId=tostring(events.ActorScopeId),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorSessionId=tostring(events.ActorSessionId),
ActorUserType=tostring(events.ActorUserType),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActingProcessCommandLine=tostring(events.ActingProcessCommandLine),
ActingProcessName=tostring(events.ActingProcessName),
ActingProcessId=tostring(events.ActingProcessId),
ActingProcessGuid=tostring(events.ActingProcessGuid),
HttpUserAgent=tostring(events.HttpUserAgent),
NetworkApplicationProtocol=tostring(events.NetworkApplicationProtocol),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
SrcPortNumber=toint(events.SrcPortNumber),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcDomainType=tostring(events.SrcDomainType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDescription=tostring(events.SrcDescription),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
TargetAppName=tostring(events.TargetAppName),
TargetAppId=tostring(events.TargetAppId),
TargetAppType=tostring(events.TargetAppType),
TargetOriginalAppType=tostring(events.TargetOriginalAppType),
TargetUrl=tostring(events.TargetUrl),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatFilePath=tostring(events.ThreatFilePath),
ThreatField=tostring(events.ThreatField),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
EventSchema=tostring(events.EventSchema),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimFileEventLogs policy update @'[{"Source": "ASimFileEventLogsRaw", "Query": "ASimFileEventLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimFileEventLogs policy update @'[{"Source": "ASimFileEventLogsRaw", "Query": "ASimFileEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimNetworkSessionLogsRaw (records:dynamic)

.create-or-alter table ASimNetworkSessionLogsRaw ingestion json mapping 'ASimNetworkSessionLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimNetworkSessionLogs(
TenantId:string,
TimeGenerated:datetime,
EventCount:int,
EventSchemaVersion:string,
DvcAction:string,
EventMessage:string,
EventSeverity:string,
EventStartTime:datetime,
EventEndTime:datetime,
DvcMacAddr:string,
Dvc:string,
DvcZone:string,
EventProductVersion:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcSubscriptionId:string,
EventOriginalSeverity:string,
EventOriginalSubType:string,
NetworkApplicationProtocol:string,
NetworkProtocolVersion:string,
NetworkDirection:string,
NetworkIcmpCode:int,
NetworkIcmpType:string,
NetworkConnectionHistory:string,
DstBytes:long,
SrcBytes:long,
NetworkBytes:long,
DstPackets:long,
SrcPackets:long,
NetworkPackets:long,
NetworkSessionId:string,
DstZone:string,
DstInterfaceName:string,
DstInterfaceGuid:string,
DstMacAddr:string,
DstVlanId:string,
DstSubscriptionId:string,
DstGeoCountry:string,
DstGeoRegion:string,
DstGeoCity:string,
DstGeoLatitude:real,
DstGeoLongitude:real,
DstUserId:string,
DstUserIdType:string,
DstUsername:string,
DstUsernameType:string,
DstUserType:string,
DstOriginalUserType:string,
DstAppName:string,
DstAppId:string,
DstAppType:string,
SrcZone:string,
SrcInterfaceName:string,
SrcInterfaceGuid:string,
SrcMacAddr:string,
SrcVlanId:string,
SrcSubscriptionId:string,
SrcGeoCountry:string,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
SrcAppName:string,
SrcAppId:string,
SrcAppType:string,
DstNatIpAddr:string,
DstNatPortNumber:int,
SrcNatIpAddr:string,
SrcNatPortNumber:int,
DvcInboundInterface:string,
DvcOutboundInterface:string,
NetworkRuleName:string,
NetworkRuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
EventType:string,
EventSubType:string,
EventResult:string,
EventResultDetails:string,
EventOriginalType:string,
EventProduct:string,
EventVendor:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcOs:string,
DvcOsVersion:string,
AdditionalFields:dynamic,
SrcIpAddr:string,
SrcPortNumber:int,
DstIpAddr:string,
NetworkProtocol:string,
EventOriginalUid:string,
EventReportUrl:string,
DvcFQDN:string,
DvcId:string,
DvcIdType:string,
SrcHostname:string,
SrcDomain:string,
SrcDomainType:string,
SrcFQDN:string,
SrcDvcId:string,
SrcDvcIdType:string,
ThreatIpAddr:string,
SrcDeviceType:string,
SrcUserId:string,
SrcUserIdType:string,
SrcUsername:string,
SrcUsernameType:string,
SrcUserType:string,
SrcOriginalUserType:string,
DstPortNumber:int,
DstHostname:string,
DstDomain:string,
DstDomainType:string,
DstFQDN:string,
DstDvcId:string,
DstDvcIdType:string,
DstDeviceType:string,
TcpFlagsAck:bool,
TcpFlagsFin:bool,
TcpFlagsPsh:bool,
TcpFlagsRst:bool,
TcpFlagsUrg:bool,
TcpFlagsSyn:bool,
ThreatField:string,
ThreatIsActive:bool,
ThreatConfidence:int,
NetworkDuration:int,
DvcDescription:string,
EventOriginalResultDetails:string,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
ThreatOriginalConfidence:string,
DstDescription:string,
SrcDescription:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimNetworkSessionLogsExpand {
ASimNetworkSessionLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
EventCount=toint(events.EventCount),
EventSchemaVersion=tostring(events.EventSchemaVersion),
DvcAction=tostring(events.DvcAction),
EventMessage=tostring(events.EventMessage),
EventSeverity=tostring(events.EventSeverity),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
DvcMacAddr=tostring(events.DvcMacAddr),
Dvc=tostring(events.Dvc),
DvcZone=tostring(events.DvcZone),
EventProductVersion=tostring(events.EventProductVersion),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcSubscriptionId=tostring(events.DvcSubscriptionId),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventOriginalSubType=tostring(events.EventOriginalSubType),
NetworkApplicationProtocol=tostring(events.NetworkApplicationProtocol),
NetworkProtocolVersion=tostring(events.NetworkProtocolVersion),
NetworkDirection=tostring(events.NetworkDirection),
NetworkIcmpCode=toint(events.NetworkIcmpCode),
NetworkIcmpType=tostring(events.NetworkIcmpType),
NetworkConnectionHistory=tostring(events.NetworkConnectionHistory),
DstBytes=tolong(events.DstBytes),
SrcBytes=tolong(events.SrcBytes),
NetworkBytes=tolong(events.NetworkBytes),
DstPackets=tolong(events.DstPackets),
SrcPackets=tolong(events.SrcPackets),
NetworkPackets=tolong(events.NetworkPackets),
NetworkSessionId=tostring(events.NetworkSessionId),
DstZone=tostring(events.DstZone),
DstInterfaceName=tostring(events.DstInterfaceName),
DstInterfaceGuid=tostring(events.DstInterfaceGuid),
DstMacAddr=tostring(events.DstMacAddr),
DstVlanId=tostring(events.DstVlanId),
DstSubscriptionId=tostring(events.DstSubscriptionId),
DstGeoCountry=tostring(events.DstGeoCountry),
DstGeoRegion=tostring(events.DstGeoRegion),
DstGeoCity=tostring(events.DstGeoCity),
DstGeoLatitude=toreal(events.DstGeoLatitude),
DstGeoLongitude=toreal(events.DstGeoLongitude),
DstUserId=tostring(events.DstUserId),
DstUserIdType=tostring(events.DstUserIdType),
DstUsername=tostring(events.DstUsername),
DstUsernameType=tostring(events.DstUsernameType),
DstUserType=tostring(events.DstUserType),
DstOriginalUserType=tostring(events.DstOriginalUserType),
DstAppName=tostring(events.DstAppName),
DstAppId=tostring(events.DstAppId),
DstAppType=tostring(events.DstAppType),
SrcZone=tostring(events.SrcZone),
SrcInterfaceName=tostring(events.SrcInterfaceName),
SrcInterfaceGuid=tostring(events.SrcInterfaceGuid),
SrcMacAddr=tostring(events.SrcMacAddr),
SrcVlanId=tostring(events.SrcVlanId),
SrcSubscriptionId=tostring(events.SrcSubscriptionId),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcAppName=tostring(events.SrcAppName),
SrcAppId=tostring(events.SrcAppId),
SrcAppType=tostring(events.SrcAppType),
DstNatIpAddr=tostring(events.DstNatIpAddr),
DstNatPortNumber=toint(events.DstNatPortNumber),
SrcNatIpAddr=tostring(events.SrcNatIpAddr),
SrcNatPortNumber=toint(events.SrcNatPortNumber),
DvcInboundInterface=tostring(events.DvcInboundInterface),
DvcOutboundInterface=tostring(events.DvcOutboundInterface),
NetworkRuleName=tostring(events.NetworkRuleName),
NetworkRuleNumber=toint(events.NetworkRuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
EventType=tostring(events.EventType),
EventSubType=tostring(events.EventSubType),
EventResult=tostring(events.EventResult),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalType=tostring(events.EventOriginalType),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
AdditionalFields=todynamic(events.AdditionalFields),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
DstIpAddr=tostring(events.DstIpAddr),
NetworkProtocol=tostring(events.NetworkProtocol),
EventOriginalUid=tostring(events.EventOriginalUid),
EventReportUrl=tostring(events.EventReportUrl),
DvcFQDN=tostring(events.DvcFQDN),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
SrcHostname=tostring(events.SrcHostname),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
ThreatIpAddr=tostring(events.ThreatIpAddr),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcUserId=tostring(events.SrcUserId),
SrcUserIdType=tostring(events.SrcUserIdType),
SrcUsername=tostring(events.SrcUsername),
SrcUsernameType=tostring(events.SrcUsernameType),
SrcUserType=tostring(events.SrcUserType),
SrcOriginalUserType=tostring(events.SrcOriginalUserType),
DstPortNumber=toint(events.DstPortNumber),
DstHostname=tostring(events.DstHostname),
DstDomain=tostring(events.DstDomain),
DstDomainType=tostring(events.DstDomainType),
DstFQDN=tostring(events.DstFQDN),
DstDvcId=tostring(events.DstDvcId),
DstDvcIdType=tostring(events.DstDvcIdType),
DstDeviceType=tostring(events.DstDeviceType),
TcpFlagsAck=tobool(events.TcpFlagsAck),
TcpFlagsFin=tobool(events.TcpFlagsFin),
TcpFlagsPsh=tobool(events.TcpFlagsPsh),
TcpFlagsRst=tobool(events.TcpFlagsRst),
TcpFlagsUrg=tobool(events.TcpFlagsUrg),
TcpFlagsSyn=tobool(events.TcpFlagsSyn),
ThreatField=tostring(events.ThreatField),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatConfidence=toint(events.ThreatConfidence),
NetworkDuration=toint(events.NetworkDuration),
DvcDescription=tostring(events.DvcDescription),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
DstDescription=tostring(events.DstDescription),
SrcDescription=tostring(events.SrcDescription),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimNetworkSessionLogs policy update @'[{"Source": "ASimNetworkSessionLogsRaw", "Query": "ASimNetworkSessionLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimNetworkSessionLogs policy update @'[{"Source": "ASimNetworkSessionLogsRaw", "Query": "ASimNetworkSessionLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimProcessEventLogsRaw (records:dynamic)

.create-or-alter table ASimProcessEventLogsRaw ingestion json mapping 'ASimProcessEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimProcessEventLogs(
TenantId:string,
TimeGenerated:datetime,
AdditionalFields:dynamic,
EventMessage:string,
EventCount:int,
EventStartTime:datetime,
EventEndTime:datetime,
EventType:string,
EventSubType:string,
EventResult:string,
EventResultDetails:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventSeverity:string,
EventOriginalSeverity:string,
EventProduct:string,
EventProductVersion:string,
EventVendor:string,
EventSchemaVersion:string,
EventOwner:string,
EventReportUrl:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcDescription:string,
DvcId:string,
DvcIdType:string,
DvcMacAddr:string,
DvcZone:string,
DvcOs:string,
DvcOsVersion:string,
DvcAction:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcScopeId:string,
DvcScope:string,
ActorUserId:string,
ActorUserIdType:string,
ActorScopeId:string,
ActorScope:string,
ActorUsername:string,
ActorUsernameType:string,
ActorUserType:string,
ActorOriginalUserType:string,
ActorSessionId:string,
TargetUserId:string,
TargetUserIdType:string,
TargetScopeId:string,
TargetScope:string,
TargetUsername:string,
TargetUsernameType:string,
TargetUserType:string,
TargetOriginalUserType:string,
TargetUserSessionId:string,
TargetUserSessionGuid:string,
ActingProcessCommandLine:string,
ActingProcessName:string,
ActingProcessFileCompany:string,
ActingProcessFileDescription:string,
ActingProcessFileProduct:string,
ActingProcessFileVersion:string,
ActingProcessFileInternalName:string,
ActingProcessFileOriginalName:string,
ActingProcessFilename:string,
ActingProcessIsHidden:bool,
ActingProcessInjectedAddress:string,
ActingProcessId:string,
ActingProcessGuid:string,
ActingProcessIntegrityLevel:string,
ActingProcessMD5:string,
ActingProcessSHA1:string,
ActingProcessSHA256:string,
ActingProcessSHA512:string,
ActingProcessIMPHASH:string,
ActingProcessCreationTime:datetime,
ActingProcessTokenElevation:string,
ActingProcessFileSize:long,
ParentProcessName:string,
ParentProcessFileCompany:string,
ParentProcessFileDescription:string,
ParentProcessFileProduct:string,
ParentProcessFileVersion:string,
ParentProcessIsHidden:bool,
ParentProcessInjectedAddress:string,
ParentProcessId:string,
ParentProcessGuid:string,
ParentProcessIntegrityLevel:string,
ParentProcessMD5:string,
ParentProcessSHA1:string,
ParentProcessSHA256:string,
ParentProcessSHA512:string,
ParentProcessIMPHASH:string,
ParentProcessCreationTime:datetime,
ParentProcessTokenElevation:string,
TargetProcessCommandLine:string,
TargetProcessName:string,
TargetProcessFileCompany:string,
TargetProcessFileDescription:string,
TargetProcessFileProduct:string,
TargetProcessFileVersion:string,
TargetProcessFileInternalName:string,
TargetProcessFileOriginalName:string,
TargetProcessFilename:string,
TargetProcessIsHidden:bool,
TargetProcessInjectedAddress:string,
TargetProcessId:string,
TargetProcessGuid:string,
TargetProcessIntegrityLevel:string,
TargetProcessMD5:string,
TargetProcessSHA1:string,
TargetProcessSHA256:string,
TargetProcessSHA512:string,
TargetProcessIMPHASH:string,
TargetProcessCreationTime:datetime,
TargetProcessTokenElevation:string,
TargetProcessFileSize:long,
TargetProcessCurrentDirectory:string,
TargetProcessStatusCode:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatField:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimProcessEventLogsExpand {
ASimProcessEventLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AdditionalFields=todynamic(events.AdditionalFields),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
EventType=tostring(events.EventType),
EventSubType=tostring(events.EventSubType),
EventResult=tostring(events.EventResult),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventSeverity=tostring(events.EventSeverity),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProduct=tostring(events.EventProduct),
EventProductVersion=tostring(events.EventProductVersion),
EventVendor=tostring(events.EventVendor),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventOwner=tostring(events.EventOwner),
EventReportUrl=tostring(events.EventReportUrl),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcDescription=tostring(events.DvcDescription),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcAction=tostring(events.DvcAction),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcScopeId=tostring(events.DvcScopeId),
DvcScope=tostring(events.DvcScope),
ActorUserId=tostring(events.ActorUserId),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorScopeId=tostring(events.ActorScopeId),
ActorScope=tostring(events.ActorScope),
ActorUsername=tostring(events.ActorUsername),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUserType=tostring(events.ActorUserType),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorSessionId=tostring(events.ActorSessionId),
TargetUserId=tostring(events.TargetUserId),
TargetUserIdType=tostring(events.TargetUserIdType),
TargetScopeId=tostring(events.TargetScopeId),
TargetScope=tostring(events.TargetScope),
TargetUsername=tostring(events.TargetUsername),
TargetUsernameType=tostring(events.TargetUsernameType),
TargetUserType=tostring(events.TargetUserType),
TargetOriginalUserType=tostring(events.TargetOriginalUserType),
TargetUserSessionId=tostring(events.TargetUserSessionId),
TargetUserSessionGuid=tostring(events.TargetUserSessionGuid),
ActingProcessCommandLine=tostring(events.ActingProcessCommandLine),
ActingProcessName=tostring(events.ActingProcessName),
ActingProcessFileCompany=tostring(events.ActingProcessFileCompany),
ActingProcessFileDescription=tostring(events.ActingProcessFileDescription),
ActingProcessFileProduct=tostring(events.ActingProcessFileProduct),
ActingProcessFileVersion=tostring(events.ActingProcessFileVersion),
ActingProcessFileInternalName=tostring(events.ActingProcessFileInternalName),
ActingProcessFileOriginalName=tostring(events.ActingProcessFileOriginalName),
ActingProcessFilename=tostring(events.ActingProcessFilename),
ActingProcessIsHidden=tobool(events.ActingProcessIsHidden),
ActingProcessInjectedAddress=tostring(events.ActingProcessInjectedAddress),
ActingProcessId=tostring(events.ActingProcessId),
ActingProcessGuid=tostring(events.ActingProcessGuid),
ActingProcessIntegrityLevel=tostring(events.ActingProcessIntegrityLevel),
ActingProcessMD5=tostring(events.ActingProcessMD5),
ActingProcessSHA1=tostring(events.ActingProcessSHA1),
ActingProcessSHA256=tostring(events.ActingProcessSHA256),
ActingProcessSHA512=tostring(events.ActingProcessSHA512),
ActingProcessIMPHASH=tostring(events.ActingProcessIMPHASH),
ActingProcessCreationTime=todatetime(events.ActingProcessCreationTime),
ActingProcessTokenElevation=tostring(events.ActingProcessTokenElevation),
ActingProcessFileSize=tolong(events.ActingProcessFileSize),
ParentProcessName=tostring(events.ParentProcessName),
ParentProcessFileCompany=tostring(events.ParentProcessFileCompany),
ParentProcessFileDescription=tostring(events.ParentProcessFileDescription),
ParentProcessFileProduct=tostring(events.ParentProcessFileProduct),
ParentProcessFileVersion=tostring(events.ParentProcessFileVersion),
ParentProcessIsHidden=tobool(events.ParentProcessIsHidden),
ParentProcessInjectedAddress=tostring(events.ParentProcessInjectedAddress),
ParentProcessId=tostring(events.ParentProcessId),
ParentProcessGuid=tostring(events.ParentProcessGuid),
ParentProcessIntegrityLevel=tostring(events.ParentProcessIntegrityLevel),
ParentProcessMD5=tostring(events.ParentProcessMD5),
ParentProcessSHA1=tostring(events.ParentProcessSHA1),
ParentProcessSHA256=tostring(events.ParentProcessSHA256),
ParentProcessSHA512=tostring(events.ParentProcessSHA512),
ParentProcessIMPHASH=tostring(events.ParentProcessIMPHASH),
ParentProcessCreationTime=todatetime(events.ParentProcessCreationTime),
ParentProcessTokenElevation=tostring(events.ParentProcessTokenElevation),
TargetProcessCommandLine=tostring(events.TargetProcessCommandLine),
TargetProcessName=tostring(events.TargetProcessName),
TargetProcessFileCompany=tostring(events.TargetProcessFileCompany),
TargetProcessFileDescription=tostring(events.TargetProcessFileDescription),
TargetProcessFileProduct=tostring(events.TargetProcessFileProduct),
TargetProcessFileVersion=tostring(events.TargetProcessFileVersion),
TargetProcessFileInternalName=tostring(events.TargetProcessFileInternalName),
TargetProcessFileOriginalName=tostring(events.TargetProcessFileOriginalName),
TargetProcessFilename=tostring(events.TargetProcessFilename),
TargetProcessIsHidden=tobool(events.TargetProcessIsHidden),
TargetProcessInjectedAddress=tostring(events.TargetProcessInjectedAddress),
TargetProcessId=tostring(events.TargetProcessId),
TargetProcessGuid=tostring(events.TargetProcessGuid),
TargetProcessIntegrityLevel=tostring(events.TargetProcessIntegrityLevel),
TargetProcessMD5=tostring(events.TargetProcessMD5),
TargetProcessSHA1=tostring(events.TargetProcessSHA1),
TargetProcessSHA256=tostring(events.TargetProcessSHA256),
TargetProcessSHA512=tostring(events.TargetProcessSHA512),
TargetProcessIMPHASH=tostring(events.TargetProcessIMPHASH),
TargetProcessCreationTime=todatetime(events.TargetProcessCreationTime),
TargetProcessTokenElevation=tostring(events.TargetProcessTokenElevation),
TargetProcessFileSize=tolong(events.TargetProcessFileSize),
TargetProcessCurrentDirectory=tostring(events.TargetProcessCurrentDirectory),
TargetProcessStatusCode=tostring(events.TargetProcessStatusCode),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatField=tostring(events.ThreatField),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimProcessEventLogs policy update @'[{"Source": "ASimProcessEventLogsRaw", "Query": "ASimProcessEventLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimProcessEventLogs policy update @'[{"Source": "ASimProcessEventLogsRaw", "Query": "ASimProcessEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimRegistryEventLogsRaw (records:dynamic)

.create-or-alter table ASimRegistryEventLogsRaw ingestion json mapping 'ASimRegistryEventLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimRegistryEventLogs(
TenantId:string,
TimeGenerated:datetime,
EventProduct:string,
EventVendor:string,
EventResult:string,
EventSeverity:string,
EventType:string,
RegistryKey:string,
RegistryValue:string,
RegistryValueType:string,
RegistryValueData:string,
RegistryPreviousKey:string,
RegistryPreviousValue:string,
RegistryPreviousValueType:string,
RegistryPreviousValueData:string,
ActorUserId:string,
ActorUserIdType:string,
EventResultDetails:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcDescription:string,
DvcId:string,
DvcIdType:string,
DvcAction:string,
EventMessage:string,
EventCount:int,
EventSubType:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventOriginalSeverity:string,
EventProductVersion:string,
EventOwner:string,
EventReportUrl:string,
DvcMacAddr:string,
DvcZone:string,
DvcOs:string,
DvcOsVersion:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcScopeId:string,
DvcScope:string,
ActorUserAadId:string,
ActorUserSid:string,
ActorScopeId:string,
ActorScope:string,
ActorUsername:string,
ActorUsernameType:string,
ActorUserType:string,
ActorOriginalUserType:string,
ActorSessionId:string,
ActingProcessName:string,
ActingProcessId:string,
ActingProcessCommandLine:string,
ActingProcessGuid:string,
ParentProcessName:string,
ParentProcessId:string,
ParentProcessCommandLine:string,
ParentProcessGuid:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatField:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
EventSchema:string,
EventSchemaVersion:string,
EventStartTime:datetime,
EventEndTime:datetime,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimRegistryEventLogsExpand {
ASimRegistryEventLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
EventResult=tostring(events.EventResult),
EventSeverity=tostring(events.EventSeverity),
EventType=tostring(events.EventType),
RegistryKey=tostring(events.RegistryKey),
RegistryValue=tostring(events.RegistryValue),
RegistryValueType=tostring(events.RegistryValueType),
RegistryValueData=tostring(events.RegistryValueData),
RegistryPreviousKey=tostring(events.RegistryPreviousKey),
RegistryPreviousValue=tostring(events.RegistryPreviousValue),
RegistryPreviousValueType=tostring(events.RegistryPreviousValueType),
RegistryPreviousValueData=tostring(events.RegistryPreviousValueData),
ActorUserId=tostring(events.ActorUserId),
ActorUserIdType=tostring(events.ActorUserIdType),
EventResultDetails=tostring(events.EventResultDetails),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcDescription=tostring(events.DvcDescription),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcAction=tostring(events.DvcAction),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventSubType=tostring(events.EventSubType),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProductVersion=tostring(events.EventProductVersion),
EventOwner=tostring(events.EventOwner),
EventReportUrl=tostring(events.EventReportUrl),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcScopeId=tostring(events.DvcScopeId),
DvcScope=tostring(events.DvcScope),
ActorUserAadId=tostring(events.ActorUserAadId),
ActorUserSid=tostring(events.ActorUserSid),
ActorScopeId=tostring(events.ActorScopeId),
ActorScope=tostring(events.ActorScope),
ActorUsername=tostring(events.ActorUsername),
ActorUsernameType=tostring(events.ActorUsernameType),
ActorUserType=tostring(events.ActorUserType),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorSessionId=tostring(events.ActorSessionId),
ActingProcessName=tostring(events.ActingProcessName),
ActingProcessId=tostring(events.ActingProcessId),
ActingProcessCommandLine=tostring(events.ActingProcessCommandLine),
ActingProcessGuid=tostring(events.ActingProcessGuid),
ParentProcessName=tostring(events.ParentProcessName),
ParentProcessId=tostring(events.ParentProcessId),
ParentProcessCommandLine=tostring(events.ParentProcessCommandLine),
ParentProcessGuid=tostring(events.ParentProcessGuid),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatField=tostring(events.ThreatField),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
EventSchema=tostring(events.EventSchema),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimRegistryEventLogs policy update @'[{"Source": "ASimRegistryEventLogsRaw", "Query": "ASimRegistryEventLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimRegistryEventLogs policy update @'[{"Source": "ASimRegistryEventLogsRaw", "Query": "ASimRegistryEventLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'





