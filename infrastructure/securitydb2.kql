
.create-merge table ASimUserManagementActivityLogsRaw (records:dynamic)

.create-or-alter table ASimUserManagementActivityLogsRaw ingestion json mapping 'ASimUserManagementActivityLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimUserManagementActivityLogs(
TenantId:string,
TimeGenerated:datetime,
EventProduct:string,
EventVendor:string,
EventResult:string,
EventSeverity:string,
EventType:string,
ActorUsername:string,
ActorUsernameType:string,
EventResultDetails:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcId:string,
DvcIdType:string,
DvcAction:string,
SrcIpAddr:string,
SrcPortNumber:int,
SrcHostname:string,
SrcMacAddr:string,
SrcDomain:string,
SrcDomainType:string,
EventMessage:string,
EventCount:int,
EventSubType:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventOriginalSeverity:string,
EventProductVersion:string,
EventOwner:string,
EventReportUrl:string,
DvcDescription:string,
DvcMacAddr:string,
DvcZone:string,
DvcOs:string,
DvcOsVersion:string,
DvcOriginalAction:string,
DvcInterface:string,
DvcScopeId:string,
DvcScope:string,
ActorUserId:string,
ActorUserAadId:string,
ActorUserSid:string,
ActorUserIdType:string,
ActorScopeId:string,
ActorScope:string,
ActorUserType:string,
ActorOriginalUserType:string,
ActorSessionId:string,
TargetUserId:string,
TargetUserUid:string,
TargetUserIdType:string,
TargetUserScopeId:string,
TargetUserScope:string,
TargetUsername:string,
TargetUsernameType:string,
TargetUserType:string,
TargetUserSessionId:string,
TargetOriginalUserType:string,
GroupId:string,
GroupIdType:string,
GroupName:string,
GroupNameType:string,
GroupType:string,
GroupOriginalType:string,
SrcFQDN:string,
SrcDescription:string,
SrcDvcId:string,
SrcDvcIdType:string,
SrcDvcScopeId:string,
SrcDvcScope:string,
SrcDeviceType:string,
SrcGeoCountry:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcRiskLevel:int,
SrcOriginalRiskLevel:string,
ActingAppId:string,
ActingAppName:string,
ActingAppType:string,
ActingOriginalAppType:string,
HttpUserAgent:string,
PreviousPropertyValue:string,
NewPropertyValue:string,
RuleName:string,
RuleNumber:int,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
ThreatOriginalRiskLevel:string,
ThreatField:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
EventSchema:string,
EventSchemaVersion:string,
EventStartTime:datetime,
EventEndTime:datetime,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimUserManagementActivityLogsExpand {
ASimUserManagementActivityLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
EventProduct=tostring(events.EventProduct),
EventVendor=tostring(events.EventVendor),
EventResult=tostring(events.EventResult),
EventSeverity=tostring(events.EventSeverity),
EventType=tostring(events.EventType),
ActorUsername=tostring(events.ActorUsername),
ActorUsernameType=tostring(events.ActorUsernameType),
EventResultDetails=tostring(events.EventResultDetails),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcAction=tostring(events.DvcAction),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
SrcHostname=tostring(events.SrcHostname),
SrcMacAddr=tostring(events.SrcMacAddr),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventSubType=tostring(events.EventSubType),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProductVersion=tostring(events.EventProductVersion),
EventOwner=tostring(events.EventOwner),
EventReportUrl=tostring(events.EventReportUrl),
DvcDescription=tostring(events.DvcDescription),
DvcMacAddr=tostring(events.DvcMacAddr),
DvcZone=tostring(events.DvcZone),
DvcOs=tostring(events.DvcOs),
DvcOsVersion=tostring(events.DvcOsVersion),
DvcOriginalAction=tostring(events.DvcOriginalAction),
DvcInterface=tostring(events.DvcInterface),
DvcScopeId=tostring(events.DvcScopeId),
DvcScope=tostring(events.DvcScope),
ActorUserId=tostring(events.ActorUserId),
ActorUserAadId=tostring(events.ActorUserAadId),
ActorUserSid=tostring(events.ActorUserSid),
ActorUserIdType=tostring(events.ActorUserIdType),
ActorScopeId=tostring(events.ActorScopeId),
ActorScope=tostring(events.ActorScope),
ActorUserType=tostring(events.ActorUserType),
ActorOriginalUserType=tostring(events.ActorOriginalUserType),
ActorSessionId=tostring(events.ActorSessionId),
TargetUserId=tostring(events.TargetUserId),
TargetUserUid=tostring(events.TargetUserUid),
TargetUserIdType=tostring(events.TargetUserIdType),
TargetUserScopeId=tostring(events.TargetUserScopeId),
TargetUserScope=tostring(events.TargetUserScope),
TargetUsername=tostring(events.TargetUsername),
TargetUsernameType=tostring(events.TargetUsernameType),
TargetUserType=tostring(events.TargetUserType),
TargetUserSessionId=tostring(events.TargetUserSessionId),
TargetOriginalUserType=tostring(events.TargetOriginalUserType),
GroupId=tostring(events.GroupId),
GroupIdType=tostring(events.GroupIdType),
GroupName=tostring(events.GroupName),
GroupNameType=tostring(events.GroupNameType),
GroupType=tostring(events.GroupType),
GroupOriginalType=tostring(events.GroupOriginalType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDescription=tostring(events.SrcDescription),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcScope=tostring(events.SrcDvcScope),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcRiskLevel=toint(events.SrcRiskLevel),
SrcOriginalRiskLevel=tostring(events.SrcOriginalRiskLevel),
ActingAppId=tostring(events.ActingAppId),
ActingAppName=tostring(events.ActingAppName),
ActingAppType=tostring(events.ActingAppType),
ActingOriginalAppType=tostring(events.ActingOriginalAppType),
HttpUserAgent=tostring(events.HttpUserAgent),
PreviousPropertyValue=tostring(events.PreviousPropertyValue),
NewPropertyValue=tostring(events.NewPropertyValue),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatField=tostring(events.ThreatField),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
EventSchema=tostring(events.EventSchema),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())
}

.alter table ASimUserManagementActivityLogs policy update @'[{"Source": "ASimUserManagementActivityLogsRaw", "Query": "ASimUserManagementActivityLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimUserManagementActivityLogs policy update @'[{"Source": "ASimUserManagementActivityLogsRaw", "Query": "ASimUserManagementActivityLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ASimWebSessionLogsRaw (records:dynamic)

.create-or-alter table ASimWebSessionLogsRaw ingestion json mapping 'ASimWebSessionLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ASimWebSessionLogs(
TenantId:string,
TimeGenerated:datetime,
Dvc:string,
DvcIpAddr:string,
DvcHostname:string,
DvcDomain:string,
DvcDomainType:string,
DvcFQDN:string,
DvcId:string,
DvcIdType:string,
DvcAction:string,
DvcOriginalAction:string,
EventMessage:string,
EventCount:int,
EventStartTime:datetime,
EventEndTime:datetime,
EventType:string,
EventSubType:string,
EventResult:string,
EventResultDetails:string,
EventOriginalUid:string,
EventOriginalType:string,
EventOriginalSubType:string,
EventOriginalResultDetails:string,
EventSeverity:string,
EventOriginalSeverity:string,
EventProduct:string,
EventProductVersion:string,
EventVendor:string,
EventSchemaVersion:string,
EventReportUrl:string,
AdditionalFields:dynamic,
DstAppName:string,
DstAppId:string,
DstAppType:string,
DstIpAddr:string,
DstPortNumber:int,
DstHostname:string,
DstDomain:string,
DstDomainType:string,
DstFQDN:string,
DstDvcId:string,
DstDvcIdType:string,
DstDeviceType:string,
DstGeoCountry:string,
DstGeoRegion:string,
DstGeoCity:string,
DstGeoLatitude:real,
DstGeoLongitude:real,
DstUserId:string,
DstUserIdType:string,
DstUsername:string,
DstUsernameType:string,
DstUserType:string,
DstOriginalUserType:string,
NetworkApplicationProtocol:string,
NetworkProtocol:string,
NetworkProtocolVersion:string,
NetworkDirection:string,
NetworkDuration:int,
NetworkIcmpType:string,
NetworkIcmpCode:int,
NetworkConnectionHistory:string,
DstBytes:long,
SrcBytes:long,
NetworkBytes:long,
DstPackets:long,
SrcPackets:long,
NetworkPackets:long,
NetworkSessionId:string,
ThreatOriginalRiskLevel:string,
ThreatIpAddr:string,
ThreatField:string,
ThreatConfidence:int,
ThreatOriginalConfidence:string,
ThreatIsActive:bool,
ThreatFirstReportedTime:datetime,
ThreatLastReportedTime:datetime,
DstNatIpAddr:string,
DstNatPortNumber:int,
SrcNatIpAddr:string,
SrcNatPortNumber:int,
SrcAppName:string,
SrcAppId:string,
SrcAppType:string,
SrcIpAddr:string,
SrcPortNumber:int,
SrcHostname:string,
SrcDomain:string,
SrcDomainType:string,
SrcFQDN:string,
SrcDvcId:string,
SrcDvcIdType:string,
SrcDeviceType:string,
SrcGeoCountry:string,
SrcGeoRegion:string,
SrcGeoCity:string,
SrcGeoLatitude:real,
SrcGeoLongitude:real,
SrcUserId:string,
SrcUserIdType:string,
SrcUsername:string,
SrcUsernameType:string,
SrcUserType:string,
SrcOriginalUserType:string,
Url:string,
UrlCategory:string,
UrlOriginal:string,
HttpVersion:string,
HttpRequestMethod:string,
HttpContentType:string,
HttpContentFormat:string,
HttpReferrer:string,
HttpUserAgent:string,
HttpRequestXff:string,
HttpRequestTime:int,
HttpResponseTime:int,
FileName:string,
FileMD5:string,
FileSHA1:string,
FileSHA256:string,
FileSHA512:string,
FileSize:int,
FileContentType:string,
RuleName:string,
RuleNumber:int,
Rule:string,
ThreatId:string,
ThreatName:string,
ThreatCategory:string,
ThreatRiskLevel:int,
HttpHost:string,
EventOwner:string,
SrcProcessName:string,
SrcProcessId:string,
SrcProcessGuid:string,
SrcUserScope:string,
SrcUserScopeId:string,
SrcDvcScopeId:string,
SrcDvcScope:string,
DstDvcScopeId:string,
DstDvcScope:string,
SrcMacAddr:string,
DstMacAddr:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ASimWebSessionLogsExpand {
ASimWebSessionLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Dvc=tostring(events.Dvc),
DvcIpAddr=tostring(events.DvcIpAddr),
DvcHostname=tostring(events.DvcHostname),
DvcDomain=tostring(events.DvcDomain),
DvcDomainType=tostring(events.DvcDomainType),
DvcFQDN=tostring(events.DvcFQDN),
DvcId=tostring(events.DvcId),
DvcIdType=tostring(events.DvcIdType),
DvcAction=tostring(events.DvcAction),
DvcOriginalAction=tostring(events.DvcOriginalAction),
EventMessage=tostring(events.EventMessage),
EventCount=toint(events.EventCount),
EventStartTime=todatetime(events.EventStartTime),
EventEndTime=todatetime(events.EventEndTime),
EventType=tostring(events.EventType),
EventSubType=tostring(events.EventSubType),
EventResult=tostring(events.EventResult),
EventResultDetails=tostring(events.EventResultDetails),
EventOriginalUid=tostring(events.EventOriginalUid),
EventOriginalType=tostring(events.EventOriginalType),
EventOriginalSubType=tostring(events.EventOriginalSubType),
EventOriginalResultDetails=tostring(events.EventOriginalResultDetails),
EventSeverity=tostring(events.EventSeverity),
EventOriginalSeverity=tostring(events.EventOriginalSeverity),
EventProduct=tostring(events.EventProduct),
EventProductVersion=tostring(events.EventProductVersion),
EventVendor=tostring(events.EventVendor),
EventSchemaVersion=tostring(events.EventSchemaVersion),
EventReportUrl=tostring(events.EventReportUrl),
AdditionalFields=todynamic(events.AdditionalFields),
DstAppName=tostring(events.DstAppName),
DstAppId=tostring(events.DstAppId),
DstAppType=tostring(events.DstAppType),
DstIpAddr=tostring(events.DstIpAddr),
DstPortNumber=toint(events.DstPortNumber),
DstHostname=tostring(events.DstHostname),
DstDomain=tostring(events.DstDomain),
DstDomainType=tostring(events.DstDomainType),
DstFQDN=tostring(events.DstFQDN),
DstDvcId=tostring(events.DstDvcId),
DstDvcIdType=tostring(events.DstDvcIdType),
DstDeviceType=tostring(events.DstDeviceType),
DstGeoCountry=tostring(events.DstGeoCountry),
DstGeoRegion=tostring(events.DstGeoRegion),
DstGeoCity=tostring(events.DstGeoCity),
DstGeoLatitude=toreal(events.DstGeoLatitude),
DstGeoLongitude=toreal(events.DstGeoLongitude),
DstUserId=tostring(events.DstUserId),
DstUserIdType=tostring(events.DstUserIdType),
DstUsername=tostring(events.DstUsername),
DstUsernameType=tostring(events.DstUsernameType),
DstUserType=tostring(events.DstUserType),
DstOriginalUserType=tostring(events.DstOriginalUserType),
NetworkApplicationProtocol=tostring(events.NetworkApplicationProtocol),
NetworkProtocol=tostring(events.NetworkProtocol),
NetworkProtocolVersion=tostring(events.NetworkProtocolVersion),
NetworkDirection=tostring(events.NetworkDirection),
NetworkDuration=toint(events.NetworkDuration),
NetworkIcmpType=tostring(events.NetworkIcmpType),
NetworkIcmpCode=toint(events.NetworkIcmpCode),
NetworkConnectionHistory=tostring(events.NetworkConnectionHistory),
DstBytes=tolong(events.DstBytes),
SrcBytes=tolong(events.SrcBytes),
NetworkBytes=tolong(events.NetworkBytes),
DstPackets=tolong(events.DstPackets),
SrcPackets=tolong(events.SrcPackets),
NetworkPackets=tolong(events.NetworkPackets),
NetworkSessionId=tostring(events.NetworkSessionId),
ThreatOriginalRiskLevel=tostring(events.ThreatOriginalRiskLevel),
ThreatIpAddr=tostring(events.ThreatIpAddr),
ThreatField=tostring(events.ThreatField),
ThreatConfidence=toint(events.ThreatConfidence),
ThreatOriginalConfidence=tostring(events.ThreatOriginalConfidence),
ThreatIsActive=tobool(events.ThreatIsActive),
ThreatFirstReportedTime=todatetime(events.ThreatFirstReportedTime),
ThreatLastReportedTime=todatetime(events.ThreatLastReportedTime),
DstNatIpAddr=tostring(events.DstNatIpAddr),
DstNatPortNumber=toint(events.DstNatPortNumber),
SrcNatIpAddr=tostring(events.SrcNatIpAddr),
SrcNatPortNumber=toint(events.SrcNatPortNumber),
SrcAppName=tostring(events.SrcAppName),
SrcAppId=tostring(events.SrcAppId),
SrcAppType=tostring(events.SrcAppType),
SrcIpAddr=tostring(events.SrcIpAddr),
SrcPortNumber=toint(events.SrcPortNumber),
SrcHostname=tostring(events.SrcHostname),
SrcDomain=tostring(events.SrcDomain),
SrcDomainType=tostring(events.SrcDomainType),
SrcFQDN=tostring(events.SrcFQDN),
SrcDvcId=tostring(events.SrcDvcId),
SrcDvcIdType=tostring(events.SrcDvcIdType),
SrcDeviceType=tostring(events.SrcDeviceType),
SrcGeoCountry=tostring(events.SrcGeoCountry),
SrcGeoRegion=tostring(events.SrcGeoRegion),
SrcGeoCity=tostring(events.SrcGeoCity),
SrcGeoLatitude=toreal(events.SrcGeoLatitude),
SrcGeoLongitude=toreal(events.SrcGeoLongitude),
SrcUserId=tostring(events.SrcUserId),
SrcUserIdType=tostring(events.SrcUserIdType),
SrcUsername=tostring(events.SrcUsername),
SrcUsernameType=tostring(events.SrcUsernameType),
SrcUserType=tostring(events.SrcUserType),
SrcOriginalUserType=tostring(events.SrcOriginalUserType),
Url=tostring(events.Url),
UrlCategory=tostring(events.UrlCategory),
UrlOriginal=tostring(events.UrlOriginal),
HttpVersion=tostring(events.HttpVersion),
HttpRequestMethod=tostring(events.HttpRequestMethod),
HttpContentType=tostring(events.HttpContentType),
HttpContentFormat=tostring(events.HttpContentFormat),
HttpReferrer=tostring(events.HttpReferrer),
HttpUserAgent=tostring(events.HttpUserAgent),
HttpRequestXff=tostring(events.HttpRequestXff),
HttpRequestTime=toint(events.HttpRequestTime),
HttpResponseTime=toint(events.HttpResponseTime),
FileName=tostring(events.FileName),
FileMD5=tostring(events.FileMD5),
FileSHA1=tostring(events.FileSHA1),
FileSHA256=tostring(events.FileSHA256),
FileSHA512=tostring(events.FileSHA512),
FileSize=toint(events.FileSize),
FileContentType=tostring(events.FileContentType),
RuleName=tostring(events.RuleName),
RuleNumber=toint(events.RuleNumber),
Rule=tostring(events.Rule),
ThreatId=tostring(events.ThreatId),
ThreatName=tostring(events.ThreatName),
ThreatCategory=tostring(events.ThreatCategory),
ThreatRiskLevel=toint(events.ThreatRiskLevel),
HttpHost=tostring(events.HttpHost),
EventOwner=tostring(events.EventOwner),
SrcProcessName=tostring(events.SrcProcessName),
SrcProcessId=tostring(events.SrcProcessId),
SrcProcessGuid=tostring(events.SrcProcessGuid),
SrcUserScope=tostring(events.SrcUserScope),
SrcUserScopeId=tostring(events.SrcUserScopeId),
SrcDvcScopeId=tostring(events.SrcDvcScopeId),
SrcDvcScope=tostring(events.SrcDvcScope),
DstDvcScopeId=tostring(events.DstDvcScopeId),
DstDvcScope=tostring(events.DstDvcScope),
SrcMacAddr=tostring(events.SrcMacAddr),
DstMacAddr=tostring(events.DstMacAddr),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ASimWebSessionLogs policy update @'[{"Source": "ASimWebSessionLogsRaw", "Query": "ASimWebSessionLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ASimWebSessionLogs policy update @'[{"Source": "ASimWebSessionLogsRaw", "Query": "ASimWebSessionLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AuditLogsRaw (records:dynamic)

.create-or-alter table AuditLogsRaw ingestion json mapping 'AuditLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AuditLogs(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
ResourceId:string,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
Resource:string,
ResourceGroup:string,
ResourceProvider:string,
Identity:string,
Level:string,
Location:string,
AdditionalDetails:dynamic,
Id:string,
InitiatedBy:dynamic,
LoggedByService:string,
Result:string,
ResultReason:string,
TargetResources:dynamic,
AADTenantId:string,
ActivityDisplayName:string,
ActivityDateTime:datetime,
AADOperationType:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AuditLogsExpand {
AuditLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
SourceSystem=tostring(''),
TimeGenerated=todatetime(events.['time']),
ResourceId=tostring(events.resourceId),
OperationName=tostring(events.operationName),
OperationVersion=tostring(events.operationVersion),
Category=tostring(events.category),
ResultType=tostring(events.properties.resultType),
ResultSignature=tostring(events.resultSignature),
ResultDescription=tostring(events.resultDescription),
DurationMs=tolong(events.durationMs),
CorrelationId=tostring(events.correlationId),
Resource=tostring(''),
ResourceGroup=tostring(''),
ResourceProvider=tostring(''),
Identity=tostring(events.identity),
Level=tostring(events.Level),
Location=tostring(''),
AdditionalDetails=todynamic(events.properties.additionalDetails),
Id=tostring(events.properties.id),
InitiatedBy=todynamic(events.properties.initiatedBy),
LoggedByService=tostring(events.properties.loggedByService),
Result=tostring(events.properties.result),
ResultReason=tostring(events.properties.resultReason),
TargetResources=todynamic(events.properties.targetResources),
AADTenantId=tostring(events.properties.tenantId),
ActivityDisplayName=tostring(events.properties.activityDisplayName),
ActivityDateTime=todatetime(events.properties.activityDateTime),
AADOperationType=tostring(events.properties.operationType),
Type=tostring('AuditLogs'),
_ItemId=tostring(''),
_ResourceId=tostring(events.resourceId),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table AuditLogs policy update @'[{"Source": "AuditLogsRaw", "Query": "AuditLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AuditLogs policy update @'[{"Source": "AuditLogsRaw", "Query": "AuditLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AWSCloudTrailRaw (records:dynamic)

.create-or-alter table AWSCloudTrailRaw ingestion json mapping 'AWSCloudTrailRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AWSCloudTrail(
TimeGenerated:datetime,
AwsEventId:string,
EventVersion:string,
EventSource:string,
EventTypeName:string,
EventName:string,
UserIdentityType:string,
UserIdentityPrincipalid:string,
UserIdentityArn:string,
UserIdentityAccountId:string,
UserIdentityInvokedBy:string,
UserIdentityAccessKeyId:string,
UserIdentityUserName:string,
SessionMfaAuthenticated:bool,
SessionCreationDate:datetime,
SessionIssuerType:string,
SessionIssuerPrincipalId:string,
SessionIssuerArn:string,
SessionIssuerAccountId:string,
SessionIssuerUserName:string,
AWSRegion:string,
SourceIpAddress:string,
UserAgent:string,
ErrorCode:string,
ErrorMessage:string,
RequestParameters:string,
ResponseElements:string,
AdditionalEventData:string,
AwsRequestId:string,
AwsRequestId_:string,
Resources:string,
APIVersion:string,
ReadOnly:bool,
RecipientAccountId:string,
ServiceEventDetails:string,
SharedEventId:string,
VpcEndpointId:string,
ManagementEvent:bool,
TenantId:string,
SourceSystem:string,
OperationName:string,
Category:string,
EC2RoleDelivery:string,
TlsVersion:string,
CipherSuite:string,
ClientProvidedHostHeader:string,
IpProtocol:string,
SourcePort:string,
DestinationPort:string,
CidrIp:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AWSCloudTrailExpand {
AWSCloudTrailRaw
//| extend events = records
| mv-expand events = records
| project
TimeGenerated=todatetime(events.TimeGenerated),
AwsEventId=tostring(events.AwsEventId),
EventVersion=tostring(events.EventVersion),
EventSource=tostring(events.EventSource),
EventTypeName=tostring(events.EventTypeName),
EventName=tostring(events.EventName),
UserIdentityType=tostring(events.UserIdentityType),
UserIdentityPrincipalid=tostring(events.UserIdentityPrincipalid),
UserIdentityArn=tostring(events.UserIdentityArn),
UserIdentityAccountId=tostring(events.UserIdentityAccountId),
UserIdentityInvokedBy=tostring(events.UserIdentityInvokedBy),
UserIdentityAccessKeyId=tostring(events.UserIdentityAccessKeyId),
UserIdentityUserName=tostring(events.UserIdentityUserName),
SessionMfaAuthenticated=tobool(events.SessionMfaAuthenticated),
SessionCreationDate=todatetime(events.SessionCreationDate),
SessionIssuerType=tostring(events.SessionIssuerType),
SessionIssuerPrincipalId=tostring(events.SessionIssuerPrincipalId),
SessionIssuerArn=tostring(events.SessionIssuerArn),
SessionIssuerAccountId=tostring(events.SessionIssuerAccountId),
SessionIssuerUserName=tostring(events.SessionIssuerUserName),
AWSRegion=tostring(events.AWSRegion),
SourceIpAddress=tostring(events.SourceIpAddress),
UserAgent=tostring(events.UserAgent),
ErrorCode=tostring(events.ErrorCode),
ErrorMessage=tostring(events.ErrorMessage),
RequestParameters=tostring(events.RequestParameters),
ResponseElements=tostring(events.ResponseElements),
AdditionalEventData=tostring(events.AdditionalEventData),
AwsRequestId=tostring(events.AwsRequestId),
AwsRequestId_=tostring(events.AwsRequestId_),
Resources=tostring(events.Resources),
APIVersion=tostring(events.APIVersion),
ReadOnly=tobool(events.ReadOnly),
RecipientAccountId=tostring(events.RecipientAccountId),
ServiceEventDetails=tostring(events.ServiceEventDetails),
SharedEventId=tostring(events.SharedEventId),
VpcEndpointId=tostring(events.VpcEndpointId),
ManagementEvent=tobool(events.ManagementEvent),
TenantId=tostring(events.TenantId),
SourceSystem=tostring(events.SourceSystem),
OperationName=tostring(events.OperationName),
Category=tostring(events.Category),
EC2RoleDelivery=tostring(events.EC2RoleDelivery),
TlsVersion=tostring(events.TlsVersion),
CipherSuite=tostring(events.CipherSuite),
ClientProvidedHostHeader=tostring(events.ClientProvidedHostHeader),
IpProtocol=tostring(events.IpProtocol),
SourcePort=tostring(events.SourcePort),
DestinationPort=tostring(events.DestinationPort),
CidrIp=tostring(events.CidrIp),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AWSCloudTrail policy update @'[{"Source": "AWSCloudTrailRaw", "Query": "AWSCloudTrailExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AWSCloudTrail policy update @'[{"Source": "AWSCloudTrailRaw", "Query": "AWSCloudTrailExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AWSCloudWatchRaw (records:dynamic)

.create-or-alter table AWSCloudWatchRaw ingestion json mapping 'AWSCloudWatchRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AWSCloudWatch(
TenantId:string,
ExtractedTime:datetime,
TimeGenerated:datetime,
Message:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AWSCloudWatchExpand {
AWSCloudWatchRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
ExtractedTime=todatetime(events.ExtractedTime),
TimeGenerated=todatetime(events.TimeGenerated),
Message=tostring(events.Message),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AWSCloudWatch policy update @'[{"Source": "AWSCloudWatchRaw", "Query": "AWSCloudWatchExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AWSCloudWatch policy update @'[{"Source": "AWSCloudWatchRaw", "Query": "AWSCloudWatchExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AWSGuardDutyRaw (records:dynamic)

.create-or-alter table AWSGuardDutyRaw ingestion json mapping 'AWSGuardDutyRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AWSGuardDuty(
TenantId:string,
TimeGenerated:datetime,
SchemaVersion:string,
AccountId:string,
Region:string,
Partition:string,
Id:string,
Arn:string,
ActivityType:string,
ResourceDetails:dynamic,
ServiceDetails:dynamic,
Severity:int,
TimeCreated:datetime,
Title:string,
Description:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AWSGuardDutyExpand {
AWSGuardDutyRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
SchemaVersion=tostring(events.SchemaVersion),
AccountId=tostring(events.AccountId),
Region=tostring(events.Region),
Partition=tostring(events.Partition),
Id=tostring(events.Id),
Arn=tostring(events.Arn),
ActivityType=tostring(events.ActivityType),
ResourceDetails=todynamic(events.ResourceDetails),
ServiceDetails=todynamic(events.ServiceDetails),
Severity=toint(events.Severity),
TimeCreated=todatetime(events.TimeCreated),
Title=tostring(events.Title),
Description=tostring(events.Description),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AWSGuardDuty policy update @'[{"Source": "AWSGuardDutyRaw", "Query": "AWSGuardDutyExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AWSGuardDuty policy update @'[{"Source": "AWSGuardDutyRaw", "Query": "AWSGuardDutyExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AWSVPCFlowRaw (records:dynamic)

.create-or-alter table AWSVPCFlowRaw ingestion json mapping 'AWSVPCFlowRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AWSVPCFlow(
TenantId:string,
TimeGenerated:datetime,
Version:int,
AccountId:string,
InterfaceId:string,
SrcAddr:string,
DstAddr:string,
SrcPort:int,
DstPort:int,
Protocol:int,
Packets:int,
Bytes:long,
End:datetime,
Action:string,
LogStatus:string,
VpcId:string,
SubnetId:string,
InstanceId:string,
TcpFlags:int,
TrafficType:string,
PktSrcAddr:string,
PktDstAddr:string,
Region:string,
AzId:string,
SublocationType:string,
SublocationId:string,
PktSrcAwsService:string,
PktDstAwsService:string,
FlowDirection:string,
TrafficPath:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AWSVPCFlowExpand {
AWSVPCFlowRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Version=toint(events.Version),
AccountId=tostring(events.AccountId),
InterfaceId=tostring(events.InterfaceId),
SrcAddr=tostring(events.SrcAddr),
DstAddr=tostring(events.DstAddr),
SrcPort=toint(events.SrcPort),
DstPort=toint(events.DstPort),
Protocol=toint(events.Protocol),
Packets=toint(events.Packets),
Bytes=tolong(events.Bytes),
End=todatetime(events.End),
Action=tostring(events.Action),
LogStatus=tostring(events.LogStatus),
VpcId=tostring(events.VpcId),
SubnetId=tostring(events.SubnetId),
InstanceId=tostring(events.InstanceId),
TcpFlags=toint(events.TcpFlags),
TrafficType=tostring(events.TrafficType),
PktSrcAddr=tostring(events.PktSrcAddr),
PktDstAddr=tostring(events.PktDstAddr),
Region=tostring(events.Region),
AzId=tostring(events.AzId),
SublocationType=tostring(events.SublocationType),
SublocationId=tostring(events.SublocationId),
PktSrcAwsService=tostring(events.PktSrcAwsService),
PktDstAwsService=tostring(events.PktDstAwsService),
FlowDirection=tostring(events.FlowDirection),
TrafficPath=tostring(events.TrafficPath),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AWSVPCFlow policy update @'[{"Source": "AWSVPCFlowRaw", "Query": "AWSVPCFlowExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AWSVPCFlow policy update @'[{"Source": "AWSVPCFlowRaw", "Query": "AWSVPCFlowExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table AzureActivityRaw (records:dynamic)

.create-or-alter table AzureActivityRaw ingestion json mapping 'AzureActivityRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table AzureActivity(
OperationName:string,
OperationNameValue:string,
Level:string,
ActivityStatus:string,
ActivityStatusValue:string,
ActivitySubstatus:string,
ActivitySubstatusValue:string,
ResourceGroup:string,
SubscriptionId:string,
CorrelationId:string,
Caller:string,
CallerIpAddress:string,
Category:string,
CategoryValue:string,
HTTPRequest:string,
Properties:string,
EventSubmissionTimestamp:datetime,
Authorization:string,
ResourceId:string,
OperationId:string,
ResourceProvider:string,
ResourceProviderValue:string,
Resource:string,
EventDataId:string,
TenantId:string,
TimeGenerated:datetime,
SourceSystem:string,
Authorization_d:dynamic,
Claims:string,
Claims_d:dynamic,
Properties_d:dynamic,
Hierarchy:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function AzureActivityExpand {
AzureActivityRaw
//| extend events = records
| mv-expand events = records
| project
OperationName=tostring(events.OperationName),
OperationNameValue=tostring(events.OperationNameValue),
Level=tostring(events.Level),
ActivityStatus=tostring(events.ActivityStatus),
ActivityStatusValue=tostring(events.ActivityStatusValue),
ActivitySubstatus=tostring(events.ActivitySubstatus),
ActivitySubstatusValue=tostring(events.ActivitySubstatusValue),
ResourceGroup=tostring(events.ResourceGroup),
SubscriptionId=tostring(events.SubscriptionId),
CorrelationId=tostring(events.CorrelationId),
Caller=tostring(events.Caller),
CallerIpAddress=tostring(events.CallerIpAddress),
Category=tostring(events.Category),
CategoryValue=tostring(events.CategoryValue),
HTTPRequest=tostring(events.HTTPRequest),
Properties=tostring(events.Properties),
EventSubmissionTimestamp=todatetime(events.EventSubmissionTimestamp),
Authorization=tostring(events.Authorization),
ResourceId=tostring(events.ResourceId),
OperationId=tostring(events.OperationId),
ResourceProvider=tostring(events.ResourceProvider),
ResourceProviderValue=tostring(events.ResourceProviderValue),
Resource=tostring(events.Resource),
EventDataId=tostring(events.EventDataId),
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
SourceSystem=tostring(events.SourceSystem),
Authorization_d=todynamic(events.Authorization_d),
Claims=tostring(events.Claims),
Claims_d=todynamic(events.Claims_d),
Properties_d=todynamic(events.Properties_d),
Hierarchy=tostring(events.Hierarchy),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table AzureActivity policy update @'[{"Source": "AzureActivityRaw", "Query": "AzureActivityExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table AzureActivity policy update @'[{"Source": "AzureActivityRaw", "Query": "AzureActivityExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table BehaviorAnalyticsRaw (records:dynamic)

.create-or-alter table BehaviorAnalyticsRaw ingestion json mapping 'BehaviorAnalyticsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table BehaviorAnalytics(
TenantId:string,
SourceRecordId:string,
TimeGenerated:datetime,
TimeProcessed:datetime,
ActivityType:string,
ActionType:string,
UserName:string,
UserPrincipalName:string,
EventSource:string,
SourceIPAddress:string,
SourceIPLocation:string,
SourceDevice:string,
DestinationIPAddress:string,
DestinationIPLocation:string,
DestinationDevice:string,
EventVendor:string,
EventProductVersion:string,
ActorName:string,
ActorPrincipalName:string,
TargetName:string,
TargetPrincipalName:string,
Device:string,
UsersInsights:dynamic,
DevicesInsights:dynamic,
ActivityInsights:dynamic,
SourceSystem:string,
NativeTableName:string,
InvestigationPriority:int,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function BehaviorAnalyticsExpand {
BehaviorAnalyticsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
SourceRecordId=tostring(events.SourceRecordId),
TimeGenerated=todatetime(events.TimeGenerated),
TimeProcessed=todatetime(events.TimeProcessed),
ActivityType=tostring(events.ActivityType),
ActionType=tostring(events.ActionType),
UserName=tostring(events.UserName),
UserPrincipalName=tostring(events.UserPrincipalName),
EventSource=tostring(events.EventSource),
SourceIPAddress=tostring(events.SourceIPAddress),
SourceIPLocation=tostring(events.SourceIPLocation),
SourceDevice=tostring(events.SourceDevice),
DestinationIPAddress=tostring(events.DestinationIPAddress),
DestinationIPLocation=tostring(events.DestinationIPLocation),
DestinationDevice=tostring(events.DestinationDevice),
EventVendor=tostring(events.EventVendor),
EventProductVersion=tostring(events.EventProductVersion),
ActorName=tostring(events.ActorName),
ActorPrincipalName=tostring(events.ActorPrincipalName),
TargetName=tostring(events.TargetName),
TargetPrincipalName=tostring(events.TargetPrincipalName),
Device=tostring(events.Device),
UsersInsights=todynamic(events.UsersInsights),
DevicesInsights=todynamic(events.DevicesInsights),
ActivityInsights=todynamic(events.ActivityInsights),
SourceSystem=tostring(events.SourceSystem),
NativeTableName=tostring(events.NativeTableName),
InvestigationPriority=toint(events.InvestigationPriority),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table BehaviorAnalytics policy update @'[{"Source": "BehaviorAnalyticsRaw", "Query": "BehaviorAnalyticsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table BehaviorAnalytics policy update @'[{"Source": "BehaviorAnalyticsRaw", "Query": "BehaviorAnalyticsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table CloudAppEventsRaw (records:dynamic)

.create-or-alter table CloudAppEventsRaw ingestion json mapping 'CloudAppEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table CloudAppEvents(
TenantId:string,
AccountId:string,
AccountType:string,
AdditionalFields:dynamic,
RawEventData:dynamic,
ReportId:string,
ObjectId:string,
ObjectType:string,
ObjectName:string,
ActivityObjects:dynamic,
ActivityType:string,
UserAgent:string,
ISP:string,
City:string,
CountryCode:string,
IsAnonymousProxy:bool,
IsExternalUser:bool,
IsImpersonated:bool,
IPAddress:string,
IPCategory:string,
IPTags:dynamic,
OSPlatform:string,
DeviceType:string,
IsAdminOperation:bool,
AccountDisplayName:string,
AccountObjectId:string,
AppInstanceId:int,
ApplicationId:int,
Application:string,
ActionType:string,
UserAgentTags:dynamic,
TimeGenerated:datetime,
Timestamp:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-merge table CloudAppEvents(
TenantId:string,
AccountId:string,
AccountType:string,
AdditionalFields:dynamic,
RawEventData:dynamic,
ReportId:string,
ObjectId:string,
ObjectType:string,
ObjectName:string,
ActivityObjects:dynamic,
ActivityType:string,
UserAgent:string,
ISP:string,
City:string,
CountryCode:string,
IsAnonymousProxy:bool,
IsExternalUser:bool,
IsImpersonated:bool,
IPAddress:string,
IPCategory:string,
IPTags:dynamic,
OSPlatform:string,
DeviceType:string,
IsAdminOperation:bool,
AccountDisplayName:string,
AccountObjectId:string,
AppInstanceId:int,
ApplicationId:int,
Application:string,
ActionType:string,
UserAgentTags:dynamic,
TimeGenerated:datetime,
Timestamp:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function CloudAppEventsExpand {
CloudAppEventsRaw
//| extend events = records
| mv-expand events = records
| project
  TenantId = tostring(events.tenantId) ,
  AccountId = tostring(events.properties.AccountId),
  AccountType = tostring(events.properties.AccountType),
  AdditionalFields = todynamic(events.properties.AdditionalFields),
  RawEventData = todynamic(events.properties.RawEventData),
  ReportId = tostring(events.properties.ReportId),
  ObjectId = tostring(events.properties.ObjectId),
  ObjectType = tostring(events.properties.ObjectType),
  ObjectName = tostring(events.properties.ObjectName),
  ActivityObjects = todynamic(events.properties.ActivityObjects),
  ActivityType = tostring(events.properties.ActivityType),
  UserAgent = tostring(events.properties.UserAgent),
  ISP = tostring(events.properties.ISP),
  City = tostring(events.properties.City),
  CountryCode = tostring(events.properties.CountryCode),
  IsAnonymousProxy = tobool(events.properties.IsAnonymousProxy),
  IsExternalUser = tobool(events.properties.IsExternalUser),
  IsImpersonated = tobool(events.properties.IsImpersonated),
  IPAddress = tostring(events.properties.IPAddress),
  IPCategory = tostring(events.properties.IPCategory),
  IPTags = todynamic(events.properties.IPTags),
  OSPlatform = tostring(events.properties.OSPlatform),
  DeviceType = tostring(events.properties.DeviceType),
  IsAdminOperation = tobool(events.properties.IsAdminOperation),
  AccountDisplayName = tostring(events.properties.AccountDisplayName),
  AccountObjectId = tostring(events.properties.AccountObjectId),
  AppInstanceId = toint(events.properties.AppInstanceId),
  ApplicationId = toint(events.properties.ApplicationId),
  Application = tostring(events.properties.Application),
  ActionType = tostring(events.properties.ActionType),
  UserAgentTags = todynamic(events.properties.UserAgentTags),
  TimeGenerated=todatetime(events.properties.Timestamp),
  Timestamp = todatetime(events.properties.Timestamp),
  SourceSystem = tostring(events.properties.RawEventData.eventSource),
  Type = tostring('CloudAppEvents'), 
_ItemId=tostring(''),
_ResourceId=tostring(events.properties.RawEventData.resourceUri),
_SubscriptionId=tostring(events.properties.RawEventData.subscriptionId),
_TimeReceived=todatetime(now())}


.alter table CloudAppEvents policy update @'[{"Source": "CloudAppEventsRaw", "Query": "CloudAppEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table CloudAppEvents policy update @'[{"Source": "CloudAppEventsRaw", "Query": "CloudAppEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table CommonSecurityLogRaw (records:dynamic)

.create-or-alter table CommonSecurityLogRaw ingestion json mapping 'CommonSecurityLogRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table CommonSecurityLog(
TenantId:string,
TimeGenerated:datetime,
DeviceVendor:string,
DeviceProduct:string,
DeviceVersion:string,
DeviceEventClassID:string,
Activity:string,
LogSeverity:string,
OriginalLogSeverity:string,
AdditionalExtensions:string,
DeviceAction:string,
ApplicationProtocol:string,
EventCount:int,
DestinationDnsDomain:string,
DestinationServiceName:string,
DestinationTranslatedAddress:string,
DestinationTranslatedPort:int,
CommunicationDirection:string,
DeviceDnsDomain:string,
DeviceExternalID:string,
DeviceFacility:string,
DeviceInboundInterface:string,
DeviceNtDomain:string,
DeviceOutboundInterface:string,
DevicePayloadId:string,
ProcessName:string,
DeviceTranslatedAddress:string,
DestinationHostName:string,
DestinationMACAddress:string,
DestinationNTDomain:string,
DestinationProcessId:int,
DestinationUserPrivileges:string,
DestinationProcessName:string,
DestinationPort:int,
DestinationIP:string,
DeviceTimeZone:string,
DestinationUserID:string,
DestinationUserName:string,
DeviceAddress:string,
DeviceName:string,
DeviceMacAddress:string,
ProcessID:int,
EndTime:datetime,
ExternalID:int,
ExtID:string,
FileCreateTime:string,
FileHash:string,
FileID:string,
FileModificationTime:string,
FilePath:string,
FilePermission:string,
FileType:string,
FileName:string,
FileSize:int,
ReceivedBytes:long,
Message:string,
OldFileCreateTime:string,
OldFileHash:string,
OldFileID:string,
OldFileModificationTime:string,
OldFileName:string,
OldFilePath:string,
OldFilePermission:string,
OldFileSize:int,
OldFileType:string,
SentBytes:long,
EventOutcome:string,
Protocol:string,
Reason:string,
RequestURL:string,
RequestClientApplication:string,
RequestContext:string,
RequestCookies:string,
RequestMethod:string,
ReceiptTime:string,
SourceHostName:string,
SourceMACAddress:string,
SourceNTDomain:string,
SourceDnsDomain:string,
SourceServiceName:string,
SourceTranslatedAddress:string,
SourceTranslatedPort:int,
SourceProcessId:int,
SourceUserPrivileges:string,
SourceProcessName:string,
SourcePort:int,
SourceIP:string,
StartTime:datetime,
SourceUserID:string,
SourceUserName:string,
EventType:int,
DeviceEventCategory:string,
DeviceCustomIPv6Address1:string,
DeviceCustomIPv6Address1Label:string,
DeviceCustomIPv6Address2:string,
DeviceCustomIPv6Address2Label:string,
DeviceCustomIPv6Address3:string,
DeviceCustomIPv6Address3Label:string,
DeviceCustomIPv6Address4:string,
DeviceCustomIPv6Address4Label:string,
DeviceCustomFloatingPoint1:real,
DeviceCustomFloatingPoint1Label:string,
DeviceCustomFloatingPoint2:real,
DeviceCustomFloatingPoint2Label:string,
DeviceCustomFloatingPoint3:real,
DeviceCustomFloatingPoint3Label:string,
DeviceCustomFloatingPoint4:real,
DeviceCustomFloatingPoint4Label:string,
DeviceCustomNumber1:int,
FieldDeviceCustomNumber1:long,
DeviceCustomNumber1Label:string,
DeviceCustomNumber2:int,
FieldDeviceCustomNumber2:long,
DeviceCustomNumber2Label:string,
DeviceCustomNumber3:int,
FieldDeviceCustomNumber3:long,
DeviceCustomNumber3Label:string,
DeviceCustomString1:string,
DeviceCustomString1Label:string,
DeviceCustomString2:string,
DeviceCustomString2Label:string,
DeviceCustomString3:string,
DeviceCustomString3Label:string,
DeviceCustomString4:string,
DeviceCustomString4Label:string,
DeviceCustomString5:string,
DeviceCustomString5Label:string,
DeviceCustomString6:string,
DeviceCustomString6Label:string,
DeviceCustomDate1:string,
DeviceCustomDate1Label:string,
DeviceCustomDate2:string,
DeviceCustomDate2Label:string,
FlexDate1:string,
FlexDate1Label:string,
FlexNumber1:int,
FlexNumber1Label:string,
FlexNumber2:int,
FlexNumber2Label:string,
FlexString1:string,
FlexString1Label:string,
FlexString2:string,
FlexString2Label:string,
RemoteIP:string,
RemotePort:string,
MaliciousIP:string,
ThreatSeverity:int,
IndicatorThreatType:string,
ThreatDescription:string,
ThreatConfidence:string,
ReportReferenceLink:string,
MaliciousIPLongitude:real,
MaliciousIPLatitude:real,
MaliciousIPCountry:string,
Computer:string,
SourceSystem:string,
SimplifiedDeviceAction:string,
CollectorHostName:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function CommonSecurityLogExpand {
CommonSecurityLogRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
DeviceVendor=tostring(events.DeviceVendor),
DeviceProduct=tostring(events.DeviceProduct),
DeviceVersion=tostring(events.DeviceVersion),
DeviceEventClassID=tostring(events.DeviceEventClassID),
Activity=tostring(events.Activity),
LogSeverity=tostring(events.LogSeverity),
OriginalLogSeverity=tostring(events.OriginalLogSeverity),
AdditionalExtensions=tostring(events.AdditionalExtensions),
DeviceAction=tostring(events.DeviceAction),
ApplicationProtocol=tostring(events.ApplicationProtocol),
EventCount=toint(events.EventCount),
DestinationDnsDomain=tostring(events.DestinationDnsDomain),
DestinationServiceName=tostring(events.DestinationServiceName),
DestinationTranslatedAddress=tostring(events.DestinationTranslatedAddress),
DestinationTranslatedPort=toint(events.DestinationTranslatedPort),
CommunicationDirection=tostring(events.CommunicationDirection),
DeviceDnsDomain=tostring(events.DeviceDnsDomain),
DeviceExternalID=tostring(events.DeviceExternalID),
DeviceFacility=tostring(events.DeviceFacility),
DeviceInboundInterface=tostring(events.DeviceInboundInterface),
DeviceNtDomain=tostring(events.DeviceNtDomain),
DeviceOutboundInterface=tostring(events.DeviceOutboundInterface),
DevicePayloadId=tostring(events.DevicePayloadId),
ProcessName=tostring(events.ProcessName),
DeviceTranslatedAddress=tostring(events.DeviceTranslatedAddress),
DestinationHostName=tostring(events.DestinationHostName),
DestinationMACAddress=tostring(events.DestinationMACAddress),
DestinationNTDomain=tostring(events.DestinationNTDomain),
DestinationProcessId=toint(events.DestinationProcessId),
DestinationUserPrivileges=tostring(events.DestinationUserPrivileges),
DestinationProcessName=tostring(events.DestinationProcessName),
DestinationPort=toint(events.DestinationPort),
DestinationIP=tostring(events.DestinationIP),
DeviceTimeZone=tostring(events.DeviceTimeZone),
DestinationUserID=tostring(events.DestinationUserID),
DestinationUserName=tostring(events.DestinationUserName),
DeviceAddress=tostring(events.DeviceAddress),
DeviceName=tostring(events.DeviceName),
DeviceMacAddress=tostring(events.DeviceMacAddress),
ProcessID=toint(events.ProcessID),
EndTime=todatetime(events.EndTime),
ExternalID=toint(events.ExternalID),
ExtID=tostring(events.ExtID),
FileCreateTime=tostring(events.FileCreateTime),
FileHash=tostring(events.FileHash),
FileID=tostring(events.FileID),
FileModificationTime=tostring(events.FileModificationTime),
FilePath=tostring(events.FilePath),
FilePermission=tostring(events.FilePermission),
FileType=tostring(events.FileType),
FileName=tostring(events.FileName),
FileSize=toint(events.FileSize),
ReceivedBytes=tolong(events.ReceivedBytes),
Message=tostring(events.Message),
OldFileCreateTime=tostring(events.OldFileCreateTime),
OldFileHash=tostring(events.OldFileHash),
OldFileID=tostring(events.OldFileID),
OldFileModificationTime=tostring(events.OldFileModificationTime),
OldFileName=tostring(events.OldFileName),
OldFilePath=tostring(events.OldFilePath),
OldFilePermission=tostring(events.OldFilePermission),
OldFileSize=toint(events.OldFileSize),
OldFileType=tostring(events.OldFileType),
SentBytes=tolong(events.SentBytes),
EventOutcome=tostring(events.EventOutcome),
Protocol=tostring(events.Protocol),
Reason=tostring(events.Reason),
RequestURL=tostring(events.RequestURL),
RequestClientApplication=tostring(events.RequestClientApplication),
RequestContext=tostring(events.RequestContext),
RequestCookies=tostring(events.RequestCookies),
RequestMethod=tostring(events.RequestMethod),
ReceiptTime=tostring(events.ReceiptTime),
SourceHostName=tostring(events.SourceHostName),
SourceMACAddress=tostring(events.SourceMACAddress),
SourceNTDomain=tostring(events.SourceNTDomain),
SourceDnsDomain=tostring(events.SourceDnsDomain),
SourceServiceName=tostring(events.SourceServiceName),
SourceTranslatedAddress=tostring(events.SourceTranslatedAddress),
SourceTranslatedPort=toint(events.SourceTranslatedPort),
SourceProcessId=toint(events.SourceProcessId),
SourceUserPrivileges=tostring(events.SourceUserPrivileges),
SourceProcessName=tostring(events.SourceProcessName),
SourcePort=toint(events.SourcePort),
SourceIP=tostring(events.SourceIP),
StartTime=todatetime(events.StartTime),
SourceUserID=tostring(events.SourceUserID),
SourceUserName=tostring(events.SourceUserName),
EventType=toint(events.EventType),
DeviceEventCategory=tostring(events.DeviceEventCategory),
DeviceCustomIPv6Address1=tostring(events.DeviceCustomIPv6Address1),
DeviceCustomIPv6Address1Label=tostring(events.DeviceCustomIPv6Address1Label),
DeviceCustomIPv6Address2=tostring(events.DeviceCustomIPv6Address2),
DeviceCustomIPv6Address2Label=tostring(events.DeviceCustomIPv6Address2Label),
DeviceCustomIPv6Address3=tostring(events.DeviceCustomIPv6Address3),
DeviceCustomIPv6Address3Label=tostring(events.DeviceCustomIPv6Address3Label),
DeviceCustomIPv6Address4=tostring(events.DeviceCustomIPv6Address4),
DeviceCustomIPv6Address4Label=tostring(events.DeviceCustomIPv6Address4Label),
DeviceCustomFloatingPoint1=toreal(events.DeviceCustomFloatingPoint1),
DeviceCustomFloatingPoint1Label=tostring(events.DeviceCustomFloatingPoint1Label),
DeviceCustomFloatingPoint2=toreal(events.DeviceCustomFloatingPoint2),
DeviceCustomFloatingPoint2Label=tostring(events.DeviceCustomFloatingPoint2Label),
DeviceCustomFloatingPoint3=toreal(events.DeviceCustomFloatingPoint3),
DeviceCustomFloatingPoint3Label=tostring(events.DeviceCustomFloatingPoint3Label),
DeviceCustomFloatingPoint4=toreal(events.DeviceCustomFloatingPoint4),
DeviceCustomFloatingPoint4Label=tostring(events.DeviceCustomFloatingPoint4Label),
DeviceCustomNumber1=toint(events.DeviceCustomNumber1),
FieldDeviceCustomNumber1=tolong(events.FieldDeviceCustomNumber1),
DeviceCustomNumber1Label=tostring(events.DeviceCustomNumber1Label),
DeviceCustomNumber2=toint(events.DeviceCustomNumber2),
FieldDeviceCustomNumber2=tolong(events.FieldDeviceCustomNumber2),
DeviceCustomNumber2Label=tostring(events.DeviceCustomNumber2Label),
DeviceCustomNumber3=toint(events.DeviceCustomNumber3),
FieldDeviceCustomNumber3=tolong(events.FieldDeviceCustomNumber3),
DeviceCustomNumber3Label=tostring(events.DeviceCustomNumber3Label),
DeviceCustomString1=tostring(events.DeviceCustomString1),
DeviceCustomString1Label=tostring(events.DeviceCustomString1Label),
DeviceCustomString2=tostring(events.DeviceCustomString2),
DeviceCustomString2Label=tostring(events.DeviceCustomString2Label),
DeviceCustomString3=tostring(events.DeviceCustomString3),
DeviceCustomString3Label=tostring(events.DeviceCustomString3Label),
DeviceCustomString4=tostring(events.DeviceCustomString4),
DeviceCustomString4Label=tostring(events.DeviceCustomString4Label),
DeviceCustomString5=tostring(events.DeviceCustomString5),
DeviceCustomString5Label=tostring(events.DeviceCustomString5Label),
DeviceCustomString6=tostring(events.DeviceCustomString6),
DeviceCustomString6Label=tostring(events.DeviceCustomString6Label),
DeviceCustomDate1=tostring(events.DeviceCustomDate1),
DeviceCustomDate1Label=tostring(events.DeviceCustomDate1Label),
DeviceCustomDate2=tostring(events.DeviceCustomDate2),
DeviceCustomDate2Label=tostring(events.DeviceCustomDate2Label),
FlexDate1=tostring(events.FlexDate1),
FlexDate1Label=tostring(events.FlexDate1Label),
FlexNumber1=toint(events.FlexNumber1),
FlexNumber1Label=tostring(events.FlexNumber1Label),
FlexNumber2=toint(events.FlexNumber2),
FlexNumber2Label=tostring(events.FlexNumber2Label),
FlexString1=tostring(events.FlexString1),
FlexString1Label=tostring(events.FlexString1Label),
FlexString2=tostring(events.FlexString2),
FlexString2Label=tostring(events.FlexString2Label),
RemoteIP=tostring(events.RemoteIP),
RemotePort=tostring(events.RemotePort),
MaliciousIP=tostring(events.MaliciousIP),
ThreatSeverity=toint(events.ThreatSeverity),
IndicatorThreatType=tostring(events.IndicatorThreatType),
ThreatDescription=tostring(events.ThreatDescription),
ThreatConfidence=tostring(events.ThreatConfidence),
ReportReferenceLink=tostring(events.ReportReferenceLink),
MaliciousIPLongitude=toreal(events.MaliciousIPLongitude),
MaliciousIPLatitude=toreal(events.MaliciousIPLatitude),
MaliciousIPCountry=tostring(events.MaliciousIPCountry),
Computer=tostring(events.Computer),
SourceSystem=tostring(events.SourceSystem),
SimplifiedDeviceAction=tostring(events.SimplifiedDeviceAction),
CollectorHostName=tostring(events.CollectorHostName),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table CommonSecurityLog policy update @'[{"Source": "CommonSecurityLogRaw", "Query": "CommonSecurityLogExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table CommonSecurityLog policy update @'[{"Source": "CommonSecurityLogRaw", "Query": "CommonSecurityLogExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ConfidentialWatchlistRaw (records:dynamic)

.create-or-alter table ConfidentialWatchlistRaw ingestion json mapping 'ConfidentialWatchlistRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ConfidentialWatchlist(
TenantId:string,
TimeGenerated:datetime,
AzureTenantId:string,
WatchlistId:string,
WatchlistItemId:string,
WatchlistName:string,
WatchlistAlias:string,
Source:string,
Provider:string,
CreatedBy:dynamic,
UpdatedBy:dynamic,
CreatedTimeUTC:datetime,
LastUpdatedTimeUTC:datetime,
Notes:string,
Tags:string,
DefaultDuration:string,
TimeToLive:datetime,
WatchlistItem:dynamic,
EntityMapping:dynamic,
CorrelationId:string,
SearchKey:string,
WatchlistCategory:string,
['_DTTimestamp']:datetime,
['_DTItemId']:string,
['_DTItemType']:string,
['_DTItemStatus']:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ConfidentialWatchlistExpand {
ConfidentialWatchlistRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AzureTenantId=tostring(events.AzureTenantId),
WatchlistId=tostring(events.WatchlistId),
WatchlistItemId=tostring(events.WatchlistItemId),
WatchlistName=tostring(events.WatchlistName),
WatchlistAlias=tostring(events.WatchlistAlias),
Source=tostring(events.Source),
Provider=tostring(events.Provider),
CreatedBy=todynamic(events.CreatedBy),
UpdatedBy=todynamic(events.UpdatedBy),
CreatedTimeUTC=todatetime(events.CreatedTimeUTC),
LastUpdatedTimeUTC=todatetime(events.LastUpdatedTimeUTC),
Notes=tostring(events.Notes),
Tags=tostring(events.Tags),
DefaultDuration=tostring(events.DefaultDuration),
TimeToLive=todatetime(events.TimeToLive),
WatchlistItem=todynamic(events.WatchlistItem),
EntityMapping=todynamic(events.EntityMapping),
CorrelationId=tostring(events.CorrelationId),
SearchKey=tostring(events.SearchKey),
WatchlistCategory=tostring(events.WatchlistCategory),
_DTTimestamp=todatetime(events.['_DTTimestamp']),
_DTItemId=tostring(events.['_DTItemId']),
_DTItemType=tostring(events.['_DTItemType']),
_DTItemStatus=tostring(events.['_DTItemStatus']),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ConfidentialWatchlist policy update @'[{"Source": "ConfidentialWatchlistRaw", "Query": "ConfidentialWatchlistExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ConfidentialWatchlist policy update @'[{"Source": "ConfidentialWatchlistRaw", "Query": "ConfidentialWatchlistExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceEventsRaw (records:dynamic)

.create-or-alter table DeviceEventsRaw ingestion json mapping 'DeviceEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceEvents(
TenantId:string,
AccountDomain:string,
AccountName:string,
AccountSid:string,
ActionType:string,
AdditionalFields:dynamic,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
FileName:string,
FileOriginIP:string,
FileOriginUrl:string,
FolderPath:string,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessLogonId:long,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
LocalIP:string,
LocalPort:int,
LogonId:long,
MD5:string,
MachineGroup:string,
ProcessCommandLine:string,
ProcessId:long,
ProcessTokenElevation:string,
RegistryKey:string,
RegistryValueData:string,
RegistryValueName:string,
RemoteDeviceName:string,
RemoteIP:string,
RemotePort:int,
RemoteUrl:string,
ReportId:long,
SHA1:string,
SHA256:string,
Timestamp:datetime,
TimeGenerated:datetime,
FileSize:long,
InitiatingProcessCreationTime:datetime,
InitiatingProcessFileSize:long,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoFileDescription:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
ProcessCreationTime:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceEventsExpand {
DeviceEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
AccountDomain=tostring(events.properties.AccountDomain),
AccountName=tostring(events.properties.AccountName),
AccountSid=tostring(events.properties.AccountSid),
ActionType=tostring(events.properties.ActionType),
AdditionalFields=todynamic(events.properties.AdditionalFields),
AppGuardContainerId=tostring(events.properties.AppGuardContainerId),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
FileName=tostring(events.properties.FileName),
FileOriginIP=tostring(events.properties.FileOriginIP),
FileOriginUrl=tostring(events.properties.FileOriginUrl),
FolderPath=tostring(events.properties.FolderPath),
InitiatingProcessAccountDomain=tostring(events.properties.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.properties.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.properties.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.properties.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.properties.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.properties.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.properties.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.properties.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.properties.InitiatingProcessId),
InitiatingProcessLogonId=tolong(events.properties.InitiatingProcessLogonId),
InitiatingProcessMD5=tostring(events.properties.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.properties.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.properties.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.properties.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.properties.InitiatingProcessSHA256),
LocalIP=tostring(events.properties.LocalIP),
LocalPort=toint(events.properties.LocalPort),
LogonId=tolong(events.properties.LogonId),
MD5=tostring(events.properties.MD5),
MachineGroup=tostring(events.properties.MachineGroup),
ProcessCommandLine=tostring(events.properties.ProcessCommandLine),
ProcessId=tolong(events.properties.ProcessId),
ProcessTokenElevation=tostring(events.properties.ProcessTokenElevation),
RegistryKey=tostring(events.properties.RegistryKey),
RegistryValueData=tostring(events.properties.RegistryValueData),
RegistryValueName=tostring(events.properties.RegistryValueName),
RemoteDeviceName=tostring(events.properties.RemoteDeviceName),
RemoteIP=tostring(events.properties.RemoteIP),
RemotePort=toint(events.properties.RemotePort),
RemoteUrl=tostring(events.properties.RemoteUrl),
ReportId=tolong(events.properties.ReportId),
SHA1=tostring(events.properties.SHA1),
SHA256=tostring(events.properties.SHA256),
Timestamp=todatetime(events.properties.Timestamp),
TimeGenerated=todatetime(events.properties.Timestamp),
FileSize=tolong(events.properties.FileSize),
InitiatingProcessCreationTime=todatetime(events.properties.InitiatingProcessCreationTime),
InitiatingProcessFileSize=tolong(events.properties.InitiatingProcessFileSize),
InitiatingProcessParentCreationTime=todatetime(events.properties.InitiatingProcessParentCreationTime),
InitiatingProcessVersionInfoCompanyName=tostring(events.properties.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoFileDescription=tostring(events.properties.InitiatingProcessVersionInfoFileDescription),
InitiatingProcessVersionInfoInternalFileName=tostring(events.properties.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.properties.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoProductName=tostring(events.properties.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.properties.InitiatingProcessVersionInfoProductVersion),
ProcessCreationTime=todatetime(events.properties.ProcessCreationTime),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring(events.properties.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table DeviceEvents policy update @'[{"Source": "DeviceEventsRaw", "Query": "DeviceEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceEvents policy update @'[{"Source": "DeviceEventsRaw", "Query": "DeviceEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceFileCertificateInfoRaw (records:dynamic)

.create-or-alter table DeviceFileCertificateInfoRaw ingestion json mapping 'DeviceFileCertificateInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceFileCertificateInfo(
TenantId:string,
CertificateSerialNumber:string,
CrlDistributionPointUrls:string,
DeviceId:string,
DeviceName:string,
IsRootSignerMicrosoft:bool,
IsSigned:bool,
IsTrusted:bool,
Issuer:string,
IssuerHash:string,
MachineGroup:string,
ReportId:long,
SHA1:string,
SignatureType:string,
Signer:string,
SignerHash:string,
Timestamp:datetime,
TimeGenerated:datetime,
CertificateCountersignatureTime:datetime,
CertificateCreationTime:datetime,
CertificateExpirationTime:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceFileCertificateInfoExpand {
DeviceFileCertificateInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
CertificateSerialNumber=tostring(events.properties.CertificateSerialNumber),
CrlDistributionPointUrls=tostring(events.properties.CrlDistributionPointUrls),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
IsRootSignerMicrosoft=tobool(events.properties.IsRootSignerMicrosoft),
IsSigned=tobool(events.properties.IsSigned),
IsTrusted=tobool(events.properties.IsTrusted),
Issuer=tostring(events.properties.Issuer),
IssuerHash=tostring(events.properties.IssuerHash),
MachineGroup=tostring(events.properties.MachineGroup),
ReportId=tolong(events.properties.ReportId),
SHA1=tostring(events.properties.SHA1),
SignatureType=tostring(events.properties.SignatureType),
Signer=tostring(events.properties.Signer),
SignerHash=tostring(events.properties.SignerHash),
Timestamp=todatetime(events.properties.Timestamp),
TimeGenerated=todatetime(events.properties.Timestamp),
CertificateCountersignatureTime=todatetime(events.properties.CertificateCountersignatureTime),
CertificateCreationTime=todatetime(events.properties.CertificateCreationTime),
CertificateExpirationTime=todatetime(events.properties.CertificateExpirationTime),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring(events.properties.Type),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table DeviceFileCertificateInfo policy update @'[{"Source": "DeviceFileCertificateInfoRaw", "Query": "DeviceFileCertificateInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceFileCertificateInfo policy update @'[{"Source": "DeviceFileCertificateInfoRaw", "Query": "DeviceFileCertificateInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceFileEventsRaw (records:dynamic)

.create-or-alter table DeviceFileEventsRaw ingestion json mapping 'DeviceFileEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceFileEvents(
TenantId:string,
ActionType:string,
AdditionalFields:dynamic,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
FileName:string,
FileOriginIP:string,
FileOriginReferrerUrl:string,
FileOriginUrl:string,
FileSize:long,
FolderPath:string,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessIntegrityLevel:string,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
InitiatingProcessTokenElevation:string,
IsAzureInfoProtectionApplied:bool,
MD5:string,
MachineGroup:string,
PreviousFileName:string,
PreviousFolderPath:string,
ReportId:long,
RequestAccountDomain:string,
RequestAccountName:string,
RequestAccountSid:string,
RequestProtocol:string,
RequestSourceIP:string,
RequestSourcePort:int,
SHA1:string,
SHA256:string,
SensitivityLabel:string,
SensitivitySubLabel:string,
ShareName:string,
Timestamp:datetime,
TimeGenerated:datetime,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessCreationTime:datetime,
InitiatingProcessFileSize:long,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoFileDescription:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceFileEventsExpand {
DeviceFileEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
ActionType=tostring(events.ActionType),
AdditionalFields=todynamic(events.AdditionalFields),
AppGuardContainerId=tostring(events.AppGuardContainerId),
DeviceId=tostring(events.DeviceId),
DeviceName=tostring(events.DeviceName),
FileName=tostring(events.FileName),
FileOriginIP=tostring(events.FileOriginIP),
FileOriginReferrerUrl=tostring(events.FileOriginReferrerUrl),
FileOriginUrl=tostring(events.FileOriginUrl),
FileSize=tolong(events.FileSize),
FolderPath=tostring(events.FolderPath),
InitiatingProcessAccountDomain=tostring(events.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.InitiatingProcessId),
InitiatingProcessIntegrityLevel=tostring(events.InitiatingProcessIntegrityLevel),
InitiatingProcessMD5=tostring(events.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.InitiatingProcessSHA256),
InitiatingProcessTokenElevation=tostring(events.InitiatingProcessTokenElevation),
IsAzureInfoProtectionApplied=tobool(events.IsAzureInfoProtectionApplied),
MD5=tostring(events.MD5),
MachineGroup=tostring(events.MachineGroup),
PreviousFileName=tostring(events.PreviousFileName),
PreviousFolderPath=tostring(events.PreviousFolderPath),
ReportId=tolong(events.ReportId),
RequestAccountDomain=tostring(events.RequestAccountDomain),
RequestAccountName=tostring(events.RequestAccountName),
RequestAccountSid=tostring(events.RequestAccountSid),
RequestProtocol=tostring(events.RequestProtocol),
RequestSourceIP=tostring(events.RequestSourceIP),
RequestSourcePort=toint(events.RequestSourcePort),
SHA1=tostring(events.SHA1),
SHA256=tostring(events.SHA256),
SensitivityLabel=tostring(events.SensitivityLabel),
SensitivitySubLabel=tostring(events.SensitivitySubLabel),
ShareName=tostring(events.ShareName),
Timestamp=todatetime(events.Timestamp),
TimeGenerated=todatetime(events.TimeGenerated),
InitiatingProcessParentCreationTime=todatetime(events.InitiatingProcessParentCreationTime),
InitiatingProcessCreationTime=todatetime(events.InitiatingProcessCreationTime),
InitiatingProcessFileSize=tolong(events.InitiatingProcessFileSize),
InitiatingProcessVersionInfoCompanyName=tostring(events.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoFileDescription=tostring(events.InitiatingProcessVersionInfoFileDescription),
InitiatingProcessVersionInfoInternalFileName=tostring(events.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoProductName=tostring(events.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.InitiatingProcessVersionInfoProductVersion),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table DeviceFileEvents policy update @'[{"Source": "DeviceFileEventsRaw", "Query": "DeviceFileEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceFileEvents policy update @'[{"Source": "DeviceFileEventsRaw", "Query": "DeviceFileEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceImageLoadEventsRaw (records:dynamic)

.create-or-alter table DeviceImageLoadEventsRaw ingestion json mapping 'DeviceImageLoadEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceImageLoadEvents(
TenantId:string,
ActionType:string,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
FileName:string,
FolderPath:string,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessIntegrityLevel:string,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
InitiatingProcessTokenElevation:string,
MD5:string,
MachineGroup:string,
ReportId:long,
SHA1:string,
SHA256:string,
Timestamp:datetime,
TimeGenerated:datetime,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessCreationTime:datetime,
InitiatingProcessFileSize:long,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoFileDescription:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
FileSize:long,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceImageLoadEventsExpand {
DeviceImageLoadEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
ActionType=tostring(events.properties.ActionType),
AppGuardContainerId=tostring(events.properties.AppGuardContainerId),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
FileName=tostring(events.properties.FileName),
FolderPath=tostring(events.properties.FolderPath),
InitiatingProcessAccountDomain=tostring(events.properties.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.properties.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.properties.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.properties.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.properties.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.properties.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.properties.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.properties.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.properties.InitiatingProcessId),
InitiatingProcessIntegrityLevel=tostring(events.properties.InitiatingProcessIntegrityLevel),
InitiatingProcessMD5=tostring(events.properties.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.properties.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.properties.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.properties.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.properties.InitiatingProcessSHA256),
InitiatingProcessTokenElevation=tostring(events.properties.InitiatingProcessTokenElevation),
MD5=tostring(events.properties.MD5),
MachineGroup=tostring(events.properties.MachineGroup),
ReportId=tolong(events.properties.ReportId),
SHA1=tostring(events.properties.SHA1),
SHA256=tostring(events.properties.SHA256),
Timestamp=todatetime(events.properties.properties.Timestamp),
TimeGenerated=todatetime(events.properties.properties.Timestamp),
InitiatingProcessParentCreationTime=todatetime(events.properties.InitiatingProcessParentCreationTime),
InitiatingProcessCreationTime=todatetime(events.properties.InitiatingProcessCreationTime),
InitiatingProcessFileSize=tolong(events.properties.InitiatingProcessFileSize),
InitiatingProcessVersionInfoCompanyName=tostring(events.properties.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoFileDescription=tostring(events.properties.InitiatingProcessVersionInfoFileDescription),
InitiatingProcessVersionInfoInternalFileName=tostring(events.properties.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.properties.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoProductName=tostring(events.properties.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.properties.InitiatingProcessVersionInfoProductVersion),
FileSize=tolong(events.properties.FileSize),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring('DeviceImageLoadEvents'),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table DeviceImageLoadEvents policy update @'[{"Source": "DeviceImageLoadEventsRaw", "Query": "DeviceImageLoadEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceImageLoadEvents policy update @'[{"Source": "DeviceImageLoadEventsRaw", "Query": "DeviceImageLoadEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceInfoRaw (records:dynamic)

.create-or-alter table DeviceInfoRaw ingestion json mapping 'DeviceInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceInfo(
TenantId:string,
AdditionalFields:dynamic,
ClientVersion:string,
DeviceId:string,
DeviceName:string,
DeviceObjectId:string,
IsAzureADJoined:bool,
LoggedOnUsers:dynamic,
MachineGroup:string,
OSArchitecture:string,
OSBuild:long,
OSPlatform:string,
OSVersion:string,
PublicIP:string,
RegistryDeviceTag:string,
ReportId:long,
TimeGenerated:datetime,
Timestamp:datetime,
AadDeviceId:string,
DeviceCategory:string,
DeviceSubtype:string,
DeviceType:string,
JoinType:string,
MergedDeviceIds:string,
MergedToDeviceId:string,
Model:string,
OnboardingStatus:string,
OSDistribution:string,
OSVersionInfo:string,
Vendor:string,
SensorHealthState:string,
IsExcluded:bool,
ExclusionReason:string,
AssetValue:string,
ExposureLevel:string,
IsInternetFacing:bool,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceInfoExpand {
DeviceInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
AdditionalFields=todynamic(events.AdditionalFields),
ClientVersion=tostring(events.ClientVersion),
DeviceId=tostring(events.DeviceId),
DeviceName=tostring(events.DeviceName),
DeviceObjectId=tostring(events.DeviceObjectId),
IsAzureADJoined=tobool(events.IsAzureADJoined),
LoggedOnUsers=todynamic(events.LoggedOnUsers),
MachineGroup=tostring(events.MachineGroup),
OSArchitecture=tostring(events.OSArchitecture),
OSBuild=tolong(events.OSBuild),
OSPlatform=tostring(events.OSPlatform),
OSVersion=tostring(events.OSVersion),
PublicIP=tostring(events.PublicIP),
RegistryDeviceTag=tostring(events.RegistryDeviceTag),
ReportId=tolong(events.ReportId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
AadDeviceId=tostring(events.AadDeviceId),
DeviceCategory=tostring(events.DeviceCategory),
DeviceSubtype=tostring(events.DeviceSubtype),
DeviceType=tostring(events.DeviceType),
JoinType=tostring(events.JoinType),
MergedDeviceIds=tostring(events.MergedDeviceIds),
MergedToDeviceId=tostring(events.MergedToDeviceId),
Model=tostring(events.Model),
OnboardingStatus=tostring(events.OnboardingStatus),
OSDistribution=tostring(events.OSDistribution),
OSVersionInfo=tostring(events.OSVersionInfo),
Vendor=tostring(events.Vendor),
SensorHealthState=tostring(events.SensorHealthState),
IsExcluded=tobool(events.IsExcluded),
ExclusionReason=tostring(events.ExclusionReason),
AssetValue=tostring(events.AssetValue),
ExposureLevel=tostring(events.ExposureLevel),
IsInternetFacing=tobool(events.IsInternetFacing),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table DeviceInfo policy update @'[{"Source": "DeviceInfoRaw", "Query": "DeviceInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceInfo policy update @'[{"Source": "DeviceInfoRaw", "Query": "DeviceInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceLogonEventsRaw (records:dynamic)

.create-or-alter table DeviceLogonEventsRaw ingestion json mapping 'DeviceLogonEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceLogonEvents(
TenantId:string,
AccountDomain:string,
AccountName:string,
AccountSid:string,
ActionType:string,
AdditionalFields:dynamic,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
FailureReason:string,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessIntegrityLevel:string,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
InitiatingProcessTokenElevation:string,
IsLocalAdmin:bool,
LogonId:long,
LogonType:string,
MachineGroup:string,
Protocol:string,
RemoteDeviceName:string,
RemoteIP:string,
RemoteIPType:string,
RemotePort:int,
ReportId:long,
Timestamp:datetime,
TimeGenerated:datetime,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessCreationTime:datetime,
InitiatingProcessFileSize:long,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoFileDescription:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceLogonEventsExpand {
DeviceLogonEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
AccountDomain=tostring(events.properties.AccountDomain),
AccountName=tostring(events.properties.AccountName),
AccountSid=tostring(events.properties.AccountSid),
ActionType=tostring(events.properties.ActionType),
AdditionalFields=todynamic(events.properties.AdditionalFields),
AppGuardContainerId=tostring(events.properties.AppGuardContainerId),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
FailureReason=tostring(events.properties.FailureReason),
InitiatingProcessAccountDomain=tostring(events.properties.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.properties.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.properties.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.properties.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.properties.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.properties.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.properties.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.properties.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.properties.InitiatingProcessId),
InitiatingProcessIntegrityLevel=tostring(events.properties.InitiatingProcessIntegrityLevel),
InitiatingProcessMD5=tostring(events.properties.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.properties.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.properties.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.properties.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.properties.InitiatingProcessSHA256),
InitiatingProcessTokenElevation=tostring(events.properties.InitiatingProcessTokenElevation),
IsLocalAdmin=tobool(events.properties.IsLocalAdmin),
LogonId=tolong(events.properties.LogonId),
LogonType=tostring(events.properties.LogonType),
MachineGroup=tostring(events.properties.MachineGroup),
Protocol=tostring(events.properties.Protocol),
RemoteDeviceName=tostring(events.properties.RemoteDeviceName),
RemoteIP=tostring(events.properties.RemoteIP),
RemoteIPType=tostring(events.properties.RemoteIPType),
RemotePort=toint(events.properties.RemotePort),
ReportId=tolong(events.properties.ReportId),
Timestamp=todatetime(events.properties.Timestamp),
TimeGenerated=todatetime(events.properties.Timestamp),
InitiatingProcessParentCreationTime=todatetime(events.properties.InitiatingProcessParentCreationTime),
InitiatingProcessCreationTime=todatetime(events.properties.InitiatingProcessCreationTime),
InitiatingProcessFileSize=tolong(events.properties.InitiatingProcessFileSize),
InitiatingProcessVersionInfoCompanyName=tostring(events.properties.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoFileDescription=tostring(events.properties.InitiatingProcessVersionInfoFileDescription),
InitiatingProcessVersionInfoInternalFileName=tostring(events.properties.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.properties.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoProductName=tostring(events.properties.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.properties.InitiatingProcessVersionInfoProductVersion),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring(events.properties.Type),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table DeviceLogonEvents policy update @'[{"Source": "DeviceLogonEventsRaw", "Query": "DeviceLogonEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceLogonEvents policy update @'[{"Source": "DeviceLogonEventsRaw", "Query": "DeviceLogonEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceNetworkEventsRaw (records:dynamic)

.create-or-alter table DeviceNetworkEventsRaw ingestion json mapping 'DeviceNetworkEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceNetworkEvents(
TenantId:string,
ActionType:string,
AdditionalFields:dynamic,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessIntegrityLevel:string,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
InitiatingProcessTokenElevation:string,
InitiatingProcessFileSize:long,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoFileDescription:string,
LocalIP:string,
LocalIPType:string,
LocalPort:int,
MachineGroup:string,
Protocol:string,
RemoteIP:string,
RemoteIPType:string,
RemotePort:int,
RemoteUrl:string,
ReportId:long,
TimeGenerated:datetime,
Timestamp:datetime,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessCreationTime:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceNetworkEventsExpand {
DeviceNetworkEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
ActionType=tostring(events.properties.ActionType),
AdditionalFields=todynamic(events.properties.AdditionalFields),
AppGuardContainerId=tostring(events.properties.AppGuardContainerId),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
InitiatingProcessAccountDomain=tostring(events.properties.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.properties.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.properties.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.properties.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.properties.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.properties.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.properties.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.properties.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.properties.InitiatingProcessId),
InitiatingProcessIntegrityLevel=tostring(events.properties.InitiatingProcessIntegrityLevel),
InitiatingProcessMD5=tostring(events.properties.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.properties.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.properties.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.properties.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.properties.InitiatingProcessSHA256),
InitiatingProcessTokenElevation=tostring(events.properties.InitiatingProcessTokenElevation),
InitiatingProcessFileSize=tolong(events.properties.InitiatingProcessFileSize),
InitiatingProcessVersionInfoCompanyName=tostring(events.properties.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoProductName=tostring(events.properties.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.properties.InitiatingProcessVersionInfoProductVersion),
InitiatingProcessVersionInfoInternalFileName=tostring(events.properties.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.properties.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoFileDescription=tostring(events.properties.InitiatingProcessVersionInfoFileDescription),
LocalIP=tostring(events.properties.LocalIP),
LocalIPType=tostring(events.properties.LocalIPType),
LocalPort=toint(events.properties.LocalPort),
MachineGroup=tostring(events.properties.MachineGroup),
Protocol=tostring(events.properties.Protocol),
RemoteIP=tostring(events.properties.RemoteIP),
RemoteIPType=tostring(events.properties.RemoteIPType),
RemotePort=toint(events.properties.RemotePort),
RemoteUrl=tostring(events.properties.RemoteUrl),
ReportId=tolong(events.properties.ReportId),
TimeGenerated=todatetime(events.properties.Timestamp),
Timestamp=todatetime(events.properties.Timestamp),
InitiatingProcessParentCreationTime=todatetime(events.properties.InitiatingProcessParentCreationTime),
InitiatingProcessCreationTime=todatetime(events.properties.InitiatingProcessCreationTime),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring('DeviceNetworkEvents'),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table DeviceNetworkEvents policy update @'[{"Source": "DeviceNetworkEventsRaw", "Query": "DeviceNetworkEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceNetworkEvents policy update @'[{"Source": "DeviceNetworkEventsRaw", "Query": "DeviceNetworkEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceNetworkInfoRaw (records:dynamic)

.create-or-alter table DeviceNetworkInfoRaw ingestion json mapping 'DeviceNetworkInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceNetworkInfo(
TenantId:string,
ConnectedNetworks:dynamic,
DefaultGateways:dynamic,
DeviceId:string,
DeviceName:string,
DnsAddresses:dynamic,
IPAddresses:dynamic,
IPv4Dhcp:string,
IPv6Dhcp:string,
MacAddress:string,
MachineGroup:string,
NetworkAdapterName:string,
NetworkAdapterStatus:string,
NetworkAdapterType:string,
ReportId:long,
TimeGenerated:datetime,
Timestamp:datetime,
TunnelType:string,
NetworkAdapterVendor:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceNetworkInfoExpand {
DeviceNetworkInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
ConnectedNetworks=todynamic(events.ConnectedNetworks),
DefaultGateways=todynamic(events.DefaultGateways),
DeviceId=tostring(events.DeviceId),
DeviceName=tostring(events.DeviceName),
DnsAddresses=todynamic(events.DnsAddresses),
IPAddresses=todynamic(events.IPAddresses),
IPv4Dhcp=tostring(events.IPv4Dhcp),
IPv6Dhcp=tostring(events.IPv6Dhcp),
MacAddress=tostring(events.MacAddress),
MachineGroup=tostring(events.MachineGroup),
NetworkAdapterName=tostring(events.NetworkAdapterName),
NetworkAdapterStatus=tostring(events.NetworkAdapterStatus),
NetworkAdapterType=tostring(events.NetworkAdapterType),
ReportId=tolong(events.ReportId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
TunnelType=tostring(events.TunnelType),
NetworkAdapterVendor=tostring(events.NetworkAdapterVendor),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table DeviceNetworkInfo policy update @'[{"Source": "DeviceNetworkInfoRaw", "Query": "DeviceNetworkInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceNetworkInfo policy update @'[{"Source": "DeviceNetworkInfoRaw", "Query": "DeviceNetworkInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DeviceProcessEventsRaw (records:dynamic)

.create-or-alter table DeviceProcessEventsRaw ingestion json mapping 'DeviceProcessEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceProcessEvents(
TenantId:string,
AccountDomain:string,
AccountName:string,
AccountObjectId:string,
AccountSid:string,
AccountUpn:string,
ActionType:string,
AdditionalFields:dynamic,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
FileName:string,
FolderPath:string,
FileSize:long,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessIntegrityLevel:string,
InitiatingProcessLogonId:long,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
InitiatingProcessTokenElevation:string,
InitiatingProcessFileSize:long,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoFileDescription:string,
LogonId:long,
MD5:string,
MachineGroup:string,
ProcessCommandLine:string,
ProcessCreationTime:datetime,
ProcessId:long,
ProcessIntegrityLevel:string,
ProcessTokenElevation:string,
ProcessVersionInfoCompanyName:string,
ProcessVersionInfoProductName:string,
ProcessVersionInfoProductVersion:string,
ProcessVersionInfoInternalFileName:string,
ProcessVersionInfoOriginalFileName:string,
ProcessVersionInfoFileDescription:string,
InitiatingProcessSignerType:string,
InitiatingProcessSignatureStatus:string,
ReportId:long,
SHA1:string,
SHA256:string,
TimeGenerated:datetime,
Timestamp:datetime,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessCreationTime:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceProcessEventsExpand {
DeviceProcessEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
AccountDomain=tostring(events.AccountDomain),
AccountName=tostring(events.AccountName),
AccountObjectId=tostring(events.AccountObjectId),
AccountSid=tostring(events.AccountSid),
AccountUpn=tostring(events.AccountUpn),
ActionType=tostring(events.ActionType),
AdditionalFields=todynamic(events.AdditionalFields),
AppGuardContainerId=tostring(events.AppGuardContainerId),
DeviceId=tostring(events.DeviceId),
DeviceName=tostring(events.DeviceName),
FileName=tostring(events.FileName),
FolderPath=tostring(events.FolderPath),
FileSize=tolong(events.FileSize),
InitiatingProcessAccountDomain=tostring(events.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.InitiatingProcessId),
InitiatingProcessIntegrityLevel=tostring(events.InitiatingProcessIntegrityLevel),
InitiatingProcessLogonId=tolong(events.InitiatingProcessLogonId),
InitiatingProcessMD5=tostring(events.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.InitiatingProcessSHA256),
InitiatingProcessTokenElevation=tostring(events.InitiatingProcessTokenElevation),
InitiatingProcessFileSize=tolong(events.InitiatingProcessFileSize),
InitiatingProcessVersionInfoCompanyName=tostring(events.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoProductName=tostring(events.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.InitiatingProcessVersionInfoProductVersion),
InitiatingProcessVersionInfoInternalFileName=tostring(events.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoFileDescription=tostring(events.InitiatingProcessVersionInfoFileDescription),
LogonId=tolong(events.LogonId),
MD5=tostring(events.MD5),
MachineGroup=tostring(events.MachineGroup),
ProcessCommandLine=tostring(events.ProcessCommandLine),
ProcessCreationTime=todatetime(events.ProcessCreationTime),
ProcessId=tolong(events.ProcessId),
ProcessIntegrityLevel=tostring(events.ProcessIntegrityLevel),
ProcessTokenElevation=tostring(events.ProcessTokenElevation),
ProcessVersionInfoCompanyName=tostring(events.ProcessVersionInfoCompanyName),
ProcessVersionInfoProductName=tostring(events.ProcessVersionInfoProductName),
ProcessVersionInfoProductVersion=tostring(events.ProcessVersionInfoProductVersion),
ProcessVersionInfoInternalFileName=tostring(events.ProcessVersionInfoInternalFileName),
ProcessVersionInfoOriginalFileName=tostring(events.ProcessVersionInfoOriginalFileName),
ProcessVersionInfoFileDescription=tostring(events.ProcessVersionInfoFileDescription),
InitiatingProcessSignerType=tostring(events.InitiatingProcessSignerType),
InitiatingProcessSignatureStatus=tostring(events.InitiatingProcessSignatureStatus),
ReportId=tolong(events.ReportId),
SHA1=tostring(events.SHA1),
SHA256=tostring(events.SHA256),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
InitiatingProcessParentCreationTime=todatetime(events.InitiatingProcessParentCreationTime),
InitiatingProcessCreationTime=todatetime(events.InitiatingProcessCreationTime),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table DeviceProcessEvents policy update @'[{"Source": "DeviceProcessEventsRaw", "Query": "DeviceProcessEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceProcessEvents policy update @'[{"Source": "DeviceProcessEventsRaw", "Query": "DeviceProcessEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'





