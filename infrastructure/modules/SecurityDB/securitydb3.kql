
.create-merge table DeviceRegistryEventsRaw (records:dynamic)

.create-or-alter table DeviceRegistryEventsRaw ingestion json mapping 'DeviceRegistryEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DeviceRegistryEvents(
TenantId:string,
ActionType:string,
AppGuardContainerId:string,
DeviceId:string,
DeviceName:string,
InitiatingProcessAccountDomain:string,
InitiatingProcessAccountName:string,
InitiatingProcessAccountObjectId:string,
InitiatingProcessAccountSid:string,
InitiatingProcessAccountUpn:string,
InitiatingProcessCommandLine:string,
InitiatingProcessFileName:string,
InitiatingProcessFolderPath:string,
InitiatingProcessId:long,
InitiatingProcessIntegrityLevel:string,
InitiatingProcessMD5:string,
InitiatingProcessParentFileName:string,
InitiatingProcessParentId:long,
InitiatingProcessSHA1:string,
InitiatingProcessSHA256:string,
InitiatingProcessTokenElevation:string,
InitiatingProcessFileSize:long,
InitiatingProcessVersionInfoCompanyName:string,
InitiatingProcessVersionInfoProductName:string,
InitiatingProcessVersionInfoProductVersion:string,
InitiatingProcessVersionInfoInternalFileName:string,
InitiatingProcessVersionInfoOriginalFileName:string,
InitiatingProcessVersionInfoFileDescription:string,
MachineGroup:string,
PreviousRegistryKey:string,
PreviousRegistryValueData:string,
PreviousRegistryValueName:string,
RegistryKey:string,
RegistryValueData:string,
RegistryValueName:string,
RegistryValueType:string,
ReportId:long,
TimeGenerated:datetime,
Timestamp:datetime,
InitiatingProcessParentCreationTime:datetime,
InitiatingProcessCreationTime:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DeviceRegistryEventsExpand {
DeviceRegistryEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
ActionType=tostring(events.properties.ActionType),
AppGuardContainerId=tostring(events.properties.AppGuardContainerId),
DeviceId=tostring(events.properties.DeviceId),
DeviceName=tostring(events.properties.DeviceName),
InitiatingProcessAccountDomain=tostring(events.properties.InitiatingProcessAccountDomain),
InitiatingProcessAccountName=tostring(events.properties.InitiatingProcessAccountName),
InitiatingProcessAccountObjectId=tostring(events.properties.InitiatingProcessAccountObjectId),
InitiatingProcessAccountSid=tostring(events.properties.InitiatingProcessAccountSid),
InitiatingProcessAccountUpn=tostring(events.properties.InitiatingProcessAccountUpn),
InitiatingProcessCommandLine=tostring(events.properties.InitiatingProcessCommandLine),
InitiatingProcessFileName=tostring(events.properties.InitiatingProcessFileName),
InitiatingProcessFolderPath=tostring(events.properties.InitiatingProcessFolderPath),
InitiatingProcessId=tolong(events.properties.InitiatingProcessId),
InitiatingProcessIntegrityLevel=tostring(events.properties.InitiatingProcessIntegrityLevel),
InitiatingProcessMD5=tostring(events.properties.InitiatingProcessMD5),
InitiatingProcessParentFileName=tostring(events.properties.InitiatingProcessParentFileName),
InitiatingProcessParentId=tolong(events.properties.InitiatingProcessParentId),
InitiatingProcessSHA1=tostring(events.properties.InitiatingProcessSHA1),
InitiatingProcessSHA256=tostring(events.properties.InitiatingProcessSHA256),
InitiatingProcessTokenElevation=tostring(events.properties.InitiatingProcessTokenElevation),
InitiatingProcessFileSize=tolong(events.properties.InitiatingProcessFileSize),
InitiatingProcessVersionInfoCompanyName=tostring(events.properties.InitiatingProcessVersionInfoCompanyName),
InitiatingProcessVersionInfoProductName=tostring(events.properties.InitiatingProcessVersionInfoProductName),
InitiatingProcessVersionInfoProductVersion=tostring(events.properties.InitiatingProcessVersionInfoProductVersion),
InitiatingProcessVersionInfoInternalFileName=tostring(events.properties.InitiatingProcessVersionInfoInternalFileName),
InitiatingProcessVersionInfoOriginalFileName=tostring(events.properties.InitiatingProcessVersionInfoOriginalFileName),
InitiatingProcessVersionInfoFileDescription=tostring(events.properties.InitiatingProcessVersionInfoFileDescription),
MachineGroup=tostring(events.properties.MachineGroup),
PreviousRegistryKey=tostring(events.properties.PreviousRegistryKey),
PreviousRegistryValueData=tostring(events.properties.PreviousRegistryValueData),
PreviousRegistryValueName=tostring(events.properties.PreviousRegistryValueName),
RegistryKey=tostring(events.properties.RegistryKey),
RegistryValueData=tostring(events.properties.RegistryValueData),
RegistryValueName=tostring(events.properties.RegistryValueName),
RegistryValueType=tostring(events.properties.RegistryValueType),
ReportId=tolong(events.properties.ReportId),
TimeGenerated=todatetime(events.properties.Timestamp),
Timestamp=todatetime(events.properties.Timestamp),
InitiatingProcessParentCreationTime=todatetime(events.properties.InitiatingProcessParentCreationTime),
InitiatingProcessCreationTime=todatetime(events.properties.InitiatingProcessCreationTime),
SourceSystem=tostring(events.properties.SourceSystem),
Type=tostring('DeviceRegistryEvents'),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table DeviceRegistryEvents policy update @'[{"Source": "DeviceRegistryEventsRaw", "Query": "DeviceRegistryEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DeviceRegistryEvents policy update @'[{"Source": "DeviceRegistryEventsRaw", "Query": "DeviceRegistryEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table DnsAuditEventsRaw (records:dynamic)

.create-or-alter table DnsAuditEventsRaw ingestion json mapping 'DnsAuditEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table DnsAuditEvents(
TenantId:string,
Action:string,
ActiveKey:string,
Base64Data:string,
BufferSize:int,
ChildZone:string,
ClientSubnetList:string,
ClientSubnetRecord:string,
Condition:string,
Criteria:string,
CryptoAlgorithm:string,
CurrentRolloverStatus:string,
CurrentState:string,
DenialOfExistence:string,
Digest:string,
DigestType:string,
DistributeTrustAnchor:string,
DnsKeyRecordSetTtl:int,
DnsKeySignatureValidityPeriod:int,
DnsQuery:string,
DnsQueryType:int,
DSRecordGenerationAlgorithm:string,
DSRecordSetTtl:int,
DSSignatureValidityPeriod:int,
EnableRfc5011KeyRollover:string,
EventGuid:string,
EventId:string,
EventString:string,
EventType:string,
FilePath:string,
Forwarders:string,
InitialRolloverOffset:int,
IsEnabled:string,
IsKeyMasterServer:string,
KeyId:string,
KeyLength:int,
KeyMasterServer:string,
KeyOrZone:string,
KeyProtocol:string,
KeyStorageProvider:string,
KeyTag:int,
KeyType:string,
KskOrZsk:string,
LastRolloverTime:datetime,
ListenAddresses:string,
LookupValue:string,
MasterServer:string,
Name:string,
NameServer:string,
NewPropertyValues:string,
NewValue:string,
NextKey:string,
NextRolloverAction:string,
NextRolloverTime:datetime,
NodeName:string,
NSec3HashAlgorithm:int,
NSec3Iterations:int,
NSec3OptOut:string,
NSec3RandomSaltLength:int,
NSec3UserSalt:string,
OldPropertyValues:string,
ParentHasSecureDelegation:string,
Policy:string,
ProcessingOrder:int,
PropagationTime:int,
PropertyKey:string,
RDATA:string,
RecursionScope:string,
ReplicationScope:string,
RolloverPeriod:int,
RolloverType:string,
ScavengeServers:string,
Scope:string,
Scopes:string,
SecureDelegationPollingPeriod:int,
SeizedOrTransferred:string,
ServerName:string,
Setting:string,
SignatureInceptionOffset:int,
Source:string,
StandbyKey:string,
StoreKeysInAD:string,
SubTreeAging:string,
TimeGenerated:datetime,
TTL:int,
VirtualizationID:string,
WithNewKeys:string,
WithWithout:string,
Zone:string,
ZoneFile:string,
ZoneName:string,
ZoneScope:string,
ZoneSignatureValidityPeriod:int,
AdditionalData:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function DnsAuditEventsExpand {
DnsAuditEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
Action=tostring(events.Action),
ActiveKey=tostring(events.ActiveKey),
Base64Data=tostring(events.Base64Data),
BufferSize=toint(events.BufferSize),
ChildZone=tostring(events.ChildZone),
ClientSubnetList=tostring(events.ClientSubnetList),
ClientSubnetRecord=tostring(events.ClientSubnetRecord),
Condition=tostring(events.Condition),
Criteria=tostring(events.Criteria),
CryptoAlgorithm=tostring(events.CryptoAlgorithm),
CurrentRolloverStatus=tostring(events.CurrentRolloverStatus),
CurrentState=tostring(events.CurrentState),
DenialOfExistence=tostring(events.DenialOfExistence),
Digest=tostring(events.Digest),
DigestType=tostring(events.DigestType),
DistributeTrustAnchor=tostring(events.DistributeTrustAnchor),
DnsKeyRecordSetTtl=toint(events.DnsKeyRecordSetTtl),
DnsKeySignatureValidityPeriod=toint(events.DnsKeySignatureValidityPeriod),
DnsQuery=tostring(events.DnsQuery),
DnsQueryType=toint(events.DnsQueryType),
DSRecordGenerationAlgorithm=tostring(events.DSRecordGenerationAlgorithm),
DSRecordSetTtl=toint(events.DSRecordSetTtl),
DSSignatureValidityPeriod=toint(events.DSSignatureValidityPeriod),
EnableRfc5011KeyRollover=tostring(events.EnableRfc5011KeyRollover),
EventGuid=tostring(events.EventGuid),
EventId=tostring(events.EventId),
EventString=tostring(events.EventString),
EventType=tostring(events.EventType),
FilePath=tostring(events.FilePath),
Forwarders=tostring(events.Forwarders),
InitialRolloverOffset=toint(events.InitialRolloverOffset),
IsEnabled=tostring(events.IsEnabled),
IsKeyMasterServer=tostring(events.IsKeyMasterServer),
KeyId=tostring(events.KeyId),
KeyLength=toint(events.KeyLength),
KeyMasterServer=tostring(events.KeyMasterServer),
KeyOrZone=tostring(events.KeyOrZone),
KeyProtocol=tostring(events.KeyProtocol),
KeyStorageProvider=tostring(events.KeyStorageProvider),
KeyTag=toint(events.KeyTag),
KeyType=tostring(events.KeyType),
KskOrZsk=tostring(events.KskOrZsk),
LastRolloverTime=todatetime(events.LastRolloverTime),
ListenAddresses=tostring(events.ListenAddresses),
LookupValue=tostring(events.LookupValue),
MasterServer=tostring(events.MasterServer),
Name=tostring(events.Name),
NameServer=tostring(events.NameServer),
NewPropertyValues=tostring(events.NewPropertyValues),
NewValue=tostring(events.NewValue),
NextKey=tostring(events.NextKey),
NextRolloverAction=tostring(events.NextRolloverAction),
NextRolloverTime=todatetime(events.NextRolloverTime),
NodeName=tostring(events.NodeName),
NSec3HashAlgorithm=toint(events.NSec3HashAlgorithm),
NSec3Iterations=toint(events.NSec3Iterations),
NSec3OptOut=tostring(events.NSec3OptOut),
NSec3RandomSaltLength=toint(events.NSec3RandomSaltLength),
NSec3UserSalt=tostring(events.NSec3UserSalt),
OldPropertyValues=tostring(events.OldPropertyValues),
ParentHasSecureDelegation=tostring(events.ParentHasSecureDelegation),
Policy=tostring(events.Policy),
ProcessingOrder=toint(events.ProcessingOrder),
PropagationTime=toint(events.PropagationTime),
PropertyKey=tostring(events.PropertyKey),
RDATA=tostring(events.RDATA),
RecursionScope=tostring(events.RecursionScope),
ReplicationScope=tostring(events.ReplicationScope),
RolloverPeriod=toint(events.RolloverPeriod),
RolloverType=tostring(events.RolloverType),
ScavengeServers=tostring(events.ScavengeServers),
Scope=tostring(events.Scope),
Scopes=tostring(events.Scopes),
SecureDelegationPollingPeriod=toint(events.SecureDelegationPollingPeriod),
SeizedOrTransferred=tostring(events.SeizedOrTransferred),
ServerName=tostring(events.ServerName),
Setting=tostring(events.Setting),
SignatureInceptionOffset=toint(events.SignatureInceptionOffset),
Source=tostring(events.Source),
StandbyKey=tostring(events.StandbyKey),
StoreKeysInAD=tostring(events.StoreKeysInAD),
SubTreeAging=tostring(events.SubTreeAging),
TimeGenerated=todatetime(events.TimeGenerated),
TTL=toint(events.TTL),
VirtualizationID=tostring(events.VirtualizationID),
WithNewKeys=tostring(events.WithNewKeys),
WithWithout=tostring(events.WithWithout),
Zone=tostring(events.Zone),
ZoneFile=tostring(events.ZoneFile),
ZoneName=tostring(events.ZoneName),
ZoneScope=tostring(events.ZoneScope),
ZoneSignatureValidityPeriod=toint(events.ZoneSignatureValidityPeriod),
AdditionalData=todynamic(events.AdditionalData),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table DnsAuditEvents policy update @'[{"Source": "DnsAuditEventsRaw", "Query": "DnsAuditEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table DnsAuditEvents policy update @'[{"Source": "DnsAuditEventsRaw", "Query": "DnsAuditEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table EmailAttachmentInfoRaw (records:dynamic)

.create-or-alter table EmailAttachmentInfoRaw ingestion json mapping 'EmailAttachmentInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table EmailAttachmentInfo(
TenantId:string,
FileName:string,
FileType:string,
NetworkMessageId:string,
RecipientEmailAddress:string,
RecipientObjectId:string,
ReportId:string,
SHA256:string,
SenderDisplayName:string,
SenderObjectId:string,
ThreatTypes:string,
SenderFromAddress:string,
ThreatNames:string,
DetectionMethods:string,
FileSize:long,
TimeGenerated:datetime,
Timestamp:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function EmailAttachmentInfoExpand {
EmailAttachmentInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
FileName=tostring(events.FileName),
FileType=tostring(events.FileType),
NetworkMessageId=tostring(events.NetworkMessageId),
RecipientEmailAddress=tostring(events.RecipientEmailAddress),
RecipientObjectId=tostring(events.RecipientObjectId),
ReportId=tostring(events.ReportId),
SHA256=tostring(events.SHA256),
SenderDisplayName=tostring(events.SenderDisplayName),
SenderObjectId=tostring(events.SenderObjectId),
ThreatTypes=tostring(events.ThreatTypes),
SenderFromAddress=tostring(events.SenderFromAddress),
ThreatNames=tostring(events.ThreatNames),
DetectionMethods=tostring(events.DetectionMethods),
FileSize=tolong(events.FileSize),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table EmailAttachmentInfo policy update @'[{"Source": "EmailAttachmentInfoRaw", "Query": "EmailAttachmentInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table EmailAttachmentInfo policy update @'[{"Source": "EmailAttachmentInfoRaw", "Query": "EmailAttachmentInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table EmailEventsRaw (records:dynamic)

.create-or-alter table EmailEventsRaw ingestion json mapping 'EmailEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table EmailEvents(
TenantId:string,
AttachmentCount:int,
AuthenticationDetails:string,
AdditionalFields:dynamic,
ConfidenceLevel:string,
Connectors:string,
DetectionMethods:string,
DeliveryAction:string,
DeliveryLocation:string,
EmailClusterId:long,
EmailDirection:string,
EmailLanguage:string,
EmailAction:string,
EmailActionPolicy:string,
EmailActionPolicyGuid:string,
OrgLevelAction:string,
OrgLevelPolicy:string,
InternetMessageId:string,
NetworkMessageId:string,
RecipientEmailAddress:string,
RecipientObjectId:string,
ReportId:string,
SenderDisplayName:string,
SenderFromAddress:string,
SenderFromDomain:string,
SenderObjectId:string,
SenderIPv4:string,
SenderIPv6:string,
SenderMailFromAddress:string,
SenderMailFromDomain:string,
Subject:string,
ThreatTypes:string,
ThreatNames:string,
TimeGenerated:datetime,
Timestamp:datetime,
UrlCount:int,
UserLevelAction:string,
UserLevelPolicy:string,
BulkComplaintLevel:int,
LatestDeliveryLocation:string,
LatestDeliveryAction:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function EmailEventsExpand {
EmailEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
AttachmentCount=toint(events.AttachmentCount),
AuthenticationDetails=tostring(events.AuthenticationDetails),
AdditionalFields=todynamic(events.AdditionalFields),
ConfidenceLevel=tostring(events.ConfidenceLevel),
Connectors=tostring(events.Connectors),
DetectionMethods=tostring(events.DetectionMethods),
DeliveryAction=tostring(events.DeliveryAction),
DeliveryLocation=tostring(events.DeliveryLocation),
EmailClusterId=tolong(events.EmailClusterId),
EmailDirection=tostring(events.EmailDirection),
EmailLanguage=tostring(events.EmailLanguage),
EmailAction=tostring(events.EmailAction),
EmailActionPolicy=tostring(events.EmailActionPolicy),
EmailActionPolicyGuid=tostring(events.EmailActionPolicyGuid),
OrgLevelAction=tostring(events.OrgLevelAction),
OrgLevelPolicy=tostring(events.OrgLevelPolicy),
InternetMessageId=tostring(events.InternetMessageId),
NetworkMessageId=tostring(events.NetworkMessageId),
RecipientEmailAddress=tostring(events.RecipientEmailAddress),
RecipientObjectId=tostring(events.RecipientObjectId),
ReportId=tostring(events.ReportId),
SenderDisplayName=tostring(events.SenderDisplayName),
SenderFromAddress=tostring(events.SenderFromAddress),
SenderFromDomain=tostring(events.SenderFromDomain),
SenderObjectId=tostring(events.SenderObjectId),
SenderIPv4=tostring(events.SenderIPv4),
SenderIPv6=tostring(events.SenderIPv6),
SenderMailFromAddress=tostring(events.SenderMailFromAddress),
SenderMailFromDomain=tostring(events.SenderMailFromDomain),
Subject=tostring(events.Subject),
ThreatTypes=tostring(events.ThreatTypes),
ThreatNames=tostring(events.ThreatNames),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
UrlCount=toint(events.UrlCount),
UserLevelAction=tostring(events.UserLevelAction),
UserLevelPolicy=tostring(events.UserLevelPolicy),
BulkComplaintLevel=toint(events.BulkComplaintLevel),
LatestDeliveryLocation=tostring(events.LatestDeliveryLocation),
LatestDeliveryAction=tostring(events.LatestDeliveryAction),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table EmailEvents policy update @'[{"Source": "EmailEventsRaw", "Query": "EmailEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table EmailEvents policy update @'[{"Source": "EmailEventsRaw", "Query": "EmailEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table EmailPostDeliveryEventsRaw (records:dynamic)

.create-or-alter table EmailPostDeliveryEventsRaw ingestion json mapping 'EmailPostDeliveryEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table EmailPostDeliveryEvents(
TenantId:string,
Action:string,
ActionResult:string,
ActionTrigger:string,
ActionType:string,
DeliveryLocation:string,
InternetMessageId:string,
NetworkMessageId:string,
RecipientEmailAddress:string,
ReportId:string,
ThreatTypes:string,
DetectionMethods:string,
TimeGenerated:datetime,
Timestamp:datetime,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function EmailPostDeliveryEventsExpand {
EmailPostDeliveryEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
Action=tostring(events.Action),
ActionResult=tostring(events.ActionResult),
ActionTrigger=tostring(events.ActionTrigger),
ActionType=tostring(events.ActionType),
DeliveryLocation=tostring(events.DeliveryLocation),
InternetMessageId=tostring(events.InternetMessageId),
NetworkMessageId=tostring(events.NetworkMessageId),
RecipientEmailAddress=tostring(events.RecipientEmailAddress),
ReportId=tostring(events.ReportId),
ThreatTypes=tostring(events.ThreatTypes),
DetectionMethods=tostring(events.DetectionMethods),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table EmailPostDeliveryEvents policy update @'[{"Source": "EmailPostDeliveryEventsRaw", "Query": "EmailPostDeliveryEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table EmailPostDeliveryEvents policy update @'[{"Source": "EmailPostDeliveryEventsRaw", "Query": "EmailPostDeliveryEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table EmailUrlInfoRaw (records:dynamic)

.create-or-alter table EmailUrlInfoRaw ingestion json mapping 'EmailUrlInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table EmailUrlInfo(
TenantId:string,
NetworkMessageId:string,
ReportId:string,
TimeGenerated:datetime,
Timestamp:datetime,
Url:string,
UrlLocation:string,
UrlDomain:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function EmailUrlInfoExpand {
EmailUrlInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
NetworkMessageId=tostring(events.NetworkMessageId),
ReportId=tostring(events.ReportId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
Url=tostring(events.Url),
UrlLocation=tostring(events.UrlLocation),
UrlDomain=tostring(events.UrlDomain),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table EmailUrlInfo policy update @'[{"Source": "EmailUrlInfoRaw", "Query": "EmailUrlInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table EmailUrlInfo policy update @'[{"Source": "EmailUrlInfoRaw", "Query": "EmailUrlInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table HuntingBookmarkRaw (records:dynamic)

.create-or-alter table HuntingBookmarkRaw ingestion json mapping 'HuntingBookmarkRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table HuntingBookmark(
TenantId:string,
TimeGenerated:datetime,
BookmarkId:string,
BookmarkName:string,
BookmarkType:string,
CreatedBy:string,
UpdatedBy:string,
CreatedTime:datetime,
LastUpdatedTime:datetime,
EventTime:datetime,
QueryText:string,
QueryResultRow:string,
QueryStartTime:datetime,
QueryEndTime:datetime,
Notes:string,
Entities:string,
SoftDeleted:bool,
Tags:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function HuntingBookmarkExpand {
HuntingBookmarkRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
BookmarkId=tostring(events.BookmarkId),
BookmarkName=tostring(events.BookmarkName),
BookmarkType=tostring(events.BookmarkType),
CreatedBy=tostring(events.CreatedBy),
UpdatedBy=tostring(events.UpdatedBy),
CreatedTime=todatetime(events.CreatedTime),
LastUpdatedTime=todatetime(events.LastUpdatedTime),
EventTime=todatetime(events.EventTime),
QueryText=tostring(events.QueryText),
QueryResultRow=tostring(events.QueryResultRow),
QueryStartTime=todatetime(events.QueryStartTime),
QueryEndTime=todatetime(events.QueryEndTime),
Notes=tostring(events.Notes),
Entities=tostring(events.Entities),
SoftDeleted=tobool(events.SoftDeleted),
Tags=tostring(events.Tags),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table HuntingBookmark policy update @'[{"Source": "HuntingBookmarkRaw", "Query": "HuntingBookmarkExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table HuntingBookmark policy update @'[{"Source": "HuntingBookmarkRaw", "Query": "HuntingBookmarkExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table IdentityDirectoryEventsRaw (records:dynamic)

.create-or-alter table IdentityDirectoryEventsRaw ingestion json mapping 'IdentityDirectoryEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table IdentityDirectoryEvents(
TenantId:string,
TimeGenerated:datetime,
Timestamp:datetime,
ActionType:string,
Application:string,
Protocol:string,
AccountName:string,
AccountDomain:string,
AccountUpn:string,
AccountSid:string,
AccountObjectId:string,
AccountDisplayName:string,
DeviceName:string,
IPAddress:string,
Port:string,
DestinationDeviceName:string,
DestinationIPAddress:string,
DestinationPort:string,
TargetDeviceName:string,
TargetAccountUpn:string,
TargetAccountDisplayName:string,
Location:string,
ISP:string,
ReportId:string,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function IdentityDirectoryEventsExpand {
IdentityDirectoryEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
ActionType=tostring(events.ActionType),
Application=tostring(events.Application),
Protocol=tostring(events.Protocol),
AccountName=tostring(events.AccountName),
AccountDomain=tostring(events.AccountDomain),
AccountUpn=tostring(events.AccountUpn),
AccountSid=tostring(events.AccountSid),
AccountObjectId=tostring(events.AccountObjectId),
AccountDisplayName=tostring(events.AccountDisplayName),
DeviceName=tostring(events.DeviceName),
IPAddress=tostring(events.IPAddress),
Port=tostring(events.Port),
DestinationDeviceName=tostring(events.DestinationDeviceName),
DestinationIPAddress=tostring(events.DestinationIPAddress),
DestinationPort=tostring(events.DestinationPort),
TargetDeviceName=tostring(events.TargetDeviceName),
TargetAccountUpn=tostring(events.TargetAccountUpn),
TargetAccountDisplayName=tostring(events.TargetAccountDisplayName),
Location=tostring(events.Location),
ISP=tostring(events.ISP),
ReportId=tostring(events.ReportId),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table IdentityDirectoryEvents policy update @'[{"Source": "IdentityDirectoryEventsRaw", "Query": "IdentityDirectoryEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table IdentityDirectoryEvents policy update @'[{"Source": "IdentityDirectoryEventsRaw", "Query": "IdentityDirectoryEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table IdentityInfoRaw (records:dynamic)

.create-or-alter table IdentityInfoRaw ingestion json mapping 'IdentityInfoRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table IdentityInfo(
TenantId:string,
TimeGenerated:datetime,
AccountName:string,
AccountDomain:string,
AccountUPN:string,
AccountSID:string,
AccountObjectId:string,
AccountTenantId:string,
AccountDisplayName:string,
GivenName:string,
Surname:string,
OnPremisesAccountObjectId:string,
OnPremisesExtensionAttributes:string,
OnPremisesDistinguishedName:string,
Tags:string,
AccountCreationTime:datetime,
InvestigationPriority:int,
InvestigationPriorityPercentile:int,
RiskLevel:string,
RiskLevelDetails:string,
RiskState:string,
BlastRadius:string,
GroupMembership:dynamic,
AssignedRoles:dynamic,
Department:string,
EmployeeId:string,
JobTitle:string,
RelatedAccounts:dynamic,
MailAddress:string,
AdditionalMailAddresses:dynamic,
Manager:string,
StreetAddress:string,
City:string,
CompanyName:string,
Country:string,
State:string,
Phone:string,
IsAccountEnabled:bool,
IsServiceAccount:bool,
DeletedDateTime:datetime,
LastSeenDate:datetime,
UACFlags:string,
UserState:string,
UserStateChangedOn:datetime,
UserType:string,
ExtensionProperty:dynamic,
AccountCloudSID:string,
IsMFARegistered:bool,
Applications:string,
ServicePrincipals:dynamic,
SourceSystem:string,
UserAccountControl:dynamic,
ChangeSource:string,
EntityRiskScore:dynamic,
SAMAccountName:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function IdentityInfoExpand {
IdentityInfoRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AccountName=tostring(events.AccountName),
AccountDomain=tostring(events.AccountDomain),
AccountUPN=tostring(events.AccountUPN),
AccountSID=tostring(events.AccountSID),
AccountObjectId=tostring(events.AccountObjectId),
AccountTenantId=tostring(events.AccountTenantId),
AccountDisplayName=tostring(events.AccountDisplayName),
GivenName=tostring(events.GivenName),
Surname=tostring(events.Surname),
OnPremisesAccountObjectId=tostring(events.OnPremisesAccountObjectId),
OnPremisesExtensionAttributes=tostring(events.OnPremisesExtensionAttributes),
OnPremisesDistinguishedName=tostring(events.OnPremisesDistinguishedName),
Tags=tostring(events.Tags),
AccountCreationTime=todatetime(events.AccountCreationTime),
InvestigationPriority=toint(events.InvestigationPriority),
InvestigationPriorityPercentile=toint(events.InvestigationPriorityPercentile),
RiskLevel=tostring(events.RiskLevel),
RiskLevelDetails=tostring(events.RiskLevelDetails),
RiskState=tostring(events.RiskState),
BlastRadius=tostring(events.BlastRadius),
GroupMembership=todynamic(events.GroupMembership),
AssignedRoles=todynamic(events.AssignedRoles),
Department=tostring(events.Department),
EmployeeId=tostring(events.EmployeeId),
JobTitle=tostring(events.JobTitle),
RelatedAccounts=todynamic(events.RelatedAccounts),
MailAddress=tostring(events.MailAddress),
AdditionalMailAddresses=todynamic(events.AdditionalMailAddresses),
Manager=tostring(events.Manager),
StreetAddress=tostring(events.StreetAddress),
City=tostring(events.City),
CompanyName=tostring(events.CompanyName),
Country=tostring(events.Country),
State=tostring(events.State),
Phone=tostring(events.Phone),
IsAccountEnabled=tobool(events.IsAccountEnabled),
IsServiceAccount=tobool(events.IsServiceAccount),
DeletedDateTime=todatetime(events.DeletedDateTime),
LastSeenDate=todatetime(events.LastSeenDate),
UACFlags=tostring(events.UACFlags),
UserState=tostring(events.UserState),
UserStateChangedOn=todatetime(events.UserStateChangedOn),
UserType=tostring(events.UserType),
ExtensionProperty=todynamic(events.ExtensionProperty),
AccountCloudSID=tostring(events.AccountCloudSID),
IsMFARegistered=tobool(events.IsMFARegistered),
Applications=tostring(events.Applications),
ServicePrincipals=todynamic(events.ServicePrincipals),
SourceSystem=tostring(events.SourceSystem),
UserAccountControl=todynamic(events.UserAccountControl),
ChangeSource=tostring(events.ChangeSource),
EntityRiskScore=todynamic(events.EntityRiskScore),
SAMAccountName=tostring(events.SAMAccountName),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table IdentityInfo policy update @'[{"Source": "IdentityInfoRaw", "Query": "IdentityInfoExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table IdentityInfo policy update @'[{"Source": "IdentityInfoRaw", "Query": "IdentityInfoExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table IdentityLogonEventsRaw (records:dynamic)

.create-or-alter table IdentityLogonEventsRaw ingestion json mapping 'IdentityLogonEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table IdentityLogonEvents(
TenantId:string,
TimeGenerated:datetime,
Timestamp:datetime,
ActionType:string,
Application:string,
LogonType:string,
Protocol:string,
FailureReason:string,
AccountName:string,
AccountDomain:string,
AccountUpn:string,
AccountSid:string,
AccountObjectId:string,
AccountDisplayName:string,
DeviceName:string,
DeviceType:string,
OSPlatform:string,
IPAddress:string,
Port:string,
DestinationDeviceName:string,
DestinationIPAddress:string,
DestinationPort:string,
TargetDeviceName:string,
TargetAccountDisplayName:string,
Location:string,
ISP:string,
ReportId:string,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function IdentityLogonEventsExpand {
IdentityLogonEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
ActionType=tostring(events.ActionType),
Application=tostring(events.Application),
LogonType=tostring(events.LogonType),
Protocol=tostring(events.Protocol),
FailureReason=tostring(events.FailureReason),
AccountName=tostring(events.AccountName),
AccountDomain=tostring(events.AccountDomain),
AccountUpn=tostring(events.AccountUpn),
AccountSid=tostring(events.AccountSid),
AccountObjectId=tostring(events.AccountObjectId),
AccountDisplayName=tostring(events.AccountDisplayName),
DeviceName=tostring(events.DeviceName),
DeviceType=tostring(events.DeviceType),
OSPlatform=tostring(events.OSPlatform),
IPAddress=tostring(events.IPAddress),
Port=tostring(events.Port),
DestinationDeviceName=tostring(events.DestinationDeviceName),
DestinationIPAddress=tostring(events.DestinationIPAddress),
DestinationPort=tostring(events.DestinationPort),
TargetDeviceName=tostring(events.TargetDeviceName),
TargetAccountDisplayName=tostring(events.TargetAccountDisplayName),
Location=tostring(events.Location),
ISP=tostring(events.ISP),
ReportId=tostring(events.ReportId),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table IdentityLogonEvents policy update @'[{"Source": "IdentityLogonEventsRaw", "Query": "IdentityLogonEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table IdentityLogonEvents policy update @'[{"Source": "IdentityLogonEventsRaw", "Query": "IdentityLogonEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table IdentityQueryEventsRaw (records:dynamic)

.create-or-alter table IdentityQueryEventsRaw ingestion json mapping 'IdentityQueryEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table IdentityQueryEvents(
TenantId:string,
TimeGenerated:datetime,
Timestamp:datetime,
ActionType:string,
Application:string,
QueryType:string,
QueryTarget:string,
Query:string,
Protocol:string,
AccountName:string,
AccountDomain:string,
AccountUpn:string,
AccountSid:string,
AccountObjectId:string,
AccountDisplayName:string,
DeviceName:string,
IPAddress:string,
Port:string,
DestinationDeviceName:string,
DestinationIPAddress:string,
DestinationPort:string,
TargetDeviceName:string,
TargetAccountUpn:string,
TargetAccountDisplayName:string,
Location:string,
ReportId:string,
AdditionalFields:dynamic,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function IdentityQueryEventsExpand {
IdentityQueryEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
Timestamp=todatetime(events.Timestamp),
ActionType=tostring(events.ActionType),
Application=tostring(events.Application),
QueryType=tostring(events.QueryType),
QueryTarget=tostring(events.QueryTarget),
Query=tostring(events.Query),
Protocol=tostring(events.Protocol),
AccountName=tostring(events.AccountName),
AccountDomain=tostring(events.AccountDomain),
AccountUpn=tostring(events.AccountUpn),
AccountSid=tostring(events.AccountSid),
AccountObjectId=tostring(events.AccountObjectId),
AccountDisplayName=tostring(events.AccountDisplayName),
DeviceName=tostring(events.DeviceName),
IPAddress=tostring(events.IPAddress),
Port=tostring(events.Port),
DestinationDeviceName=tostring(events.DestinationDeviceName),
DestinationIPAddress=tostring(events.DestinationIPAddress),
DestinationPort=tostring(events.DestinationPort),
TargetDeviceName=tostring(events.TargetDeviceName),
TargetAccountUpn=tostring(events.TargetAccountUpn),
TargetAccountDisplayName=tostring(events.TargetAccountDisplayName),
Location=tostring(events.Location),
ReportId=tostring(events.ReportId),
AdditionalFields=todynamic(events.AdditionalFields),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table IdentityQueryEvents policy update @'[{"Source": "IdentityQueryEventsRaw", "Query": "IdentityQueryEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table IdentityQueryEvents policy update @'[{"Source": "IdentityQueryEventsRaw", "Query": "IdentityQueryEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table MicrosoftGraphActivityLogsRaw (records:dynamic)

.create-or-alter table MicrosoftGraphActivityLogsRaw ingestion json mapping 'MicrosoftGraphActivityLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table MicrosoftGraphActivityLogs(
TenantId:string,
TimeGenerated:datetime,
Location:string,
RequestId:string,
OperationId:string,
ClientRequestId:string,
ApiVersion:string,
RequestMethod:string,
ResponseStatusCode:int,
AadTenantId:string,
IPAddress:string,
UserAgent:string,
RequestUri:string,
DurationMs:int,
ResponseSizeBytes:int,
SignInActivityId:string,
Roles:string,
TokenIssuedAt:datetime,
AppId:string,
UserId:string,
ServicePrincipalId:string,
Scopes:string,
IdentityProvider:string,
ClientAuthMethod:int,
Wids:string,
ATContent:string,
ATContentH:string,
ATContentP:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function MicrosoftGraphActivityLogsExpand {
MicrosoftGraphActivityLogsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
TimeGenerated=todatetime(events.['time']),
Location=tostring(events.location),
RequestId=tostring(events.properties.requestId),
OperationId=tostring(events.properties.operationId),
ClientRequestId=tostring(events.properties.clientRequestId),
ApiVersion=tostring(events.properties.apiVersion),
RequestMethod=tostring(events.properties.requestMethod),
ResponseStatusCode=toint(events.properties.responseStatusCode),
AadTenantId=tostring(events.properties.tenantId),
IPAddress=tostring(events.properties.ipAddress),
UserAgent=tostring(events.properties.userAgent),
RequestUri=tostring(events.properties.requestUri),
DurationMs=toint(events.properties.durationMs),
ResponseSizeBytes=toint(events.properties.responseSizeBytes),
SignInActivityId=tostring(events.properties.signInActivityId),
Roles=tostring(events.properties.roles),
TokenIssuedAt=todatetime(events.properties.tokenIssuedAt),
AppId=tostring(events.properties.appId),
UserId=tostring(events.properties.UserPrincipalObjectID),
ServicePrincipalId=tostring(events.properties.servicePrincipalObjectID),
Scopes=tostring(events.properties.scopes),
IdentityProvider=tostring(events.properties.identityProvider),
ClientAuthMethod=toint(events.properties.clientAuthMethod),
Wids=tostring(events.properties.wids),
ATContent=tostring(events.properties.atContent),
ATContentH=tostring(events.properties.atContentH),
ATContentP=tostring(events.properties.atContentP),
SourceSystem=tostring(''),
Type=tostring('MicrosoftGraphActivityLogs'),
_ItemId=tostring(''),
_ResourceId=tostring(events.resourceId),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table MicrosoftGraphActivityLogs policy update @'[{"Source": "MicrosoftGraphActivityLogsRaw", "Query": "MicrosoftGraphActivityLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table MicrosoftGraphActivityLogs policy update @'[{"Source": "MicrosoftGraphActivityLogsRaw", "Query": "MicrosoftGraphActivityLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table OfficeActivityRaw (records:dynamic)

.create-or-alter table OfficeActivityRaw ingestion json mapping 'OfficeActivityRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table OfficeActivity(
TenantId:string,
Application:string,
UserDomain:string,
Activity:string,
UserAgent:string,
RecordType:string,
TimeGenerated:datetime,
Operation:string,
OrganizationId:string,
OrganizationId_:string,
UserType:string,
UserKey:string,
OfficeWorkload:string,
ResultStatus:string,
ResultReasonType:string,
OfficeObjectId:string,
UserId:string,
UserId_:string,
ClientIP:string,
ClientIP_:string,
Scope:string,
Site_:string,
ItemType:string,
EventSource:string,
Source_Name:string,
MachineDomainInfo:string,
MachineId:string,
Site_Url:string,
Site_Url_:string,
SourceRelativeUrl:string,
SourceRelativeUrl_:string,
SourceFileName:string,
SourceFileName_:string,
SourceFileExtension:string,
DestinationRelativeUrl:string,
DestinationFileName:string,
DestinationFileExtension:string,
UserSharedWith:string,
SharingType:string,
CustomEvent:string,
Event_Data:string,
ModifiedObjectResolvedName:string,
Parameters:string,
ExternalAccess:string,
OriginatingServer:string,
OrganizationName:string,
Logon_Type:string,
InternalLogonType:int,
MailboxGuid:string,
MailboxOwnerUPN:string,
MailboxOwnerSid:string,
MailboxOwnerMasterAccountSid:string,
LogonUserSid:string,
LogonUserDisplayName:string,
ClientInfoString:string,
Client_IPAddress:string,
ClientMachineName:string,
ClientProcessName:string,
ClientVersion:string,
Folder:string,
CrossMailboxOperations:bool,
DestMailboxId:string,
DestMailboxOwnerUPN:string,
DestMailboxOwnerSid:string,
DestMailboxOwnerMasterAccountSid:string,
DestFolder:string,
Folders:string,
AffectedItems:string,
Item:string,
ModifiedProperties:string,
SendAsUserSmtp:string,
SendAsUserMailboxGuid:string,
SendOnBehalfOfUserSmtp:string,
SendonBehalfOfUserMailboxGuid:string,
ExtendedProperties:string,
Client:string,
LoginStatus:int,
Actor:string,
ActorContextId:string,
ActorIpAddress:string,
InterSystemsId:string,
IntraSystemId:string,
SupportTicketId:string,
TargetContextId:string,
DataCenterSecurityEventType:int,
EffectiveOrganization:string,
ElevationTime:datetime,
ElevationApprover:string,
ElevationApprovedTime:datetime,
ElevationRequestId:string,
ElevationRole:string,
ElevationDuration:int,
GenericInfo:string,
SourceSystem:string,
OfficeId:string,
SourceRecordId:string,
AzureActiveDirectory_EventType:string,
AADTarget:string,
Start_Time:datetime,
OfficeTenantId:string,
OfficeTenantId_:string,
TargetUserOrGroupName:string,
TargetUserOrGroupType:string,
MessageId:string,
Members:dynamic,
TeamName:string,
TeamGuid:string,
ChannelType:string,
ChannelName:string,
ChannelGuid:string,
ExtraProperties:dynamic,
AddOnType:string,
AddonName:string,
TabType:string,
Name:string,
OldValue:string,
NewValue:string,
ItemName:string,
ChatThreadId:string,
ChatName:string,
CommunicationType:string,
AADGroupId:string,
AddOnGuid:string,
AppDistributionMode:string,
TargetUserId:string,
OperationScope:string,
AzureADAppId:string,
OperationProperties:dynamic,
AppId:string,
ClientAppId:string,
ApplicationId:string,
SRPolicyId:string,
SRPolicyName:string,
SRRuleMatchDetails:dynamic,
IsManagedDevice:bool,
AppPoolName:string,
ActorContextId_:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function OfficeActivityExpand {
OfficeActivityRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
Application=tostring(events.Application),
UserDomain=tostring(events.UserDomain),
Activity=tostring(events.Activity),
UserAgent=tostring(events.UserAgent),
RecordType=tostring(events.RecordType),
TimeGenerated=todatetime(events.TimeGenerated),
Operation=tostring(events.Operation),
OrganizationId=tostring(events.OrganizationId),
OrganizationId_=tostring(events.OrganizationId_),
UserType=tostring(events.UserType),
UserKey=tostring(events.UserKey),
OfficeWorkload=tostring(events.OfficeWorkload),
ResultStatus=tostring(events.ResultStatus),
ResultReasonType=tostring(events.ResultReasonType),
OfficeObjectId=tostring(events.OfficeObjectId),
UserId=tostring(events.UserId),
UserId_=tostring(events.UserId_),
ClientIP=tostring(events.ClientIP),
ClientIP_=tostring(events.ClientIP_),
Scope=tostring(events.Scope),
Site_=tostring(events.Site_),
ItemType=tostring(events.ItemType),
EventSource=tostring(events.EventSource),
Source_Name=tostring(events.Source_Name),
MachineDomainInfo=tostring(events.MachineDomainInfo),
MachineId=tostring(events.MachineId),
Site_Url=tostring(events.Site_Url),
Site_Url_=tostring(events.Site_Url_),
SourceRelativeUrl=tostring(events.SourceRelativeUrl),
SourceRelativeUrl_=tostring(events.SourceRelativeUrl_),
SourceFileName=tostring(events.SourceFileName),
SourceFileName_=tostring(events.SourceFileName_),
SourceFileExtension=tostring(events.SourceFileExtension),
DestinationRelativeUrl=tostring(events.DestinationRelativeUrl),
DestinationFileName=tostring(events.DestinationFileName),
DestinationFileExtension=tostring(events.DestinationFileExtension),
UserSharedWith=tostring(events.UserSharedWith),
SharingType=tostring(events.SharingType),
CustomEvent=tostring(events.CustomEvent),
Event_Data=tostring(events.Event_Data),
ModifiedObjectResolvedName=tostring(events.ModifiedObjectResolvedName),
Parameters=tostring(events.Parameters),
ExternalAccess=tostring(events.ExternalAccess),
OriginatingServer=tostring(events.OriginatingServer),
OrganizationName=tostring(events.OrganizationName),
Logon_Type=tostring(events.Logon_Type),
InternalLogonType=toint(events.InternalLogonType),
MailboxGuid=tostring(events.MailboxGuid),
MailboxOwnerUPN=tostring(events.MailboxOwnerUPN),
MailboxOwnerSid=tostring(events.MailboxOwnerSid),
MailboxOwnerMasterAccountSid=tostring(events.MailboxOwnerMasterAccountSid),
LogonUserSid=tostring(events.LogonUserSid),
LogonUserDisplayName=tostring(events.LogonUserDisplayName),
ClientInfoString=tostring(events.ClientInfoString),
Client_IPAddress=tostring(events.Client_IPAddress),
ClientMachineName=tostring(events.ClientMachineName),
ClientProcessName=tostring(events.ClientProcessName),
ClientVersion=tostring(events.ClientVersion),
Folder=tostring(events.Folder),
CrossMailboxOperations=tobool(events.CrossMailboxOperations),
DestMailboxId=tostring(events.DestMailboxId),
DestMailboxOwnerUPN=tostring(events.DestMailboxOwnerUPN),
DestMailboxOwnerSid=tostring(events.DestMailboxOwnerSid),
DestMailboxOwnerMasterAccountSid=tostring(events.DestMailboxOwnerMasterAccountSid),
DestFolder=tostring(events.DestFolder),
Folders=tostring(events.Folders),
AffectedItems=tostring(events.AffectedItems),
Item=tostring(events.Item),
ModifiedProperties=tostring(events.ModifiedProperties),
SendAsUserSmtp=tostring(events.SendAsUserSmtp),
SendAsUserMailboxGuid=tostring(events.SendAsUserMailboxGuid),
SendOnBehalfOfUserSmtp=tostring(events.SendOnBehalfOfUserSmtp),
SendonBehalfOfUserMailboxGuid=tostring(events.SendonBehalfOfUserMailboxGuid),
ExtendedProperties=tostring(events.ExtendedProperties),
Client=tostring(events.Client),
LoginStatus=toint(events.LoginStatus),
Actor=tostring(events.Actor),
ActorContextId=tostring(events.ActorContextId),
ActorIpAddress=tostring(events.ActorIpAddress),
InterSystemsId=tostring(events.InterSystemsId),
IntraSystemId=tostring(events.IntraSystemId),
SupportTicketId=tostring(events.SupportTicketId),
TargetContextId=tostring(events.TargetContextId),
DataCenterSecurityEventType=toint(events.DataCenterSecurityEventType),
EffectiveOrganization=tostring(events.EffectiveOrganization),
ElevationTime=todatetime(events.ElevationTime),
ElevationApprover=tostring(events.ElevationApprover),
ElevationApprovedTime=todatetime(events.ElevationApprovedTime),
ElevationRequestId=tostring(events.ElevationRequestId),
ElevationRole=tostring(events.ElevationRole),
ElevationDuration=toint(events.ElevationDuration),
GenericInfo=tostring(events.GenericInfo),
SourceSystem=tostring(events.SourceSystem),
OfficeId=tostring(events.OfficeId),
SourceRecordId=tostring(events.SourceRecordId),
AzureActiveDirectory_EventType=tostring(events.AzureActiveDirectory_EventType),
AADTarget=tostring(events.AADTarget),
Start_Time=todatetime(events.Start_Time),
OfficeTenantId=tostring(events.OfficeTenantId),
OfficeTenantId_=tostring(events.OfficeTenantId_),
TargetUserOrGroupName=tostring(events.TargetUserOrGroupName),
TargetUserOrGroupType=tostring(events.TargetUserOrGroupType),
MessageId=tostring(events.MessageId),
Members=todynamic(events.Members),
TeamName=tostring(events.TeamName),
TeamGuid=tostring(events.TeamGuid),
ChannelType=tostring(events.ChannelType),
ChannelName=tostring(events.ChannelName),
ChannelGuid=tostring(events.ChannelGuid),
ExtraProperties=todynamic(events.ExtraProperties),
AddOnType=tostring(events.AddOnType),
AddonName=tostring(events.AddonName),
TabType=tostring(events.TabType),
Name=tostring(events.Name),
OldValue=tostring(events.OldValue),
NewValue=tostring(events.NewValue),
ItemName=tostring(events.ItemName),
ChatThreadId=tostring(events.ChatThreadId),
ChatName=tostring(events.ChatName),
CommunicationType=tostring(events.CommunicationType),
AADGroupId=tostring(events.AADGroupId),
AddOnGuid=tostring(events.AddOnGuid),
AppDistributionMode=tostring(events.AppDistributionMode),
TargetUserId=tostring(events.TargetUserId),
OperationScope=tostring(events.OperationScope),
AzureADAppId=tostring(events.AzureADAppId),
OperationProperties=todynamic(events.OperationProperties),
AppId=tostring(events.AppId),
ClientAppId=tostring(events.ClientAppId),
ApplicationId=tostring(events.ApplicationId),
SRPolicyId=tostring(events.SRPolicyId),
SRPolicyName=tostring(events.SRPolicyName),
SRRuleMatchDetails=todynamic(events.SRRuleMatchDetails),
IsManagedDevice=tobool(events.IsManagedDevice),
AppPoolName=tostring(events.AppPoolName),
ActorContextId_=tostring(events.ActorContextId_),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table OfficeActivity policy update @'[{"Source": "OfficeActivityRaw", "Query": "OfficeActivityExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table OfficeActivity policy update @'[{"Source": "OfficeActivityRaw", "Query": "OfficeActivityExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table SecurityAlertRaw (records:dynamic)

.create-or-alter table SecurityAlertRaw ingestion json mapping 'SecurityAlertRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table SecurityAlert(
TenantId:string,
TimeGenerated:datetime,
DisplayName:string,
AlertName:string,
AlertSeverity:string,
Description:string,
ProviderName:string,
VendorName:string,
VendorOriginalId:string,
SystemAlertId:string,
ResourceId:string,
SourceComputerId:string,
AlertType:string,
ConfidenceLevel:string,
ConfidenceScore:real,
IsIncident:bool,
StartTime:datetime,
EndTime:datetime,
ProcessingEndTime:datetime,
RemediationSteps:string,
ExtendedProperties:string,
Entities:string,
SourceSystem:string,
WorkspaceSubscriptionId:string,
WorkspaceResourceGroup:string,
ExtendedLinks:string,
ProductName:string,
ProductComponentName:string,
AlertLink:string,
Status:string,
CompromisedEntity:string,
Tactics:string,
Techniques:string,
SubTechniques:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function SecurityAlertExpand {
SecurityAlertRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
DisplayName=tostring(events.DisplayName),
AlertName=tostring(events.AlertName),
AlertSeverity=tostring(events.AlertSeverity),
Description=tostring(events.Description),
ProviderName=tostring(events.ProviderName),
VendorName=tostring(events.VendorName),
VendorOriginalId=tostring(events.VendorOriginalId),
SystemAlertId=tostring(events.SystemAlertId),
ResourceId=tostring(events.ResourceId),
SourceComputerId=tostring(events.SourceComputerId),
AlertType=tostring(events.AlertType),
ConfidenceLevel=tostring(events.ConfidenceLevel),
ConfidenceScore=toreal(events.ConfidenceScore),
IsIncident=tobool(events.IsIncident),
StartTime=todatetime(events.StartTime),
EndTime=todatetime(events.EndTime),
ProcessingEndTime=todatetime(events.ProcessingEndTime),
RemediationSteps=tostring(events.RemediationSteps),
ExtendedProperties=tostring(events.ExtendedProperties),
Entities=tostring(events.Entities),
SourceSystem=tostring(events.SourceSystem),
WorkspaceSubscriptionId=tostring(events.WorkspaceSubscriptionId),
WorkspaceResourceGroup=tostring(events.WorkspaceResourceGroup),
ExtendedLinks=tostring(events.ExtendedLinks),
ProductName=tostring(events.ProductName),
ProductComponentName=tostring(events.ProductComponentName),
AlertLink=tostring(events.AlertLink),
Status=tostring(events.Status),
CompromisedEntity=tostring(events.CompromisedEntity),
Tactics=tostring(events.Tactics),
Techniques=tostring(events.Techniques),
SubTechniques=tostring(events.SubTechniques),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table SecurityAlert policy update @'[{"Source": "SecurityAlertRaw", "Query": "SecurityAlertExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table SecurityAlert policy update @'[{"Source": "SecurityAlertRaw", "Query": "SecurityAlertExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table SecurityEventRaw (records:dynamic)

.create-or-alter table SecurityEventRaw ingestion json mapping 'SecurityEventRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table SecurityEvent(
TenantId:string,
TimeGenerated:datetime,
SourceSystem:string,
Account:string,
AccountType:string,
Computer:string,
EventSourceName:string,
Channel:string,
Task:int,
Level:string,
EventData:string,
EventID:int,
Activity:string,
PartitionKey:string,
RowKey:string,
StorageAccount:string,
AzureDeploymentID:string,
AzureTableName:string,
AccessList:string,
AccessMask:string,
AccessReason:string,
AccountDomain:string,
AccountExpires:string,
AccountName:string,
AccountSessionIdentifier:string,
AdditionalInfo:string,
AdditionalInfo2:string,
AllowedToDelegateTo:string,
Attributes:string,
AuditPolicyChanges:string,
AuditsDiscarded:int,
AuthenticationLevel:int,
AuthenticationPackageName:string,
AuthenticationProvider:string,
AuthenticationServer:string,
AuthenticationService:int,
AuthenticationType:string,
CACertificateHash:string,
CalledStationID:string,
CallerProcessId:string,
CallerProcessName:string,
CallingStationID:string,
CAPublicKeyHash:string,
CategoryId:string,
CertificateDatabaseHash:string,
ClassId:string,
ClassName:string,
ClientAddress:string,
ClientIPAddress:string,
ClientName:string,
CommandLine:string,
CompatibleIds:string,
DCDNSName:string,
DeviceDescription:string,
DeviceId:string,
DisplayName:string,
Disposition:string,
DomainBehaviorVersion:string,
DomainName:string,
DomainPolicyChanged:string,
DomainSid:string,
EAPType:string,
ElevatedToken:string,
ErrorCode:int,
ExtendedQuarantineState:string,
FailureReason:string,
FileHash:string,
FilePath:string,
FilePathNoUser:string,
Filter:string,
ForceLogoff:string,
Fqbn:string,
FullyQualifiedSubjectMachineName:string,
FullyQualifiedSubjectUserName:string,
GroupMembership:string,
HandleId:string,
HardwareIds:string,
HomeDirectory:string,
HomePath:string,
ImpersonationLevel:string,
InterfaceUuid:string,
IpAddress:string,
IpPort:string,
KeyLength:int,
LmPackageName:string,
LocationInformation:string,
LockoutDuration:string,
LockoutObservationWindow:string,
LockoutThreshold:string,
LoggingResult:string,
LogonGuid:string,
LogonHours:string,
LogonID:string,
LogonProcessName:string,
LogonType:int,
LogonTypeName:string,
MachineAccountQuota:string,
MachineInventory:string,
MachineLogon:string,
MandatoryLabel:string,
MaxPasswordAge:string,
MemberName:string,
MemberSid:string,
MinPasswordAge:string,
MinPasswordLength:string,
MixedDomainMode:string,
NASIdentifier:string,
NASIPv4Address:string,
NASIPv6Address:string,
NASPort:string,
NASPortType:string,
NetworkPolicyName:string,
NewDate:string,
NewMaxUsers:string,
NewProcessId:string,
NewProcessName:string,
NewRemark:string,
NewShareFlags:string,
NewTime:string,
NewUacValue:string,
NewValue:string,
NewValueType:string,
ObjectName:string,
ObjectServer:string,
ObjectType:string,
ObjectValueName:string,
OemInformation:string,
OldMaxUsers:string,
OldRemark:string,
OldShareFlags:string,
OldUacValue:string,
OldValue:string,
OldValueType:string,
OperationType:string,
PackageName:string,
ParentProcessName:string,
PasswordHistoryLength:string,
PasswordLastSet:string,
PasswordProperties:string,
PreviousDate:string,
PreviousTime:string,
PrimaryGroupId:string,
PrivateKeyUsageCount:string,
PrivilegeList:string,
Process:string,
ProcessId:string,
ProcessName:string,
Properties:string,
ProfilePath:string,
ProtocolSequence:string,
ProxyPolicyName:string,
QuarantineHelpURL:string,
QuarantineSessionID:string,
QuarantineSessionIdentifier:string,
QuarantineState:string,
QuarantineSystemHealthResult:string,
RelativeTargetName:string,
RemoteIpAddress:string,
RemotePort:string,
Requester:string,
RequestId:string,
RestrictedAdminMode:string,
RowsDeleted:string,
SamAccountName:string,
ScriptPath:string,
SecurityDescriptor:string,
ServiceAccount:string,
ServiceFileName:string,
ServiceName:string,
ServiceStartType:int,
ServiceType:string,
SessionName:string,
ShareLocalPath:string,
ShareName:string,
SidHistory:string,
Status:string,
SubjectAccount:string,
SubcategoryGuid:string,
SubcategoryId:string,
Subject:string,
SubjectDomainName:string,
SubjectKeyIdentifier:string,
SubjectLogonId:string,
SubjectMachineName:string,
SubjectMachineSID:string,
SubjectUserName:string,
SubjectUserSid:string,
SubStatus:string,
TableId:string,
TargetAccount:string,
TargetDomainName:string,
TargetInfo:string,
TargetLinkedLogonId:string,
TargetLogonGuid:string,
TargetLogonId:string,
TargetOutboundDomainName:string,
TargetOutboundUserName:string,
TargetServerName:string,
TargetSid:string,
TargetUser:string,
TargetUserName:string,
TargetUserSid:string,
TemplateContent:string,
TemplateDSObjectFQDN:string,
TemplateInternalName:string,
TemplateOID:string,
TemplateSchemaVersion:string,
TemplateVersion:string,
TokenElevationType:string,
TransmittedServices:string,
UserAccountControl:string,
UserParameters:string,
UserPrincipalName:string,
UserWorkstations:string,
VirtualAccount:string,
VendorIds:string,
Workstation:string,
WorkstationName:string,
EventLevelName:string,
SourceComputerId:string,
EventOriginId:string,
MG:string,
TimeCollected:datetime,
ManagementGroupName:string,
SystemUserId:string,
Version:int,
Opcode:string,
Keywords:string,
Correlation:string,
SystemProcessId:int,
SystemThreadId:int,
EventRecordId:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function SecurityEventExpand {
SecurityEventRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
SourceSystem=tostring(events.SourceSystem),
Account=tostring(events.Account),
AccountType=tostring(events.AccountType),
Computer=tostring(events.Computer),
EventSourceName=tostring(events.EventSourceName),
Channel=tostring(events.Channel),
Task=toint(events.Task),
Level=tostring(events.Level),
EventData=tostring(events.EventData),
EventID=toint(events.EventID),
Activity=tostring(events.Activity),
PartitionKey=tostring(events.PartitionKey),
RowKey=tostring(events.RowKey),
StorageAccount=tostring(events.StorageAccount),
AzureDeploymentID=tostring(events.AzureDeploymentID),
AzureTableName=tostring(events.AzureTableName),
AccessList=tostring(events.AccessList),
AccessMask=tostring(events.AccessMask),
AccessReason=tostring(events.AccessReason),
AccountDomain=tostring(events.AccountDomain),
AccountExpires=tostring(events.AccountExpires),
AccountName=tostring(events.AccountName),
AccountSessionIdentifier=tostring(events.AccountSessionIdentifier),
AdditionalInfo=tostring(events.AdditionalInfo),
AdditionalInfo2=tostring(events.AdditionalInfo2),
AllowedToDelegateTo=tostring(events.AllowedToDelegateTo),
Attributes=tostring(events.Attributes),
AuditPolicyChanges=tostring(events.AuditPolicyChanges),
AuditsDiscarded=toint(events.AuditsDiscarded),
AuthenticationLevel=toint(events.AuthenticationLevel),
AuthenticationPackageName=tostring(events.AuthenticationPackageName),
AuthenticationProvider=tostring(events.AuthenticationProvider),
AuthenticationServer=tostring(events.AuthenticationServer),
AuthenticationService=toint(events.AuthenticationService),
AuthenticationType=tostring(events.AuthenticationType),
CACertificateHash=tostring(events.CACertificateHash),
CalledStationID=tostring(events.CalledStationID),
CallerProcessId=tostring(events.CallerProcessId),
CallerProcessName=tostring(events.CallerProcessName),
CallingStationID=tostring(events.CallingStationID),
CAPublicKeyHash=tostring(events.CAPublicKeyHash),
CategoryId=tostring(events.CategoryId),
CertificateDatabaseHash=tostring(events.CertificateDatabaseHash),
ClassId=tostring(events.ClassId),
ClassName=tostring(events.ClassName),
ClientAddress=tostring(events.ClientAddress),
ClientIPAddress=tostring(events.ClientIPAddress),
ClientName=tostring(events.ClientName),
CommandLine=tostring(events.CommandLine),
CompatibleIds=tostring(events.CompatibleIds),
DCDNSName=tostring(events.DCDNSName),
DeviceDescription=tostring(events.DeviceDescription),
DeviceId=tostring(events.DeviceId),
DisplayName=tostring(events.DisplayName),
Disposition=tostring(events.Disposition),
DomainBehaviorVersion=tostring(events.DomainBehaviorVersion),
DomainName=tostring(events.DomainName),
DomainPolicyChanged=tostring(events.DomainPolicyChanged),
DomainSid=tostring(events.DomainSid),
EAPType=tostring(events.EAPType),
ElevatedToken=tostring(events.ElevatedToken),
ErrorCode=toint(events.ErrorCode),
ExtendedQuarantineState=tostring(events.ExtendedQuarantineState),
FailureReason=tostring(events.FailureReason),
FileHash=tostring(events.FileHash),
FilePath=tostring(events.FilePath),
FilePathNoUser=tostring(events.FilePathNoUser),
Filter=tostring(events.Filter),
ForceLogoff=tostring(events.ForceLogoff),
Fqbn=tostring(events.Fqbn),
FullyQualifiedSubjectMachineName=tostring(events.FullyQualifiedSubjectMachineName),
FullyQualifiedSubjectUserName=tostring(events.FullyQualifiedSubjectUserName),
GroupMembership=tostring(events.GroupMembership),
HandleId=tostring(events.HandleId),
HardwareIds=tostring(events.HardwareIds),
HomeDirectory=tostring(events.HomeDirectory),
HomePath=tostring(events.HomePath),
ImpersonationLevel=tostring(events.ImpersonationLevel),
InterfaceUuid=tostring(events.InterfaceUuid),
IpAddress=tostring(events.IpAddress),
IpPort=tostring(events.IpPort),
KeyLength=toint(events.KeyLength),
LmPackageName=tostring(events.LmPackageName),
LocationInformation=tostring(events.LocationInformation),
LockoutDuration=tostring(events.LockoutDuration),
LockoutObservationWindow=tostring(events.LockoutObservationWindow),
LockoutThreshold=tostring(events.LockoutThreshold),
LoggingResult=tostring(events.LoggingResult),
LogonGuid=tostring(events.LogonGuid),
LogonHours=tostring(events.LogonHours),
LogonID=tostring(events.LogonID),
LogonProcessName=tostring(events.LogonProcessName),
LogonType=toint(events.LogonType),
LogonTypeName=tostring(events.LogonTypeName),
MachineAccountQuota=tostring(events.MachineAccountQuota),
MachineInventory=tostring(events.MachineInventory),
MachineLogon=tostring(events.MachineLogon),
MandatoryLabel=tostring(events.MandatoryLabel),
MaxPasswordAge=tostring(events.MaxPasswordAge),
MemberName=tostring(events.MemberName),
MemberSid=tostring(events.MemberSid),
MinPasswordAge=tostring(events.MinPasswordAge),
MinPasswordLength=tostring(events.MinPasswordLength),
MixedDomainMode=tostring(events.MixedDomainMode),
NASIdentifier=tostring(events.NASIdentifier),
NASIPv4Address=tostring(events.NASIPv4Address),
NASIPv6Address=tostring(events.NASIPv6Address),
NASPort=tostring(events.NASPort),
NASPortType=tostring(events.NASPortType),
NetworkPolicyName=tostring(events.NetworkPolicyName),
NewDate=tostring(events.NewDate),
NewMaxUsers=tostring(events.NewMaxUsers),
NewProcessId=tostring(events.NewProcessId),
NewProcessName=tostring(events.NewProcessName),
NewRemark=tostring(events.NewRemark),
NewShareFlags=tostring(events.NewShareFlags),
NewTime=tostring(events.NewTime),
NewUacValue=tostring(events.NewUacValue),
NewValue=tostring(events.NewValue),
NewValueType=tostring(events.NewValueType),
ObjectName=tostring(events.ObjectName),
ObjectServer=tostring(events.ObjectServer),
ObjectType=tostring(events.ObjectType),
ObjectValueName=tostring(events.ObjectValueName),
OemInformation=tostring(events.OemInformation),
OldMaxUsers=tostring(events.OldMaxUsers),
OldRemark=tostring(events.OldRemark),
OldShareFlags=tostring(events.OldShareFlags),
OldUacValue=tostring(events.OldUacValue),
OldValue=tostring(events.OldValue),
OldValueType=tostring(events.OldValueType),
OperationType=tostring(events.OperationType),
PackageName=tostring(events.PackageName),
ParentProcessName=tostring(events.ParentProcessName),
PasswordHistoryLength=tostring(events.PasswordHistoryLength),
PasswordLastSet=tostring(events.PasswordLastSet),
PasswordProperties=tostring(events.PasswordProperties),
PreviousDate=tostring(events.PreviousDate),
PreviousTime=tostring(events.PreviousTime),
PrimaryGroupId=tostring(events.PrimaryGroupId),
PrivateKeyUsageCount=tostring(events.PrivateKeyUsageCount),
PrivilegeList=tostring(events.PrivilegeList),
Process=tostring(events.Process),
ProcessId=tostring(events.ProcessId),
ProcessName=tostring(events.ProcessName),
Properties=tostring(events.Properties),
ProfilePath=tostring(events.ProfilePath),
ProtocolSequence=tostring(events.ProtocolSequence),
ProxyPolicyName=tostring(events.ProxyPolicyName),
QuarantineHelpURL=tostring(events.QuarantineHelpURL),
QuarantineSessionID=tostring(events.QuarantineSessionID),
QuarantineSessionIdentifier=tostring(events.QuarantineSessionIdentifier),
QuarantineState=tostring(events.QuarantineState),
QuarantineSystemHealthResult=tostring(events.QuarantineSystemHealthResult),
RelativeTargetName=tostring(events.RelativeTargetName),
RemoteIpAddress=tostring(events.RemoteIpAddress),
RemotePort=tostring(events.RemotePort),
Requester=tostring(events.Requester),
RequestId=tostring(events.RequestId),
RestrictedAdminMode=tostring(events.RestrictedAdminMode),
RowsDeleted=tostring(events.RowsDeleted),
SamAccountName=tostring(events.SamAccountName),
ScriptPath=tostring(events.ScriptPath),
SecurityDescriptor=tostring(events.SecurityDescriptor),
ServiceAccount=tostring(events.ServiceAccount),
ServiceFileName=tostring(events.ServiceFileName),
ServiceName=tostring(events.ServiceName),
ServiceStartType=toint(events.ServiceStartType),
ServiceType=tostring(events.ServiceType),
SessionName=tostring(events.SessionName),
ShareLocalPath=tostring(events.ShareLocalPath),
ShareName=tostring(events.ShareName),
SidHistory=tostring(events.SidHistory),
Status=tostring(events.Status),
SubjectAccount=tostring(events.SubjectAccount),
SubcategoryGuid=tostring(events.SubcategoryGuid),
SubcategoryId=tostring(events.SubcategoryId),
Subject=tostring(events.Subject),
SubjectDomainName=tostring(events.SubjectDomainName),
SubjectKeyIdentifier=tostring(events.SubjectKeyIdentifier),
SubjectLogonId=tostring(events.SubjectLogonId),
SubjectMachineName=tostring(events.SubjectMachineName),
SubjectMachineSID=tostring(events.SubjectMachineSID),
SubjectUserName=tostring(events.SubjectUserName),
SubjectUserSid=tostring(events.SubjectUserSid),
SubStatus=tostring(events.SubStatus),
TableId=tostring(events.TableId),
TargetAccount=tostring(events.TargetAccount),
TargetDomainName=tostring(events.TargetDomainName),
TargetInfo=tostring(events.TargetInfo),
TargetLinkedLogonId=tostring(events.TargetLinkedLogonId),
TargetLogonGuid=tostring(events.TargetLogonGuid),
TargetLogonId=tostring(events.TargetLogonId),
TargetOutboundDomainName=tostring(events.TargetOutboundDomainName),
TargetOutboundUserName=tostring(events.TargetOutboundUserName),
TargetServerName=tostring(events.TargetServerName),
TargetSid=tostring(events.TargetSid),
TargetUser=tostring(events.TargetUser),
TargetUserName=tostring(events.TargetUserName),
TargetUserSid=tostring(events.TargetUserSid),
TemplateContent=tostring(events.TemplateContent),
TemplateDSObjectFQDN=tostring(events.TemplateDSObjectFQDN),
TemplateInternalName=tostring(events.TemplateInternalName),
TemplateOID=tostring(events.TemplateOID),
TemplateSchemaVersion=tostring(events.TemplateSchemaVersion),
TemplateVersion=tostring(events.TemplateVersion),
TokenElevationType=tostring(events.TokenElevationType),
TransmittedServices=tostring(events.TransmittedServices),
UserAccountControl=tostring(events.UserAccountControl),
UserParameters=tostring(events.UserParameters),
UserPrincipalName=tostring(events.UserPrincipalName),
UserWorkstations=tostring(events.UserWorkstations),
VirtualAccount=tostring(events.VirtualAccount),
VendorIds=tostring(events.VendorIds),
Workstation=tostring(events.Workstation),
WorkstationName=tostring(events.WorkstationName),
EventLevelName=tostring(events.EventLevelName),
SourceComputerId=tostring(events.SourceComputerId),
EventOriginId=tostring(events.EventOriginId),
MG=tostring(events.MG),
TimeCollected=todatetime(events.TimeCollected),
ManagementGroupName=tostring(events.ManagementGroupName),
SystemUserId=tostring(events.SystemUserId),
Version=toint(events.Version),
Opcode=tostring(events.Opcode),
Keywords=tostring(events.Keywords),
Correlation=tostring(events.Correlation),
SystemProcessId=toint(events.SystemProcessId),
SystemThreadId=toint(events.SystemThreadId),
EventRecordId=tostring(events.EventRecordId),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table SecurityEvent policy update @'[{"Source": "SecurityEventRaw", "Query": "SecurityEventExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table SecurityEvent policy update @'[{"Source": "SecurityEventRaw", "Query": "SecurityEventExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table SecurityIncidentRaw (records:dynamic)

.create-or-alter table SecurityIncidentRaw ingestion json mapping 'SecurityIncidentRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table SecurityIncident(
TenantId:string,
TimeGenerated:datetime,
IncidentName:string,
Title:string,
Description:string,
Severity:string,
Status:string,
Classification:string,
ClassificationComment:string,
ClassificationReason:string,
Owner:dynamic,
ProviderName:string,
ProviderIncidentId:string,
FirstActivityTime:datetime,
LastActivityTime:datetime,
FirstModifiedTime:datetime,
LastModifiedTime:datetime,
CreatedTime:datetime,
ClosedTime:datetime,
IncidentNumber:int,
RelatedAnalyticRuleIds:dynamic,
AlertIds:dynamic,
BookmarkIds:dynamic,
Comments:dynamic,
Tasks:dynamic,
Labels:dynamic,
IncidentUrl:string,
AdditionalData:dynamic,
ModifiedBy:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function SecurityIncidentExpand {
SecurityIncidentRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
IncidentName=tostring(events.IncidentName),
Title=tostring(events.Title),
Description=tostring(events.Description),
Severity=tostring(events.Severity),
Status=tostring(events.Status),
Classification=tostring(events.Classification),
ClassificationComment=tostring(events.ClassificationComment),
ClassificationReason=tostring(events.ClassificationReason),
Owner=todynamic(events.Owner),
ProviderName=tostring(events.ProviderName),
ProviderIncidentId=tostring(events.ProviderIncidentId),
FirstActivityTime=todatetime(events.FirstActivityTime),
LastActivityTime=todatetime(events.LastActivityTime),
FirstModifiedTime=todatetime(events.FirstModifiedTime),
LastModifiedTime=todatetime(events.LastModifiedTime),
CreatedTime=todatetime(events.CreatedTime),
ClosedTime=todatetime(events.ClosedTime),
IncidentNumber=toint(events.IncidentNumber),
RelatedAnalyticRuleIds=todynamic(events.RelatedAnalyticRuleIds),
AlertIds=todynamic(events.AlertIds),
BookmarkIds=todynamic(events.BookmarkIds),
Comments=todynamic(events.Comments),
Tasks=todynamic(events.Tasks),
Labels=todynamic(events.Labels),
IncidentUrl=tostring(events.IncidentUrl),
AdditionalData=todynamic(events.AdditionalData),
ModifiedBy=tostring(events.ModifiedBy),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table SecurityIncident policy update @'[{"Source": "SecurityIncidentRaw", "Query": "SecurityIncidentExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table SecurityIncident policy update @'[{"Source": "SecurityIncidentRaw", "Query": "SecurityIncidentExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table SigninLogsRaw (records:dynamic)

.create-or-alter table SigninLogsRaw ingestion json mapping 'SigninLogsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table SigninLogs(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
ResourceId:string,
OperationName:string,
OperationVersion:string,
Category:string,
ResultType:string,
ResultSignature:string,
ResultDescription:string,
DurationMs:long,
CorrelationId:string,
Resource:string,
ResourceGroup:string,
ResourceProvider:string,
Identity:string,
Level:string,
Location:string,
AlternateSignInName:string,
AppDisplayName:string,
AppId:string,
AuthenticationContextClassReferences:string,
AuthenticationDetails:string,
AppliedEventListeners:dynamic,
AuthenticationMethodsUsed:string,
AuthenticationProcessingDetails:string,
AuthenticationRequirement:string,
AuthenticationRequirementPolicies:string,
ClientAppUsed:string,
ConditionalAccessPolicies:dynamic,
ConditionalAccessStatus:string,
CreatedDateTime:datetime,
DeviceDetail:dynamic,
IsInteractive:bool,
Id:string,
IPAddress:string,
IsRisky:bool,
LocationDetails:dynamic,
MfaDetail:dynamic,
NetworkLocationDetails:string,
OriginalRequestId:string,
ProcessingTimeInMilliseconds:string,
RiskDetail:string,
RiskEventTypes:string,
RiskEventTypes_V2:string,
RiskLevelAggregated:string,
RiskLevelDuringSignIn:string,
RiskState:string,
ResourceDisplayName:string,
ResourceIdentity:string,
ResourceServicePrincipalId:string,
ServicePrincipalId:string,
ServicePrincipalName:string,
Status:dynamic,
TokenIssuerName:string,
TokenIssuerType:string,
UserAgent:string,
UserDisplayName:string,
UserId:string,
UserPrincipalName:string,
AADTenantId:string,
UserType:string,
FlaggedForReview:bool,
IPAddressFromResourceProvider:string,
SignInIdentifier:string,
SignInIdentifierType:string,
ResourceTenantId:string,
HomeTenantId:string,
UniqueTokenIdentifier:string,
SessionLifetimePolicies:string,
AutonomousSystemNumber:string,
AuthenticationProtocol:string,
CrossTenantAccessType:string,
AppliedConditionalAccessPolicies:string,
RiskLevel:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function SigninLogsExpand {
SigninLogsRaw
//| extend events = records
| mv-expand events = records
| mv-expand Resource = split(events.resourceId, "/")[-1]
| project
TenantId = tostring(events.tenantId),
SourceSystem=tostring(''),
TimeGenerated=todatetime(events.['time']),
ResourceId = tostring(events.properties.resourceId),
OperationName = tostring(events.operationName),
OperationVersion = tostring(events.operationVersion),
Category = tostring(events.category),
ResultType = tostring(events.resultType),
ResultSignature = tostring(events.resultSignature),
ResultDescription = tostring(events.resultDescription),
DurationMs = tolong(events.durationMs),
CorrelationId = tostring(events.properties.correlationId),
Resource = tostring(Resource),
ResourceGroup = tostring(events.ResourceGroup),
ResourceProvider = tostring(events.ResourceProvider),
Identity = tostring(events.identity),
Level = tostring(events.Level),
Location = tostring(events.properties.location.countryOrRegion),
AlternateSignInName = tostring(events.AlternateSignInName),
AppDisplayName = tostring(events.properties.appDisplayName),
AppId = tostring(events.properties.appId),
AuthenticationContextClassReferences = tostring(events.properties.authenticationContextClassReferences),
AuthenticationDetails = tostring(events.properties.authenticationDetails),
AppliedEventListeners = todynamic(events.properties.authenticationDetails),
AuthenticationMethodsUsed = tostring(events.AuthenticationMethodsUsed),
AuthenticationProcessingDetails = tostring(events.properties.authenticationProcessingDetails),
AuthenticationRequirement = tostring(events.properties.authenticationRequirement),
AuthenticationRequirementPolicies = tostring(events.properties.authenticationRequirementPolicies),
ClientAppUsed = tostring(events.properties.clientAppUsed),
ConditionalAccessPolicies = todynamic(events.properties.appliedConditionalAccessPolicies),
ConditionalAccessStatus = tostring(events.properties.conditionalAccessStatus),
CreatedDateTime = todatetime(events.properties.createdDateTime),
DeviceDetail = todynamic(events.properties.deviceDetail),
IsInteractive = tobool(events.properties.isInteractive),
Id = tostring(events.identity),
IPAddress = tostring(events.properties.ipAddress),
IsRisky = tobool(events.properties.riskLevelAggregated),
LocationDetails = todynamic(events.properties.location),
MfaDetail = todynamic(events.properties.mfaDetail),
NetworkLocationDetails = tostring(events.properties.networkLocationDetails),
OriginalRequestId = tostring(events.properties.originalRequestId),
ProcessingTimeInMilliseconds = tostring(events.properties.processingTimeInMilliseconds),
RiskDetail = tostring(events.properties.riskDetail),
RiskEventTypes = tostring(events.properties.riskEventTypes),
RiskEventTypes_V2 = tostring(events.properties.riskEventTypes_v2),
RiskLevelAggregated = tostring(events.properties.riskLevelAggregated),
RiskLevelDuringSignIn = tostring(events.properties.riskLevelDuringSignIn),
RiskState = tostring(events.properties.riskState),
ResourceDisplayName = tostring(events.properties.resourceDisplayName),
ResourceIdentity = tostring(events.properties.resourceIdentity),
ResourceServicePrincipalId = tostring(events.properties.resourceServicePrincipalId),
ServicePrincipalId = tostring(events.properties.servicePrincipalId),
ServicePrincipalName = tostring(events.properties.servicePrincipalName),
Status = todynamic(events.properties.status),
TokenIssuerName = tostring(events.properties.tokenIssuerName),
TokenIssuerType = tostring(events.properties.tokenIssuerType),
UserAgent = tostring(events.properties.userAgent),
UserDisplayName = tostring(events.properties.userDisplayName),
UserId = tostring(events.properties.userId),
UserPrincipalName = tostring(events.properties.userPrincipalName),
AADTenantId = tostring(events.properties.tenantId),
UserType = tostring(events.properties.userType),
FlaggedForReview = tobool(events.properties.flaggedForReview),
IPAddressFromResourceProvider = tostring(events.properties.ipAddressFromResourceProvider),
SignInIdentifier = tostring(events.properties.signInIdentifier),
SignInIdentifierType = tostring(events.properties.signInIdentifierType),
ResourceTenantId = tostring(events.properties.resourceTenantId),
HomeTenantId = tostring(events.properties.homeTenantId),
UniqueTokenIdentifier = tostring(events.properties.uniqueTokenIdentifier),
SessionLifetimePolicies = tostring(events.properties.sessionLifetimePolicies),
AutonomousSystemNumber = tostring(events.properties.autonomousSystemNumber),
AuthenticationProtocol = tostring(events.properties.authenticationProtocol),
CrossTenantAccessType = tostring(events.properties.crossTenantAccessType),
AppliedConditionalAccessPolicies = tostring(events.properties.authenticationRequirementPolicies),
RiskLevel = tostring(events.RiskLevel),
Type = tostring(events.category),
_ItemId=tostring(events.properties.id),
_ResourceId=tostring(events.resourceId),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table SigninLogs policy update @'[{"Source": "SigninLogsRaw", "Query": "SigninLogsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table SigninLogs policy update @'[{"Source": "SigninLogsRaw", "Query": "SigninLogsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table SyslogRaw (records:dynamic)

.create-or-alter table SyslogRaw ingestion json mapping 'SyslogRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table Syslog(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
Computer:string,
EventTime:datetime,
Facility:string,
HostName:string,
SeverityLevel:string,
SyslogMessage:string,
ProcessID:int,
HostIP:string,
ProcessName:string,
MG:string,
CollectorHostName:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function SyslogExpand {
SyslogRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
SourceSystem=tostring(events.SourceSystem),
TimeGenerated=todatetime(events.TimeGenerated),
Computer=tostring(events.Computer),
EventTime=todatetime(events.EventTime),
Facility=tostring(events.Facility),
HostName=tostring(events.HostName),
SeverityLevel=tostring(events.SeverityLevel),
SyslogMessage=tostring(events.SyslogMessage),
ProcessID=toint(events.ProcessID),
HostIP=tostring(events.HostIP),
ProcessName=tostring(events.ProcessName),
MG=tostring(events.MG),
CollectorHostName=tostring(events.CollectorHostName),
Type=tostring(events.Type),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())}

.alter table Syslog policy update @'[{"Source": "SyslogRaw", "Query": "SyslogExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table Syslog policy update @'[{"Source": "SyslogRaw", "Query": "SyslogExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table ThreatIntelligenceIndicatorRaw (records:dynamic)

.create-or-alter table ThreatIntelligenceIndicatorRaw ingestion json mapping 'ThreatIntelligenceIndicatorRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table ThreatIntelligenceIndicator(
TenantId:string,
TimeGenerated:datetime,
SourceSystem:string,
Action:string,
ActivityGroupNames:string,
AdditionalInformation:string,
ApplicationId:string,
AzureTenantId:string,
ConfidenceScore:real,
Description:string,
DiamondModel:string,
ExternalIndicatorId:string,
ExpirationDateTime:datetime,
IndicatorId:string,
ThreatType:string,
Active:bool,
KillChainActions:bool,
KillChainC2:bool,
KillChainDelivery:bool,
KillChainExploitation:bool,
KillChainReconnaissance:bool,
KillChainWeaponization:bool,
KnownFalsePositives:string,
MalwareNames:string,
PassiveOnly:bool,
ThreatSeverity:int,
Tags:string,
TrafficLightProtocolLevel:string,
EmailEncoding:string,
EmailLanguage:string,
EmailRecipient:string,
EmailSenderAddress:string,
EmailSenderName:string,
EmailSourceDomain:string,
EmailSourceIpAddress:string,
EmailSubject:string,
EmailXMailer:string,
FileCompileDateTime:datetime,
FileCreatedDateTime:datetime,
FileHashType:string,
FileHashValue:string,
FileMutexName:string,
FileName:string,
FilePacker:string,
FilePath:string,
FileSize:int,
FileType:string,
DomainName:string,
NetworkIP:string,
NetworkPort:int,
NetworkDestinationAsn:int,
NetworkDestinationCidrBlock:string,
NetworkDestinationIP:string,
NetworkCidrBlock:string,
NetworkDestinationPort:int,
NetworkProtocol:int,
NetworkSourceAsn:int,
NetworkSourceCidrBlock:string,
NetworkSourceIP:string,
NetworkSourcePort:int,
Url:string,
UserAgent:string,
IndicatorProvider:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function ThreatIntelligenceIndicatorExpand {
ThreatIntelligenceIndicatorRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
SourceSystem=tostring(events.SourceSystem),
Action=tostring(events.Action),
ActivityGroupNames=tostring(events.ActivityGroupNames),
AdditionalInformation=tostring(events.AdditionalInformation),
ApplicationId=tostring(events.ApplicationId),
AzureTenantId=tostring(events.AzureTenantId),
ConfidenceScore=toreal(events.ConfidenceScore),
Description=tostring(events.Description),
DiamondModel=tostring(events.DiamondModel),
ExternalIndicatorId=tostring(events.ExternalIndicatorId),
ExpirationDateTime=todatetime(events.ExpirationDateTime),
IndicatorId=tostring(events.IndicatorId),
ThreatType=tostring(events.ThreatType),
Active=tobool(events.Active),
KillChainActions=tobool(events.KillChainActions),
KillChainC2=tobool(events.KillChainC2),
KillChainDelivery=tobool(events.KillChainDelivery),
KillChainExploitation=tobool(events.KillChainExploitation),
KillChainReconnaissance=tobool(events.KillChainReconnaissance),
KillChainWeaponization=tobool(events.KillChainWeaponization),
KnownFalsePositives=tostring(events.KnownFalsePositives),
MalwareNames=tostring(events.MalwareNames),
PassiveOnly=tobool(events.PassiveOnly),
ThreatSeverity=toint(events.ThreatSeverity),
Tags=tostring(events.Tags),
TrafficLightProtocolLevel=tostring(events.TrafficLightProtocolLevel),
EmailEncoding=tostring(events.EmailEncoding),
EmailLanguage=tostring(events.EmailLanguage),
EmailRecipient=tostring(events.EmailRecipient),
EmailSenderAddress=tostring(events.EmailSenderAddress),
EmailSenderName=tostring(events.EmailSenderName),
EmailSourceDomain=tostring(events.EmailSourceDomain),
EmailSourceIpAddress=tostring(events.EmailSourceIpAddress),
EmailSubject=tostring(events.EmailSubject),
EmailXMailer=tostring(events.EmailXMailer),
FileCompileDateTime=todatetime(events.FileCompileDateTime),
FileCreatedDateTime=todatetime(events.FileCreatedDateTime),
FileHashType=tostring(events.FileHashType),
FileHashValue=tostring(events.FileHashValue),
FileMutexName=tostring(events.FileMutexName),
FileName=tostring(events.FileName),
FilePacker=tostring(events.FilePacker),
FilePath=tostring(events.FilePath),
FileSize=toint(events.FileSize),
FileType=tostring(events.FileType),
DomainName=tostring(events.DomainName),
NetworkIP=tostring(events.NetworkIP),
NetworkPort=toint(events.NetworkPort),
NetworkDestinationAsn=toint(events.NetworkDestinationAsn),
NetworkDestinationCidrBlock=tostring(events.NetworkDestinationCidrBlock),
NetworkDestinationIP=tostring(events.NetworkDestinationIP),
NetworkCidrBlock=tostring(events.NetworkCidrBlock),
NetworkDestinationPort=toint(events.NetworkDestinationPort),
NetworkProtocol=toint(events.NetworkProtocol),
NetworkSourceAsn=toint(events.NetworkSourceAsn),
NetworkSourceCidrBlock=tostring(events.NetworkSourceCidrBlock),
NetworkSourceIP=tostring(events.NetworkSourceIP),
NetworkSourcePort=toint(events.NetworkSourcePort),
Url=tostring(events.Url),
UserAgent=tostring(events.UserAgent),
IndicatorProvider=tostring(events.IndicatorProvider),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table ThreatIntelligenceIndicator policy update @'[{"Source": "ThreatIntelligenceIndicatorRaw", "Query": "ThreatIntelligenceIndicatorExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table ThreatIntelligenceIndicator policy update @'[{"Source": "ThreatIntelligenceIndicatorRaw", "Query": "ThreatIntelligenceIndicatorExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table UrlClickEventsRaw (records:dynamic)

.create-or-alter table UrlClickEventsRaw ingestion json mapping 'UrlClickEventsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table UrlClickEvents(
TenantId:string,
Timestamp:datetime,
TimeGenerated:datetime,
Url:string,
ActionType:string,
AccountUpn:string,
Workload:string,
NetworkMessageId:string,
IPAddress:string,
ThreatTypes:string,
DetectionMethods:string,
IsClickedThrough:bool,
UrlChain:string,
ReportId:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function UrlClickEventsExpand {
UrlClickEventsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
Timestamp=todatetime(events.Timestamp),
TimeGenerated=todatetime(events.TimeGenerated),
Url=tostring(events.Url),
ActionType=tostring(events.ActionType),
AccountUpn=tostring(events.AccountUpn),
Workload=tostring(events.Workload),
NetworkMessageId=tostring(events.NetworkMessageId),
IPAddress=tostring(events.IPAddress),
ThreatTypes=tostring(events.ThreatTypes),
DetectionMethods=tostring(events.DetectionMethods),
IsClickedThrough=tobool(events.IsClickedThrough),
UrlChain=tostring(events.UrlChain),
ReportId=tostring(events.ReportId),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table UrlClickEvents policy update @'[{"Source": "UrlClickEventsRaw", "Query": "UrlClickEventsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table UrlClickEvents policy update @'[{"Source": "UrlClickEventsRaw", "Query": "UrlClickEventsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table UserPeerAnalyticsRaw (records:dynamic)

.create-or-alter table UserPeerAnalyticsRaw ingestion json mapping 'UserPeerAnalyticsRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table UserPeerAnalytics(
TenantId:string,
TimeGenerated:datetime,
AADTenantId:string,
UserId:string,
UserPrincipalName:string,
UserName:string,
PeerUserId:string,
PeerUserPrincipalName:string,
PeerUserName:string,
Rank:int,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function UserPeerAnalyticsExpand {
UserPeerAnalyticsRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AADTenantId=tostring(events.AADTenantId),
UserId=tostring(events.UserId),
UserPrincipalName=tostring(events.UserPrincipalName),
UserName=tostring(events.UserName),
PeerUserId=tostring(events.PeerUserId),
PeerUserPrincipalName=tostring(events.PeerUserPrincipalName),
PeerUserName=tostring(events.PeerUserName),
Rank=toint(events.Rank),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table UserPeerAnalytics policy update @'[{"Source": "UserPeerAnalyticsRaw", "Query": "UserPeerAnalyticsExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table UserPeerAnalytics policy update @'[{"Source": "UserPeerAnalyticsRaw", "Query": "UserPeerAnalyticsExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table WatchlistRaw (records:dynamic)

.create-or-alter table WatchlistRaw ingestion json mapping 'WatchlistRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table Watchlist(
TenantId:string,
TimeGenerated:datetime,
AzureTenantId:string,
WatchlistId:string,
WatchlistItemId:string,
WatchlistName:string,
WatchlistAlias:string,
Source:string,
Provider:string,
CreatedBy:dynamic,
UpdatedBy:dynamic,
CreatedTimeUTC:datetime,
LastUpdatedTimeUTC:datetime,
Notes:string,
Tags:string,
DefaultDuration:string,
TimeToLive:datetime,
WatchlistItem:dynamic,
EntityMapping:dynamic,
CorrelationId:string,
SearchKey:string,
WatchlistCategory:string,
['_DTTimestamp']:datetime,
['_DTItemId']:string,
['_DTItemType']:string,
['_DTItemStatus']:string,
SourceSystem:string,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime)

.create-or-alter function WatchlistExpand {
WatchlistRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.TenantId),
TimeGenerated=todatetime(events.TimeGenerated),
AzureTenantId=tostring(events.AzureTenantId),
WatchlistId=tostring(events.WatchlistId),
WatchlistItemId=tostring(events.WatchlistItemId),
WatchlistName=tostring(events.WatchlistName),
WatchlistAlias=tostring(events.WatchlistAlias),
Source=tostring(events.Source),
Provider=tostring(events.Provider),
CreatedBy=todynamic(events.CreatedBy),
UpdatedBy=todynamic(events.UpdatedBy),
CreatedTimeUTC=todatetime(events.CreatedTimeUTC),
LastUpdatedTimeUTC=todatetime(events.LastUpdatedTimeUTC),
Notes=tostring(events.Notes),
Tags=tostring(events.Tags),
DefaultDuration=tostring(events.DefaultDuration),
TimeToLive=todatetime(events.TimeToLive),
WatchlistItem=todynamic(events.WatchlistItem),
EntityMapping=todynamic(events.EntityMapping),
CorrelationId=tostring(events.CorrelationId),
SearchKey=tostring(events.SearchKey),
WatchlistCategory=tostring(events.WatchlistCategory),
_DTTimestamp=todatetime(events.['_DTTimestamp']),
_DTItemId=tostring(events.['_DTItemId']),
_DTItemType=tostring(events.['_DTItemType']),
_DTItemStatus=tostring(events.['_DTItemStatus']),
SourceSystem=tostring(events.SourceSystem),
Type=tostring(events.Type),
_ItemId=tostring(events.['_ItemId']),
_ResourceId=tostring(events.['_ResourceId']),
_SubscriptionId=tostring(events.['_SubscriptionId']),
_TimeReceived=todatetime(now())}

.alter table Watchlist policy update @'[{"Source": "WatchlistRaw", "Query": "WatchlistExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table Watchlist policy update @'[{"Source": "WatchlistRaw", "Query": "WatchlistExpand()", "IsEnabled": "True", "IsTransactional": true}]'






.create-merge table WindowsEventRaw (records:dynamic)

.create-or-alter table WindowsEventRaw ingestion json mapping 'WindowsEventRawMapping' '[{"column":"records","Properties":{"path":"$.records"}}]'

.create-merge table WindowsEvent(
TenantId:string,
SourceSystem:string,
TimeGenerated:datetime,
Provider:string,
Channel:string,
Computer:string,
Task:int,
EventLevel:int,
EventLevelName:string,
SystemUserId:string,
Version:int,
Opcode:string,
Keywords:string,
Correlation:string,
SystemProcessId:int,
SystemThreadId:int,
EventRecordId:string,
Data:dynamic,
EventData:dynamic,
RawEventData:string,
EventID:int,
EventOriginId:string,
ManagementGroupName:string,
TimeCreated:datetime,
Type:string,
['_ItemId']:string,
['_ResourceId']:string,
['_SubscriptionId']:string,
['_TimeReceived']:datetime
)

.create-or-alter function WindowsEventExpand {
WindowsEventRaw
//| extend events = records
| mv-expand events = records
| project
TenantId=tostring(events.tenantId),
SourceSystem=tostring(events.properties.SourceSystem),
TimeGenerated=todatetime(events.properties.TimeGenerated),
Provider=tostring(events.properties.Provider),
Channel=tostring(events.properties.Channel),
Computer=tostring(events.properties.Computer),
Task=toint(events.properties.Task),
EventLevel=toint(events.properties.EventLevel),
EventLevelName=tostring(events.properties.EventLevelName),
SystemUserId=tostring(events.properties.SystemUserId),
Version=toint(events.properties.Version),
Opcode=tostring(events.properties.Opcode),
Keywords=tostring(events.properties.Keywords),
Correlation=tostring(events.properties.Correlation),
SystemProcessId=toint(events.properties.SystemProcessId),
SystemThreadId=toint(events.properties.SystemThreadId),
EventRecordId=tostring(events.properties.EventRecordId),
Data=todynamic(events.properties.Data),
EventData=todynamic(events.properties.EventData),
RawEventData=tostring(events.properties.RawEventData),
EventID=toint(events.properties.EventID),
EventOriginId=tostring(events.properties.EventOriginId),
ManagementGroupName=tostring(events.properties.ManagementGroupName),
TimeCreated=todatetime(events.properties.TimeCreated),
Type=tostring(events.properties.Type),
_ItemId=tostring(''),
_ResourceId=tostring(''),
_SubscriptionId=tostring(''),
_TimeReceived=todatetime(now())
}

.alter table WindowsEvent policy update @'[{"Source": "WindowsEventRaw", "Query": "WindowsEventExpand()", "IsEnabled": "False", "IsTransactional": true}]'

.alter table WindowsEvent policy update @'[{"Source": "WindowsEventRaw", "Query": "WindowsEventExpand()", "IsEnabled": "True", "IsTransactional": true}]'





