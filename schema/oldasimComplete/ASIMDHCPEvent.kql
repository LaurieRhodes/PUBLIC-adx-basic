//
// Function Name: ASimDhcpEvent
// Description: This ASIM parser supports normalizing Dhcp event logs from all supported sources to the ASIM Dhcp Event normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimDhcpEvent(    ['pack']:bool=False)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeASimDhcpEvent') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser| where isnotempty(SourceSpecificParser));
let ASimBuiltInDisabled=toscalar('ExcludeASimDhcpEvent' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
let parser=(pack:bool=false){
union isfuzzy=true
  vimDhcpEventEmpty,
  ASimDhcpEventNative (disabled=(ASimBuiltInDisabled or ('ExcludeASimDhcpEventNative' in (DisabledParsers))))
}; 
parser (pack=pack)
}



//
// Function Name: ASimDhcpEventNative
// Description: This ASIM parser supports normalizing the native Dhcp Event table (ASimDhcpEventLogs) to the ASIM Dhcp Event normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimDhcpEventNative(    ['disabled']:bool=False)
{
let parser = (
  disabled:bool = false
)
{
  ASimDhcpEventLogs
  | where not(disabled)
  | project-rename
      EventUid = _ItemId
  | extend          
      EventSchema = "DhcpEvent",
      DvcScopeId = iff(isempty(DvcScopeId), _SubscriptionId, DvcScopeId)
  //  -- Aliases
  | extend
      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),
      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),
      Dvc = coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId),
      Rule = coalesce(RuleName, tostring(RuleNumber)),
      SessionId = DhcpSessionId,
      Duration = DhcpSessionDuration,
      Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
      User = SrcUsername,
      IpAddr = SrcIpAddr,
      Hostname = SrcHostname
};
parser (disabled = disabled)
}



//
// Function Name: imDhcpEvent
// Description: This ASIM parser supports filtering and normalizing Dhcp event logs from all supported sources to the ASIM Dhcp Event normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) imDhcpEvent(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['srcusername_has_any']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False,
    ['pack']:bool=False)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludevimDhcpEvent') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser | where isnotempty(SourceSpecificParser));
let vimBuiltInDisabled=toscalar('ExcludevimDhcpEvent' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
let parser=(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]),
  srchostname_has_any:dynamic=dynamic([]),
  srcusername_has_any:dynamic=dynamic([]),
  eventresult:string='*',
  pack:bool=false)
{
union isfuzzy=true
  vimDhcpEventEmpty,
  vimDhcpEventNative (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, srcusername_has_any=srcusername_has_any, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimDhcpEventNative' in (DisabledParsers))))
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, srcusername_has_any=srcusername_has_any, eventresult=eventresult, pack=pack)
}



//
// Function Name: vimDhcpEventEmpty
// Description: This function returns an empty ASIM Dhcp Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimDhcpEventEmpty
{
let EmptyDhcpEvents =datatable (
  TimeGenerated:datetime
, _ResourceId:string
, Type:string
// ****** Event fields ******
, EventType:string
, EventProduct:string
, EventProductVersion:string
, EventCount:int
, EventMessage:string
, EventVendor:string
, EventSchema:string
, EventSchemaVersion:string
, EventSeverity:string
, EventSubType:string
, EventOriginalUid:string
, EventOriginalType:string
, EventOriginalResultDetails:string
, EventOriginalSeverity:string
, EventOriginalSubType:string
, EventStartTime:datetime
, EventEndTime:datetime
, EventReportUrl:string
, EventResult: string
, EventResultDetails: string
, AdditionalFields:dynamic
, EventOwner:string
// ****** Device fields ******
,  DvcId:string
,  DvcHostname:string
,  DvcDomain:string
,  DvcDomainType:string
,  DvcFQDN:string
,  DvcIpAddr:string
,  DvcOs:string
,  DvcOsVersion:string
,  DvcMacAddr:string
,  DvcAction:string
,  DvcOriginalAction:string
,  DvcDescription: string
,  DvcIdType: string
,  DvcInterface: string
,  DvcZone: string
,  DvcScopeId:string
,  DvcScope:string
// ****** Source User fields ******
, SrcUserId:string
, SrcUserUid:string
, SrcUserIdType:string
, SrcUserScopeId:string
, SrcUserScope:string
, SrcUsername:string
, SrcUsernameType:string
, SrcUserType:string
, SrcOriginalUserType:string
, SrcUserSessionId:string
// ****** Source System fields ******
, SrcIpAddr: string
, SrcPortNumber:int
, SrcHostname:string
, SrcMacAddr:string
, SrcDomain:string
, SrcDomainType:string
, SrcFQDN:string
, SrcDescription:string
, SrcDvcId:string
, SrcDvcIdType:string
, SrcDvcScopeId:string
, SrcDvcScope:string
, SrcDeviceType:string
, SrcGeoCountry:string
, SrcGeoLatitude:real
, SrcGeoLongitude:real
, SrcGeoRegion:string
, SrcGeoCity:string
, SrcRiskLevel:int
, SrcOriginalRiskLevel:string
// ****** Dhcp Event Fields ******
, RequestedIpAddr:string //Optional
, DhcpLeaseDuration:int
, DhcpSessionId:string
, DhcpSessionDuration:int
, DhcpSrcDHCId:string
, DhcpCircuitId:string
, DhcpSubscriberId:string
, DhcpVendorClassId:string
, DhcpVendorClass:string
, DhcpUserClassId:string
, DhcpUserClass:string
// ****** aliases ******
, SessionId:string
, Duration:int
, Src: string
, Dst: string
, User: string
, IpAddr:string
, Hostname:string
//****** Inspection fields ******
,  RuleName:string
,  RuleNumber:int
,  ThreatId:string
,  ThreatName:string
,  ThreatCategory:string
,  ThreatRiskLevel:int
,  ThreatOriginalRiskLevel:string
,  ThreatConfidence:int
,  ThreatOriginalConfidence:string
,  ThreatIsActive:bool
,  ThreatFirstReportedTime:datetime
,  ThreatLastReportedTime:datetime
,  ThreatField:string
)[];
EmptyDhcpEvents
}



//
// Function Name: vimDhcpEventNative
// Description: This ASIM parser supports filtering and normalizing the native Dhcp Event table (ASimDhcpEventLogs) to the ASIM Dhcp Event normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimDhcpEventNative(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['srcusername_has_any']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]),
  srchostname_has_any:dynamic=dynamic([]),
  srcusername_has_any:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
)
{
  ASimDhcpEventLogs
  | where not(disabled)
  | where (isnull(starttime) or TimeGenerated >= starttime) 
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
      and (array_length(srchostname_has_any) == 0 or (SrcHostname has_any (srchostname_has_any)))
      and (array_length(srcusername_has_any) == 0 or (SrcUsername has_any (srcusername_has_any)))
      and ((eventresult == "*") or (EventResult == eventresult))
  | project-rename
      EventUid = _ItemId
  | extend          
      EventSchema = "DhcpEvent",
      DvcScopeId = iff(isempty(DvcScopeId), _SubscriptionId, DvcScopeId)
  //  -- Aliases
  | extend
      EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),
      EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),
      Dvc = coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId),
      Rule = coalesce(RuleName, tostring(RuleNumber)),
      SessionId = DhcpSessionId,
      Duration = DhcpSessionDuration,
      Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
      User = SrcUsername,
      IpAddr = SrcIpAddr,
      Hostname = SrcHostname
};
parser (
    starttime                = starttime,
    endtime                  = endtime,
    srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
    srchostname_has_any      = srchostname_has_any,
    srcusername_has_any      = srcusername_has_any,
    eventresult              = eventresult,
    disabled                 = disabled
)
}



