//
// Function Name: ASimAuthentication
// Description: This ASIM parser supports normalizing Authentication logs from all supported sources to the ASIM Authentication normalized schema.ParserName: ASimAuthentication

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthentication(    ['disabled']:bool=False)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeASimAuthentication') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser);
let ASimAuthenticationDisabled=toscalar('ExcludeASimAuthentication' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
union isfuzzy=true
  vimAuthenticationEmpty,    
  ASimAuthenticationAADManagedIdentitySignInLogs    (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationAADManagedIdentitySignInLogs'  in (DisabledParsers) )),
  ASimAuthenticationAADNonInteractiveUserSignInLogs (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationAADNonInteractiveUserSignInLogs'      in (DisabledParsers) )),
  ASimAuthenticationAADServicePrincipalSignInLogs   (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationAADServicePrincipalSignInLogs'      in (DisabledParsers) )),
  ASimAuthenticationAWSCloudTrail (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationAWSCloudTrail'      in (DisabledParsers) )),
  ASimAuthenticationBarracudaWAF  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationBarracudaWAF' in (DisabledParsers) )),
  ASimAuthenticationCiscoASA      (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationCiscoASA' in (DisabledParsers) )), 
  ASimAuthenticationCiscoISE  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationCiscoISE' in (DisabledParsers) )),
  ASimAuthenticationCiscoMeraki  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationCiscoMeraki' in (DisabledParsers) )),
  ASimAuthenticationCiscoMerakiSyslog  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationCiscoMerakiSyslog' in (DisabledParsers) )),
  ASimAuthenticationM365Defender  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationM365Defender'      in (DisabledParsers) )),
  ASimAuthenticationMD4IoT  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationMD4IoT'  in (DisabledParsers) )),
  ASimAuthenticationMicrosoftWindowsEvent     (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationMicrosoftWindowsEvent'      in (DisabledParsers) )),
  ASimAuthenticationOktaSSO (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationOktaSSO'      in (DisabledParsers) )),
  ASimAuthenticationOktaV2(ASimAuthenticationDisabled or ('ExcludeASimAuthenticationOktaV2'      in (DisabledParsers) )),
  ASimAuthenticationPostgreSQL  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationPostgreSQL'  in (DisabledParsers) )),
  ASimAuthenticationSigninLogs    (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationSigninLogs' in (DisabledParsers) )),
  ASimAuthenticationSshd  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationSshd' in (DisabledParsers) )),
  ASimAuthenticationSu  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationSu' in (DisabledParsers) )),
  ASimAuthenticationSudo (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationSudo' in (DisabledParsers) )),
  ASimAuthenticationSalesforceSC  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationSalesforceSC'  in (DisabledParsers) )),
  ASimAuthenticationVectraXDRAudit  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationVectraXDRAudit' in (DisabledParsers) )),
  ASimAuthenticationSentinelOne  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationSentinelOne' in (DisabledParsers) )),
  ASimAuthenticationGoogleWorkspace (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationGoogleWorkspace' in (DisabledParsers) )),
  ASimAuthenticationPaloAltoCortexDataLake  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationPaloAltoCortexDataLake' in (DisabledParsers) )),
  ASimAuthenticationVMwareCarbonBlackCloud  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationVMwareCarbonBlackCloud' in (DisabledParsers) )),
  ASimAuthenticationCrowdStrikeFalconHost  (ASimAuthenticationDisabled or ('ExcludeASimAuthenticationCrowdStrikeFalcon' in (DisabledParsers) ))
}



//
// Function Name: ASimAuthenticationAADManagedIdentitySignInLogs
// Description: This ASIM parser supports normalizing Microsoft Entra ID Managed Identity sign in logs, stored in the  AADManagedIdentitySignInLogs table, to the ASIM Authentication schema.ParserName: ASimAuthenticationAADManagedIdentitySignInLogs

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationAADManagedIdentitySignInLogs(    ['disabled']:bool=False)
{
let AADResultTypes = (T:(ResultType:string)) {
    let AADResultTypesLookup = datatable (ResultType:string, EventResultDetails:string, EventType:string, EventResult:string, EventOriginalResultDetails:string, EventSeverity:string)
    [
        "0"     ,""                         ,"Logon"    ,"Success"  ,"", "Informational",
        "50005" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50005 - DevicePolicyError", "Low",
        "50011" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50011 - The redirect URI specified in the request does not match", "Low",
        "50020" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50020 - UserUnauthorized", "Low",
        "50034" ,"No such user"             ,"Logon"    ,"Failure"  ,"50034 - UserAccountNotFound", "Low",
        "50053" ,"User locked"              ,"Logon"    ,"Failure"  ,"50053 - IdsLocked or IP address with malicious activity", "Low",
        "50055" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50055 - InvalidPasswordExpiredPassword", "Low",
        "50056" ,"Incorrect password"       ,"Logon"    ,"Failure"  ,"50056 - Invalid or null password", "Low",
        "50057" ,"User disabled"            ,"Logon"    ,"Failure"  ,"50057 - UserDisabled", "Low",
        "50058" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50058 - UserInformationNotProvided", "Low",
        "50059" ,"No such user"             ,"Logon"    ,"Failure"  ,"50059 - MissingTenantRealmAndNoUserInformationProvided", "Low",
        "50061" ,""                         ,"Logoff"   ,"Failure"  ,"50061 - SignoutInvalidRequest", "Low",
        "50064" ,"No such user or password" ,"Logon"    ,"Failure"  ,"50064 - CredentialAuthenticationError", "Low",
        "50068" ,""                         ,"Logoff"   ,"Failure"  ,"50068 - SignoutInitiatorNotParticipant", "Low",
        "50072" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50072 - UserStrongAuthEnrollmentRequiredInterrupt", "Low",
        "50074" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50074 - UserStrongAuthClientAuthNRequiredInterrupt", "Low",
        "50076" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50076 - UserStrongAuthClientAuthNRequired", "Low",
        "50078" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50078 - UserStrongAuthExpired", "Low",
        "50079" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50079 - UserStrongAuthEnrollmentRequired", "Low",
        "50105" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50105 - EntitlementGrantsNotFound", "Low",
        "50126" ,"No such user or password" ,"Logon"    ,"Failure"  ,"50126 - InvalidUserNameOrPassword", "Low",
        "50132" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50132 - SsoArtifactInvalidOrExpired", "Low",
        "50133" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50133 - SsoArtifactRevoked", "Low",
        "50144" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50144 - InvalidPasswordExpiredOnPremPassword", "Low",
        "50173" ,"Session expired"          ,"Logon"    ,"Failure"  ,"50173 -FreshTokenNeeded", "Low",
        "51004" ,"No such user"             ,"Logon"    ,"Failure"  ,"51004 - UserAccountNotInDirectory", "Low",
        "53003" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"53003 - BlockedByConditionalAccess", "Low",
        "70008" ,"Session expired"          ,"Logon"    ,"Failure"  ,"70008 - ExpiredOrRevokedGrant", "Low",
        "80012" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"80012 - OnPremisePasswordValidationAccountLogonInvalidHours", "Low",
        "100003","Other"                    ,"Logon"    ,"Failure"  ,"100003", "Low",
        "500011","No such user"             ,"Logon"    ,"Failure"  ,"500011 - InvalidResourceServicePrincipalNotFound", "Low",
        "530032","Logon violates policy"    ,"Logon"    ,"Failure"  ,"530032 - BlockedByConditionalAccessOnSecurityPolicy", "Low",
        "530034","Logon violates policy"    ,"Logon"    ,"Failure"  ,"530034 - DelegatedAdminBlockedDueToSuspiciousActivity", "Low",
        "700016","No such user"             ,"Logon"    ,"Failure"  ,"700016 - UnauthorizedClient_DoesNotMatchRequest", "Low",
        "700027","Incorrect key"            ,"Logon"    ,"Failure"  ,"700027 - The certificate with identifier used to sign the client assertion is not registered on application", "Low",
        "700082","Session expired"          ,"Logon"    ,"Failure"  ,"700082 - ExpiredOrRevokedGrantInactiveToken", "Low"
    ];
    T 
    | lookup AADResultTypesLookup on ResultType
    | extend
        EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails),
        EventResult                 = iff(isempty(EventResult), "Failure", EventResult),
        EventSeverity               = iff(isempty(EventSeverity), "Low", EventSeverity),
        EventType                   = iff(isempty(EventType), "Logon", EventType)
};
let parser = (disabled:bool=false) {
  AADManagedIdentitySignInLogs 
  | where not(disabled)
  | invoke AADResultTypes()
  | project-rename
      ActingAppId               = AppId,
      EventOriginalUid          = Id,
      EventProductVersion       = OperationVersion,
      EventUid                  = _ItemId,
      SrcIpAddr                 = IPAddress,
      TargetAppId               = ResourceIdentity,
      TargetAppName             = ResourceDisplayName,
      TargetSessionId           = CorrelationId,
      TargetUserId              = ServicePrincipalId,
      TargetUsername            = ServicePrincipalName
  | extend 
      Dvc                        = 'Microsft/Entra ID',
      EventCount                 = int(1),
      EventProduct               = 'Entra ID',
      EventSchema                = 'Authentication',
      EventSchemaVersion         = '0.1.3',
      EventVendor                = 'Microsoft',
      LogonMethod                = "Managed Identity",
      TargetAppType              = "Resource",
      TargetUserIdType           = 'EntraID',
      TargetUsernameType         = 'Simple',
      TargetUserType             = 'Service'
  | project-away OperationName, Category, Result*, ServicePrincipal*,SourceSystem, DurationMs, Resource*, Location*, UniqueTokenIdentifier, FederatedCredentialId, Conditional*, Authentication*, Identity, Level, TenantId
  // 
  // -- Aliases
  | extend 
      Application                = TargetAppName,
      Dst                        = TargetAppName,
      EventEndTime               = TimeGenerated,
      EventStartTime             = TimeGenerated,
      IpAddr                     = SrcIpAddr,
      LogonTarget                = TargetAppName,
      Src                        = SrcIpAddr,
      TargetSimpleUsername       = TargetUsername,
      TargetUserAadId            = TargetUserId,
      User                       = TargetUsername
};
parser (disabled=disabled)
}



//
// Function Name: ASimAuthenticationAADNonInteractiveUserSignInLogs
// Description: This ASIM parser supports normalizing Microsoft Entra ID Non Interactive sign in logs, stored in the AADNonInteractiveUserSignInLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationAADNonInteractiveUserSignInLogs(    ['disabled']:bool=False)
{
let FailedReason=datatable(ResultType:string, EventResultDetails:string)[
  '0', 'Success',
  '50005', 'Logon violates policy',
  '50011', 'Logon violates policy', 
  '50020', 'Logon violates policy',
  '50034', 'No such user or password',
  '50053', 'User locked',
  '50055', 'Password expired',
  '50056', 'Incorrect password',
  '50057', 'User disabled',
  '50058', 'Logon violates policy',
  '50059', 'No such user or password',
  '50064', 'No such user or password',
  '50072', 'Logon violates policy',
  '50074', 'Logon violates policy', 
  '50076', 'Logon violates policy',
  '50079', 'Logon violates policy',
  '50105', 'Logon violates policy',
  '50126', 'No such user or password',
  '50132', 'Password expired',
  '50133', 'Password expired',
  '50144', 'Password expired',
  '50173', 'Password expired',
  '51004', 'No such user or password',
  '53003', 'Logon violates policy',
  '70008', 'Password expired',
  '80012', 'Logon violates policy',
  '500011', 'No such user or password' ,
  '700016',  'No such user or password'
  ];
let parser=(disabled:bool=false){
  AADNonInteractiveUserSignInLogs 
  | where not(disabled)
  | extend
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalResultDetails  = coalesce(ResultDescription, ResultType),
      EventProduct                = 'Entra ID',
      EventResult                 = iff (ResultType ==0, 'Success', 'Failure'),
      EventSchemaVersion          = '0.1.0',
      EventStartTime              = TimeGenerated,
      EventSubType                = 'NonInteractive',
      EventType                   = 'Logon',
      EventVendor                 = 'Microsoft',
      Location                    = todynamic(LocationDetails),
      SrcDvcHostname              = tostring(todynamic(DeviceDetail).displayName),
      SrcDvcId                    = tostring(todynamic(DeviceDetail).deviceId),
      SrcDvcOs                    = tostring(todynamic(DeviceDetail).operatingSystem),
      TargetAppId                 = ResourceIdentity ,
      TargetAppName               = ResourceDisplayName,
      TargetUserIdType            = 'EntraID',
      TargetUsernameType          = 'UPN'
  | extend
      SrcGeoCity                  = tostring(Location.city),
      SrcGeoCountry               = tostring(Location.countryOrRegion),
      SrcGeoLatitude              = toreal(Location.geoCoordinates.latitude),
      SrcGeoLongitude             = toreal(Location.geoCoordinates.longitude)
  | project-rename
      EventOriginalUid            = Id,
      EventUid                    = _ItemId,
      HttpUserAgent               = UserAgent,
      LogonMethod                 = AuthenticationRequirement,
      SrcDvcIpAddr                = IPAddress,
      TargetSessionId             = CorrelationId,
      TargetUserId                = UserId,
      TargetUsername              = UserPrincipalName
  | lookup FailedReason on ResultType
  // -- Aliases
  | extend 
      Dvc                         = EventVendor,
      LogonTarget                 = ResourceIdentity,
      User                        = TargetUsername,
  // -- Entity identifier explicit aliases
      TargetUserAadId             = TargetUserId,
      TargetUserUpn               = TargetUsername
};
parser 
  (
      disabled = disabled
  )
}



//
// Function Name: ASimAuthenticationAADServicePrincipalSignInLogs
// Description: This ASIM parser supports normalizing Microsoft Entra ID Service Principal sign in logs, stored in the AADServicePrincipalSignInLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationAADServicePrincipalSignInLogs(    ['disabled']:bool=False)
{
let AADResultTypes = (T:(ResultType:string)) {
    let AADResultTypesLookup = datatable (ResultType:string, EventResultDetails:string, EventType:string, EventResult:string, EventOriginalResultDetails:string, EventSeverity:string)
    [
        "0"     ,""                         ,"Logon"    ,"Success"  ,"", "Informational",
        "50005" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50005 - DevicePolicyError", "Low",
        "50011" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50011 - The redirect URI specified in the request does not match", "Low",
        "50020" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50020 - UserUnauthorized", "Low",
        "50034" ,"No such user"             ,"Logon"    ,"Failure"  ,"50034 - UserAccountNotFound", "Low",
        "50053" ,"User locked"              ,"Logon"    ,"Failure"  ,"50053 - IdsLocked or IP address with malicious activity", "Low",
        "50055" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50055 - InvalidPasswordExpiredPassword", "Low",
        "50056" ,"Incorrect password"       ,"Logon"    ,"Failure"  ,"50056 - Invalid or null password", "Low",
        "50057" ,"User disabled"            ,"Logon"    ,"Failure"  ,"50057 - UserDisabled", "Low",
        "50058" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50058 - UserInformationNotProvided", "Low",
        "50059" ,"No such user"             ,"Logon"    ,"Failure"  ,"50059 - MissingTenantRealmAndNoUserInformationProvided", "Low",
        "50061" ,""                         ,"Logoff"   ,"Failure"  ,"50061 - SignoutInvalidRequest", "Low",
        "50064" ,"No such user or password" ,"Logon"    ,"Failure"  ,"50064 - CredentialAuthenticationError", "Low",
        "50068" ,""                         ,"Logoff"   ,"Failure"  ,"50068 - SignoutInitiatorNotParticipant", "Low",
        "50072" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50072 - UserStrongAuthEnrollmentRequiredInterrupt", "Low",
        "50074" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50074 - UserStrongAuthClientAuthNRequiredInterrupt", "Low",
        "50076" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50076 - UserStrongAuthClientAuthNRequired", "Low",
        "50078" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50078 - UserStrongAuthExpired", "Low",
        "50079" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50079 - UserStrongAuthEnrollmentRequired", "Low",
        "50105" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"50105 - EntitlementGrantsNotFound", "Low",
        "50126" ,"No such user or password" ,"Logon"    ,"Failure"  ,"50126 - InvalidUserNameOrPassword", "Low",
        "50132" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50132 - SsoArtifactInvalidOrExpired", "Low",
        "50133" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50133 - SsoArtifactRevoked", "Low",
        "50144" ,"Password expired"         ,"Logon"    ,"Failure"  ,"50144 - InvalidPasswordExpiredOnPremPassword", "Low",
        "50173" ,"Session expired"          ,"Logon"    ,"Failure"  ,"50173 -FreshTokenNeeded", "Low",
        "51004" ,"No such user"             ,"Logon"    ,"Failure"  ,"51004 - UserAccountNotInDirectory", "Low",
        "53003" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"53003 - BlockedByConditionalAccess", "Low",
        "70008" ,"Session expired"          ,"Logon"    ,"Failure"  ,"70008 - ExpiredOrRevokedGrant", "Low",
        "70021", "No such user"             ,"Logon"    ,"Failure"  ,"70021 - No matching federated identity record found for presented assertion", "Low",
        "80012" ,"Logon violates policy"    ,"Logon"    ,"Failure"  ,"80012 - OnPremisePasswordValidationAccountLogonInvalidHours", "Low",
        "90024",   "Transient error"       ,"Logon"    ,"Failure"  ,"90024 - RequestBudgetExceededError - A transient error has occurred", "Informational",
        "90033",   "Transient error"       ,"Logon"    ,"Failure"  ,"90033 - A transient error has occurred", "Informational",
        "100003","Other"                    ,"Logon"    ,"Failure"  ,"100003", "Low",
        "500011","No such user"             ,"Logon"    ,"Failure"  ,"500011 - InvalidResourceServicePrincipalNotFound", "Low",
        "500341", "User disabled"           ,"Logon"    ,"Failure"  ,"500341 - The user account has been deleted from the directory", "Low",
        "530032","Logon violates policy"    ,"Logon"    ,"Failure"  ,"530032 - BlockedByConditionalAccessOnSecurityPolicy", "Low",
        "530034","Logon violates policy"    ,"Logon"    ,"Failure"  ,"530034 - DelegatedAdminBlockedDueToSuspiciousActivity", "Low",
        "700016","No such user"             ,"Logon"    ,"Failure"  ,"700016 - UnauthorizedClient_DoesNotMatchRequest", "Low",
        "700027","Incorrect key"            ,"Logon"    ,"Failure"  ,"700027 - The certificate with identifier used to sign the client assertion is not registered on application", "Low",
        "700082","Session expired"          ,"Logon"    ,"Failure"  ,"700082 - ExpiredOrRevokedGrantInactiveToken", "Low",
        "1002016", "Logon violates policy"  ,"Logon"    ,"Failure"  ,"1002016 - You are using TLS version 1.0, 1.1 and/or 3DES cipher", "Low",
        "7000215", "Incorrect password"     ,"Logon"    ,"Failure"  ,"7000215 - Invalid client secret is provided", "Low",
        "7000222", "Session expired"        ,"Logon"    ,"Failure"  ,"7000222 - The provided client secret keys are expired", "Low"
    ];
    T 
    | lookup AADResultTypesLookup on ResultType
    | extend
        EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails),
        EventResult                 = iff(isempty(EventResult), "Failure", EventResult),
        EventSeverity               = iff(isempty(EventSeverity), "Low", EventSeverity),
        EventType                   = iff(isempty(EventType), "Logon", EventType)
};
let parser = (
    disabled:bool=false
  ) {
  AADServicePrincipalSignInLogs
  | where not(disabled)
  | invoke AADResultTypes()
  | project-rename
      ActingAppId               = AppId,
      EventOriginalUid          = Id,
      EventProductVersion       = OperationVersion,
      EventUid                  = _ItemId,
      SrcIpAddr                 = IPAddress,
      TargetAppId               = ResourceIdentity ,
      TargetAppName             = ResourceDisplayName,
      TargetSessionId           = CorrelationId,
      TargetUserId              = ServicePrincipalId,
      TargetUsername            = ServicePrincipalName
  | extend 
      Dvc                        = 'Microsft/Entra ID',
      EventCount                 = int(1),
      EventProduct               = 'Entra ID',
      EventSchema                = 'Authentication',
      EventSchemaVersion         = '0.1.3',
      EventVendor                = 'Microsoft',
      LogonMethod                = "Service Principal",
      LocationDetails            = todynamic(LocationDetails),
      TargetAppType              = "Resource",
      TargetUserIdType           = 'EntraID',
      TargetUsernameType         = 'Simple',
      TargetUserType             = 'Service'
  | extend
      SrcGeoCity                 = tostring(LocationDetails.city),
      SrcGeoCountry              = Location,
      SrcGeoLatitude             = toreal(LocationDetails.geoCoordinates.latitude),
      SrcGeoLongitude            = toreal(LocationDetails.geoCoordinates.longitude),
      SrcGeoRegion               = tostring(LocationDetails.state)
  | project-away OperationName, Category, Result*, ServicePrincipal*,SourceSystem, DurationMs, Resource*, Location*, UniqueTokenIdentifier, FederatedCredentialId, Conditional*, Authentication*, Identity, Level, TenantId
  // 
  // -- Aliases
  | extend 
      Application                = TargetAppName,
      Dst                        = TargetAppName,
      EventEndTime               = TimeGenerated,
      EventStartTime             = TimeGenerated,
      IpAddr                     = SrcIpAddr,
      LogonTarget                = TargetAppName,
      Src                        = SrcIpAddr,
      TargetSimpleUsername       = TargetUsername,
      TargetUserAadId            = TargetUserId,
      User                       = TargetUsername
};
parser  
(
    disabled = disabled
)
}



//
// Function Name: ASimAuthenticationSigninLogs
// Description: This ASIM parser supports normalizing Microsoft Entra ID Interactive sign in logs, stored in the  SigninLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationSigninLogs(    ['disabled']:bool=False)
{
let FailedReason=datatable(ResultType:string, EventResultDetails:string)[
  '0', 'Success',
  '50005', 'Logon violates policy',
  '50011', 'Logon violates policy', 
  '50020', 'Logon violates policy',
  '50034', 'No such user or password',
  '50053', 'User locked',
  '50055', 'Password expired',
  '50056', 'Incorrect password',
  '50057', 'User disabled',
  '50058', 'Logon violates policy',
  '50059', 'No such user or password',
  '50064', 'No such user or password',
  '50072', 'Logon violates policy',
  '50074', 'Logon violates policy', 
  '50076', 'Logon violates policy',
  '50079', 'Logon violates policy',
  '50105', 'Logon violates policy',
  '50126', 'No such user or password',
  '50132', 'Password expired',
  '50133', 'Password expired',
  '50144', 'Password expired',
  '50173', 'Password expired',
  '51004', 'No such user or password',
  '53003', 'Logon violates policy',
  '70008', 'Password expired',
  '80012', 'Logon violates policy',
  '500011', 'No such user or password',
  '700016',  'No such user or password', 
  ];
let UserTypeLookup = datatable (UserType:string, TargetUserType:string) [
  'Guest','Guest', 
  'Member', 'Regular',
  '',''
];
let parser=(disabled:bool=false){
SigninLogs 
| where not(disabled)
| extend
    EventCount                 = int(1),
    EventEndTime               = TimeGenerated,
    EventOriginalResultDetails = coalesce(ResultDescription, ResultType),
    EventProduct               = 'Entra ID',
    EventResult                = iff (ResultType ==0, 'Success', 'Failure'),
    EventSchemaVersion         = '0.1.0',
    EventStartTime             = TimeGenerated,
    EventSubType               = 'Interactive',
    EventType                  = 'Logon',
    EventVendor                = 'Microsoft',
    Location                   = todynamic(LocationDetails),
    SrcHostname             = tostring(DeviceDetail.displayName),
    SrcDvcId                   = tostring(DeviceDetail.deviceId),
    SrcIpAddr                  = IPAddress,
    SrcDvcOs                   = tostring(DeviceDetail.operatingSystem),
    TargetUserIdType           = 'EntraID',
    TargetUsernameType         = 'UPN'
| extend
    SrcGeoCity        = tostring(Location.city),
    SrcGeoCountry     = tostring(Location.countryOrRegion),
    SrcGeoLatitude    = toreal(Location.geoCoordinates.latitude),
    SrcGeoLongitude   = toreal(Location.geoCoordinates.longitude)
 | lookup FailedReason on ResultType
 | project-rename
     EventOriginalUid = Id,
     EventUid         = _ItemId,
     HttpUserAgent    = UserAgent,
     LogonMethod      = AuthenticationRequirement,
     TargetAppId      = ResourceIdentity,
     TargetAppName    = ResourceDisplayName,
     TargetSessionId  = CorrelationId,
     TargetUserId     = UserId,
     TargetUsername   = UserPrincipalName
  //
  | lookup UserTypeLookup on UserType
  | project-away UserType
  // ** Aliases
  | extend 
      Dvc             = EventVendor,
      LogonTarget     = TargetAppName,
      User            = TargetUsername,
    // -- Entity identifier explicit aliases
      TargetUserAadId = TargetUserId,
      TargetUserUpn   = TargetUsername
  };
  parser  
  (
      disabled = disabled
  )
}



//
// Function Name: ASimAuthenticationAWSCloudTrail
// Description: This ASIM parser supports normalizing Amazon Web Service sign in logs, stored in the  AWSCloudTrail table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationAWSCloudTrail(    ['disabled']:bool=False)
{
// -- Refer to https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-user-identity.html for details
let usertype_lookup = datatable (TargetOriginalUserType:string, TargetUserType:string) [
    // -- For console login, only IAMUser, Root and AssumedRole are relevant
    'Root', 'Admin', 
    'IAMUser', 'Regular', 
    'AssumedRole', 'Service', 
    'Role' ,'Service', 
    'FederatedUser', 'Regular',
    'Directory','Other',
    'AWSAccount','Guest',
    'AWSService',  'Application',
    'Unknown', 'Other',
];
let eventresultdetails_lookup = datatable (EventOriginalResultDetails:string, EventOriginalDetails:string) [
  'No username found in supplied account', 'No such user',
  'Failed authentication', ''
];
let ASIM_GetUsernameType = (username:string) { 
    case ( 
        username contains "@" , "UPN",
        username contains "\\", "Windows",
        (username has "CN=" or username has "OU=" or username has "DC="), "DN",
        isempty(username), "",
        "Simple"
    )
};
let parser=(disabled:bool=false){
  AWSCloudTrail 
  | where not(disabled)
  | where EventName == 'ConsoleLogin'
  | project-rename
      EventOriginalResultDetails  = ErrorMessage,
      EventOriginalUid            = AwsEventId,
      EventProductVersion         = EventVersion,
      EventUid                    = _ItemId,
      HttpUserAgent               = UserAgent,
      SrcIpAddr                   = SourceIpAddress,
      TargeCloudRegion            = AWSRegion,
      TargetOriginalUserType      = UserIdentityType,
      TargetUserScopeId           = UserIdentityAccountId
  | extend
      Dvc                         = 'AWS',
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventProduct                = 'CloudTrail',
      EventResult                 = iff (ResponseElements has 'Success', 'Success', 'Failure'),
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.3',
      EventStartTime              = TimeGenerated,
      EventSubType                = 'Interactive',
      EventType                   = 'Logon',
      EventVendor                 = 'AWS',
      LogonMethod                 = iff (AdditionalEventData has '"MFAUsed": "Yes"', 'MFA',''),
      LogonProtocol               = 'HTTPS',
      SrcDeviceType               = iff (AdditionalEventData has '"MobileVersion":"Yes"', 'Mobile Device', 'Computer'),
      TargetUserId                = tostring(split(UserIdentityPrincipalid, ':')[0]),
      TargetUserIdType            = 'AWSId',
      TargetUsername              = case (
            UserIdentityUserName   == "HIDDEN_DUE_TO_SECURITY_REASONS", "",
            TargetOriginalUserType == 'IAMUser'                       , UserIdentityUserName,
            TargetOriginalUserType == 'Root'                          , 'root',
            TargetOriginalUserType == 'AssumedRole'                   , tostring(split(UserIdentityArn, '/')[-1]), // -- This is the AssuderRole session name, which typically represents a user.           
            UserIdentityUserName
        )
  | extend
      TargetUsernameType          = ASIM_GetUsernameType (TargetUsername)
  | parse AdditionalEventData with * '"LoginTo":"' TargetUrl:string '"' *
  | lookup eventresultdetails_lookup on EventOriginalResultDetails
  | lookup usertype_lookup on TargetOriginalUserType 
  | extend 
      EventSeverity = iff(EventResult == 'Failure', 'Low','Informational'),
      LogonTarget=tostring(split(TargetUrl,'?')[0]),
    // -- Specific identifier aliases
      TargetUserAWSId = TargetUserId
    // -- Aliases
    | extend
        Dst    = LogonTarget,
        Dvc    = EventVendor,
        IpAddr = SrcIpAddr,
        Src    = SrcIpAddr,
        User   = TargetUsername
    | project-away EventSource, EventTypeName, EventName, ResponseElements, AdditionalEventData, Session*, Category, ErrorCode, Aws*, ManagementEvent, OperationName, ReadOnly, RequestParameters, Resources, ServiceEventDetails, SharedEventId, SourceSystem, UserIdentity*, VpcEndpointId, APIVersion, RecipientAccountId, TenantId, EC2RoleDelivery
    };
    parser  
    (
        disabled = disabled
    )
}



//
// Function Name: ASimAuthenticationBarracudaWAF
// Description: This ASIM parser supports normalizing the Barracuda WAF logs to the ASIM authentication normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationBarracudaWAF(    ['disabled']:bool=False)
{
let barracudaSchema = datatable(
    LogType_s: string,
    UnitName_s: string,
    EventName_s: string,
    DeviceReceiptTime_s: string,
    HostIP_s: string,
    host_s: string,
    LoginIP_s: string,
    Severity_s: string,
    LoginPort_d: real,
    AdminName_s: string,
    EventMessage_s: string,
    TimeTaken_d: real,
    TenantId: string,
    Message: string,
    SourceSystem: string,
    _ResourceId: string,
    RawData: string,
    Computer: string,
    MG: string,
    ManagementGroupName: string,
    SourceIP: string
)[];
let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let EventTypeLookup = datatable (
    EventName_s: string,
    EventType_lookup: string,
    EventResult: string
)
    [
    "LOGIN", "Logon", "Success",
    "UNSUCCESSFUL_LOGIN", "Logoff", "Failure",
    "LOGOUT", "Logoff", "Success"
];
let EventResultDetailsLookup = datatable (
    Reason: string,
    EventResultDetails: string
)
    [
    "Invalid Username/Password", "Incorrect password",
    "Account Lockout", "User locked",
    "Expired or Disabled Accounts", "User disabled",
    "IP Blocking", "Logon violates policy",
    "Session Timeouts", "Session expired",
    "CAPTCHA Verification", "Other"
];
let parser = (disabled: bool=false)
{
let BarracudaCustom = 
    union isfuzzy=true
        barracudaSchema,
        barracuda_CL
    | where not(disabled)
        and (LogType_s == "AUDIT")
        and (EventName_s in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
    | parse trim(@'[^\w(")]+', EventMessage_s) with * "Reason=" Reason:string
    | extend Reason = trim(@'(")', Reason)
    | lookup EventResultDetailsLookup on Reason
    | lookup EventTypeLookup on EventName_s
    | extend 
        EventType = EventType_lookup,
        severity = toint(Severity_s)
    | lookup SeverityLookup on severity
    | extend
        Dvc = UnitName_s,
        EventCount = toint(1),
        EventProduct = "WAF",
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventVendor = "Barracuda"
    | extend
        EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s))),
        SrcPortNumber = toint(LoginPort_d),
        DvcIpAddr = HostIP_s,
        SrcIpAddr = LoginIP_s,
        DvcHostname = host_s,
        ActorUsername = AdminName_s
    | extend
        ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
        ActorUserType = iff(isnotempty(ActorUsername), "Admin", "")
    | extend
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        EventEndTime = EventStartTime
    | project-away
        *_s,
        *_d,
        severity,
        EventType_lookup,
        TenantId,
        Message,
        SourceSystem,
        _ResourceId,
        RawData,
        Computer,
        MG,
        ManagementGroupName,
        SourceIP,
        Reason;
let BarracudaCEF = 
    CommonSecurityLog
    | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
    | where DeviceEventCategory == "AUDIT"
        and (toupper(ProcessName) in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
    | parse trim(@'[^\w(")]+', Message) with * "Reason=" Reason:string
    | extend Reason = trim(@'(")', Reason)
    | lookup EventResultDetailsLookup on Reason
    | extend ProcessName = toupper(ProcessName)
    | lookup EventTypeLookup on $left.ProcessName == $right.EventName_s
    | extend 
        EventType = EventType_lookup,
        severity = toint(LogSeverity)
    | lookup SeverityLookup on severity
    | extend
        Dvc = DeviceName,
        EventCount = toint(1),
        EventProduct = "WAF",
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventVendor = "Barracuda"
    | extend
        EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
        SrcPortNumber = toint(SourcePort),
        DvcIpAddr = DeviceAddress,
        SrcIpAddr = SourceIP,
        DvcHostname = DeviceName,
        ActorUsername= DestinationUserName
    | extend
        ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
        ActorUserType = iff(isnotempty(ActorUsername), "Admin", "")
    | extend
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        EventEndTime = EventStartTime
    | project-away
        ThreatConfidence,
        EventType_lookup,
        CommunicationDirection,
        AdditionalExtensions,
        Device*,
        Source*,
        Destination*,
        Activity,
        LogSeverity,
        ApplicationProtocol,
        ProcessID,
        ExtID,
        Protocol,
        Reason,
        ReceiptTime,
        SimplifiedDeviceAction,
        OriginalLogSeverity,
        ProcessName,
        EndTime,
        ExternalID,
        File*,
        ReceivedBytes,
        Message,
        Old*,
        EventOutcome,
        Request*,
        StartTime,
        Field*,
        Flex*,
        Remote*,
        Malicious*,
        severity,
        ThreatSeverity,
        IndicatorThreatType,
        ThreatDescription,
        _ResourceId,
        SentBytes,
        ReportReferenceLink,
        Computer,
        TenantId;
union isfuzzy = true 
  BarracudaCustom,
  BarracudaCEF
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationCiscoASA
// Description: This ASIM parser supports normalizing authentication events, collected from Cisco ASA devices, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationCiscoASA(    ['disabled']:bool=False)
{
let parser = (
  disabled:bool=false
){
  let DeviceEventClassIDLookup = datatable (DeviceEventClassID:string, EventResultDetails:string, EventType:string, EventResult:string, DvcAction:string, EventSubType:string)
  [
      "113004", "", "Logon", "Success", "Allowed", "Remote",
      "113005", "Incorrect password", "Logon", "Failure", "Blocked", "Remote",
      "113006", "Logon violates policy", "Logon", "Failure", "Blocked", "Remote",
      "113008", "", "Logon", "Success", "Allowed", "Remote",
      "113010", "", "Logon", "Success", "Allowed", "Remote",
      "113012", "", "Logon", "Success", "Allowed", "Remote",
      "113019", "", "Logoff", "Success", "Allowed", "",
      "113039", "", "Logon", "Success", "Allowed", "Remote",
      "315011", "", "Logoff", "Success", "Allowed", "",
      "502103", "", "Elevate", "Success", "Allowed", "AssumeRole",
      "605004", "Other", "Logon", "Failure", "Blocked", "Remote",
      "605005", "", "Logon", "Success", "Allowed", "Remote",
      "611101", "", "Logon", "Success", "Allowed", "Remote",
      "611102", "Other", "Logon", "Failure", "Blocked", "Remote",
      "611103", "", "Logoff", "Success", "Allowed", "",
      "713198", "Logon violates policy", "Logon", "Failure", "Blocked", "Remote",
      "716002", "", "Logoff", "Success", "Allowed", "",
      "716038", "", "Logon", "Success", "Allowed", "Remote",
      "716039", "Other", "Logon", "Failure", "Blocked", "Remote",
      "716040", "Other", "Logon", "Failure", "Blocked", "Remote",
      "722022", "", "Logon", "Success", "Allowed", "Remote",
      "722023", "", "Logoff", "Success", "Allowed", "",
      "722028", "", "Logoff", "Success", "Allowed", "",
      "722037", "", "Logoff", "Success", "Allowed", "",
      "772002", "", "Logon", "Success", "Allowed", "",
      "772003", "Other", "Logon", "Failure", "Blocked", "",
      "772004", "Other", "Logon", "Failure", "Blocked", "",
      "772005", "", "Logon", "Success", "Allowed", "",
      "772006", "Other", "Logon", "Failure", "Blocked", ""
  ];
  let FilteredDeviceEventClassID = toscalar(
      DeviceEventClassIDLookup 
      | summarize make_set(DeviceEventClassID)
  );
  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
  [
      "1", "High", // Alert,
      "2", "High", // Critical
      "3", "Medium", // Error
      "4", "Low", // Warning
      "5", "Informational", // Notification
      "6", "Informational", // Information
      "7", "Informational", // Debug
  ];
  let LogMessages = 
  CommonSecurityLog
  | where not(disabled) 
  | where DeviceVendor =~ "Cisco"
  | where DeviceProduct == "ASA"
  | where DeviceEventClassID in(FilteredDeviceEventClassID)
  | extend EventOriginalSeverity = tostring(split(Message,"-",1)[0])
  | lookup SeverityLookup on EventOriginalSeverity
  | project TimeGenerated, Type, Computer, _ItemId, DeviceEventClassID, Message, DeviceAddress,EventOriginalSeverity, EventSeverity
  | lookup DeviceEventClassIDLookup on DeviceEventClassID;
  union 
  (
      LogMessages
      | where DeviceEventClassID == 113005
      | parse Message with * 'reason = ' EventOriginalResultDetails ' : server = ' TargetIpAddr ' ' * 'user = ' TargetUsername ' ' * 'user IP = ' SrcIpAddr
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 502103
      | parse Message with * "Uname: " TargetUsername " " *
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID in(605004,605005)
      | parse Message with * 'from ' SrcIpAddr '/' SrcPortNumber:int " to " * ":" TargetIpAddr '/' * 'user "' TargetUsername '"'
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID in(611101,611102)
      | parse Message with * 'IP address: ' SrcIpAddr ', Uname: ' TargetUsername
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 611103
      | parse Message with * ' Uname: ' TargetUsername
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 113004
      | parse Message with * 'server = ' TargetIpAddr ' ' * 'user = ' TargetUsername
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID in(113008,113012)
      | parse Message with * 'user = ' TargetUsername
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 113019
      | parse Message with * 'Username = ' TargetUsername ', IP = ' SrcIpAddr ',' * 
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID in(113039,716002,716039,722022,722023,722028,722037)
      | parse Message with * '> User <' TargetUsername "> IP <" SrcIpAddr ">" *
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 315011
      | parse Message with * 'from ' SrcIpAddr ' ' * 'user "' TargetUsername '" ' * ' reason: "' EventOriginalResultDetails '" ' *
      | extend EventResultDetails = iif(EventOriginalResultDetails == "Internal error", "Other", EventResultDetails)
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 113010
      | parse Message with * 'user ' TargetUsername ' from  server' SrcIpAddr
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 113006
      | parse Message with * 'User ' TargetUsername ' locked' *
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 716040
      | parse Message with * 'Denied ' TargetUsername ' login' *
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 713198
      | parse Message with * 'Failed: ' TargetUsername ' User' *
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID == 716038
      | parse Message with * 'User ' TargetUsername ' IP ' SrcIpAddr ' Authentication'*
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID in(772002)
      | parse Message with * 'user ' TargetUsername ', cause: ' EventOriginalResultDetails
      | project-away Message
  ),
  (
      LogMessages
      | where DeviceEventClassID in(772003,772004)
      | parse Message with * 'user ' TargetUsername ', IP ' SrcIpAddr ', cause: ' EventOriginalResultDetails
      | project-away Message
  ), 
  (
      LogMessages
      | where DeviceEventClassID in(772005)
      | parse Message with * 'user ' TargetUsername ' passed'
      | project-away Message
  ),  
  (
      LogMessages
      | where DeviceEventClassID in(772006)
      | parse Message with * 'user ' TargetUsername ' failed'
      | project-away Message
  )      
  | project-rename 
      DvcHostname           = Computer,
      EventUid              = _ItemId,
      EventOriginalType     = DeviceEventClassID,
      DvcIpAddr             = DeviceAddress
  | extend 
      EventSchemaVersion = "0.1.3",
      EventSchema        = "Authentication",
      EventVendor        = "Cisco",
      EventProduct       = "ASA",
      EventCount         = int(1),
      EventStartTime     = TimeGenerated,
      EventEndTime       = TimeGenerated,
      Dvc                = DvcHostname,
      User               = TargetUsername,
      Src                = SrcIpAddr,
      IpAddr             = SrcIpAddr,
      Dst                = TargetIpAddr,
      TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
      EventResultDetails = iif(TargetUsername == "*****", "No such user or password", EventResultDetails)
};
parser (
  disabled = disabled
)
}



//
// Function Name: ASimAuthenticationCiscoISE
// Description: This ASIM parser supports normalizing Cisco ISE events produced by the Microsoft Sentinel Cisco ISE connector to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationCiscoISE(    ['disabled']:bool=False)
{
let EventFieldsLookup=datatable(
  EventOriginalType: string,
  EventType: string,
  EventOriginalSeverity: string,
  EventResult: string,
  EventSeverity: string,
  EventResultDetails: string,
  EventMessage: string,
  EventOriginalResultDetails: string
)[
  "25104", "Logon", "DEBUG", "Success", "Informational", "", "Plain text password authentication in external REST ID store server succeeded", "Plain text password authentication in external REST ID store server succeeded",
  "25105", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "Plain text password authentication in external REST ID store server failed", "Plain text password authentication in external REST ID store server failed",
  "25106", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "REST ID Store server indicated plain text password authentication failure", "REST ID store server indicated plain text password authentication failure",
  "25112", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "REST database indicated plain text password authentication failure", "REST database indicated plain text password authentication failure",
  "51000", "Logon", "NOTICE", "Failure", "Low", "No such user or password", "Administrator authentication failed", "Administrator authentication failed",
  "51001", "Logon", "NOTICE", "Success", "Informational", "", "Administrator authentication succeeded", "Administrator authentication succeeded",
  "51002", "Logoff", "NOTICE", "Success", "Informational", "", "Administrator logged off", "Administrator logged off",
  "51003", "Logoff", "NOTICE", "Success", "Informational", "Session expired", "Session Timeout", "Administrator had a session timeout",
  "51004", "Logon", "NOTICE", "Failure", "Low", "Logon violates policy", "Rejected administrator session from unauthorized client IP address", "An attempt to start an administration session from an unauthorized client IP address was rejected. Check the client's administration access setting.",
  "51005", "Logon", "NOTICE", "Failure", "Low", "User disabled", "Administrator authentication failed. Administrator account is disabled", "Administrator authentication failed. Administrator account is disabled.",
  "51006", "Logon", "NOTICE", "Failure", "Low", "User disabled", "Administrator authentication failed. Account is disabled due to inactivity", "Administrator authentication failed. Account is disabled due to inactivity.",
  "51007", "Logon", "NOTICE", "Failure", "Low", "User disabled", "Authentication failed. Account is disabled due to password expiration", "Authentication failed. Account is disabled due to password expiration",
  "51008", "Logon", "NOTICE", "Failure", "Low", "Logon violates policy", "Administrator authentication failed. Account is disabled due to excessive failed authentication attempts", "Administrator authentication failed. Account is disabled due to excessive failed authentication attempts.",
  "51009", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication failed. ISE Runtime is not running", "Authentication failed. ISE Runtime is not running",
  "51020", "Logon", "NOTICE", "Failure", "Low", "No such user", "Administrator authentication failed. Login username does not exist.", "Administrator authentication failed. Login username does not exist.",
  "51021", "Logon", "NOTICE", "Failure", "Low", "Incorrect password", "Administrator authentication failed. Wrong password.", "Administrator authentication failed. Wrong password.",
  "51022", "Logon", "NOTICE", "Failure", "Low", "Other", "Administrator authentication failed. System Error", "Administrator authentication failed. System Error",
  "51106", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication for web services failed", "Authentication for web services failed.",
  "60075", "Logon", "NOTICE", "Success", "Informational", "", "Sponsor has successfully authenticated", "Sponsor has successfully authenticated",
  "60076", "Logon", "NOTICE", "Failure", "Low", "Other", "Sponsor authentication has failed", "Sponsor authentication has failed; please see Failure Code for more details",
  "60077", "Logon", "NOTICE", "Failure", "Low", "Other", "MyDevices user authentication has failed", "MyDevices user authentication has failed",
  "60078", "Logon", "INFO", "Success", "Informational", "", "MyDevices user has successfully authenticated", "MyDevices user has successfully authenticated",
  "60080", "Logon", "INFO", "Success", "Informational", "", "A SSH CLI user has successfully logged in", "A SSH CLI User has successfully logged in",
  "60081", "Logon", "INFO", "Failure", "Low", "No such user or password", "A SSH CLI user has attempted unsuccessfully to login", "A SSH CLI user has attempted unsuccessfully to login",
  "60082", "Logon", "INFO", "Failure", "Low", "User locked", "A SSH CLI user has attempted to login, however account is locked out", "A SSH CLI user has attempted to login, however account is locked out",
  "60135", "Logoff", "INFO", "Failure", "Low", "Other", "MyDevices user SSO logout has failed", "MyDevices user SSO logout has failed",
  "60136", "Logoff", "INFO", "Failure", "Low", "Other", "Sponsor user SSO logout has failed", "Sponsor user SSO logout has failed",
  "60204", "Logon", "INFO", "Success", "Informational", "", "System root CLI account has successfully logged in", "System root CLI account has successfully logged in",
  "60205", "Logon", "INFO", "Success", "Informational", "", "A CLI user has logged in from console", "A CLI user has logged in from console",
  "60206", "Logoff", "INFO", "Success", "Informational", "", "A CLI user has logged out from console", "A CLI user has logged out from console",
  "61012", "Logon", "INFO", "Success", "Informational", "", "ISE has authenticated against APIC successfully", "ISE has authenticated against APIC successfully",
  "61013", "Logon", "INFO", "Failure", "Low", "Other", "ISE failed to authenticate against APIC", "ISE failed to authenticate against APIC",
  "61014", "Logon", "INFO", "Success", "Informational", "", "ISE has refreshed authentication against APIC successfully", "ISE has refreshed authentication against APIC successfully",
  "61015", "Logon", "INFO", "Failure", "Low", "Other", "ISE failed to refresh authenticate against APIC", "ISE failed to refresh authenticate against APIC",
  "60507", "Logon", "ERROR", "Failure", "Low", "No such user", "ERS request rejected due to unauthorized user.", "ERS request was rejected because the user who sent the request is unauthorized.",
  "51025", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication for web services failed", "Authentication for web services failed.",
  "61076", "Logoff", "INFO", "Success", "Informational", "", "Sponsor has been successfully logged out", "Sponsor has been successfully logged out",
  "61077", "Logoff", "INFO", "Success", "Informational", "", "MyDevices has been successfully logged out", "MyDevices has been successfully logged out",
  "10003", "Logon", "ERROR", "Failure", "Low", "No such user", "Internal error: Administrator authentication received blank Administrator name", "Internal error: AAC RT component received Administrator authentication request",
  "10004", "Logon", "ERROR", "Failure", "Low", "Incorrect password", "Internal error: Administrator authentication received blank Administrator password", "Internal error: AAC RT component received an Administrator authentication request with blank admin password",
  "10005", "Logon", "INFO", "Success", "Informational", "", "Administrator authenticated successfully", "Administrator authenticated successfully",
  "10006", "Logon", "INFO", "Failure", "Low", "No such user or password", "Administrator authentication failed", "Administrator authentication failed",
  "10007", "Logon", "ERROR", "Failure", "Low", "Other", "Administrator authentication failed - DB Error", "Administrator authentication failed - DB Error",
  "22000", "Logon", "ERROR", "Failure", "Low", "Other", "Authentication resulted in internal error", "Authentication resulted in internal error",
  "22004", "Logon", "INFO", "Failure", "Low", "Incorrect password", "Wrong password", "Wrong password",
  "22028", "Logon", "INFO", "Failure", "Low", "No such user or password", "Authentication failed and the advanced options are ignored", "Authentication of the user failed and the advanced option settings specified in the identity portion of the relevant authentication policy were ignored. For PEAP, LEAP, EAP-FAST or RADIUS MSCHAP authentications, when authentication fails, ISE stops processing the request.",
  "22037", "Logon", "DEBUG", "Success", "Informational", "", "Authentication Passed", "Authentication Passed, Skipping Attribute Retrieval",
  "22040", "Logon", "INFO", "Failure", "Low", "Incorrect password", "Wrong password or invalid shared secret", "Wrong password or invalid shared secret",
  "22091", "Logon", "INFO", "Failure", "Low", "Logon violates policy", "Authentication failed. User account is disabled due to excessive failed authentication attempts at global level", "Authentication failed. User account is disabled due to excessive failed authentication attempts at global level.",
  "5400", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication failed", "User authentication failed. See FailureReason for more information",
  "5401", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication failed", "User authentication failed. See FailureReason for more information",
  "5412", "Logon", "NOTICE", "Failure", "Low", "Other", "TACACS+ authentication request ended with error", "TACACS+ authentication request ended with an error",
  "5418", "Logon", "NOTICE", "Failure", "Low", "Other", "Guest Authentication Failed", "Guest Authentication failed; please see Failure code for more details",
  "5447", "Logon", "NOTICE", "Success", "Informational", "", "MDM Authentication Passed", "MDM Authentication passed",
  "5448", "Logon", "NOTICE", "Failure", "Low", "Other", "MDM Authentication Failed", "MDM Authentication failed; please see Failure code for more details",
  "86010", "Logon", "INFO", "Failure", "Low", "No such user or password", "Guest user authentication failed", "Guest user authentication failed. Please check your password and account permission",
  "86011", "Logon", "INFO", "Failure", "Low", "User disabled", "Guest user is not enabled", "Guest user authentication failed. User is not enabled. Please contact your system administrator",
  "86014", "Logon", "INFO", "Failure", "Low", "User disabled", "User is suspended", "User authentication failed. User account is suspended",
  "86020", "Logon", "INFO", "Failure", "Low", "Other", "Guest Unknown Error", "User authentication failed. Please contact your System Administrator",
  "24015", "Logon", "DEBUG", "Success", "Informational", "", "Authenticating user against LDAP Server", "Authenticating user against LDAP Server",
  "24020", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "User authentication against the LDAP Server failed", "User authentication against the LDAP Server failed. The user entered the wrong password or the user record in the LDAP Server is disabled or expired",
  "24021", "Logon", "ERROR", "Failure", "Low", "Other", "User authentication ended with an error", "User authentication against LDAP Server ended with an error",
  "24022", "Logon", "DEBUG", "Success", "Informational", "", "User authentication succeeded", "User authentication against LDAP Server succeeded",
  "24050", "Logon", "WARN", "Failure", "Low", "Incorrect password", "Cannot authenticate with LDAP Identity Store because password was not present or was empty", "ISE did not receive user password or received empty password. Plain password authentication cannot be performed with no password or empty password",
  "24054", "Logon", "DEBUG", "Failure", "Low", "Password expired", "User authentication against LDAP server detected that user password has expired", "The password has expired but there are remaining grace authentications. The user needs to change it",
  "24055", "Logon", "DEBUG", "Failure", "Low", "Password expired", "User authentication against LDAP server detected that the user is authenticating for the first time after the password administrator set the password", "The user needs to change his password immediately",
  "24056", "Logon", "WARN", "Failure", "Low", "Password expired", "User authentication against LDAP server detected that user password has expired and there are no more grace authentications", "The user needs to contact the password administrator in order to have its password reset",
  "24057", "Logon", "WARN", "Failure", "Low", "Logon violates policy", "User authentication against LDAP server detected that the password failure limit has been reached and the account is locked", "The user needs to retry later or contact the password administrator to reset the password",
  "24337", "Logon", "DEBUG", "Success", "Informational", "", "Authentication Ticket (TGT) request succeeded", "Authentication Ticket (TGT) request succeeded",
  "24338", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication Ticket (TGT) request failed", "Authentication Ticket (TGT) request failed",
  "24402", "Logon", "INFO", "Success", "Informational", "", "User authentication against Active Directory succeeded", "User authentication against Active Directory succeeded",
  "24403", "Logon", "INFO", "Failure", "Low", "Other", "User authentication against Active Directory failed", "User authentication against Active Directory failed",
  "24406", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "User authentication against Active Directory failed since user has invalid credentials", "User authentication against Active Directory failed since user has invalid credentials",
  "24407", "Logon", "DEBUG", "Failure", "Low", "Password expired", "User authentication against Active Directory failed since user is required to change his password", "User authentication against Active Directory failed since user is required to change his password",
  "24408", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "User authentication against Active Directory failed since user has entered the wrong password", "User authentication against Active Directory failed since user has entered the wrong password",
  "24409", "Logon", "DEBUG", "Failure", "Low", "User disabled", "User authentication against Active Directory failed since the user's account is disabled", "User authentication against Active Directory failed since the user's account is disabled",
  "24410", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "User authentication against Active Directory failed since user is considered to be in restricted logon hours", "User authentication against Active Directory failed since user is considered to be in restricted logon hours",
  "24414", "Logon", "DEBUG", "Failure", "Low", "Account expired", "User authentication against Active Directory failed since the user's account has expired", "User authentication against Active Directory failed since the user's account has expired",
  "24415", "Logon", "DEBUG", "Failure", "Low", "User locked", "User authentication against Active Directory failed since user's account is locked out", "User authentication against Active Directory failed since user's account is locked out",
  "24418", "Logon", "ERROR", "Failure", "Low", "Logon violates policy", "Machine authentication against Active Directory failed since it is disabled in configuration", "Machine authentication against Active Directory failed since it is disabled in configuration",
  "24454", "Logon", "ERROR", "Failure", "Low", "Session expired", "User authentication against Active Directory failed because of a timeout error", "User authentication against Active Directory failed because of a timeout error",
  "24470", "Logon", "INFO", "Success", "Informational", "", "Machine authentication against Active Directory is successful", "Machine authentication against Active Directory is successful.",
  "24484", "Logon", "DEBUG", "Failure", "Low", "Password expired", "Machine authentication against Active Directory has failed because the machine's password has expired", "Machine authentication against Active Directory has failed because the machine's password has expired.",
  "24485", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "Machine authentication against Active Directory has failed because of wrong password", "Machine authentication against Active Directory has failed because of wrong password.",
  "24486", "Logon", "DEBUG", "Failure", "Low", "User disabled", "Machine authentication against Active Directory has failed because the machine's account is disabled", "Machine authentication against Active Directory has failed because the machine's account is disabled.",
  "24487", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "Machine authentication against Active Directory failed since machine is considered to be in restricted logon hours", "Machine authentication against Active Directory failed since machine is considered to be in restricted logon hours",
  "24489", "Logon", "DEBUG", "Failure", "Low", "Account expired", "Machine authentication against Active Directory has failed because the machine's account has expired", "Machine authentication against Active Directory has failed because the machine's account has expired.",
  "24490", "Logon", "DEBUG", "Failure", "Low", "User locked", "Machine authentication against Active Directory has failed because the machine's account is locked out", "Machine authentication against Active Directory has failed because the machine's account is locked out.",
  "24491", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "Machine authentication against Active Directory has failed because the machine has invalid credentials", "Machine authentication against Active Directory has failed because the machine has invalid credentials.",
  "24492", "Logon", "ERROR", "Failure", "Low", "No such user or password", "Machine authentication against Active Directory has failed", "Machine authentication against Active Directory has failed.",
  "24496", "Logon", "WARN", "Failure", "Low", "Logon violates policy", "Authentication rejected due to a white or black list restriction", "Authentication rejected due to a white or black list restriction",
  "24505", "Logon", "DEBUG", "Success", "Informational", "", "User authentication has succeeded", "User authentication against the RSA SecurID Server has succeeded.",
  "24508", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "User authentication failed", "User authentication against RSA SecurID Server failed",
  "24518", "Logon", "DEBUG", "Failure", "Low", "Other", "User canceled New PIN operation; User authentication against RSA SecurIDServer failed", "User canceled New PIN operation; User authentication against RSA SecurID Server failed",
  "24547", "Logon", "WARN", "Failure", "Low", "Session expired", "RSA request timeout expired. RSA authentication session cancelled", "RSA request timeout expired. RSA authentication session cancelled.",
  "24612", "Logon", "INFO", "Success", "Informational", "", "Authentication against the RADIUS token server succeeded", "Authentication against the RADIUS token server succeeded.",
  "24613", "Logon", "ERROR", "Failure", "Low", "Other", "Authentication against the RADIUS token server failed", "Authentication against the RADIUS token server failed.",
  "24614", "Logon", "INFO", "Failure", "Low", "No such user", "RADIUS token server authentication failure is translated as Unknown user failure", "RADIUS token server authentication failure is translated as Unknown user failure.",
  "24639", "Logon", "DEBUG", "Success", "Informational", "", "Authentication passed via Passcode cache", "User record was found in Passcode cache, passcode matches the passcode on the authentication request. Authentication passed via Passcode cache.",
  "24704", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "Authentication failed because identity credentials are ambiguous", "Authentication found several accounts matching to the given credentials (i.e identity name and password)",
  "24705", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication failed because ISE server is not joined to required domains", "Authentication failed because ISE server is not joined to required domains",
  "24706", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication failed because NTLM was blocked", "Authentication failed because NTLM was blocked",
  "24707", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication failed because all identity names have been rejected", "Authentication failed all identity names has been rejected according AD Identity Store Advanced Settings",
  "24708", "Logon", "DEBUG", "Failure", "Low", "No such user", "User not found in Active Directory. Some authentication domains were not available", "User not found in Active Directory. Some authentication domains were not available during identity resolution",
  "24709", "Logon", "DEBUG", "Failure", "Low", "No such user", "Host not found in Active Directory. Some authentication domains were not available", "Host not found in Active Directory. Some authentication domains were not available during identity resolution",
  "24712", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "Authentication failed because domain trust is restricted", "Authentication failed because domain trust is restricted",
  "24814", "Logon", "INFO", "Failure", "Low", "Other", "The responding provider was unable to successfully authenticate the principal", "The responding provider was unable to successfully authenticate the principal",
  "24853", "Logon", "DEBUG", "Success", "Informational", "", "Plain text password authentication in external ODBC database succeeded", "Plain text password authentication in external ODBC database succeeded",
  "24854", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "Plain text password authentication in external ODBC database failed", "Plain text password authentication in external ODBC database failed",
  "24860", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "ODBC database indicated plain text password authentication failure", "ODBC database indicated plain text password authentication failure",
  "24890", "Logon", "WARN", "Failure", "Low", "Other", "Social Login operation failed", "Social Login operation failed. Check the message details for more information",
  "24716", "Logon", "INFO", "Success", "Informational", "", "Active Directory Kerberos ticket authentication succeeded", "Active Directory Kerberos ticket authentication succeeded",
  "24717", "Logon", "ERROR", "Failure", "Low", "Other", "Active Directory Kerberos ticket authentication failed", "Active Directory Kerberos ticket authentication failed",
  "24719", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "Active Directory Kerberos ticket authentication failed because of the ISE account password mismatch, integrity check failure or expired ticket", "Active Directory Kerberos ticket authentication failed because of the ISE account password mismatch, integrity check failure or expired ticket",
  "89157", "Logon", "ERROR", "Failure", "Low", "Other", "CMCS authentication failure", "ISE is unable to authenticate with the Cisco MDM Cloud Service",
  "89159", "Logon", "ERROR", "Failure", "Low", "Other", "APNS authentication failure", "ISE is unable to authenticate with the Apple Push Notification System (APNS)",
  "89160", "Logon", "INFO", "Success", "Informational", "", "MDM User Authentication completed", "The User Authentication part of mobile device enrollment has completed",
  "33102", "Logon", "INFO", "Success", "Informational", "", "Successful user login to ISE configuration mode", "ISE administrator logged in to ISE configuration mode",
  "33103", "Logon", "INFO", "Failure", "Low", "Other", "User login to ISE configuration mode failed", "Login to ISE configuration mode failed",
  "5200", "Logon", "NOTICE", "Success", "Informational", "", "Authentication succeeded", "User authentication ended successfully",
  "5201", "Logon", "NOTICE", "Success", "Informational", "", "Authentication succeeded", "User authentication ended successfully",
  "5231", "Logon", "NOTICE", "Success", "Informational", "", "Guest Authentication Passed", "Guest Authentication Passed",
  "11002", "Logon", "DEBUG", "Success", "Informational", "", "Returned RADIUS Access-Accept", "Returned RADIUS Access-Accept - authentication succeeded",
  "11003", "Logon", "DEBUG", "Failure", "Low", "Other", "Returned RADIUS Access-Reject", "Returned RADIUS Access-Reject - authentication failed",
  "11039", "Logon", "INFO", "Failure", "Low", "Other", "RADIUS authentication request rejected due to critical logging error", "A RADIUS authentication request was rejected due to a critical logging error.",
  "11052", "Logon", "ERROR", "Failure", "Low", "Other", "Authentication request dropped due to unsupported port number", "An authentication request was dropped because it was received through an unsupported port number.",
  "11812", "Logon", "INFO", "Success", "Informational", "", "EAP-MSCHAP authentication succeeded", "EAP-MSCHAP authentication succeeded.",
  "11813", "Logon", "INFO", "Failure", "Low", "Other", "EAP-MSCHAP authentication failed", "EAP-MSCHAP authentication failed.",
  "11814", "Logon", "INFO", "Success", "Informational", "", "Inner EAP-MSCHAP authentication succeeded", "EAP-MSCHAP authentication for the inner EAP method succeeded.",
  "11815", "Logon", "INFO", "Failure", "Low", "Other", "Inner EAP-MSCHAP authentication failed", "EAP-MSCHAP authentication for the inner EAP method failed.",
  "11823", "Logon", "INFO", "Failure", "Low", "Other", "EAP-MSCHAP authentication attempt failed", "EAP-MSCHAP authentication attempt failed.",
  "11824", "Logon", "DEBUG", "Success", "Informational", "", "EAP-MSCHAP authentication attempt passed", "EAP-MSCHAP authentication attempt passed.",
  "12005", "Logon", "INFO", "Success", "Informational", "", "EAP-MD5 authentication succeeded", "EAP-MD5 authentication succeeded.",
  "12006", "Logon", "INFO", "Failure", "Low", "Other", "EAP-MD5 authentication failed", "EAP-MD5 authentication failed.",
  "12208", "Logon", "INFO", "Failure", "Low", "Other", "Client certificate was received but authentication failed", "ISE received client certificate during tunnel establishment or inside the tunnel but the authentication failed.",
  "12306", "Logon", "INFO", "Success", "Informational", "", "PEAP authentication succeeded", "PEAP authentication succeeded.",
  "12307", "Logon", "INFO", "Failure", "Low", "Other", "PEAP authentication failed", "PEAP authentication failed.",
  "12308", "Logon", "WARN", "Failure", "Low", "Other", "Client sent Result TLV indicating failure", "Internal error, possibly in the supplicant: PEAP v0 authentication failed because client sent Result TLV indicating failure. Client indicates that it does not support Crypto-Binding TLV",
  "12506", "Logon", "INFO", "Success", "Informational", "", "EAP-TLS authentication succeeded", "EAP-TLS authentication succeeded.",
  "12507", "Logon", "INFO", "Failure", "Low", "Other", "EAP-TLS authentication failed", "EAP-TLS authentication failed.",
  "12528", "Logon", "INFO", "Success", "Informational", "", "Inner EAP-TLS authentication succeeded", "EAP-TLS authentication for the inner EAP method succeeded.",
  "12529", "Logon", "INFO", "Failure", "Low", "Other", "Inner EAP-TLS authentication failed", "EAP-TLS authentication for the inner EAP method failed.",
  "12612", "Logon", "INFO", "Success", "Informational", "", "EAP-GTC authentication succeeded", "EAP-GTC authentication has succeeded.",
  "12613", "Logon", "INFO", "Failure", "Low", "Other", "EAP-GTC authentication failed", "EAP-GTC authentication has failed.",
  "12614", "Logon", "INFO", "Success", "Informational", "", "Inner EAP-GTC authentication succeeded", "EAP-GTC authentication for the inner EAP method has succeeded.",
  "12615", "Logon", "INFO", "Failure", "Low", "Other", "Inner EAP-GTC authentication failed", "EAP-GTC authentication for the inner EAP method has failed.",
  "12623", "Logon", "INFO", "Failure", "Low", "Other", "EAP-GTC authentication attempt failed", "The EAP-GTC authentication attempt has failed.",
  "12624", "Logon", "DEBUG", "Success", "Informational", "", "EAP-GTC authentication attempt passed", "The EAP-GTC authentication attempt has passed.",
  "12705", "Logon", "INFO", "Success", "Informational", "", "LEAP authentication passed; Continuing protocol", "LEAP authentication passed. Continue LEAP protocol.",
  "12706", "Logon", "INFO", "Failure", "Low", "Other", "LEAP authentication failed; Finishing protocol", "LEAP authentication has failed. Protocol finished with a failure.",
  "12707", "Logon", "INFO", "Failure", "Low", "Other", "LEAP authentication error; Finishing protocol", "A LEAP authentication error has occurred. Protocol finished with an error.",
  "12854", "Logon", "WARN", "Failure", "Low", "Incorrect password", "Cannot authenticate because password was not present or was empty", "ISE did not receive user password or received empty password. Plain password authentication cannot be performed with no password or empty password",
  "12975", "Logon", "INFO", "Success", "Informational", "", "EAP-TTLS authentication succeeded", "EAP-TTLS authentication succeeded.",
  "12976", "Logon", "INFO", "Failure", "Low", "Other", "EAP-TTLS authentication failed", "EAP-TTLS authentication failed.",
  "11700", "Logon", "INFO", "Success", "Informational", "", "5G AKA Authentication succeeded", "5G AKA Authentication succeeded."
  ];
let EventOriginalTypeList = toscalar(EventFieldsLookup 
    | summarize make_set(EventOriginalType));
let CiscoISEAuthParser=(disabled: bool=false) {
    Syslog
    | where not(disabled)
    | where ProcessName has_any ("CISE", "CSCO")
    | parse kind = regex SyslogMessage with @"\d{10}\s" EventOriginalType @"\s(NOTICE|INFO|WARN|WARNING|ERROR|FATAL|DEBUG)"
    | where EventOriginalType in (EventOriginalTypeList)
    | lookup EventFieldsLookup on EventOriginalType 
    | parse-kv SyslogMessage as (FailureReason: string, NetworkDeviceName: string, Protocol: string, DestinationIPAddress: string, DestinationPort: int, ['User-Name']: string, UserName: string, User: string, ['Remote-Address']: string, ['Device IP Address']: string, ['Device Port']: int, ['cisco-av-pair=audit-session-id']: string, ['Caller-Station-ID']: string) with (pair_delimiter=',', kv_delimiter='=')
    | project-rename
        LogonProtocol=Protocol
        , TargetIpAddr=DestinationIPAddress
        , TargetPortNumber=DestinationPort
        , TargetSessionId=["cisco-av-pair=audit-session-id"]
        , SrcPortNumber=['Device Port']
    | invoke _ASIM_ResolveSrcFQDN("['Caller-Station-ID']")
    | extend
        EventStartTime = coalesce(EventTime, TimeGenerated)
        , EventEndTime = coalesce(EventTime, TimeGenerated)
    | extend DvcHostname = coalesce(NetworkDeviceName, Computer, HostName)
    | extend TargetUsername = coalesce(['User-Name'], UserName, User)
    | extend
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername)
        , SrcIpAddr = coalesce(['Device IP Address'], ['Remote-Address'], tostring(extract(@"Caller-Station-ID=(\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3})", 1, SyslogMessage)), "")
    | extend EventOriginalResultDetails = case(isnotempty(FailureReason), FailureReason, EventOriginalResultDetails)
    | extend DvcIpAddr = iif(isnotempty(HostIP) and HostIP != "Unknown IP", HostIP, extract(@"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", 1, Computer))
    | extend 
        EventVendor = "Cisco"
        , EventProduct = "ISE"
        , EventProductVersion = "3.2"
        , EventCount = int(1)
        , EventSchema = "Authentication"
        , EventSchemaVersion = "0.1.3"
    // **************** <Aliases> *****************
    | extend 
        Dvc = coalesce(DvcIpAddr, DvcHostname)
        , IpAddr = SrcIpAddr
        , Dst = TargetIpAddr
        , Src = SrcIpAddr
        , User = TargetUsername
    // **************** </Aliases> ****************
    | project-away
        TenantId,
        SourceSystem,
        MG,
        Computer,
        EventTime,
        Facility,
        HostName,
        SeverityLevel,
        SyslogMessage,
        HostIP,
        ProcessName,
        ProcessID,
        _ResourceId,
        FailureReason,
        NetworkDeviceName,
        ['User-Name'],
        UserName,
        User,
        ['Remote-Address'],
        ['Device IP Address'],
        ['Caller-Station-ID']
};
CiscoISEAuthParser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationCiscoMeraki
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'meraki_CL' table to the ASIM Authentication normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationCiscoMeraki(    ['disabled']:bool=False)
{
let LogSubTypeList = dynamic(["8021x_auth", "wpa_auth", "splash_auth", "8021x_deauth", "8021x_client_deauth", "wpa_deauth", "8021x_eap_failure", "8021x_eap_success"]);
let EventResultDetailsLookup = datatable (reason: string, EventResultDetails: string)
    [
    "0", "Other",
    "1", "Other",
    "2", "Password expired",
    "3", "Other",
    "4", "Session expired",
    "5", "Other",
    "6", "Other",
    "7", "Other",
    "8", "Other",
    "9", "Other",
    "10", "Logon violates policy",
    "11", "Logon violates policy",
    "12", "Other",
    "13", "Logon violates policy",
    "14", "Other",
    "15", "Other",
    "16", "Other",
    "17", "Other",
    "18", "Incorrect key",
    "19", "Incorrect key",
    "20", "Incorrect key",
    "21", "Other",
    "22", "Other",
    "23", "Other",
    "24", "Logon violates policy",
];
let EventFieldsLookup = datatable (
    LogSubType: string,
    EventResult: string,
    EventType: string,
    EventSeverity: string
)
    [
    "8021x_auth", "Success", "Logon", "Informational",
    "wpa_auth", "Success", "Logon", "Informational",
    "splash_auth", "Success", "Logon", "Informational",
    "8021x_eap_success", "Success", "Logon", "Informational",
    "8021x_deauth", "Success", "Logoff", "Informational",
    "8021x_client_deauth", "Success", "Logoff", "Informational",
    "wpa_deauth", "Success", "Logoff", "Informational",
    "8021x_eap_failure", "Failure", "Logon", "Low",
    "disassociation", "Failure", "Logon", "Low",
];
let parser = (disabled: bool=false) {
    (
        meraki_CL
        | project-rename LogMessage =  Message
        )
    | where not(disabled)
        and LogMessage has "events"
        and (LogMessage has_any (LogSubTypeList) or LogMessage has_all("disassociation","auth_neg_failed"))
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        Epoch = tostring(Parser[0]),
        Device = tostring(Parser[1]),
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | where LogType == "events"
    | parse Substring with * "type=" LogSubType:string " " restOfMessage:string
    | where LogSubType in (LogSubTypeList) or (LogSubType == "disassociation" and Substring has "auth_neg_failed")
    | extend EpochTimestamp = split(Epoch, ".")
    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
    | extend EventEndTime = EventStartTime
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | parse-kv Substring as(last_known_client_ip: string, ip: string, client_ip: string, client_mac: string, identity: string, reason: string, aid: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend Dvc = DvcHostname, 
          aid = trim('"', aid)
    | extend
        SrcIpAddr = tostring(split(coalesce(last_known_client_ip, ip, client_ip), " ")[0]),
        DvcMacAddr = client_mac,
        TargetUsername = identity,
        AdditionalFields = bag_pack("aid", aid),
        EventOriginalType = LogType,
        EventOriginalSubType = LogSubType,
        EventUid = _ResourceId
    | extend
        SrcIpAddr = trim('"', SrcIpAddr),
        DvcMacAddr = trim('"', DvcMacAddr),
        TargetUsername = trim('"', TargetUsername),
        reason = trim('"', reason)
    | extend
        DvcIpAddr = SrcIpAddr,
        IpAddr = SrcIpAddr,
        User = TargetUsername,
        TargetUsernameType = iff(isnotempty(TargetUsername), "Simple", "")
    | lookup EventFieldsLookup on LogSubType
    | lookup EventResultDetailsLookup on reason
    | extend EventResultDetails = iff(tolong(reason) between (25 .. 65535), "Other", EventResultDetails)
    | extend
        EventCount=int(1),
        EventProduct="Meraki",
        EventVendor="Cisco",
        EventSchema="Authentication",
        EventSchemaVersion="0.1.3"
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Substring,
        LogType,
        LogSubType,
        restOfMessage,
        reason,
        last_known_client_ip,
        client_ip,
        ip,
        client_mac,
        identity,
        aid,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationCiscoMerakiSyslog
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'Syslog' table to the ASIM Authentication normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationCiscoMerakiSyslog(    ['disabled']:bool=False)
{
let LogSubTypeList = dynamic(["8021x_auth", "wpa_auth", "splash_auth", "8021x_deauth", "8021x_client_deauth", "wpa_deauth", "8021x_eap_failure", "8021x_eap_success"]);
let EventResultDetailsLookup = datatable (reason: string, EventResultDetails: string)
    [
    "0", "Other",
    "1", "Other",
    "2", "Password expired",
    "3", "Other",
    "4", "Session expired",
    "5", "Other",
    "6", "Other",
    "7", "Other",
    "8", "Other",
    "9", "Other",
    "10", "Logon violates policy",
    "11", "Logon violates policy",
    "12", "Other",
    "13", "Logon violates policy",
    "14", "Other",
    "15", "Other",
    "16", "Other",
    "17", "Other",
    "18", "Incorrect key",
    "19", "Incorrect key",
    "20", "Incorrect key",
    "21", "Other",
    "22", "Other",
    "23", "Other",
    "24", "Logon violates policy",
];
let EventFieldsLookup = datatable (
    LogSubType: string,
    EventResult: string,
    EventType: string,
    EventSeverity: string
)
    [
    "8021x_auth", "Success", "Logon", "Informational",
    "wpa_auth", "Success", "Logon", "Informational",
    "splash_auth", "Success", "Logon", "Informational",
    "8021x_eap_success", "Success", "Logon", "Informational",
    "8021x_deauth", "Success", "Logoff", "Informational",
    "8021x_client_deauth", "Success", "Logoff", "Informational",
    "wpa_deauth", "Success", "Logoff", "Informational",
    "8021x_eap_failure", "Failure", "Logon", "Low",
    "disassociation", "Failure", "Logon", "Low",
];
let parser = (disabled: bool=false) {
    (
        Syslog
        | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))
        | project-rename LogMessage =  SyslogMessage
        )
    | where not(disabled)
        and LogMessage has "events"
        and (LogMessage has_any (LogSubTypeList) or LogMessage has_all("disassociation","auth_neg_failed"))
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        Epoch = tostring(Parser[0]),
        Device = tostring(Parser[1]),
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | where LogType == "events"
    | parse Substring with * "type=" LogSubType:string " " restOfMessage:string
    | where LogSubType in (LogSubTypeList) or (LogSubType == "disassociation" and Substring has "auth_neg_failed")
    | extend EpochTimestamp = split(Epoch, ".")
    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
    | extend EventEndTime = EventStartTime
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | parse-kv Substring as(last_known_client_ip: string, ip: string, client_ip: string, client_mac: string, identity: string, reason: string, aid: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend Dvc = DvcHostname, 
          aid = trim('"', aid)
    | extend
        SrcIpAddr = tostring(split(coalesce(last_known_client_ip, ip, client_ip), " ")[0]),
        DvcMacAddr = client_mac,
        TargetUsername = identity,
        AdditionalFields = bag_pack("aid", aid),
        EventOriginalType = LogType,
        EventOriginalSubType = LogSubType,
        EventUid = _ResourceId
    | extend
        SrcIpAddr = trim('"', SrcIpAddr),
        DvcMacAddr = trim('"', DvcMacAddr),
        TargetUsername = trim('"', TargetUsername),
        reason = trim('"', reason)
    | extend
        DvcIpAddr = SrcIpAddr,
        IpAddr = SrcIpAddr,
        User = TargetUsername,
        TargetUsernameType = iff(isnotempty(TargetUsername), "Simple", "")
    | lookup EventFieldsLookup on LogSubType
    | lookup EventResultDetailsLookup on reason
    | extend EventResultDetails = iff(tolong(reason) between (25 .. 65535), "Other", EventResultDetails)
    | extend
        EventCount=int(1),
        EventProduct="Meraki",
        EventVendor="Cisco",
        EventSchema="Authentication",
        EventSchemaVersion="0.1.3"
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Substring,
        LogType,
        LogSubType,
        restOfMessage,
        reason,
        last_known_client_ip,
        client_ip,
        ip,
        client_mac,
        identity,
        aid,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG,
        EventTime,
        Facility,
        HostName,
        SeverityLevel,
        ProcessID,
        HostIP,
        ProcessName,
        CollectorHostName
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationCrowdStrikeFalconHost
// Description: This ASIM parser supports normalizing CrowdStrike Falcon Endpoint Protection logs to the ASIM Authentication normalized schema. These events are captured through CrowdStrike Falcon Endpoint Protection data connector which allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationCrowdStrikeFalconHost(    ['disabled']:bool=False)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
  [
    "0", "Informational",
    "1", "Informational",
    "2", "Low",
    "3", "Medium",
    "4", "High",
    "5", "High"
];
let parser = (disabled: bool=false) {
    CommonSecurityLog
    | where not(disabled)
    | where (DeviceVendor == "CrowdStrike" and DeviceProduct == "FalconHost")
    | where DeviceEventCategory == "AuthActivityAuditEvent" and DeviceEventClassID in ("userAuthenticate", "twoFactorAuthenticate")
    | lookup EventSeverityLookup on LogSeverity
    | extend
        EventResult = iff(EventOutcome == "true", "Success", "Failure"),
        EventStartTime = todatetime(DeviceCustomDate1),
        EventCount = int(1),
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventType = "Logon",
        EventProduct = "FalconHost",
        EventVendor = "CrowdStrike"
    | project-rename
        TargetIpAddr = DestinationTranslatedAddress,
        EventUid = _ItemId,
        EventOriginalSeverity = LogSeverity,
        EventOriginalSubType = DeviceEventClassID,
        EventOriginalType = DeviceEventCategory,
        EventProductVersion = DeviceVersion,
        EventOriginalResultDetails = EventOutcome,
        TargetUsername = DestinationUserName,
        TargetAppName = ProcessName
    | extend
        EventEndTime = EventStartTime,
        DvcIpAddr = TargetIpAddr,
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
        TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
        TargetAppType = iff(isnotempty(TargetAppName), "Service", ""),
        LogonMethod = iff(EventOriginalSubType =~ "userAuthenticate", "Username and Password", "Two Factor Authentication")
    | extend
        User = TargetUsername,
        Dst = TargetIpAddr,
        Dvc = coalesce(DvcIpAddr, EventProduct),
        Application = TargetAppName
    | project-away 
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        Computer,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        Activity,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        IndicatorThreatType,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        _ResourceId,
        ExtID,
        Message
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationGoogleWorkspace
// Description: This ASIM parser supports normalizing the Google Workspace sign-in logs(type=login) ingested in 'GWorkspace_ReportsAPI_login_CL' table to the ASIM Authentication normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationGoogleWorkspace(    ['disabled']:bool=False)
{
let parser = (
  disabled: bool = false
  ) {
  let GoogleWorkspaceSchema = datatable (
  event_name_s: string,
  event_type_s: string,
  id_uniqueQualifier_s: string,
  actor_email_s: string,
  actor_profileId_s: string,
  IPAddress: string,
  login_challenge_method_s: string,
  id_applicationName_s: string,
  affected_email_address_s: string,
  is_suspicious_b: bool,
  is_second_factor_b: bool,
  login_type_s: string,
  sensitive_action_name_s: string,
  login_challenge_status_s: string,
  TimeGenerated: datetime,
  _ItemId: string,
  _ResourceId: string,
  Computer: string,
  MG: string,
  ManagementGroupName: string,
  RawData: string,
  SourceSystem: string,
  TenantId: string
)[];
    let EventFieldsLookup = datatable (
    EventOriginalSubType: string,
    EventType: string,
    EventResult: string,
    DvcAction: string
)
        [
    "login_success", "Logon", "Success", "Allowed",
    "login_failure", "Logon", "Failure", "Blocked",
    "login_challenge", "Logon", "", "",
    "login_verification", "Logon", "", "",
    "risky_sensitive_action_blocked", "Logon", "Failure", "Blocked",
    "riskay_sensitive_action_allowed", "Logon", "Success", "Allowed",
    "logout", "Logoff", "Success", "Allowed",
    "suspicious_login", "Logon", "Failure", "Blocked",
    "suspicious_login_less_secure_app", "Logon", "Failure", "Blocked",
    "suspicious_programmatic_login", "Logon", "Failure", "Blocked",
    "user_signed_out_due_to_suspicious_session_cookie", "Logoff", "Success", "Allowed"
];
    let ThreatEventTypes = dynamic(['suspicious_login', 'suspicious_login_less_secure_app', 'suspicious_programmatic_login', 'user_signed_out_due_to_suspicious_session_cookie']);
    let SupportedEventNames = EventFieldsLookup
        | project EventOriginalSubType;
    union isfuzzy=true  GoogleWorkspaceSchema, GWorkspace_ReportsAPI_login_CL
    | where not(disabled)
    | where event_name_s in (SupportedEventNames)
    | lookup EventFieldsLookup on $left.event_name_s == $right.EventOriginalSubType
    | project-rename
        TargetUsername = actor_email_s,
        TargetUserId = actor_profileId_s,
        SrcIpAddr = IPAddress,
        LogonMethod = login_challenge_method_s,
        EventOriginalType = event_type_s,
        EventOriginalUid = id_uniqueQualifier_s
    | extend
        TargetUsername = iif(event_name_s in (ThreatEventTypes), affected_email_address_s, TargetUsername),
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
        TargetUserIdType = iif(isnotempty(TargetUserId), "GWorkspaceProfileID", ""),
        EventSeverity = iif(event_name_s in (ThreatEventTypes), "High", "Informational")
    | extend 
        AdditionalFields = bag_pack(
                      "Is_Suspicious",
                      is_suspicious_b,
                      "Is_Second_Factor_b",
                      is_second_factor_b,
                      "Logon_Type",
                      login_type_s,
                      "Sensitive_Action_Name",
                      sensitive_action_name_s
                  ),
        EventResult = case(
                  event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == "passed",
                  "Success",
                  event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == "incorrect_answer_entered",
                  "Failure",
                  EventResult
              ),
        EventResultDetails = iif(event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == "incorrect_answer_entered", "MFA not satisfied", ""),
        RuleName = case(
              event_name_s == 'suspicious_login',
              "Google has detected a suspicious login for TargetUSerName",
              event_name_s == 'suspicious_login_less_secure_app',
              "Google has detected a suspicious login for TargetUSerName from a less secure app",
              event_name_s == 'suspicious_programmatic_login',
              "Google has detected a suspicious programmatic login for TargetUserName",
              event_name_s == 'user_signed_out_due_to_suspicious_session_cookie',
              "Suspicious session cookie detected for user TargetUserName",
              ""
          ),
        ThreatField = iif(event_name_s in (ThreatEventTypes), "TargetUserName", ""),
        ThreatFirstReportedTime = iif(event_name_s in (ThreatEventTypes), TimeGenerated, datetime(null)),
        ThreatLastReportedTime = iif(event_name_s in (ThreatEventTypes), TimeGenerated, datetime(null))
    | extend
        EventOriginalSubType = event_name_s,
        TargetAppName = "Google Workspace - login",
        Dst = "Google Workspace",
        Application = "Google Workspace",
        TargetAppType = "SaaS application",
        IpAddr = SrcIpAddr,
        User = TargetUsername,
        EventCount = int(1),
        EventStartTime = TimeGenerated,
        EventEndTime = TimeGenerated,
        EventProduct = "Workspace",
        EventVendor = "Google",
        Dvc="Workspace",
        EventSchema = 'Authentication',
        EventSchemaVersion = '0.1.3',
        EventUid = _ItemId
    | project-away 
        *_s,
        *_b,
        _ResourceId,
        Computer,
        MG,
        ManagementGroupName,
        RawData,
        SourceSystem,
        TenantId
};
parser (disabled = disabled)
}



//
// Function Name: ASimAuthenticationM365Defender
// Description: This ASIM parser supports normalizing endpoint authentication events, collected by Microsoft 365 Defender for Endpoint, stored in the  DeviceLogonEvents table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationM365Defender(    ['disabled']:bool=False)
{
let EventResultDetailsLookup=datatable(EventOriginalResultDetails:string, EventResultDetails:string)[
  'InvalidUserNameOrPassword','No such user or password'
];
let EventSubTypeLookup = datatable (EventOriginalType:string, EventSubType:string) [ 
  'Batch',                            'Service',
  'CachedInteractive',                'Interactive',
  'Interactive',                      'Interactive',
  'Network',                          'Remote',
  'Remote interactive (RDP) logons',  'RemoteInteractive',
  'RemoteInteractive',                'RemoteInteractive',
  'Service',                          'Service',
  'Unknown',                          ''
];
let EventResultLookup = datatable (ActionType:string, EventResult:string) [ 
  'LogonAttempted', 'NA',
  'LogonFailed',    'Failure',
  'LogonSuccess',   'Success'
];
let parser = (
  disabled:bool=false
){
  let UnixDeviceLogonEvents = (disabled:bool=false) {
      DeviceLogonEvents  
      | where not(disabled)
      | where InitiatingProcessFolderPath startswith "/"
      | extend 
          ActorUsernameType  = "Simple",
          TargetDvcOs        = "Linux",
          TargetUsernameType = "Simple"
      | project-rename 
          ActingProcessName  = InitiatingProcessFolderPath,
          ActorUsername      = InitiatingProcessAccountName,
          TargetUsername     = AccountName
      | project-away 
          InitiatingProcessAccountSid, AccountDomain, InitiatingProcessAccountDomain, InitiatingProcessFileName, AccountSid
  };
  let WindowsDeviceLogonEvents = (disabled:bool=false) {
      DeviceLogonEvents  
      | where not(disabled)
      | where InitiatingProcessFolderPath !startswith "/"
      | extend 
          ActingProcessName           = strcat (InitiatingProcessFolderPath,'\\',InitiatingProcessFileName),
          ActorUserIdType             = 'SID',
          ActorUsername               = case (
            isempty(InitiatingProcessAccountName), "",
            isempty(InitiatingProcessAccountDomain), InitiatingProcessAccountName,
            strcat(InitiatingProcessAccountDomain, '\\', InitiatingProcessAccountName)
          ),
          ActorUsernameType           = iff (
            InitiatingProcessAccountDomain == '','Simple',
            'Windows'
          ),
          TargetDvcOs = "Windows",
          TargetUserIdType            = 'SID',
          TargetUsername              = iff (
              isempty(AccountDomain), AccountName,
              strcat(AccountDomain, '\\', AccountName)
          ),
          TargetUsernameType          = iff (AccountDomain == '','Simple', 'Windows')
      | project-rename 
          ActorUserId        = InitiatingProcessAccountSid,
          TargetUserId       = AccountSid
      // -- Specific identifiers aliases
      | extend 
          TargetUserSid         = TargetUserId,
          ActorUserSid          = ActorUserId,
          TargetWindowsUsername = TargetUsername,
          ActorWindowsUsername  = ActorUsername,
          ActorUserType         = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
      | extend 
          TargetUserType = iff(IsLocalAdmin, 
              'Admin',
              _ASIM_GetWindowsUserType (TargetWindowsUsername, TargetUserSid)
          )
      | project-away InitiatingProcessAccountName, InitiatingProcessAccountDomain, AccountDomain, AccountName, InitiatingProcessFolderPath, InitiatingProcessFileName
  };
  union 
    WindowsDeviceLogonEvents (disabled=disabled),
    UnixDeviceLogonEvents (disabled=disabled)
  | project-away SourceSystem, TenantId, Timestamp, MachineGroup
  | project-rename 
      ActingProcessCommandLine    = InitiatingProcessCommandLine,
      ActingProcessCreationTime   = InitiatingProcessCreationTime,
      ActingProcessIntegrityLevel = InitiatingProcessIntegrityLevel,
      ActingProcessMD5            = InitiatingProcessMD5,
      ActingProcessSHA1           = InitiatingProcessSHA1 ,
      ActingProcessSHA256         = InitiatingProcessSHA256,
      ActingProcessTokenElevation = InitiatingProcessTokenElevation,
      ActorUserAadId              = InitiatingProcessAccountObjectId,
      ActorUserUpn                = InitiatingProcessAccountUpn,
      EventOriginalResultDetails  = FailureReason,
      EventOriginalType           = LogonType,
      EventUid                    = _ItemId,
      LogonProtocol               = Protocol,
      ParentProcessCreationTime   = InitiatingProcessParentCreationTime,
      ParentProcessName           = InitiatingProcessParentFileName,
      SrcHostname                 = RemoteDeviceName,
      SrcPortNumber               = RemotePort,
      TargetDvcId                 = DeviceId
  | extend 
      ActingProcessId             = tostring (InitiatingProcessId),
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalUid            = tostring (ReportId),
      EventProduct                = 'M365 Defender for EndPoint',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.3',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logon',
      EventVendor                 = 'Microsoft',
      ParentProcessId             = tostring (InitiatingProcessParentId),
      SrcIpAddr                   = iff (RemoteIP == '-', '', RemoteIP),
      TargetDvcIdType             = 'MDEid',
      TargetSessionId             = tostring (LogonId)
  | extend
       Hash = coalesce(
          ActingProcessMD5,
          ActingProcessSHA1,
          ActingProcessSHA256
       )
  | extend
      HashType = tostring(dynamic(["SHA256", "SHA1", "MD5"])[array_index_of(pack_array(ActingProcessSHA256, ActingProcessSHA1, ActingProcessMD5),Hash)])     
  | invoke _ASIM_ResolveFQDN('DeviceName')
  | project-rename 
      TargetDomain       = Domain, 
      TargetDomainType   = DomainType,
      TargetFQDN         = FQDN,
      TargetHostname     = ExtractedHostname
  | project-away DeviceName
  | lookup EventResultDetailsLookup on EventOriginalResultDetails 
  | lookup EventSubTypeLookup on EventOriginalType
  | lookup EventResultLookup on ActionType
  | extend
       EventSeverity = iff (EventResult == "Success", "Informational", "Low")
  // -- Specific identifiers aliases
  | extend
      DvcMDEid              = TargetDvcId,
      TargetDvcMDEid        = TargetDvcId
  // --  Aliases
  | extend 
      ActingAppName = ActingProcessName,
      ActingAppType = "Process",
      Dvc           = coalesce (TargetFQDN, TargetHostname),
      IpAddr        = SrcIpAddr,
      Prcess        = ActingProcessName,
      Src           = coalesce (SrcIpAddr, SrcHostname),
      User          = TargetUsername,
  // -- Alias Dvc to Target,
      DvcDomain     = TargetDomain,
      DvcDomainType = TargetDomainType,
      DvcFQDN       = TargetFQDN,
      DvcHostname   = TargetHostname,
      DvcId         = TargetDvcId,
      DvcIdType     = TargetDvcIdType,
      DvcOs         = TargetDvcOs
  | extend 
      Dst         = Dvc,
      LogonTarget = Dvc
  | project-away ReportId, LogonId, InitiatingProcessId, InitiatingProcessParentId, ActionType, InitiatingProcessFileSize, InitiatingProcessVersionInfoCompanyName, InitiatingProcessVersionInfoFileDescription, InitiatingProcessVersionInfoInternalFileName, InitiatingProcessVersionInfoOriginalFileName, InitiatingProcessVersionInfoProductName, InitiatingProcessVersionInfoProductVersion, AppGuardContainerId, RemoteIPType, IsLocalAdmin, RemoteIP
};
parser (
    disabled = disabled
)
}



//
// Function Name: ASimAuthenticationMD4IoT
// Description: This ASIM parser supports normalizing Microsoft Defender for IoT endpoint logs to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationMD4IoT(    ['disabled']:bool=False)
{
let parser=(disabled:bool=false)
{
  SecurityIoTRawEvent | where not(disabled)
  | where RawEventName == "Login" 
  | project-rename EventUid = _ItemId
  | extend
      EventDetails = todynamic(EventDetails)
  | extend
      EventCount         = int(1),
      EventEndTime       = todatetime(TimeGenerated), 
      EventOriginalUid   = tostring(EventDetails.OriginalEventId), 
      EventProduct       = 'Microsoft Defender for IoT',
      EventResult        = iff (EventDetails.Operation == 'LoginFailed', 'Failure', 'Success'),  
      EventSchemaVersion = '0.1.0', 
      EventStartTime     = todatetime(EventDetails.TimestampUTC), 
      EventType          = iff (EventDetails.Operation == 'Logout', 'Logoff', 'Logon'),  
      EventVendor        = 'Microsoft'
  | extend
      ActingProcessId    = tostring(EventDetails.ProcessId),  
      ActingProcessName  = tostring(EventDetails.Executable),  // -- Linux input device or service used to authenticate, for example pts/1, tty1, pts/0, ssh:notty 
      DvcOs              = iif (EventDetails.MessageSource == "Linux", "Linux", "Windows"),  // -- Intermediate fix
      SrcIpAddr          = tostring(EventDetails.RemoteAddress), 
      TargetUsername     = tostring(EventDetails.UserName),
      TargetUsernameType = "Simple"
  | project-rename
      _ResourceId         = AssociatedResourceId, 
      _SubscriptionId     = AzureSubscriptionId, 
      DvcHostname         = DeviceId, 
      EventProductVersion = AgentVersion  // -- Not available in Windows
    // -- aliases
  | extend 
      Dvc          = DvcHostname,
      IpAddr       = SrcIpAddr,
      Process      = ActingProcessName, 
      SrcDvcIpAddr = SrcIpAddr,
      User         = TargetUsername
  };
  parser (
      disabled = disabled
  )
}



//
// Function Name: ASimAuthenticationMicrosoftWindowsEvent
// Description: This ASIM parser supports normalizing Windows Authentication events (4624, 4625, 4634, and 4647), collected either by the Log Analytics Agent or the Azure Monitor Agent, into either the WindowsEvent (WEF) or SecurityEvent tables, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationMicrosoftWindowsEvent(    ['disabled']:bool=False)
{
let LogonEvents=dynamic([4624,4625]);
let LogoffEvents=dynamic([4634,4647]);
let LogonTypes=datatable(LogonType:int, EventSubType:string)[
    2, 'Interactive',
    3, 'Network',
    4, 'Batch',
    5, 'Service',
    7, 'Unlock',
    8, 'NetworkCleartext',
    9, 'NewCredentials',
    10, 'RemoteInteractive',
    11, 'CachedInteractive'];
// https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/quick-reference-troubleshooting-netlogon-error-codes/ba-p/256000
let LogonStatus=datatable 
    (EventStatus:string,EventOriginalResultDetails:string, EventResultDetails:string)[
    '0x80090325', 'SEC_E_UNTRUSTED_ROOT','Other',
    '0xc0000064', 'STATUS_NO_SUCH_USER','No such user or password',
    '0xc000006f', 'STATUS_INVALID_LOGON_HOURS','Logon violates policy',
    '0xc0000070', 'STATUS_INVALID_WORKSTATION','Logon violates policy',
    '0xc0000071', 'STATUS_PASSWORD_EXPIRED','Password expired',
    '0xc0000072', 'STATUS_ACCOUNT_DISABLED','User disabled',
    '0xc0000133', 'STATUS_TIME_DIFFERENCE_AT_DC','Other',
    '0xc000018d', 'STATUS_TRUSTED_RELATIONSHIP_FAILURE','Other',
    '0xc0000193', 'STATUS_ACCOUNT_EXPIRED','Account expired',
    '0xc0000380', 'STATUS_SMARTCARD_WRONG_PIN','Other',
    '0xc0000381', 'STATUS_SMARTCARD_CARD_BLOCKED','Other',
    '0xc0000382', 'STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED','Other',
    '0xc0000383', 'STATUS_SMARTCARD_NO_CARD','Other',
    '0xc0000384', 'STATUS_SMARTCARD_NO_KEY_CONTAINER','Other',
    '0xc0000385', 'STATUS_SMARTCARD_NO_CERTIFICATE','Other',
    '0xc0000386', 'STATUS_SMARTCARD_NO_KEYSET','Other',
    '0xc0000387', 'STATUS_SMARTCARD_IO_ERROR','Other',
    '0xc0000388', 'STATUS_DOWNGRADE_DETECTED','Other',
    '0xc0000389', 'STATUS_SMARTCARD_CERT_REVOKED','Other',
    '0x80090302', 'SEC_E_UNSUPPORTED_FUNCTION','Other',
    '0x80090308', 'SEC_E_INVALID_TOKEN','Other',
    '0x8009030e', 'SEC_E_NO_CREDENTIALS','Other',
    '0xc0000008', 'STATUS_INVALID_HANDLE','Other',
    '0xc0000017', 'STATUS_NO_MEMORY','Other',
    '0xc0000022', 'STATUS_ACCESS_DENIED','Other',
    '0xc0000034', 'STATUS_OBJECT_NAME_NOT_FOUND','Other',
    '0xc000005e', 'STATUS_NO_LOGON_SERVERS','Other',
    '0xc000006a', 'STATUS_WRONG_PASSWORD','Incorrect password',
    '0xc000006d', 'STATUS_LOGON_FAILURE','Other',
    '0xc000006e', 'STATUS_ACCOUNT_RESTRICTION','Logon violates policy',
    '0xc0000073', 'STATUS_NONE_MAPPED','Other',
    '0xc00000fe', 'STATUS_NO_SUCH_PACKAGE','Other',
    '0xc000009a', 'STATUS_INSUFFICIENT_RESOURCES','Other',
    '0xc00000dc', 'STATUS_INVALID_SERVER_STATE','Other',
    '0xc0000106', 'STATUS_NAME_TOO_LONG','Other',
    '0xc000010b', 'STATUS_INVALID_LOGON_TYPE','Logon violates policy',
    '0xc000015b', 'STATUS_LOGON_TYPE_NOT_GRANTED','Logon violates policy',
    '0xc000018b', 'STATUS_NO_TRUST_SAM_ACCOUNT','Logon violates policy',
    '0xc0000224', 'STATUS_PASSWORD_MUST_CHANGE','Other',
    '0xc0000234', 'STATUS_ACCOUNT_LOCKED_OUT','User locked',
    '0xc00002ee', 'STATUS_UNFINISHED_CONTEXT_DELETED','Other'];
let WinLogon=(disabled:bool=false){ 
    WindowsEvent 
    | where not(disabled)
    | where Provider == 'Microsoft-Windows-Security-Auditing'
    | where EventID in (LogonEvents) or EventID in (LogoffEvents)
    | extend    
        ActingProcessCreationTime = EventData.ProcessCreationTime,
        ActingProcessId           = tostring(toint(EventData.ProcessId)),
        ActingProcessName         = tostring(EventData.ProcessName),
        ActorSessionId            = tostring(EventData.SubjectLogonId),
        ActorUserId               = tostring(EventData.SubjectUserSid),
        ActorUsername             = tostring(iff (EventData.SubjectDomainName in ('-',''), EventData.SubjectUserName, strcat(EventData.SubjectDomainName, @"\" , EventData.SubjectUserName))),
        EventProduct              = "Security Events",
        LogonGuid                 = tostring(EventData.LogonGuid),
        LogonProtocol             = tostring(EventData.AuthenticationPackageName),
        LogonType                 = toint(EventData.LogonType),
        SrcDvcHostname            = tostring(EventData.WorkstationName),
        SrcDvcIpAddr              = tostring(EventData.IpAddress),
        Status                    = tostring(EventData.Status),
        SubStatus                 = tostring(EventData.SubStatus),
        TargetDomainName          = tostring(EventData.TargetDomainName),
        TargetPortNumber          = toint(EventData.IpPort),
        TargetSessionId           = tostring(EventData.TargetLogonId),
        TargetUserId              = tostring(EventData.TargetUserSid),
        TargetUsername            = tostring(iff (EventData.TargetDomainName in ('-',''), EventData.TargetUserName, strcat(EventData.TargetDomainName, @"\" , EventData.TargetUserName)))
    | extend 
        EventStatus = iff(SubStatus=='0x0',Status,SubStatus)
    // -- creating EventMessage matching EventMessage in SecurityEvent table
    | extend 
        EventMessage = case(
                            EventID == 4624 ,"4624 - An account was successfully logged on.",
                            EventID == 4625, "4625 - An account failed to log on.",
                            EventID == 4634, "4634 - An account was logged off.", 
                            "4647 - User initiated logoff."),
        EventResult = iff(EventID == 4625, 'Failure', 'Success')
    | project-rename 
        EventOriginalType = EventID,
        EventOriginalUid  = EventOriginId,   
        EventUid          = _ItemId,       
        TargetDvcHostname = Computer
    | extend 
        ActorUserIdType    = 'SID',
        ActorUsernameType  = iff(EventData.SubjectDomainName in ('-',''),'Simple', 'Windows' ),
        EventCount         = int(1),
        EventEndTime       = TimeGenerated,
        EventSchemaVersion = '0.1.0',
        EventStartTime     = TimeGenerated,
        EventStatus        = iff(SubStatus=='0x0',Status,SubStatus),
        EventType          = iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon'),
        EventVendor        = 'Microsoft',
        SrcDvcOs           = 'Windows',
        TargetUserIdType   = 'SID',
        TargetUsernameType = iff(TargetDomainName in ('-',''), 'Simple', 'Windows')
    | extend
        ActorUserType  = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId),
        TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
    | lookup LogonStatus on EventStatus
    | lookup LogonTypes on LogonType
    /// ** Aliases 
    | extend
        Dvc         = SrcDvcHostname,
        LogonTarget = TargetDvcHostname,
        User        = TargetUsername
};
let SecEventLogon=(disabled:bool=false){
  SecurityEvent 
  | where not(disabled)
  | where EventID in (LogonEvents) or 
          EventID in (LogoffEvents)
  | project-rename 
      ActorSessionId    = SubjectLogonId,
      ActorUserId       = SubjectUserSid,
      EventMessage      = Activity,
      EventOriginalType = EventID,
      EventOriginalUid  = EventOriginId,
      LogonProtocol     = AuthenticationPackageName,
      SrcDvcHostname    = WorkstationName,
      SrcDvcIpAddr      = IpAddress,
      TargetDvcHostname = Computer,
      TargetSessionId   = TargetLogonId,
      TargetUserId      = TargetUserSid
  | extend 
      ActorUserIdType    = 'SID',
      ActorUsername      = iff (SubjectDomainName in ('-',''), SubjectUserName, SubjectAccount),
      ActorUsernameType  = iff(SubjectDomainName in ('-',''), 'Simple', 'Windows' ),
      EventCount         = int(1),
      EventEndTime       = TimeGenerated,
      EventProduct       = "Security Events",
      EventResult        = iff(EventOriginalType == 4625, 'Failure', 'Success'),
      EventSchemaVersion = '0.1.0',
      EventStartTime     = TimeGenerated,
      EventStatus        = iff(SubStatus=='0x0',Status,SubStatus),
      EventType          = iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon'),
      EventVendor        = 'Microsoft',
      SrcDvcOs           = 'Windows',
      TargetUserIdType   = 'SID',
      TargetUsername     = iff (TargetDomainName in ('-',''), trim(@'\\',TargetUserName), trim(@'\\',TargetAccount)),
      TargetUsernameType = iff (TargetDomainName in ('-',''), 'Simple', 'Windows')
  | project-away TargetUserName, AccountType
  | extend
      ActorUserType      = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId),
      TargetUserType     = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
  | lookup LogonStatus on EventStatus
  | lookup LogonTypes  on LogonType
  /// ** Aliases 
  | extend
      Dvc         = SrcDvcHostname,
      LogonTarget = TargetDvcHostname,
      User        = TargetUsername
  };
union isfuzzy=true 
  SecEventLogon(disabled=disabled), 
  WinLogon(disabled=disabled)
}



//
// Function Name: ASimAuthenticationOktaSSO
// Description: This ASIM parser supports normalizing Okta sign in logs, stored in the Okta_CL table, to the ASIM Authentication schema. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationOktaSSO(    ['disabled']:bool=False)
{
let parser=(disabled: bool=false) {
  let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
  let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
  let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
  let emptyOctV1Table = datatable(TimeGenerated:datetime)[];
    // https://developer.okta.com/docs/reference/api/event-types/#catalog
    let OktaV1 = union isfuzzy=true emptyOctV1Table, Okta_CL 
        | where not(disabled)
        | extend
            outcome_result_s=column_ifexists('outcome_result_s', "")
            ,
            eventType_s=column_ifexists('eventType_s', "")
            ,
            legacyEventType_s=column_ifexists('legacyEventType_s', "")
            ,
            client_geographicalContext_geolocation_lat_d=column_ifexists('client_geographicalContext_geolocation_lat_d', "")
            ,
            client_geographicalContext_geolocation_lon_d=column_ifexists('client_geographicalContext_geolocation_lon_d', "")
        | where eventType_s in (OktaSigninEvents)
        | extend 
            EventProduct='Okta'
            ,
            EventVendor='Okta'
            ,
            EventSchema = 'Authentication'
            ,
            EventCount=int(1)
            ,
            EventSchemaVersion='0.1.0'
            ,
            EventResult = case (outcome_result_s in (OktaSuccessfulOutcome), 'Success', outcome_result_s in (OktaFailedOutcome), 'Failure', 'Partial')
            ,
            EventStartTime=TimeGenerated
            ,
            EventEndTime=TimeGenerated
            ,
            EventType=iff(eventType_s hassuffix 'start', 'Logon', 'Logoff')
            ,
            EventSubType=legacyEventType_s
            ,
            EventMessage=column_ifexists('displayMessage_s', "")
            ,
            EventOriginalResultDetails=column_ifexists('outcome_reason_s', "")
            ,
            EventOriginalUid = column_ifexists('uuid_g', "")
            ,
            TargetUserIdType='OktaId'
            ,
            TargetUsernameType='UPN'
            ,
            TargetSessionId=column_ifexists('authenticationContext_externalSessionId_s', "")
            ,
            TargetUserId=column_ifexists('actor_id_s', "")
            ,
            TargetUsername=column_ifexists('actor_alternateId_s', "")
            ,
            TargetUserType=column_ifexists('actor_type_s', "")
            ,
            SrcGeoLatitude=toreal(client_geographicalContext_geolocation_lat_d)
            ,
            SrcGeoLongitude=toreal(client_geographicalContext_geolocation_lon_d)
            ,
            SrcDvcOs=column_ifexists('client_userAgent_os_s', "")
            ,
            SrcIsp=column_ifexists('securityContext_isp_s', "")
            ,
            SrcGeoCity=column_ifexists('client_geographicalContext_city_s', "")
            ,
            SrcGeoCountry=column_ifexists('client_geographicalContext_country_s', "")
            ,
            SrcIpAddr = column_ifexists('client_ipAddress_s', "")
            ,
            ActingAppName=column_ifexists('client_userAgent_browser_s', "")
            ,
            ActingAppType="Browser"
            ,
            LogonMethod=column_ifexists('authenticationContext_credentialType_s', "")
            ,
            HttpUserAgent=column_ifexists('client_userAgent_rawUserAgent_s', "")
        // ** Aliases
        | extend 
            User=TargetUsername
            ,
            Dvc=EventVendor
            ,
            IpAddr=SrcIpAddr
        | project-away *_s, *_d, *_b, *_g, *_t;
    OktaV1
};
parser(disabled = disabled)
}



//
// Function Name: ASimAuthenticationOktaV2
// Description: This ASIM parser supports normalizing Okta sign in logs, stored in OktaV2_CL table, to the ASIM Authentication schema. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationOktaV2(    ['disabled']:bool=False)
{
let parser=(disabled: bool=false) {
  let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
  let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
  let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
  let emptyOctaV2Table = datatable(
  TimeGenerated: datetime,
  ActorDetailEntry: dynamic,
  ActorDisplayName: string,
  AuthenticationContext: string,
  AuthenticationProvider: string,
  AuthenticationStep: string,
  AuthenticationContextAuthenticationProvider: string,
  AuthenticationContextAuthenticationStep: int,
  AuthenticationContextCredentialProvider: string,
  AuthenticationContextInterface: string,
  AuthenticationContextIssuerId: string,
  AuthenticationContextIssuerType: string,
  DebugData: dynamic,
  DvcAction: string,
  EventResult:string,
  OriginalActorAlternateId: string,
  OriginalClientDevice: string,
  OriginalOutcomeResult: string,
  OriginalSeverity: string,
  OriginalTarget: dynamic,
  OriginalUserId: string,
  OriginalUserType: string,
  Request: dynamic,
  SecurityContextAsNumber: int,
  SecurityContextAsOrg: string,
  SecurityContextDomain: string,
  SecurityContextIsProxy: bool,
  TransactionDetail: dynamic,
  TransactionId: string,
  TransactionType: string
)[];
    let OktaV2 = union isfuzzy=true emptyOctaV2Table, OktaV2_CL
        | where not(disabled)      
        | extend
            EventOriginalType=column_ifexists('EventOriginalType', "") 
            ,
            OriginalActorAlternateId = column_ifexists('OriginalActorAlternateId', "")
            ,
            ActorUsername=column_ifexists('ActorUsername', "")
            ,
            SrcIpAddr = column_ifexists('SrcIpAddr', "")
        | where EventOriginalType in (OktaSigninEvents)
        | extend ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)
        | extend 
            EventProduct='Okta'
            ,
            EventSchema = 'Authentication'
            ,
            EventVendor='Okta'
            ,
            EventCount=int(1)
            ,
            EventSchemaVersion='0.1.0'
            ,
            EventStartTime=TimeGenerated
            ,
            EventEndTime=TimeGenerated
            ,
            EventType=iff(EventOriginalType hassuffix 'start', 'Logon', 'Logoff')       
            ,
            TargetSessionId=column_ifexists('ActorSessionId', "")
            ,
            TargetUserId= column_ifexists('ActorUserId', "")
            ,
            TargetUsername=column_ifexists('ActorUsername', "")
            ,
            TargetUserType=column_ifexists('ActorUserType', "")
            ,
            TargetUserIdType=column_ifexists('ActorUserIdType', "")
            ,
            TargetUsernameType=column_ifexists('ActorUsernameType', "")
            ,
            SrcIpAddr = column_ifexists('SrcIpAddr', "")
            //** extend non-normalized fields to be projected-away 
            ,
            ActorDetailEntry,
            ActorDisplayName,
            AuthenticationContextAuthenticationProvider,
            AuthenticationContextAuthenticationStep,
            AuthenticationContextCredentialProvider,
            AuthenticationContextInterface,
            AuthenticationContextIssuerId,
            AuthenticationContextIssuerType
            ,
            DebugData,
            DvcAction,
            OriginalActorAlternateId,
            OriginalClientDevice,
            OriginalOutcomeResult,
            OriginalSeverity,
            OriginalTarget,
            OriginalUserId,
            OriginalUserType,
            Request,
            SecurityContextAsNumber,
            SecurityContextAsOrg,
            SecurityContextDomain,
            SecurityContextIsProxy
            ,
            TransactionDetail,
            TransactionId,
            TransactionType
        // ** Aliases
        | extend 
            User=TargetUsername
            ,
            Dvc=EventVendor
            ,
            IpAddr=SrcIpAddr
        | project-away
            ActorDetailEntry,
            ActorDisplayName,
            AuthenticationContextAuthenticationProvider,
            AuthenticationContextAuthenticationStep,
            AuthenticationContextCredentialProvider,
            AuthenticationContextInterface,
            AuthenticationContextIssuerId,
            AuthenticationContextIssuerType,
            DebugData,
            DvcAction,
            OriginalActorAlternateId,
            OriginalClientDevice,
            OriginalOutcomeResult,
            OriginalSeverity,
            OriginalTarget,
            OriginalUserId,
            OriginalUserType,
            Request,
            SecurityContextAsNumber,
            SecurityContextAsOrg,
            SecurityContextDomain,
            SecurityContextIsProxy,
            TransactionId,
            TransactionType;
    OktaV2
};
parser(disabled = disabled)
}



//
// Function Name: ASimAuthenticationPaloAltoCortexDataLake
// Description: This ASIM parser supports normalizing Palo Alto Cortex Data Lake logs to the ASIM Authentication normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationPaloAltoCortexDataLake(    ['disabled']:bool=False)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
[
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Low",
    "5", "Low",
    "6", "Medium",
    "7", "Medium",
    "8", "Medium",
    "9", "High",
    "10", "High"
];
let parser = (disabled: bool=false) {
    CommonSecurityLog
    | where not(disabled)
        and DeviceVendor == "Palo Alto Networks" and DeviceProduct == "LF"
        and DeviceEventClassID == "AUTH"
    | parse-kv AdditionalExtensions as (PanOSSourceDeviceHost: string, PanOSSourceDeviceOSFamily: string, PanOSAuthenticationProtocol: string, PanOSAuthenticatedUserDomain: string, PanOSAuthenticatedUserName: string, PanOSAuthenticatedUserUUID: string, start: string, PanOSLogSource: string, PanOSRuleMatchedUUID: string, PanOSAuthenticationDescription: string, PanOSClientTypeName: string, PanOSConfigVersion: string, PanOSMFAVendor: string, PanOSSourceDeviceCategory: string, PanOSSourceDeviceModel: string, PanOSSourceDeviceProfile: string, PanOSSourceDeviceVendor: string, PanOSUserAgentString: string, PanOSCortexDataLakeTenantID: string, PanOSSessionID: string) with (pair_delimiter=";", kv_delimiter="=")
    | invoke _ASIM_ResolveDvcFQDN('DeviceName')
    | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')
    | lookup EventSeverityLookup on LogSeverity
    | extend
        EventStartTime = todatetime(start),
        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
        TargetIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
        EventMessage = Message,
        LogonMethod = case(
                      FieldDeviceCustomNumber1 == 1, "Username & Password",
                      FieldDeviceCustomNumber1 == 2, "Multi factor authentication",
                      FieldDeviceCustomNumber1 == 3, "Multi factor authentication",
                      ""
        ),
        AdditionalFields = bag_pack(
                      "FileName",
                      FileName,
                      "PanOSLogSource",
                      PanOSLogSource,
                      "PanOSRuleMatchedUUID",
                      PanOSRuleMatchedUUID,
                      DeviceCustomNumber1Label,
                      FieldDeviceCustomNumber1, 
                      DeviceCustomNumber2Label,
                      FieldDeviceCustomNumber2,
                      DeviceCustomString3Label,
                      DeviceCustomString3,
                      DeviceCustomString4Label,
                      DeviceCustomString4,
                      DeviceCustomString5Label,
                      DeviceCustomString5,
                      DeviceCustomString6Label,
                      DeviceCustomString6,
                      "PanOSAuthenticationDescription",
                      PanOSAuthenticationDescription,
                      "PanOSClientTypeName",
                      PanOSClientTypeName,
                      "PanOSConfigVersion",
                      PanOSConfigVersion,
                      "PanOSMFAVendor",
                      PanOSMFAVendor,
                      "PanOSSourceDeviceCategory",
                      PanOSSourceDeviceCategory,
                      "PanOSSourceDeviceModel",
                      PanOSSourceDeviceModel,
                      "PanOSSourceDeviceProfile",
                      PanOSSourceDeviceProfile,
                      "PanOSSourceDeviceVendor",
                      PanOSSourceDeviceVendor
                  )
    | project-rename
        DvcIpAddr = Computer,
        EventUid = _ItemId,
        DvcId = DeviceExternalID,
        EventOriginalResultDetails = Message,
        EventOriginalSeverity = LogSeverity,
        EventOriginalType = DeviceEventClassID,
        EventOriginalUid = ExtID,
        EventProductVersion = DeviceVersion,
        LogonProtocol = PanOSAuthenticationProtocol,
        SrcDvcOs = PanOSSourceDeviceOSFamily,
        TargetUsername = PanOSAuthenticatedUserName,
        TargetUserId = PanOSAuthenticatedUserUUID,
        TargetDomain = PanOSAuthenticatedUserDomain,
        EventOriginalSubType = Activity,
        HttpUserAgent =  PanOSUserAgentString,
        TargetDvcScopeId = PanOSCortexDataLakeTenantID,
        TargetSessionId = PanOSSessionID,
        TargetDvc = DeviceCustomString1
    | extend
        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        EventResult = iff(EventMessage has "Invalid Certificate", "Failure", "Success"),
        Dst = TargetIpAddr,
        Src = coalesce(SrcFQDN, SrcHostname, SrcIpAddr),
        TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
        User = TargetUsername,
        IpAddr = SrcIpAddr,
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        TargetDomainType = case(
                      array_length(split(DestinationUserName, ".")) > 1, "FQDN",
                      array_length(split(DestinationUserName, "\\")) > 1, "Windows",
                      ""
                  ),
        TargetUserIdType = iff(isnotempty(TargetUserId), "UID", ""),
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername)
    | extend
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventType = "Logon",
        EventProduct = "Cortex Data Lake",
        EventVendor = "Palo Alto"
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        EventOutcome,
        PanOS*,
        start,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        Indicator*,
        _ResourceId
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationPostgreSQL
// Description: This ASIM parser supports normalizing PostgreSQL sign in logs to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationPostgreSQL(    ['disabled']:bool=False)
{
let PostgreSQLSignInAuthorized=(disabled:bool=false){
PostgreSQL_CL 
| where not(disabled)
| where RawData has 'connection authorized'
| project-rename 
    EventUid = _ItemId
| extend
    DvcHostname                 = Computer,
    DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
    EventCount                  = int(1),
    EventEndTime                = TimeGenerated,
    EventOriginalRestultDetails = 'Connection authorized',
    EventProduct                = 'PostgreSQL',
    EventResult                 = 'Success',
    EventSchema                 = 'Authentication',
    EventSchemaVersion          = '0.1.1',
    EventStartTime              = TimeGenerated,
    EventType                   = 'Logon',
    EventVendor                 = 'PostgreSQL',
    TargetUsername              = extract(@'user=([^\s,]+)', 1, RawData),
    TargetUsernameType          = 'Simple'
// ************************ 
//      <Aliases> 
// ************************
| extend
    Dvc=Computer,
    User=TargetUsername
// ************************ 
//      </Aliases> 
// ************************
  | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  };
let PostgreSQLAuthFailure1=(disabled:bool=false){
PostgreSQL_CL 
| where not(disabled)
| where RawData has 'authentication failed'
| extend 
    DvcHostname                 = Computer,
    DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
    EventCount                  = int(1),
    EventEndTime                = TimeGenerated,
    EventOriginalRestultDetails = 'User authentication failed',
    EventProduct                = 'PostgreSQL',
    EventResult                 = 'Failure',
    EventResultDetails          = 'No such user or password',
    EventSchema                 = 'Authentication',
    EventSchemaVersion          = '0.1.1',
    EventStartTime              = TimeGenerated,
    EventType                   = 'Logon',
    EventVendor                 = 'PostgreSQL',
    TargetUsername              = extract(@'for user\s"(.*?)"', 1, RawData),
    TargetUsernameType          = 'Simple'
// ************************ 
//      <Aliases> 
// ************************
| extend
    Dvc  = Computer,
    User = TargetUsername
// ************************ 
//      </Aliases> 
// ************************
| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
};
let PostgreSQLAuthFailure2=(disabled:bool=false){
PostgreSQL_CL 
| where not(disabled)
| where RawData has_all ('role', 'does', 'not', 'exist')
| extend 
    DvcHostname                 = Computer,
    DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
    EventCount                  = int(1),
    EventEndTime                = TimeGenerated,
    EventOriginalRestultDetails = 'Role does not exist',
    EventProduct                = 'PostgreSQL',
    EventResult                 = 'Failure',
    EventResultDetails          = 'No such user or password',
    EventSchema                 = 'Authentication',
    EventSchemaVersion          = '0.1.1',
    EventStartTime              = TimeGenerated,
    EventType                   = 'Logon',
    EventVendor                 = 'PostgreSQL',
    TargetUsername              = extract(@'role\s"(.*?)"\sdoes', 1, RawData),
    TargetUsernameType          = 'Simple'
// ************************ 
//      <Aliases> 
// ************************
| extend
    Dvc  = Computer,
    User = TargetUsername
// ************************ 
//      </Aliases> 
// ************************
| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
};
let PostgreSQLAuthFailure3=(disabled:bool=false){
PostgreSQL_CL 
| where not(disabled)
| where RawData has_all ('no', 'entry', 'user')
| extend 
    DvcHostname                 = Computer,
    DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
    EventCount                  = int(1),
    EventEndTime                = TimeGenerated,
    EventOriginalRestultDetails = 'No entry for user',
    EventProduct                = 'PostgreSQL',
    EventResult                 = 'Failure',
    EventResultDetails          = 'No such user or password',
    EventSchema                 = 'Authentication',
    EventSchemaVersion          = '0.1.1',
    EventStartTime              = TimeGenerated,
    EventType                   = 'Logon',
    EventVendor                 = 'PostgreSQL',
    SrcIpAddr                   = extract(@'host\s"(.*?)",', 1, RawData),
    TargetUsername              = extract(@'user\s"(.*?)",', 1, RawData),
    TargetUsernameType          = 'Simple'
// ************************ 
//      <Aliases> 
// ************************
| extend
    Dvc  = Computer,
    User = TargetUsername
// ************************ 
//      </Aliases> 
// ************************
| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
};
let PostgreSQLDisconnect=(disabled:bool=false){
PostgreSQL_CL 
| where not(disabled)
| where RawData has 'disconnection'
| extend 
    DvcHostname                 = Computer,
    DvcIpAddr                   = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer),
    EventCount                  = int(1),
    EventEndTime                = TimeGenerated,
    EventOriginalRestultDetails = 'User session closed',
    EventProduct                = 'PostgreSQL',
    EventResult                 = 'Success',
    EventResultDetails          = 'Session expired',
    EventSchema                 = 'Authentication',
    EventSchemaVersion          = '0.1.1',
    EventStartTime              = TimeGenerated,
    EventType                   = 'Logoff',
    EventVendor                 = 'PostgreSQL',
    SrcIpAddr                   = extract(@'host=([\d.]+)', 1, RawData),
    TargetUsername              = extract(@'user=([^\s,]+)', 1, RawData),
    TargetUsernameType          = 'Simple'
// ************************ 
//      <Aliases> 
// ************************
| extend
    Dvc  = Computer,
    User = TargetUsername
// ************************ 
//      </Aliases> 
// ************************
| project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
};
union isfuzzy=false 
  PostgreSQLSignInAuthorized(disabled = disabled), 
  PostgreSQLAuthFailure1(disabled = disabled), 
  PostgreSQLAuthFailure2(disabled = disabled), 
  PostgreSQLAuthFailure3(disabled = disabled), 
  PostgreSQLDisconnect(disabled = disabled)
}



//
// Function Name: ASimAuthenticationSalesforceSC
// Description: This ASIM parser supports normalizing Salesforce sign in logs, stored in the  SalesforceServiceCloud_CL table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationSalesforceSC(    ['disabled']:bool=False)
{
let parser = (
disabled: bool=false
) {
let SalesforceSchema = datatable(
api_version_s: string,
browser_type_s: string,
cipher_suite_s: string,
client_ip_s: string,
delegated_user_id_s: string,
delegated_user_name_s: string,
event_type_s: string,
login_key_s: string,
login_status_s: string,
login_type_s: string,
login_sub_type_s: string,
organization_id_s: string,
platform_type_s: string,
request_id_s: string,
request_status_s: string,
session_key_s: string,
source_ip_s: string,
timestamp_s: string,
tls_protocol_s: string,
uri_s: string,
user_id_s: string,
user_name_s: string,
user_type_s: string,
wave_session_id_g: string
)[];
    let EventResultLookup = datatable (
    login_status_s: string,
    DvcAction: string,
    EventResultDetails: string,
    EventResult: string,
    EventSeverity: string
)[
    "LOGIN_CHALLENGE_ISSUED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_CHALLENGE_PENDING", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_DATA_DOWNLOAD_ONLY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_END_SESSION_TXN_SECURITY_POLICY", "Blocked", "Logon violates policy", "Failure", "Informational",
    "LOGIN_ERROR_API_TOO_OLD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ASYNC_USER_CREATE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_AVANTGO_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_AVANTGO_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CLIENT_NO_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CLIENT_REQ_UPDATE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CSS_FROZEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CSS_PW_LOCKOUT", "Blocked", "User locked", "Failure", "Informational",
    "LOGIN_ERROR_DUPLICATE_USERNAME", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_EXPORT_RESTRICTED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_GLOBAL_BLOCK_DOMAIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_HT_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_HTP_METHD_INVALID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INSECURE_LOGIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INVALID_GATEWAY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INVALID_ID_FIELD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INVALID_PASSWORD", "Blocked", "Incorrect password", "Failure", "Informational",
    "LOGIN_ERROR_LOGINS_EXCEEDED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_MUST_USE_API_TOKEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_MUTUAL_AUTHENTICATION", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NETWORK_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_HT_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_NETWORK_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_NETWORK_INFO", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_SET_COOKIES", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_OFFLINE_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_OFFLINE_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_CLOSED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_DOMAIN_ONLY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_IN_MAINTENANCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_IS_DOT_ORG", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_LOCKOUT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_SIGNING_UP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_SUSPENDED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_OUTLOOK_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_PAGE_REQUIRES_LOGIN", "Blocked", "Session expired", "Failure", "Informational",
    "LOGIN_ERROR_PASSWORD_EMPTY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_PASSWORD_LOCKOUT", "Blocked", "User locked", "Failure", "Informational",
    "LOGIN_ERROR_PORTAL_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_RATE_EXCEEDED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_RESTRICTED_DOMAIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_RESTRICTED_TIME", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SESSION_TIMEOUT", "Blocked", "Session expired", "Failure", "Informational",
    "LOGIN_ERROR_SSO_PWD_INVALID", "Blocked", "Incorrect password", "Failure", "Informational",
    "LOGIN_ERROR_SSO_SVC_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SSO_URL_INVALID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_STORE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_STORE_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SWITCH_SFDC_INSTANCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SWITCH_SFDC_LOGIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SYNCOFFLINE_DISBLD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SYSTEM_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USER_API_ONLY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USER_FROZEN", "Blocked", "User locked", "Failure", "Informational",
    "LOGIN_ERROR_USER_INACTIVE", "Blocked", "User disabled", "Failure", "Informational",
    "LOGIN_ERROR_USER_NON_MOBILE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USER_STORE_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USERNAME_EMPTY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_WIRELESS_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_WIRELESS_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_LIGHTNING_LOGIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_NO_ERROR", "Allowed", "", "Success", "Informational",
    "LOGIN_OAUTH_API_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_CONSUMER_DELETED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_DS_NOT_EXPECTED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_EXCEED_GET_AT_LMT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_CODE_CHALLENGE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_CODE_VERIFIER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_DEVICE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_DS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_DSIG", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_IP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_NONCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_SIG_METHOD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_TIMESTAMP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_TOKEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_VERIFIER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_VERSION", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_MISSING_DS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NO_CALLBACK_URL", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NO_CONSUMER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NO_TOKEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NONCE_REPLAY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_PACKAGE_MISSING", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_PACKAGE_OLD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_UNEXPECTED_PARAM", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ORG_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_READONLY_CANNOT_VALIDATE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_AUDIENCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_CONFIG", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_FORMAT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_IN_RES_TO", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_ISSUER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_ORG_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_PORTAL_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_RECIPIENT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SESSION_LEVEL", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SIGNATURE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SITE_URL", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_STATUS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SUB_CONFIRM", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_TIMESTAMP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_USERNAME", "Blocked", "No such user", "Failure", "Informational",
    "LOGIN_SAML_INVALID_VERSION", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_MISMATCH_CERT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_MISSING_ORG_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_MISSING_PORTAL_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_PROVISION_ERROR", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_REPLAY_ATTEMPTED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_SITE_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_TWOFACTOR_REQ", "Blocked", "Logon violates policy", "Failure", "Informational"
];
    let SalesforceEventType = dynamic(['Login', 'LoginAs', 'Logout']);
    let EventTypeLookup = datatable(event_type_s: string, EventType: string)[
    "Login", "Logon",
    "LoginAs", "Logon",
    "Logout", "Logoff"
];
    let DvcOsLookup = datatable(
    platform_type_s: string,
    DvcOs: string,
    DvcOsVersion: string
)[
    "1000", "Windows", "",
    "1008", "Windows", "2003",
    "1013", "Windows", "8.1",
    "1015", "Windows", "10",
    "2003", "Macintosh/Apple", "OSX",
    "4000", "Linux", "",
    "5005", "Android", "",
    "5006", "iPhone", "",
    "5007", "iPad", "",
    "5200", "Android", "10.0"
];
    let LogonMethodLookup = datatable(
    LoginType_s: string,
    LogonMethodOriginal: string,
    LogonMethod: string
)[
    "7", "AppExchange", "Other",
    "A", "Application", "Other",
    "s", "Certificate-based login", "PKI",
    "k", "Chatter Communities External User", "Other",
    "n", "Chatter Communities External User Third Party SSO", "Other",
    "r", "Employee Login to Community", "Other",
    "z", "Lightning Login", "Username & Password",
    "l", "Networks Portal API Only", "Other",
    "6", "Remote Access Client", "Other",
    "i", "Remote Access 2.0", "Other",
    "I", "Other Apex API", "Other",
    "R", "Partner Product", "Other",
    "w", "Passwordless Login", "Passwordless",
    "3", "Customer Service Portal", "Other",
    "q", "Partner Portal Third-Party SSO", "Other",
    "9", "Partner Portal", "Other",
    "5", "SAML Idp Initiated SSO", "Other",
    "m", "SAML Chatter Communities External User SSO", "Other",
    "b", "SAML Customer Service Portal SSO", "Other",
    "c", "SAML Partner Portal SSO", "Other",
    "h", "SAML Site SSO", "Other",
    "8", "SAML Sfdc Initiated SSO", "Other",
    "E", "SelfService", "Other",
    "j", "Third Party SSO", "Other"
];
    let LogonProtocolLookup = datatable(
    LoginSubType_s: string,
    LogonProtocolOriginal: string,
    LogonProtocol: string
)[
    "uiup", "UI Username-Password", "Basic Auth",
    "oauthpassword", "OAuth Username-Password", "OAuth",
    "oauthtoken", "OAuth User-Agent", "OAuth",
    "oauthhybridtoken", "OAuth User-Agent for Hybrid Apps", "OAuth",
    "oauthtokenidtoken", "OAuth User-Agent with ID Token", "OAuth",
    "oauthclientcredential", "OAuth Client Credential", "OAuth",
    "oauthcode", "OAuth Web Server", "OAuth",
    "oauthhybridauthcode", "OAuth Web Server for Hybrid Apps", "OAuth",
];
    let TempEventResultLookup = datatable(request_status_s: string, TempEventResult: string)[
    "S", "Success",
    "F", "Failure",
    "A", "Failure",
    "R", "Success",
    "N", "Failure",
    "U", "NA"
];
    let UserTypeLookup = datatable(user_type_s: string, TargetUserType: string)[
    "CsnOnly", "Other",
    "CspLitePortal", "Other",
    "CustomerSuccess", "Other",
    "Guest", "Anonymous",
    "PowerCustomerSuccess", "Other",
    "PowerPartner", "Other",
    "SelfService", "Other",
    "Standard", "Regular",
    "A", "Application",
    "b", "Other",
    "C", "Other",
    "D", "Other",
    "F", "Other",
    "G", "Anonymous",
    "L", "Other",
    "N", "Service",
    "n", "Other",
    "O", "Other",
    "o", "Other",
    "P", "Other",
    "p", "Other",
    "S", "Regular",
    "X", "Admin"
];
    union isfuzzy=true
        SalesforceSchema,
        SalesforceServiceCloud_CL 
    | where not(disabled)
    | where event_type_s in~ (SalesforceEventType)
    | extend TimeGenerated = todatetime(tostring(split(timestamp_s, '.', 0)[0]))
    | extend LoginType_s = login_type_s, LoginSubType_s = login_sub_type_s
    | lookup EventResultLookup on login_status_s
    | lookup EventTypeLookup on event_type_s
    | lookup LogonMethodLookup on LoginType_s
    | lookup LogonProtocolLookup on LoginSubType_s
    | lookup TempEventResultLookup on request_status_s
    | lookup DvcOsLookup on platform_type_s
    | lookup UserTypeLookup on user_type_s
    | project-rename
        EventProductVersion = api_version_s,
        EventOriginalResultDetails = login_status_s,
        TargetUserId = user_id_s,
        SrcIpAddr = source_ip_s,
        EventOriginalUid = request_id_s,
        TlsCipher = cipher_suite_s,
        TlsVersion = tls_protocol_s,
        HttpUserAgent= browser_type_s,
        TargetUserScopeId = organization_id_s,
        TargetUrl = uri_s,
        TargetOriginalUserType = user_type_s,
        ActorUsername = delegated_user_name_s,
        ActorUserId = delegated_user_id_s,
        TargetUsername = user_name_s
    | extend
        EventVendor = 'Salesforce',
        EventProduct='Service Cloud',
        EventCount = int(1),
        EventSchema = 'Authentication',
        EventSchemaVersion = '0.1.3',
        TargetAppName = "Salesforce Dot Com(SFDC)",
        TargetAppType = "SaaS application",
        EventUid = _ItemId,
        EventOriginalType=event_type_s,
        SrcIpAddr = coalesce(SrcIpAddr, client_ip_s)
    | extend
        TargetSessionId = coalesce(session_key_s, login_key_s),
        TargetUserScope = "Salesforce Organization",
        TargetUserIdType = iff(isnotempty(TargetUserId), "SaleforceId", ""),
        ActorUserIdType = iff(isnotempty(ActorUserId), "SaleforceId", ""),
        TargetUsernameType = iff(isnotempty(TargetUsername), "UPN", ""),
        ActorUsernameType = iff(isnotempty(ActorUsername), "UPN", ""),
        User = coalesce(TargetUsername, TargetUserId),
        Src = SrcIpAddr,
        IpAddr = SrcIpAddr,
        Dvc = EventProduct,
        EventResult = coalesce(EventResult, TempEventResult),
        Application = TargetAppName,
        EventStartTime = TimeGenerated,
        EventEndTime = TimeGenerated
    | project-away
        *_s,
        *_t,
        *_g,
        TenantId,
        SourceSystem,
        Computer,
        MG,
        ManagementGroupName,
        Message,
        RawData,
        TempEventResult,
        _ItemId
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationSentinelOne
// Description: This ASIM parser supports normalizing SentinelOne logs to the ASIM Authentication normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationSentinelOne(    ['disabled']:bool=False)
{
let EventResultDetailsLookup = datatable (comments_s: string, EventResultDetails: string)
  [
      "invalid 2FA code", "Incorrect password",
      "IP/User mismatch", "No such user or password",
      "invalid password", "Incorrect password",
      "user temporarily locked 2FA attempt", "User locked",
      "no active site", "Other"
  ];
  let EventFieldsLookup = datatable (
      activityType_d: real,
      EventType: string,
      EventResult: string,
      EventOriginalResultDetails: string
  )
  [
      27, "Logon", "Success", "User Logged In",
      33, "Logoff", "Success", "User Logged Out",
      133, "Logon", "Failure", "Existing User Login Failure",
      134, "Logon", "Failure", "Unknown User Login",
      139, "Logon", "Failure", "User Failed to Start an Unrestricted Session",
      3629, "Logon", "Success", "Login Using Saved 2FA Recovery Code"
  ];
  let EventTypeLookup = datatable (alertInfo_eventType_s: string, EventType: string)
  [
      "WINLOGONATTEMPT", "Logon",
      "WINLOGOFFATTEMPT", "Logoff"
  ];
  let EventSubTypeLookup = datatable (alertInfo_loginType_s: string, EventSubType: string)
  [
      "BATCH", "System",
      "CACHED_INTERACTIVE", "Interactive",
      "CACHED_REMOTE_INTERACTIVE", "RemoteInteractive",
      "CACHED_UNLOCK", "System",
      "INTERACTIVE", "Interactive",
      "NETWORK_CLEAR_TEXT", "Remote",
      "NETWORK_CREDENTIALS", "Remote",
      "NETWORK", "Remote",
      "REMOTE_INTERACTIVE", "RemoteInteractive",
      "SERVICE", "Service",
      "SYSTEM", "System",
      "UNLOCK", "System"
  ];
  let DeviceTypeLookup = datatable (
      agentDetectionInfo_machineType_s: string,
      SrcDeviceType: string
  )
  [
      "desktop", "Computer",
      "server", "Computer",
      "laptop", "Computer",
      "kubernetes node", "Other",
      "unknown", "Other"
  ];
  let ThreatConfidenceLookup_undefined = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_undefined: int
  )
  [
      "FALSE_POSITIVE", 5,
      "Undefined", 15,
      "SUSPICIOUS", 25,
      "TRUE_POSITIVE", 33 
  ];
  let ThreatConfidenceLookup_suspicious = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_suspicious: int
  )
  [
      "FALSE_POSITIVE", 40,
      "Undefined", 50,
      "SUSPICIOUS", 60,
      "TRUE_POSITIVE", 67 
  ];
  let ThreatConfidenceLookup_malicious = datatable(
      alertInfo_analystVerdict_s: string,
      ThreatConfidence_malicious: int
  )
  [
      "FALSE_POSITIVE", 75,
      "Undefined", 80,
      "SUSPICIOUS", 90,
      "TRUE_POSITIVE", 100 
  ];
  let TargetUserTypesList = dynamic(["Regular", "Machine", "Admin", "System", "Application", "Service Principal", "Service", "Anonymous"]);
  let parser = (disabled: bool=false) {
      let alldata = SentinelOne_CL
          | where not(disabled);
      let activitydata = alldata
          | where event_name_s == "Activities."
              and activityType_d in (27, 33, 133, 134, 139, 3629)
          | parse-kv DataFields_s as (ipAddress: string, username: string, userScope: string, accountName: string, fullScopeDetails: string, fullScopeDetailsPath: string, role: string, scopeLevel: string, source: string, sourceType: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookup on activityType_d
          | lookup EventResultDetailsLookup on comments_s
          | extend 
              SrcIpAddr = iff(ipAddress == "null", "", ipAddress),
              EventOriginalType = tostring(toint(activityType_d)),
              TargetUsername = username,
              TargetUserScope = userScope,
              AdditionalFields = bag_pack(
                    "accountName", accountName,
                    "fullScopeDetails", fullScopeDetails,
                    "fullScopeDetailsPath", fullScopeDetailsPath,
                    "scopeLevel", scopeLevel,
                    "source", source,
                    "sourceType", sourceType
                ),
              TargetOriginalUserType = role,
              TargetUserType = case(
                              role in (TargetUserTypesList), role,
                              role == "null", "",
                              "Other"
                          )
          | project-rename
              EventStartTime = createdAt_t,
              TargetUserId = userId_s,
              EventOriginalUid = activityUuid_g,
              EventMessage = primaryDescription_s
          | extend TargetUserIdType = iff(isnotempty(TargetUserId), "Other", "");
      let alertdata = alldata
          | where event_name_s == "Alerts."
              and alertInfo_eventType_s in ("WINLOGONATTEMPT", "WINLOGOFFATTEMPT")
          | lookup EventTypeLookup on alertInfo_eventType_s
          | lookup EventSubTypeLookup on alertInfo_loginType_s
          | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s;
      let undefineddata = alertdata
          | where ruleInfo_treatAsThreat_s == "UNDEFINED"
          | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;
      let suspiciousdata = alertdata
          | where ruleInfo_treatAsThreat_s == "Suspicious"
          | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;
      let maliciousdata = alertdata
          | where ruleInfo_treatAsThreat_s == "Malicious"
          | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;
      let alertdatawiththreatfield = union undefineddata, suspiciousdata, maliciousdata
          | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')
          | invoke _ASIM_ResolveSrcFQDN('alertInfo_loginAccountDomain_s')
          | extend
              EventResult = iff(alertInfo_loginIsSuccessful_s == "true", "Success", "Failure"),
              EventSeverity = iff(ruleInfo_severity_s == "Critical", "High", ruleInfo_severity_s),
              ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)
          | project-rename
              EventStartTime = alertInfo_createdAt_t,
              SrcIpAddr = alertInfo_srcMachineIp_s,
              ActingAppName = sourceProcessInfo_name_s,
              DvcId = agentDetectionInfo_uuid_g,
              DvcOs = agentDetectionInfo_osName_s,
              DvcOsVersion = agentDetectionInfo_osRevision_s,
              EventOriginalSeverity = ruleInfo_severity_s,
              EventOriginalType = alertInfo_eventType_s,
              EventOriginalSubType = alertInfo_loginType_s,
              RuleName = ruleInfo_name_s,
              TargetUserId = alertInfo_loginAccountSid_s,
              TargetUsername = alertInfo_loginsUserName_s,
              ThreatOriginalConfidence = ruleInfo_treatAsThreat_s
          | extend
              Rule = RuleName,
              ActingAppType = iff(isnotempty(ActingAppName), "Process", ""),
              DvcIdType = iff(isnotempty(DvcId), "Other", ""),
              TargetUserType = _ASIM_GetUserType(TargetUsername, TargetUserId),
              TargetUserIdType = iff(isnotempty(TargetUserId), "SID", "");
      union activitydata, alertdatawiththreatfield
      | extend
          EventCount = int(1),
          EventProduct = "SentinelOne",
          EventSchemaVersion = "0.1.3",
          EventVendor = "SentinelOne",
          EventSchema = "Authentication"
      | extend
          Dvc = coalesce(DvcHostname, EventProduct),
          EventEndTime = EventStartTime,
          EventUid = _ItemId,
          User = TargetUsername
      | extend
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr
      | project-away
          *_b,
          *_d,
          *_g,
          *_s,
          *_t,
          ipAddress,
          username,
          accountName,
          fullScopeDetails,
          fullScopeDetailsPath,
          role,
          scopeLevel,
          source,
          sourceType,
          userScope,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          _ItemId,
          _ResourceId,
          ThreatConfidence_*
  };
  parser(disabled=disabled)
}



//
// Function Name: ASimAuthenticationSshd
// Description: This ASIM parser supports normalizing OpenSSH server (sshd) sign in logs, collected using Syslog to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationSshd(    ['disabled']:bool=False)
{
let parser = (disabled:bool=false) {
  let SyslogProjects = Syslog | project TimeGenerated, Computer, SyslogMessage, ProcessName, ProcessID, HostIP, Type, _ItemId, _ResourceId, _SubscriptionId;
  //
  // -- Successful login
  let SSHDAccepted=(disabled:bool=false) { 
      // -- Parse events with the format "Accepted password for <User> from <IP address> port <port> ssh2"
      SyslogProjects 
      | where not(disabled)
      | where ProcessName == "sshd" and SyslogMessage startswith 'Accepted'
      | parse SyslogMessage with "Accepted password for " TargetUsername:string " from " SrcIpAddr:string " port" SrcPortNumber:int *
      | extend
          EventCount    = int(1),
          EventResult   = 'Success',
          EventSeverity = 'Informational',
          EventType     = 'Logon'
      | project-away SyslogMessage, ProcessName
  };
  //
  // -- Failed login - incorrect password
  let SSHDFailed=(disabled:bool=false) {
      // -- Parse events with the format "Failed (password|none|publickey) for <User> from <IP address> port <port> ssh2[: RSA <cipher>:<key>]"
      // -- Or a number of such events message repeated <n> times: [ <message> ]
      SyslogProjects 
      | where not(disabled)
      | where ProcessName == "sshd" and (
          SyslogMessage startswith 'Failed' 
          or (SyslogMessage startswith 'message repeated' and SyslogMessage has 'Failed')
      )
      | parse SyslogMessage with * "Failed " * " for " TargetUsername:string " from " SrcIpAddr:string " port" SrcPortNumber:int *
      | parse SyslogMessage with "message repeated" EventCount:int " times:" * 
      | extend
          EventCount         = toint(coalesce(EventCount,1)),
          EventResult        = 'Failure',
          EventResultDetails = iff (SyslogMessage has 'publickey', 'Incorrect key', 'Incorrect password'),
          EventSeverity      = 'Low' ,
          EventType          = 'Logon',
          LogonMethod        = iff (SyslogMessage has 'publickey', 'PKI', 'Username & password')
      | project-away SyslogMessage, ProcessName
  };
  //
  // -- Logoff - Timeout
  let SSHDTimeout=(disabled:bool=false) {
      // -- Parse events with the format "Timeout, client not responding from user yanivsh 131.107.174.198 port 7623"
      SyslogProjects 
      | where not(disabled)
      | where ProcessName == "sshd" and SyslogMessage startswith 'Timeout'
      | parse-where SyslogMessage with * "user " TargetUsername:string " " SrcIpAddr:string " port " SrcPortNumber:int
      | extend
          EventCount     = int(1),
          EventResult    = 'Success',
          EventSeverity  = 'Informational',
          EventType      = 'Logoff'
      | project-away SyslogMessage, ProcessName
  };
  //
  // -- Failed login - invalid user
  let SSHDInvalidUser=(disabled:bool=false) {
      // -- Parse events with the format "Invalid user [<User>] from <IP address> port <port>"
      SyslogProjects 
      | where not(disabled)
      | where ProcessName == "sshd" and SyslogMessage startswith 'Invalid user'
      | parse SyslogMessage with "Invalid user " TargetUsername:string " from " SrcIpAddr:string " port " SrcPortNumber:int
      | parse SyslogMessage with "Invalid user  from " SrcIpAddrNoUser:string " port " SrcPortNumberNoUser:int
      | extend
          EventCount            = int(1),
          EventResult           = 'Failure',
          EventResultDetails    = 'No such user',
          EventSeverity         = 'Low',
          EventType             = 'Logon',
          SrcIpAddr             = coalesce(SrcIpAddr, SrcIpAddrNoUser),
          SrcPortNumber         = coalesce(SrcPortNumber, SrcPortNumberNoUser)
      | project-away SyslogMessage, ProcessName, SrcIpAddrNoUser, SrcPortNumberNoUser
  };
  //
  // -- Blocked intrusion attempts
  let SSHDABreakInAttemptMappingFailed=(disabled:bool=false) {
      // -- Parse events with the format "reverse mapping checking getaddrinfo for <host> [<Ip address>] failed - POSSIBLE BREAK-IN ATTEMPT!"
  SyslogProjects 
      | where not(disabled)
      | where ProcessName == "sshd" and SyslogMessage startswith "reverse mapping checking getaddrinfo for"
      | parse SyslogMessage with * " for " Src " [" SrcIpAddr "]" *
      | invoke _ASIM_ResolveSrcFQDN ('Src')
      | extend
          DvcAction             = 'Block',
          EventCount            = int(1),
          EventResult           = 'Failure',
          EventResultDetails    = 'Logon violates policy',
          EventSeverity         = 'Medium',
          EventType             = 'Logon',
          RuleName              = "Reverse mapping failed",    
          TargetUsername        = ''
      | extend
          Rule = RuleName
      | project-away SyslogMessage, ProcessName, Src
  };
  let SSHDABreakInAttemptMappingMismatch=(disabled:bool=false) {
      // -- Parse events with the format "Address 61.70.128.48 maps to host-61-70-128-48.static.kbtelecom.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!"
  SyslogProjects 
      | where not(disabled)
      | where ProcessName == "sshd" and SyslogMessage has "but this does not map back to the address"
      | parse SyslogMessage with "Address " SrcIpAddr:string " maps to " Src:string ", but this" *
      | invoke _ASIM_ResolveSrcFQDN ('Src')
      | extend
          DvcAction          = 'Block',
          EventCount         = int(1),
          EventResult        = 'Failure',
          EventResultDetails = 'Logon violates policy',
          EventSeverity      = 'Medium',
          EventType          = 'Logon',
          RuleName           = "Address to host to address mapping does not map back to address",
          TargetUsername     = ''
      | extend
          Rule = RuleName
      | project-away SyslogMessage, ProcessName, Src
  };
  let SSHDABreakInAttemptNastyPtr=(disabled:bool=false) {
      // -- Parse events with the format "Nasty PTR record "<RR>" is set up for <IP Address>, ignoring"
  SyslogProjects | where not(disabled)
      | where ProcessName == "sshd" and SyslogMessage startswith "Nasty PTR record"
      | parse SyslogMessage with * "set up for " SrcIpAddr:string ", ignoring"
      | extend
          DvcAction          = 'Block',
          EventCount         = int(1),
          EventResult        = 'Failure',
          EventResultDetails = 'Logon violates policy',
          EventSeverity      = 'Medium',
          EventType          = 'Logon',
          RuleName           = "Nasty PTR record set for IP Address",
          TargetUsername     = ''
      | extend
          Rule = RuleName
      | project-away SyslogMessage, ProcessName
  };
  union isfuzzy=false 
      SSHDAccepted (disabled=disabled),
      SSHDFailed (disabled=disabled),
      SSHDInvalidUser (disabled=disabled),
      SSHDTimeout (disabled=disabled),
      SSHDABreakInAttemptMappingFailed (disabled=disabled),
      SSHDABreakInAttemptMappingMismatch (disabled=disabled),
      SSHDABreakInAttemptNastyPtr (disabled=disabled)
  | invoke _ASIM_ResolveDvcFQDN ('Computer')
  | extend 
      DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", ""),
      DvcOs                 = 'Linux',
      EventEndTime          = TimeGenerated,
      EventProduct          = 'OpenSSH',
      EventSchema           = 'Authentication',
      EventSchemaVersion    = '0.1.2',
      EventStartTime        = TimeGenerated,
      EventSubType          = 'Remote',
      EventVendor           = 'OpenBSD',
      LogonProtocol         = 'ssh',
      TargetAppId           = tostring(ProcessID),
      TargetAppName         = 'sshd',
      TargetAppType         = 'Service',
      TargetDvcOs           = 'Linux',
      TargetUsernameType    = 'Simple'
  | project-away Computer, ProcessID
  | project-rename 
      DvcId                 = _ResourceId,
      DvcIpAddr             = HostIP,
      DvcScopeId            = _SubscriptionId,
      EventUid              = _ItemId
  //
  // -- Aliases
  | extend
      Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr),
      Dvc                   = DvcHostname,
      IpAddr                = DvcIpAddr,
      TargetDomain          = DvcDomain,
      TargetDomainType      = DvcDomainType,
      TargetDvcId           = DvcId,
      TargetDvcIdType       = DvcDomainType,
      TargetDvcScopeId      = DvcScopeId,
      TargetFQDN            = DvcFQDN,
      TargetHostname        = DvcHostname,
      TargetIpAddr          = DvcIpAddr,
      User                  = TargetUsername
  };
  parser (
      disabled=disabled
  )
}



//
// Function Name: ASimAuthenticationSu
// Description: This ASIM parser supports normalizing Linux su elevation commands collected using Syslog to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationSu(    ['disabled']:bool=False)
{
let parser = (disabled: bool=false)
{
    let SyslogProjects = Syslog
        | project
            TimeGenerated,
            Computer,
            SyslogMessage,
            ProcessName,
            ProcessID,
            HostIP,
            Type,
            _ItemId,
            _ResourceId,
            _SubscriptionId;
    //
    // -- Successful SU
    // Parses the event "Successful su for <user> by <user>"
    let SuSignInAuthorized=(disabled: bool=false)
{
    SyslogProjects 
        | where not(disabled)
        | where ProcessName == "su" and SyslogMessage startswith "Successful su for"
        | parse SyslogMessage with * "for " TargetUsername: string " by " ActorUsername: string
        | extend
            EventType = 'Elevation'
        | project-away SyslogMessage, ProcessName
};
    // 
    // -- SU end
    // Parsers the event "pam_unix(su[-l]:session): session closed for user <user>"
    let SuDisconnect=(disabled: bool=false)
{
    SyslogProjects 
        | where not(disabled)
        | where ProcessName == "su" and SyslogMessage has_all ('pam_unix(su', 'session): session closed for user')
        | parse SyslogMessage with * "for user " TargetUsername: string
        | extend
            EventType = 'Logoff'
        | project-away SyslogMessage, ProcessName
};
    union isfuzzy=false 
        SuDisconnect(disabled = disabled),
        SuSignInAuthorized (disabled = disabled)
    | invoke _ASIM_ResolveDvcFQDN ('Computer')
    | extend
        ActingAppId           = tostring(ProcessID),
        ActingAppType         = 'Process',
        ActorUsernameType     = 'Simple',
        DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", ""),
        DvcOs                 = 'Linux',
        EventCount            = int(1),
        EventEndTime          = TimeGenerated,
        EventProduct          = 'su',
        EventResult           = 'Success',
        EventSchema           = 'Authentication',
        EventSchemaVersion    = '0.1.2',
        EventSeverity         = 'Informational',
        EventStartTime        = TimeGenerated,
        EventVendor           = 'Linux',
        TargetDvcOs           = 'Linux',
        TargetUsernameType    = 'Simple'
    | project-away Computer, ProcessID
    | project-rename 
        DvcId                 = _ResourceId,
        DvcIpAddr             = HostIP,
        DvcScopeId            = _SubscriptionId,
        EventUid              = _ItemId
    //
    // -- Aliases
    | extend
        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr),
        Dvc                   = DvcHostname,
        IpAddr                = DvcIpAddr,
        TargetDomain          = DvcDomain,
        TargetDomainType      = DvcDomainType,
        TargetDvcId           = DvcId,
        TargetDvcIdType       = DvcDomainType,
        TargetDvcScopeId      = DvcScopeId,
        TargetFQDN            = DvcFQDN,
        TargetHostname        = DvcHostname,
        TargetIpAddr          = DvcIpAddr,
        User                  = TargetUsername
};
parser
(
    disabled=disabled
)
}



//
// Function Name: ASimAuthenticationSudo
// Description: This ASIM parser supports normalizing Syslog sudo sign in logs to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationSudo(    ['disabled']:bool=False)
{
let SudoSignInAuthorized=(disabled:bool=false){
Syslog 
  | where not(disabled)
  | where ProcessName == "sudo" and 
      SyslogMessage has 'TTY=' and 
      SyslogMessage has 'USER=' and
      SyslogMessage has 'COMMAND='
  | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with (pair_delimiter=' ', kv_delimiter='=')
  | project-rename TargetUsername = USER
  | extend
      EventVendor                 = 'sudo',
      EventProduct                = 'sudo',
      EventCount                  = int(1),
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventResult                 = 'Success',
      EventStartTime              = TimeGenerated,
      EventEndTime                = TimeGenerated,
      EventType                   = 'Logon',
      DvcHostname                 = Computer,
      ActorUsernameType           = 'Simple',
      ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),
      TargetUsernameType          = 'Simple',
      EventResultDetails          = 'Other',
      EventOriginalRestultDetails = 'Connection authorized'
// ************************
//      <Aliases>
// ************************
  | extend
      User  = TargetUsername,
      Dvc   = Computer
// ************************
//      </Aliases>
// ************************
  | project-away Computer, MG, SourceSystem, TenantId
  };
let SudoAuthFailure1=(disabled:bool=false){
Syslog | where not(disabled)
  | where ProcessName == "sudo" and (SyslogMessage has 'user NOT in sudoers' or SyslogMessage has 'incorrect password attempts')
  | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with  (pair_delimiter=' ', kv_delimiter='=')
  | project-rename 
      EventUid       = _ItemId,
      TargetUsername = USER
  | extend
      ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),
      ActorUsernameType           = 'Simple',
      DvcHostname                 = Computer,
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'User authentication failed',
      EventProduct                = 'sudo',
      EventResult                 = 'Failure',
      EventResultDetails          = 'No such user or password',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logon',
      EventVendor                 = 'sudo',
      TargetUsernameType          = 'Simple'
  | project-away Computer, MG, SourceSystem, TenantId
  };
let SudoDisconnect=(disabled:bool=false){
  Syslog 
  | where not(disabled)
  | where ProcessName == "sudo" and 
      SyslogMessage   has 'session closed for user '
  | parse SyslogMessage with * "for user " TargetUsername:string
  | extend
      DvcHostname                 = Computer,
      EventCount                  = int(1),
      EventEndTime                = TimeGenerated,
      EventOriginalRestultDetails = 'User session closed',
      EventProduct                = 'sudo',
      EventResult                 = 'Success',
      EventResultDetails          = 'Other',
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventStartTime              = TimeGenerated,
      EventType                   = 'Logoff',
      EventVendor                 = 'sudo',
      TargetUsernameType          = 'Simple'
// ************************
//      <Aliases>
// ************************
| extend
    Dvc   = Computer,
    User  = TargetUsername
// ************************
//      </Aliases>
// ************************
  | project-away Computer, MG, SourceSystem, TenantId
  };
union isfuzzy=false 
  SudoSignInAuthorized(disabled = disabled), 
  SudoAuthFailure1(disabled = disabled), 
  SudoDisconnect(disabled = disabled)
}



//
// Function Name: ASimAuthenticationVectraXDRAudit
// Description: This ASIM parser supports normalizing Vectra XDR Audit Logs Event in the Audits_Data_CL table to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationVectraXDRAudit(    ['disabled']:bool=False)
{
let parser = (disabled:bool = false)
{
  Audits_Data_CL
  | where not(disabled) and event_action_s in ("login","logout")
  | extend
        EventCount = int(1),
        EventEndTime = event_timestamp_t,
        EventProduct = 'Vectra XDR',
        EventResult = case(result_status_s=="success", "Success", result_status_s=="failure", "Failure","NA"),
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventStartTime = event_timestamp_t,
        EventType = case(event_action_s=="login", "Logon", event_action_s=="logout", "Logoff",""),
        EventVendor = 'Vectra',
        ActorUserId = tostring(toint(user_id_d)),
        ActorUserIdType = "VectraUserId",
        ActorUsernameType = "UPN",
        EventUid = tostring(toint(id_d))
  | project-rename
        DvcIpAddr = source_ip_s,
        ActorOriginalUserType = user_type_s,
        ActorUsername = username_s,
        EventMessage = Message,
        EventProductVersion = version_s
  | extend
        User = ActorUsername,
        Dvc = DvcIpAddr
  | project-away
        *_d, *_s, event_timestamp_t, api_client_id_g, TenantId, _ResourceId, RawData, SourceSystem, Computer, MG, ManagementGroupName
};
parser (disabled=disabled)
}



//
// Function Name: ASimAuthenticationVMwareCarbonBlackCloud
// Description: This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Authentication normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuthenticationVMwareCarbonBlackCloud(    ['disabled']:bool=False)
{
let parser = (disabled: bool=false) {
    CarbonBlackAuditLogs_CL
    | where not(disabled)
    | where description_s has_any ("logged in", "login","second factor authentication") and description_s !has "connector"
    | extend
        EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),
        EventResult = iff(description_s has "successfully", "Success", "Failure"),
        AdditionalFields = bag_pack("flagged", flagged_b),
        EventSeverity = iff(flagged_b == true, "Low", "Informational")
    | extend
        EventCount = int(1),
        EventProduct = "Carbon Black Cloud",
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventVendor = "VMware",
        EventType = "Logon",
        EventResultDetails = case(
                       EventResult == "Failure" and description_s has ("locked"),
                       "User locked",
                       EventResult == "Failure" and description_s has_any ("logged in", "login"),
                       "Incorrect password",
                       EventResult == "Failure" and description_s has ("second factor authentication"),
                       "MFA not satisfied",
                       ""
                   ),
        EventOriginalResultDetails = iff(EventResult == "Failure", tostring(split(description_s, ';')[1]), "")
    | project-rename
        EventMessage = description_s,
        EventOriginalUid = eventId_g,
        TargetUsername = loginName_s,
        SrcIpAddr = clientIp_s,
        EventUid=_ItemId,
        EventOwner = orgName_s
    | extend
        IpAddr = SrcIpAddr,
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
        TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
        Dvc = EventProduct,
        EventEndTime = EventStartTime,
        User = TargetUsername,
        Src = SrcIpAddr
    | project-away
        *_s,
        *_d,
        *_b,
        _ResourceId,
        Computer,
        MG,
        ManagementGroupName,
        RawData,
        SourceSystem,
        TenantId 
};
parser(disabled=disabled)
}



//
// Function Name: imAuthentication
// Description: This ASIM parser supports filtering and normalizing Authentication logs from all supported sources to the ASIM Authentication normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) imAuthentication(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['pack']:bool=False)
{
let Generic=(starttime: datetime=datetime(null), endtime: datetime=datetime(null), username_has_any: dynamic = dynamic([]), targetappname_has_any: dynamic = dynamic([]), srcipaddr_has_any_prefix: dynamic = dynamic([]), srchostname_has_any: dynamic = dynamic([]), eventtype_in: dynamic = dynamic([]), eventresultdetails_in: dynamic = dynamic([]), eventresult: string = '*', pack: bool=false) {
  let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeimAuthentication') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser);
  let imAuthenticationBuiltInDisabled=toscalar('ExcludeimAuthenticationBuiltIn' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
  union isfuzzy=true
    vimAuthenticationEmpty
    , vimAuthenticationAADManagedIdentitySignInLogs   (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationAADManagedIdentitySignInLogs'      in (DisabledParsers) )))
    , vimAuthenticationAADNonInteractiveUserSignInLogs(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationAADNonInteractiveUserSignInLogs'   in (DisabledParsers) )))
    , vimAuthenticationAADServicePrincipalSignInLogs  (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationAADServicePrincipalSignInLogs'     in (DisabledParsers) )))
    , vimAuthenticationSigninLogs                     (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationSigninLogs'                        in (DisabledParsers) )))
    , vimAuthenticationAWSCloudTrail                  (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled = (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationAWSCloudTrail'                     in (DisabledParsers) )))
    , vimAuthenticationOktaSSO                        (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationOktaSSO'                           in (DisabledParsers) )))
    , vimAuthenticationOktaV2                        (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationOktaV2'                           in (DisabledParsers) )))
    , vimAuthenticationM365Defender                   (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationM365Defender'                      in (DisabledParsers) )))
    , vimAuthenticationMicrosoftWindowsEvent          (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationMicrosoftWindowsEvent'             in (DisabledParsers) )))
    , vimAuthenticationMD4IoT                         (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationMD4IoT'                            in (DisabledParsers) )))
    , vimAuthenticationPostgreSQL                     (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationPostgreSQL'                        in (DisabledParsers) )))
    , vimAuthenticationSshd                           (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationSshd' in (DisabledParsers) )))
    , vimAuthenticationSu                             (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationSu' in (DisabledParsers) )))
    , vimAuthenticationSudo                           (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationSudo' in (DisabledParsers) )))
    , vimAuthenticationCiscoASA                       (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationCiscoASA' in (DisabledParsers) )))
    , vimAuthenticationCiscoMeraki                    (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationCiscoMeraki' in (DisabledParsers) )))
    , vimAuthenticationCiscoMerakiSyslog                    (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationCiscoMerakiSyslog' in (DisabledParsers) )))
    , vimAuthenticationCiscoISE                       (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationCiscoISE' in (DisabledParsers) )))
    , vimAuthenticationBarracudaWAF                   (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationBarracudaWAF' in (DisabledParsers) )))
    , vimAuthenticationVectraXDRAudit                 (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationVectraXDRAudit' in (DisabledParsers) )))
    , vimAuthenticationGoogleWorkspace                (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationGoogleWorkspace' in (DisabledParsers) )))
    , vimAuthenticationSalesforceSC                   (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationSalesforceSC' in (DisabledParsers) )))
    , vimAuthenticationPaloAltoCortexDataLake         (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationPaloAltoCortexDataLake' in (DisabledParsers) )))
    , vimAuthenticationSentinelOne                    (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationSentinelOne' in (DisabledParsers) )))
    , vimAuthenticationCrowdStrikeFalconHost          (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationCrowdStrikeFalconHost' in (DisabledParsers) )))
    , vimAuthenticationVMwareCarbonBlackCloud         (starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled= (imAuthenticationBuiltInDisabled or('ExcludevimAuthenticationVMwareCarbonBlackCloud' in (DisabledParsers) )))
};
Generic(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, pack=pack)
}



//
// Function Name: vimAuthenticationAADManagedIdentitySignInLogs
// Description: This ASIM parser supports filtering and normalizing Microsoft Entra ID Managed Identity sign in logs, stored in the  AADManagedIdentitySignInLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationAADManagedIdentitySignInLogs(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let AADResultTypes = (T: (ResultType: string))
{
    let AADResultTypesLookup = datatable
(
    ResultType: string,
    EventResultDetails: string,
    EventType: string,
    EventResult: string,
    EventOriginalResultDetails: string,
    EventSeverity: string
)
[
    "0", "", "Logon", "Success", "", "Informational",
    "53003", "Logon violates policy", "Logon", "Failure", "53003 - BlockedByConditionalAccess", "Low",
    "50034", "No such user", "Logon", "Failure", "50034 - UserAccountNotFound", "Low",
    "50059", "No such user", "Logon", "Failure", "50059 - MissingTenantRealmAndNoUserInformationProvided", "Low",
    "50053", "User locked", "Logon", "Failure", "50053 - IdsLocked or IP address with malicious activity", "Low",
    "50055", "Password expired", "Logon", "Failure", "50055 - InvalidPasswordExpiredPassword", "Low",
    "50056", "Incorrect password", "Logon", "Failure", "50056 - Invalid or null password", "Low",
    "50057", "User disabled", "Logon", "Failure", "50057 - UserDisabled", "Low",
    "50058", "Logon violates policy", "Logon", "Failure", "50058 - UserInformationNotProvided", "Low",
    "50011", "Logon violates policy", "Logon", "Failure", "50011 - The redirect URI specified in the request does not match", "Low",
    "50064", "No such user or password", "Logon", "Failure", "50064 - CredentialAuthenticationError", "Low",
    "50076", "Logon violates policy", "Logon", "Failure", "50076 - UserStrongAuthClientAuthNRequired", "Low",
    "50079", "Logon violates policy", "Logon", "Failure", "50079 - UserStrongAuthEnrollmentRequired", "Low",
    "50105", "Logon violates policy", "Logon", "Failure", "50105 - EntitlementGrantsNotFound", "Low",
    "50126", "No such user or password", "Logon", "Failure", "50126 - InvalidUserNameOrPassword", "Low",
    "50132", "Password expired", "Logon", "Failure", "50132 - SsoArtifactInvalidOrExpired", "Low",
    "50133", "Password expired", "Logon", "Failure", "50133 - SsoArtifactRevoked", "Low",
    "50144", "Password expired", "Logon", "Failure", "50144 - InvalidPasswordExpiredOnPremPassword", "Low",
    "50173", "Session expired", "Logon", "Failure", "50173 -FreshTokenNeeded", "Low",
    "80012", "Logon violates policy", "Logon", "Failure", "80012 - OnPremisePasswordValidationAccountLogonInvalidHours", "Low",
    "51004", "No such user", "Logon", "Failure", "51004 - UserAccountNotInDirectory", "Low",
    "50072", "Logon violates policy", "Logon", "Failure", "50072 - UserStrongAuthEnrollmentRequiredInterrupt", "Low",
    "50005", "Logon violates policy", "Logon", "Failure", "50005 - DevicePolicyError", "Low",
    "50020", "Logon violates policy", "Logon", "Failure", "50020 - UserUnauthorized", "Low",
    "50074", "Logon violates policy", "Logon", "Failure", "50074 - UserStrongAuthClientAuthNRequiredInterrupt", "Low",
    "70008", "Session expired", "Logon", "Failure", "70008 - ExpiredOrRevokedGrant", "Low",
    "700016", "No such user", "Logon", "Failure", "700016 - UnauthorizedClient_DoesNotMatchRequest", "Low",
    "500011", "No such user", "Logon", "Failure", "500011 - InvalidResourceServicePrincipalNotFound", "Low",
    "700027", "Incorrect key", "Logon", "Failure", "700027 - The certificate with identifier used to sign the client assertion is not registered on application", "Low",
    "100003", "Other", "Logon", "Failure", "100003", "Low",
    "700082", "Session expired", "Logon", "Failure", "700082 - ExpiredOrRevokedGrantInactiveToken", "Low",
    "530034", "Logon violates policy", "Logon", "Failure", "530034 - DelegatedAdminBlockedDueToSuspiciousActivity", "Low",
    "530032", "Logon violates policy", "Logon", "Failure", "530032 - BlockedByConditionalAccessOnSecurityPolicy", "Low",
    "50061", "", "Logoff", "Failure", "50061 - SignoutInvalidRequest", "Low",
    "50068", "", "Logoff", "Failure", "50068 - SignoutInitiatorNotParticipant", "Low",
    "50078", "Logon violates policy", "Logon", "Failure", "50078 - UserStrongAuthExpired", "Low"
];
    T 
    | lookup AADResultTypesLookup on ResultType
    | extend
        EventType                   = iff(isempty(EventType), "Logon", EventType)
        ,
        EventResult                 = iff(isempty(EventResult), "Failure", EventResult)
        ,
        EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails)
        ,
        EventSeverity               = iff(isempty(EventSeverity), "Low", EventSeverity)
};
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    )
{
    AADManagedIdentitySignInLogs
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or ServicePrincipalName has_any (username_has_any))
        and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
    | invoke AADResultTypes()
    | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
        and (eventresult == "*" or (EventResult == eventresult))
    | project-rename
        ActingAppId               = AppId
        ,
        TargetAppId               = ResourceIdentity 
        ,
        TargetAppName             = ResourceDisplayName
        ,
        TargetUsername            = ServicePrincipalName
        ,
        TargetUserId              = ServicePrincipalId
        ,
        EventOriginalUid          = Id
        ,
        TargetSessionId           = CorrelationId
        ,
        SrcIpAddr                 = IPAddress
        ,
        EventUid                  = _ItemId
        ,
        EventProductVersion       = OperationVersion
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend 
        EventVendor                = 'Microsoft'
        ,
        EventProduct               = 'Entra ID'
        ,
        EventSchema                = 'Authentication'
        ,
        EventSchemaVersion         = '0.1.3'
        ,
        Dvc                        = 'Microsft/Entra ID'
        ,
        LogonMethod                = "Managed Identity"
        ,
        TargetAppType              = "Resource"
        ,
        EventCount                 = int(1)
        ,
        TargetUserType             = 'Application'
        ,
        TargetUsernameType         = 'Simple'
        ,
        TargetUserIdType           = 'EntraID'
    | project-away
        OperationName,
        Category,
        Result*,
        ServicePrincipal*,
        SourceSystem,
        DurationMs,
        Resource*,
        Location*,
        UniqueTokenIdentifier,
        FederatedCredentialId,
        Conditional*,
        Authentication*,
        Identity,
        Level,
        TenantId,
        temp*
    // 
    // -- Aliases
    | extend 
        User                         = TargetUsername
        ,
        LogonTarget                = TargetAppName
        ,
        EventStartTime             = TimeGenerated
        ,
        EventEndTime               = TimeGenerated
        ,
        Application                = TargetAppName
        ,
        Dst                        = TargetAppName
        ,
        Src                        = SrcIpAddr
        ,
        IpAddr                     = SrcIpAddr
        ,
        TargetSimpleUsername       = TargetUsername
        ,
        TargetUserAadId            = TargetUserId
};
parser (
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationAADNonInteractiveUserSignInLogs
// Description: This ASIM parser supports filtering and normalizing Microsoft Entra ID Non Interactive sign in logs, stored in the AADNonInteractiveUserSignInLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationAADNonInteractiveUserSignInLogs(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let FailedReason=datatable(ResultType: string, EventResultDetails: string)[
  '0', 'Success',
  '53003', 'Logon violates policy',
  '50034', 'No such user or password',
  '50059', 'No such user or password',
  '50053', 'User locked',
  '50055', 'Password expired',
  '50056', 'Incorrect password',
  '50057', 'User disabled',
  '50058', 'Logon violates policy',
  '50011', 'Logon violates policy', 
  '50064', 'No such user or password',
  '50076', 'Logon violates policy',
  '50079', 'Logon violates policy',
  '50105', 'Logon violates policy',
  '50126', 'No such user or password',
  '50132', 'Password expired',
  '50133', 'Password expired',
  '50144', 'Password expired',
  '50173', 'Password expired',
  '80012', 'Logon violates policy',
  '51004', 'No such user or password',
  '50072', 'Logon violates policy',
  '50005', 'Logon violates policy',
  '50020', 'Logon violates policy',
  '50074', 'Logon violates policy', 
  '70008', 'Password expired',
  '700016', 'No such user or password', 
  '500011', 'No such user or password' 
];
let AADNIAuthentication=(starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false) {
    AADNonInteractiveUserSignInLogs
    | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
        (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or UserPrincipalName has_any (username_has_any))
        and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0 or tostring(todynamic(DeviceDetail).displayName) has_any (srchostname_has_any))
        and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | extend
        EventVendor = 'Microsoft'
        ,
        EventProduct = 'Entra ID'
        ,
        EventSchemaVersion='0.1.0'
        ,
        EventCount=int(1)
        ,
        EventResult = iff (ResultType == 0, 'Success', 'Failure')
        ,
        EventOriginalResultDetails = coalesce(ResultDescription, ResultType)
        ,
        EventStartTime = TimeGenerated
        ,
        EventEndTime= TimeGenerated
        ,
        EventType= 'Logon'
        ,
        SrcDvcId=tostring(todynamic(DeviceDetail).deviceId)
        ,
        SrcHostname =tostring(todynamic(DeviceDetail).displayName)
        ,
        SrcDvcOs=tostring(todynamic(DeviceDetail).operatingSystem)
        ,
        Location = todynamic(LocationDetails)
        ,
        TargetAppId = ResourceIdentity 
        ,
        EventSubType = 'NonInteractive'
        ,
        TargetUsernameType='UPN'
        ,
        TargetUserIdType='EntraID'
        ,
        TargetAppName=ResourceDisplayName
    // Filtering on 'eventresult'
    | where (eventresult == "*" or (EventResult == eventresult))
    | extend
        SrcGeoCity=tostring(Location.city)
        ,
        SrcGeoCountry=tostring(Location.countryOrRegion)
        ,
        SrcGeoLatitude=toreal(Location.geoCoordinates.latitude)
        ,
        SrcGeoLongitude=toreal(Location.geoCoordinates.longitude)
    | project-rename
        EventOriginalUid =Id
        ,
        LogonMethod = AuthenticationRequirement
        ,
        HttpUserAgent=UserAgent
        ,
        TargetSessionId=CorrelationId
        ,
        TargetUserId = UserId
        ,
        TargetUsername=UserPrincipalName
        ,
        SrcIpAddr = IPAddress
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case(
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | lookup FailedReason on ResultType
    // filtering on 'eventresultdetails_in'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
    | extend
        User=TargetUsername
        ,
        LogonTarget=ResourceIdentity
        ,
        Dvc=EventVendor
        // -- Entity identifier explicit aliases
        ,
        TargetUserUpn = TargetUsername
        ,
        TargetUserAadId = TargetUserId
};
AADNIAuthentication(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimAuthenticationAADServicePrincipalSignInLogs
// Description: This ASIM parser supports filtering and normalizing Azure Active Directory Service Principal sign in logs, stored in the AADServicePrincipalSignInLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationAADServicePrincipalSignInLogs(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let AADResultTypes = (T: (ResultType: string))
{
    let AADResultTypesLookup = datatable
(
    ResultType: string,
    EventResultDetails: string,
    EventType: string,
    EventResult: string,
    EventOriginalResultDetails: string,
    EventSeverity: string
)
[
    "0", "", "Logon", "Success", "", "Informational",
    "53003", "Logon violates policy", "Logon", "Failure", "53003 - BlockedByConditionalAccess", "Low",
    "50034", "No such user", "Logon", "Failure", "50034 - UserAccountNotFound", "Low",
    "50059", "No such user", "Logon", "Failure", "50059 - MissingTenantRealmAndNoUserInformationProvided", "Low",
    "50053", "User locked", "Logon", "Failure", "50053 - IdsLocked or IP address with malicious activity", "Low",
    "50055", "Password expired", "Logon", "Failure", "50055 - InvalidPasswordExpiredPassword", "Low",
    "50056", "Incorrect password", "Logon", "Failure", "50056 - Invalid or null password", "Low",
    "50057", "User disabled", "Logon", "Failure", "50057 - UserDisabled", "Low",
    "50058", "Logon violates policy", "Logon", "Failure", "50058 - UserInformationNotProvided", "Low",
    "50011", "Logon violates policy", "Logon", "Failure", "50011 - The redirect URI specified in the request does not match", "Low",
    "50064", "No such user or password", "Logon", "Failure", "50064 - CredentialAuthenticationError", "Low",
    "50076", "Logon violates policy", "Logon", "Failure", "50076 - UserStrongAuthClientAuthNRequired", "Low",
    "50079", "Logon violates policy", "Logon", "Failure", "50079 - UserStrongAuthEnrollmentRequired", "Low",
    "50105", "Logon violates policy", "Logon", "Failure", "50105 - EntitlementGrantsNotFound", "Low",
    "50126", "No such user or password", "Logon", "Failure", "50126 - InvalidUserNameOrPassword", "Low",
    "50132", "Password expired", "Logon", "Failure", "50132 - SsoArtifactInvalidOrExpired", "Low",
    "50133", "Password expired", "Logon", "Failure", "50133 - SsoArtifactRevoked", "Low",
    "50144", "Password expired", "Logon", "Failure", "50144 - InvalidPasswordExpiredOnPremPassword", "Low",
    "50173", "Session expired", "Logon", "Failure", "50173 -FreshTokenNeeded", "Low",
    "80012", "Logon violates policy", "Logon", "Failure", "80012 - OnPremisePasswordValidationAccountLogonInvalidHours", "Low",
    "51004", "No such user", "Logon", "Failure", "51004 - UserAccountNotInDirectory", "Low",
    "50072", "Logon violates policy", "Logon", "Failure", "50072 - UserStrongAuthEnrollmentRequiredInterrupt", "Low",
    "50005", "Logon violates policy", "Logon", "Failure", "50005 - DevicePolicyError", "Low",
    "50020", "Logon violates policy", "Logon", "Failure", "50020 - UserUnauthorized", "Low",
    "50074", "Logon violates policy", "Logon", "Failure", "50074 - UserStrongAuthClientAuthNRequiredInterrupt", "Low",
    "70008", "Session expired", "Logon", "Failure", "70008 - ExpiredOrRevokedGrant", "Low",
    "700016", "No such user", "Logon", "Failure", "700016 - UnauthorizedClient_DoesNotMatchRequest", "Low",
    "500011", "No such user", "Logon", "Failure", "500011 - InvalidResourceServicePrincipalNotFound", "Low",
    "700027", "Incorrect key", "Logon", "Failure", "700027 - The certificate with identifier used to sign the client assertion is not registered on application", "Low",
    "100003", "Other", "Logon", "Failure", "100003", "Low",
    "700082", "Session expired", "Logon", "Failure", "700082 - ExpiredOrRevokedGrantInactiveToken", "Low",
    "530034", "Logon violates policy", "Logon", "Failure", "530034 - DelegatedAdminBlockedDueToSuspiciousActivity", "Low",
    "530032", "Logon violates policy", "Logon", "Failure", "530032 - BlockedByConditionalAccessOnSecurityPolicy", "Low",
    "50061", "", "Logoff", "Failure", "50061 - SignoutInvalidRequest", "Low",
    "50068", "", "Logoff", "Failure", "50068 - SignoutInitiatorNotParticipant", "Low",
    "50078", "Logon violates policy", "Logon", "Failure", "50078 - UserStrongAuthExpired", "Low",
    "7000222", "Session expired", "Logon", "Failure", "7000222 - The provided client secret keys are expired", "Low",
    "70021", "No such user", "Logon", "Failure", "70021 - No matching federated identity record found for presented assertion", "Low",
    "500341", "User disabled", "Logon", "Failure", "500341 - The user account has been deleted from the directory", "Low",
    "1002016", "Logon violates policy", "Logon", "Failure", "1002016 - You are using TLS version 1.0, 1.1 and/or 3DES cipher", "Low",
    "7000215", "Incorrect password", "Logon", "Failure", "7000215 - Invalid client secret is provided", "Low",
    "90033", "Transient error", "Logon", "Failure", "90033 - A transient error has occurred", "Informational",
    "90024", "Transient error", "Logon", "Failure", "90024 - RequestBudgetExceededError - A transient error has occurred", "Informational"
];
    T 
    | lookup AADResultTypesLookup on ResultType
    | extend
        EventType                   = iff(isempty(EventType), "Logon", EventType)
        ,
        EventResult                 = iff(isempty(EventResult), "Failure", EventResult)
        ,
        EventOriginalResultDetails  = iff(isempty(EventOriginalResultDetails), EventType, EventOriginalResultDetails)
        ,
        EventSeverity               = iff(isempty(EventSeverity), "Low", EventSeverity)
};
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    )
{
    AADServicePrincipalSignInLogs
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or ServicePrincipalName has_any (username_has_any))
        and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
    | invoke AADResultTypes()
    | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
        and (eventresult == "*" or (EventResult == eventresult))
    | project-rename
        ActingAppId               = AppId
        ,
        TargetAppId               = ResourceIdentity 
        ,
        TargetAppName             = ResourceDisplayName
        ,
        TargetUsername            = ServicePrincipalName
        ,
        TargetUserId              = ServicePrincipalId
        ,
        EventOriginalUid          = Id
        ,
        TargetSessionId           = CorrelationId
        ,
        SrcIpAddr                 = IPAddress
        ,
        EventUid                  = _ItemId
        ,
        EventProductVersion       = OperationVersion
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend 
        EventVendor                = 'Microsoft'
        ,
        EventProduct               = 'Entra ID'
        ,
        EventSchema                = 'Authentication'
        ,
        EventSchemaVersion         = '0.1.3'
        ,
        Dvc                        = 'Microsft/Entra ID'
        ,
        LogonMethod                = "Service Principal"
        ,
        TargetAppType              = "Resource"
        ,
        EventCount                 = int(1)
        ,
        TargetUserType             = 'Service'
        ,
        TargetUsernameType         = 'Simple'
        ,
        TargetUserIdType           = 'EntraID'
    | extend
        LocationDetails = todynamic(LocationDetails)
    | extend
        SrcGeoCity                   = tostring(LocationDetails.city)
        ,
        SrcGeoCountry              = Location
        ,
        SrcGeoLatitude             = toreal(LocationDetails.geoCoordinates.latitude)
        ,
        SrcGeoLongitude            = toreal(LocationDetails.geoCoordinates.longitude)
        ,
        SrcGeoRegion               = tostring(LocationDetails.state)
    | project-away
        OperationName,
        Category,
        Result*,
        ServicePrincipal*,
        SourceSystem,
        DurationMs,
        Resource*,
        Location*,
        UniqueTokenIdentifier,
        FederatedCredentialId,
        Conditional*,
        Authentication*,
        Identity,
        Level,
        TenantId,
        temp*
    // 
    // -- Aliases
    | extend 
        User                         = TargetUsername
        ,
        LogonTarget                = TargetAppName
        ,
        EventStartTime             = TimeGenerated
        ,
        EventEndTime               = TimeGenerated
        ,
        Application                = TargetAppName
        ,
        Dst                        = TargetAppName
        ,
        Src                        = SrcIpAddr
        ,
        IpAddr                     = SrcIpAddr
        ,
        TargetSimpleUsername       = TargetUsername
        ,
        TargetUserAadId            = TargetUserId
};
parser  
(
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationSigninLogs
// Description: This ASIM parser supports filtering and normalizing Microsoft Entra ID Interactive sign in logs, stored in the  SigninLogs table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationSigninLogs(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let FailedReason=datatable(ResultType: string, EventResultDetails: string)[
  '0', 'Success',
  '53003', 'Logon violates policy',
  '50034', 'No such user or password',
  '50059', 'No such user or password',
  '50053', 'User locked',
  '50055', 'Password expired',
  '50056', 'Incorrect password',
  '50057', 'User disabled',
  '50058', 'Logon violates policy',
  '50011', 'Logon violates policy', 
  '50064', 'No such user or password',
  '50076', 'Logon violates policy',
  '50079', 'Logon violates policy',
  '50105', 'Logon violates policy',
  '50126', 'No such user or password',
  '50132', 'Password expired',
  '50133', 'Password expired',
  '50144', 'Password expired',
  '50173', 'Password expired',
  '80012', 'Logon violates policy',
  '51004', 'No such user or password',
  '50072', 'Logon violates policy',
  '50005', 'Logon violates policy',
  '50020', 'Logon violates policy',
  '50074', 'Logon violates policy', 
  '70008', 'Password expired',
  '700016', 'No such user or password', 
  '500011', 'No such user or password' 
];
let UserTypeLookup = datatable (UserType: string, TargetUserType: string) [
    'Member', 'Regular',
    'Guest', 'Guest', 
    '', ''
];
let AADSigninLogs=(starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false) {
    SigninLogs
    | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
        (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime) 
        and ((array_length(username_has_any) == 0) or UserPrincipalName has_any (username_has_any))
        and ((array_length(targetappname_has_any) == 0) or ResourceDisplayName has_any (targetappname_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0 or tostring(DeviceDetail.displayName) has_any (srchostname_has_any))
        and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | extend
        EventVendor = 'Microsoft'
        ,
        EventProduct = 'Entra ID'
        ,
        EventCount=int(1)
        ,
        EventSchemaVersion='0.1.0'
        ,
        EventResult = iff (ResultType == 0, 'Success', 'Failure')
        ,
        EventOriginalResultDetails = coalesce(ResultDescription, ResultType)
        ,
        EventStartTime = TimeGenerated
        ,
        EventEndTime= TimeGenerated
        ,
        EventType= 'Logon'
        ,
        SrcDvcId=tostring(DeviceDetail.deviceId)
        ,
        SrcDvcHostname = tostring(DeviceDetail.displayName) // Backword Compatibility. Will be removed by July 2024
        ,
        SrcHostname = tostring(DeviceDetail.displayName)
        ,
        SrcDvcOs=tostring(DeviceDetail.operatingSystem)
        // , SrcBrowser= tostring(DeviceDetail.browser)
        ,
        Location = todynamic(LocationDetails)
        ,
        TargetUsernameType='Upn'
        ,
        TargetUserIdType='EntraID'
        ,
        SrcIpAddr = IPAddress
    // Filtering on 'eventresult'
    | where (eventresult == "*" or (EventResult == eventresult))
    | extend
        SrcGeoCity=tostring(Location.city)
        ,
        SrcGeoCountry=tostring(Location.countryOrRegion)
        ,
        SrcGeoLatitude=toreal(Location.geoCoordinates.latitude)
        ,
        SrcGeoLongitude=toreal(Location.geoCoordinates.longitude)
    | lookup FailedReason on ResultType
    // filtering on 'eventresultdetails_in'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
    | project-rename
        EventOriginalUid =Id
        ,
        LogonMethod  = AuthenticationRequirement
        ,
        HttpUserAgent=UserAgent
        ,
        TargetSessionId=CorrelationId
        ,
        TargetUserId = UserId
        ,
        TargetUsername=UserPrincipalName
        ,
        TargetAppId = ResourceIdentity
        ,
        TargetAppName=ResourceDisplayName
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case(
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | lookup UserTypeLookup on UserType
    | project-away UserType
    // ** Aliases
    | extend 
        User=TargetUsername
        ,
        LogonTarget=TargetAppName
        ,
        Dvc=EventVendor
        // -- Entity identifier explicit aliases
        ,
        TargetUserUpn = TargetUsername
        ,
        TargetUserAadId = TargetUserId        
};
AADSigninLogs(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimAuthenticationAWSCloudTrail
// Description: This ASIM parser supports filtering and normalizing Amazon Web Service sign in logs, stored in the  AWSCloudTrail table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationAWSCloudTrail(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
// -- Refer to https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-event-reference-user-identity.html for details
let usertype_lookup = datatable (TargetOriginalUserType: string, TargetUserType: string) [
    // -- For console login, only IAMUser, Root and AssumedRole are relevant
    'Root', 'Admin', 
    'IAMUser', 'Regular', 
    'AssumedRole', 'Service', 
    'Role', 'Service', 
    'FederatedUser', 'Regular',
    'Directory', 'Other',
    'AWSAccount', 'Guest',
    'AWSService', 'Application',
    'Unknown', 'Other',
];
let eventresultdetails_lookup = datatable (
    EventOriginalResultDetails: string,
    EventOriginalDetails: string
) [
    'No username found in supplied account', 'No such user',
    'Failed authentication', ''
];
let ASIM_GetUsernameType = (username: string) { 
    case ( 
    username contains "@",
    "UPN"
    ,
    username contains "\\",
    "Windows"
    ,
    (username has "CN=" or username has "OU=" or username has "DC="),
    "DN"
    ,
    isempty(username),
    ""
    ,
    "Simple"
)
};
let parser= (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    AWSCloudTrail
    | where not(disabled)
    //  -- Pre filtering
    | where (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime)
        and EventName == 'ConsoleLogin'
        and ((array_length(username_has_any) == 0) or (UserIdentityArn has_any (username_has_any)) or (UserIdentityUserName has_any (username_has_any)))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SourceIpAddress, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
    // eventresult filtering done later in the parser
    //  -- end pre-filtering
    | project-rename
        EventOriginalUid            = AwsEventId,
        EventOriginalResultDetails  = ErrorMessage,
        TargetOriginalUserType      = UserIdentityType,
        EventProductVersion         = EventVersion,
        SrcIpAddr                   = SourceIpAddress,
        TargeCloudRegion            = AWSRegion,
        TargetUserScopeId           = UserIdentityAccountId,
        HttpUserAgent               = UserAgent,
        EventUid                    = _ItemId
    | extend
        TargetUsername              = case (
                                  UserIdentityUserName == "HIDDEN_DUE_TO_SECURITY_REASONS",
                                  "",
                                  TargetOriginalUserType == 'IAMUser',
                                  UserIdentityUserName,
                                  TargetOriginalUserType == 'Root',
                                  'root',
                                  TargetOriginalUserType == 'AssumedRole',
                                  tostring(split(UserIdentityArn, '/')[-1]), // -- This is the AssuderRole session name, which typically represents a user.           
                                  UserIdentityUserName
                              )
    // Filtering on 'username_has_any'
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        EventVendor                 = 'AWS',
        Dvc                         = 'AWS',
        EventProduct                = 'CloudTrail',
        EventCount                  = int(1),
        EventSchemaVersion          = '0.1.3',
        EventSchema                 = 'Authentication',
        EventStartTime              = TimeGenerated,
        EventEndTime                = TimeGenerated,
        EventType                   = 'Logon',
        EventSubType                = 'Interactive',
        TargetUserIdType            = 'AWSId',
        LogonProtocol               = 'HTTPS',
        TargetUserId                = tostring(split(UserIdentityPrincipalid, ':')[0]),
        LogonMethod                 = iff (AdditionalEventData has '"MFAUsed": "Yes"', 'MFA', ''),
        SrcDeviceType               = iff (AdditionalEventData has '"MobileVersion":"Yes"', 'Mobile Device', 'Computer'),
        EventResult                 = iff (ResponseElements has 'Success', 'Success', 'Failure')
    // Filtering on 'eventresult'
    | where (eventresult == "*" or (EventResult == eventresult))
    | extend
        TargetUsernameType          = ASIM_GetUsernameType (TargetUsername)
    | parse AdditionalEventData with * '"LoginTo":"' TargetUrl: string '"' *
    | lookup eventresultdetails_lookup on EventOriginalResultDetails
    | lookup usertype_lookup on TargetOriginalUserType 
    | extend 
        LogonTarget=tostring(split(TargetUrl, '?')[0]),
        EventSeverity = iff(EventResult == 'Failure', 'Low', 'Informational')
    // -- Specific idetifier aliases
    | extend 
        TargetUserAWSId = TargetUserId
    // -- Aliases
    | extend
        User   = TargetUsername,
        Dvc    = EventVendor,
        Dst    = LogonTarget,
        IpAddr = SrcIpAddr,
        Src    = SrcIpAddr
    | project-away
        EventSource,
        EventTypeName,
        EventName,
        ResponseElements,
        AdditionalEventData,
        Session*,
        Category,
        ErrorCode,
        Aws*,
        ManagementEvent,
        OperationName,
        ReadOnly,
        RequestParameters,
        Resources,
        ServiceEventDetails,
        SharedEventId,
        SourceSystem,
        UserIdentity*,
        VpcEndpointId,
        APIVersion,
        RecipientAccountId,
        TenantId,
        EC2RoleDelivery,
        temp_*
};
parser (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationBarracudaWAF
// Description: This ASIM parser supports normalizing the Barracuda WAF logs to the ASIM authentication normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationBarracudaWAF(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let barracudaSchema = datatable(
  LogType_s: string,
  UnitName_s: string,
  EventName_s: string,
  DeviceReceiptTime_s: string,
  HostIP_s: string,
  host_s: string,
  LoginIP_s: string,
  Severity_s: string,
  LoginPort_d: real,
  AdminName_s: string,
  EventMessage_s: string,
  TimeTaken_d: real,
  TenantId: string,
  Message: string,
  SourceSystem: string,
  _ResourceId: string,
  RawData: string,
  Computer: string,
  MG: string,
  ManagementGroupName: string,
  SourceIP: string,
  TimeGenerated: datetime
  )[];
  let SeverityLookup = datatable (severity: int, EventSeverity: string)
      [
      0, "High", 
      1, "High", 
      2, "High", 
      3, "Medium",
      4, "Low",
      5, "Low", 
      6, "Informational",
      7, "Informational" 
  ];
  let EventTypeLookup = datatable (
      EventName_s: string,
      EventType_lookup: string,
      EventResult: string
  )
      [
      "LOGIN", "Logon", "Success",
      "UNSUCCESSFUL_LOGIN", "Logoff", "Failure",
      "LOGOUT", "Logoff", "Success"
  ];
  let EventResultDetailsLookup = datatable (
      Reason: string,
      EventResultDetails: string
  )
      [
      "Invalid Username/Password", "Incorrect password",
      "Account Lockout", "User locked",
      "Expired or Disabled Accounts", "User disabled",
      "IP Blocking", "Logon violates policy",
      "Session Timeouts", "Session expired",
      "CAPTCHA Verification", "Other"
  ];
  let parser = (
      starttime: datetime=datetime(null), 
      endtime: datetime=datetime(null), 
      username_has_any: dynamic = dynamic([]),
      targetappname_has_any: dynamic = dynamic([]),
      srcipaddr_has_any_prefix: dynamic = dynamic([]),
      srchostname_has_any: dynamic = dynamic([]),
      eventtype_in: dynamic = dynamic([]),
      eventresultdetails_in: dynamic = dynamic([]),
      eventresult: string = '*',
      disabled: bool=false
      ) { 
      let BarracudaCustom = 
          union isfuzzy=true
              barracudaSchema,
              barracuda_CL
          | where not(disabled)
              and (LogType_s == "AUDIT")
              and (EventName_s in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
          | where (isnull(starttime) or TimeGenerated >= starttime)
              and (isnull(endtime) or TimeGenerated <= endtime)
              and ((array_length(username_has_any) == 0) or (AdminName_s has_any (username_has_any)))
              and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
              and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(LoginIP_s, srcipaddr_has_any_prefix))
              and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
          // Filtering for eventtype_in done later in the parser
          // Filtering for eventresultdetails_in done later in the parser
          // Filtering for eventresult done later in the parser
          | parse trim(@'[^\w(")]+', EventMessage_s) with * "Reason=" Reason: string
          | extend Reason = trim(@'(")', Reason)
          | lookup EventResultDetailsLookup on Reason
          // Filtering on eventresultdetails_in
          | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
          | lookup EventTypeLookup on EventName_s
          | extend 
              EventType = EventType_lookup,
              severity = toint(Severity_s)
          // Filtering on eventtype_in and eventresult
          | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
              and (eventresult == "*" or (EventResult == eventresult))
          | lookup SeverityLookup on severity
          | extend
              Dvc = UnitName_s,
              EventCount = toint(1),
              EventProduct = "WAF",
              EventSchema = "Authentication",
              EventSchemaVersion = "0.1.3",
              EventVendor = "Barracuda"
          | extend
              SrcPortNumber = toint(LoginPort_d),
              DvcIpAddr = HostIP_s,
              SrcIpAddr = LoginIP_s,
              DvcHostname = host_s,
              ActorUsername = AdminName_s,
              EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s) - tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)))
          // mapping ASimMatchingUsername
          | extend temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
          // TargetUsername not coming from source. Hence, not mapped.
          | extend ASimMatchingUsername = case(
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchActorUsername,
                                      "ActorUsername",
                                      "No match"
                                  )
          | extend
              ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
              ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""),
              EventEndTime = EventStartTime
          | extend
              IpAddr = SrcIpAddr,
              Src = SrcIpAddr
          | project-away
              *_s,
              *_d,
              temp_*,
              severity,
              EventType_lookup,
              TenantId,
              Message,
              SourceSystem,
              _ResourceId,
              RawData,
              Computer,
              MG,
              ManagementGroupName,
              SourceIP,
              Reason;
      let BarracudaCEF = 
          CommonSecurityLog
          | where not(disabled)
              and DeviceVendor startswith "Barracuda"
              and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
          | where DeviceEventCategory == "AUDIT"
              and (toupper(ProcessName) in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
          | where (isnull(starttime) or TimeGenerated >= starttime)
              and (isnull(endtime) or TimeGenerated <= endtime)
              and ((array_length(username_has_any) == 0) or (DestinationUserName has_any (username_has_any)))
              and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
              and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
              and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
          // Filtering for eventtype_in done later in the parser
          // Filtering for eventresultdetails_in done later in the parser
          // Filtering for eventresult done later in the parser
          | parse trim(@'[^\w(")]+', Message) with * "Reason=" Reason: string
          | extend Reason = trim(@'(")', Reason)
          | lookup EventResultDetailsLookup on Reason
          // Filtering on eventresultdetails_in
          | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
          | extend ProcessName = toupper(ProcessName)
          | lookup EventTypeLookup on $left.ProcessName == $right.EventName_s
          | extend 
              EventType = EventType_lookup,
              severity = toint(LogSeverity)
          // Filtering on eventtype_in and eventresult
          | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
          | lookup SeverityLookup on severity
          | extend
              Dvc = DeviceName,
              EventCount = toint(1),
              EventProduct = "WAF",
              EventSchema = "Authentication",
              EventSchemaVersion = "0.1.3",
              EventVendor = "Barracuda"
          | extend
              SrcPortNumber = toint(SourcePort),
              DvcIpAddr = DeviceAddress,
              SrcIpAddr = SourceIP,
              DvcHostname = DeviceName,
              ActorUsername = DestinationUserName,
              EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime) - tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))
          // mapping ASimMatchingUsername
          | extend temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
          // TargetUsername not coming from source. Hence, not mapped.
          | extend ASimMatchingUsername = case(
                                      array_length(username_has_any) == 0,
                                      "-",
                                      temp_isMatchActorUsername,
                                      "ActorUsername",
                                      "No match"
                                  )
          | extend
              ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
              ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""), 
              EventEndTime = EventStartTime
          | extend
              IpAddr = SrcIpAddr,
              Src = SrcIpAddr
          | project-away
              ThreatConfidence,
              EventType_lookup,
              CommunicationDirection,
              AdditionalExtensions,
              Device*,
              Source*,
              Destination*,
              temp_*,
              Activity,
              LogSeverity,
              ApplicationProtocol,
              ProcessID,
              ExtID,
              Protocol,
              Reason,
              ReceiptTime,
              SimplifiedDeviceAction,
              OriginalLogSeverity,
              ProcessName,
              EndTime,
              ExternalID,
              File*,
              ReceivedBytes,
              Message,
              Old*,
              EventOutcome,
              Request*,
              StartTime,
              Field*,
              Flex*,
              Remote*,
              Malicious*,
              severity,
              ThreatSeverity,
              IndicatorThreatType,
              ThreatDescription,
              _ResourceId,
              SentBytes,
              ReportReferenceLink,
              Computer,
              TenantId;
      union isfuzzy = true 
          BarracudaCustom,
          BarracudaCEF
  };
  parser (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationCiscoASA
// Description: This ASIM parser supports normalizing authentication events, collected from Cisco ASA devices, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationCiscoASA(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
 starttime: datetime=datetime(null), 
 endtime: datetime=datetime(null), 
 username_has_any: dynamic = dynamic([]),
 targetappname_has_any: dynamic = dynamic([]),
 srcipaddr_has_any_prefix: dynamic = dynamic([]),
 srchostname_has_any: dynamic = dynamic([]),
 eventtype_in: dynamic = dynamic([]),
 eventresultdetails_in: dynamic = dynamic([]),
 eventresult: string = '*',
 disabled: bool=false
 ) {
  let DeviceEventClassIDLookup = datatable (
 DeviceEventClassID: string,
 EventResultDetails: string,
 EventType: string,
 EventResult: string,
 DvcAction: string,
 EventSubType: string
 )
         [
     "113004", "", "Logon", "Success", "Allowed", "Remote",
     "113005", "Incorrect password", "Logon", "Failure", "Blocked", "Remote",
     "113006", "Logon violates policy", "Logon", "Failure", "Blocked", "Remote",
     "113008", "", "Logon", "Success", "Allowed", "Remote",
     "113010", "", "Logon", "Success", "Allowed", "Remote",
     "113012", "", "Logon", "Success", "Allowed", "Remote",
     "113019", "", "Logoff", "Success", "Allowed", "",
     "113039", "", "Logon", "Success", "Allowed", "Remote",
     "315011", "", "Logoff", "Success", "Allowed", "",
     "502103", "", "Elevate", "Success", "Allowed", "AssumeRole",
     "605004", "Other", "Logon", "Failure", "Blocked", "Remote",
     "605005", "", "Logon", "Success", "Allowed", "Remote",
     "611101", "", "Logon", "Success", "Allowed", "Remote",
     "611102", "Other", "Logon", "Failure", "Blocked", "Remote",
     "611103", "", "Logoff", "Success", "Allowed", "",
     "713198", "Logon violates policy", "Logon", "Failure", "Blocked", "Remote",
     "716002", "", "Logoff", "Success", "Allowed", "",
     "716038", "", "Logon", "Success", "Allowed", "Remote",
     "716039", "Other", "Logon", "Failure", "Blocked", "Remote",
     "716040", "Other", "Logon", "Failure", "Blocked", "Remote",
     "722022", "", "Logon", "Success", "Allowed", "Remote",
     "722023", "", "Logoff", "Success", "Allowed", "",
     "722028", "", "Logoff", "Success", "Allowed", "",
     "722037", "", "Logoff", "Success", "Allowed", "",
     "772002", "", "Logon", "Success", "Allowed", "",
     "772003", "Other", "Logon", "Failure", "Blocked", "",
     "772004", "Other", "Logon", "Failure", "Blocked", "",
     "772005", "", "Logon", "Success", "Allowed", "",
     "772006", "Other", "Logon", "Failure", "Blocked", ""
 ];
     let FilteredDeviceEventClassID = toscalar(
         DeviceEventClassIDLookup 
         | summarize make_set(DeviceEventClassID)
         );
     let SeverityLookup = datatable (EventOriginalSeverity: string, EventSeverity: string)
         [
     "1", "High", // Alert,
     "2", "High", // Critical
     "3", "Medium", // Error
     "4", "Low", // Warning
     "5", "Informational", // Notification
     "6", "Informational", // Information
     "7", "Informational", // Debug
 ];
     let LogMessages = 
         CommonSecurityLog 
         | where not(disabled)
         | where
             (isnull(starttime) or TimeGenerated >= starttime) and
             (isnull(endtime) or TimeGenerated <= endtime) 
         | where DeviceVendor =~ "Cisco"
             and DeviceProduct == "ASA"
             and DeviceEventClassID in(FilteredDeviceEventClassID)
             and ((array_length(username_has_any) == 0) or (Message has_any (username_has_any)))
             and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(Message, srcipaddr_has_any_prefix))
             and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
         // eventtype_in filtering done later in the parser
         // eventresultdetails_in filtering done later in the parser
         // eventresult filtering done later in the parser
         | extend EventOriginalSeverity = tostring(split(Message, "-", 1)[0])
         | lookup SeverityLookup on EventOriginalSeverity
         | project
             TimeGenerated,
             Type,
             Computer,
             _ItemId,
             DeviceEventClassID,
             Message,
             DeviceAddress,
             EventOriginalSeverity,
             EventSeverity
         | lookup DeviceEventClassIDLookup on DeviceEventClassID
         // Filtering on eventtype_in and eventresult
         | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))
             and (eventresult == "*" or (EventResult == eventresult));
     union 
         (
         LogMessages
         | where DeviceEventClassID == 113005
         | parse Message with * 'reason = ' EventOriginalResultDetails ' : server = ' TargetIpAddr ' ' * 'user = ' TargetUsername ' ' * 'user IP = ' SrcIpAddr
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 502103
         | parse Message with * "Uname: " TargetUsername " " *
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID in(605004, 605005)
         | parse Message with * 'from ' SrcIpAddr '/' SrcPortNumber: int " to " * ":" TargetIpAddr '/' * 'user "' TargetUsername '"'
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID in(611101, 611102)
         | parse Message with * 'IP address: ' SrcIpAddr ', Uname: ' TargetUsername
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 611103
         | parse Message with * ' Uname: ' TargetUsername
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 113004
         | parse Message with * 'server = ' TargetIpAddr ' ' * 'user = ' TargetUsername
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID in(113008, 113012)
         | parse Message with * 'user = ' TargetUsername
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 113019
         | parse Message with * 'Username = ' TargetUsername ', IP = ' SrcIpAddr ',' * 
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID in(113039, 716002, 716039, 722022, 722023, 722028, 722037)
         | parse Message with * '> User <' TargetUsername "> IP <" SrcIpAddr ">" *
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 315011
         | parse Message with * 'from ' SrcIpAddr ' ' * 'user "' TargetUsername '" ' * ' reason: "' EventOriginalResultDetails '" ' *
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | extend EventResultDetails = iif(EventOriginalResultDetails == "Internal error", "Other", EventResultDetails)
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 113010
         | parse Message with * 'user ' TargetUsername ' from  server' SrcIpAddr
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 113006
         | parse Message with * 'User ' TargetUsername ' locked' *
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 716040
         | parse Message with * 'Denied ' TargetUsername ' login' *
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 713198
         | parse Message with * 'Failed: ' TargetUsername ' User' *
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID == 716038
         | parse Message with * 'User ' TargetUsername ' IP ' SrcIpAddr ' Authentication'*
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID in(772002)
         | parse Message with * 'user ' TargetUsername ', cause: ' EventOriginalResultDetails
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),
         (
         LogMessages
         | where DeviceEventClassID in(772003, 772004)
         | parse Message with * 'user ' TargetUsername ', IP ' SrcIpAddr ', cause: ' EventOriginalResultDetails
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
         | project-away Message
         ), 
         (
         LogMessages
         | where DeviceEventClassID in(772005)
         | parse Message with * 'user ' TargetUsername ' passed'
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         ),  
         (
         LogMessages
         | where DeviceEventClassID in(772006)
         | parse Message with * 'user ' TargetUsername ' failed'
         | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
             and ((array_length(srcipaddr_has_any_prefix) == 0))
         | project-away Message
         )
     // mapping ASimMatchingUsername
     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
     // ActorUsername not coming from source. Hence, not mapped.
     | extend ASimMatchingUsername = case
         (
                                     array_length(username_has_any) == 0,
                                     "-",
                                     temp_isMatchTargetUsername,
                                     "TargetUsername",
                                     "No match"
                                 )
     | project-rename 
         DvcHostname           = Computer,
         EventUid              = _ItemId,
         EventOriginalType     = DeviceEventClassID,
         DvcIpAddr             = DeviceAddress
     | extend 
         EventSchemaVersion = "0.1.3",
         EventSchema        = "Authentication",
         EventVendor        = "Cisco",
         EventProduct       = "ASA",
         EventCount         = int(1),
         EventStartTime     = TimeGenerated,
         EventEndTime       = TimeGenerated,
         Dvc                = DvcHostname,
         User               = TargetUsername,
         Src                = SrcIpAddr,
         IpAddr             = SrcIpAddr,
         Dst                = TargetIpAddr,
         TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
         EventResultDetails = iif(TargetUsername == "*****", "No such user or password", EventResultDetails)
     // filtering on 'eventresultdetails_in'
     | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
   };
 parser (
     starttime=starttime,
     endtime=endtime,
     username_has_any=username_has_any,
     targetappname_has_any=targetappname_has_any,
     srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
     srchostname_has_any=srchostname_has_any,
     eventtype_in=eventtype_in,
     eventresultdetails_in=eventresultdetails_in,
     eventresult=eventresult,
     disabled=disabled
 )
}



//
// Function Name: vimAuthenticationCiscoISE
// Description: This ASIM parser supports normalizing Cisco ISE events produced by the Microsoft Sentinel Cisco ISE connector to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationCiscoISE(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let EventFieldsLookup=datatable(
  EventOriginalType: string,
  EventType: string,
  EventOriginalSeverity: string,
  EventResult: string,
  EventSeverity: string,
  EventResultDetails: string,
  EventMessage: string,
  EventOriginalResultDetails: string
)[
    "25104", "Logon", "DEBUG", "Success", "Informational", "", "Plain text password authentication in external REST ID store server succeeded", "Plain text password authentication in external REST ID store server succeeded",
    "25105", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "Plain text password authentication in external REST ID store server failed", "Plain text password authentication in external REST ID store server failed",
    "25106", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "REST ID Store server indicated plain text password authentication failure", "REST ID store server indicated plain text password authentication failure",
    "25112", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "REST database indicated plain text password authentication failure", "REST database indicated plain text password authentication failure",
    "51000", "Logon", "NOTICE", "Failure", "Low", "No such user or password", "Administrator authentication failed", "Administrator authentication failed",
    "51001", "Logon", "NOTICE", "Success", "Informational", "", "Administrator authentication succeeded", "Administrator authentication succeeded",
    "51002", "Logoff", "NOTICE", "Success", "Informational", "", "Administrator logged off", "Administrator logged off",
    "51003", "Logoff", "NOTICE", "Success", "Informational", "Session expired", "Session Timeout", "Administrator had a session timeout",
    "51004", "Logon", "NOTICE", "Failure", "Low", "Logon violates policy", "Rejected administrator session from unauthorized client IP address", "An attempt to start an administration session from an unauthorized client IP address was rejected. Check the client's administration access setting.",
    "51005", "Logon", "NOTICE", "Failure", "Low", "User disabled", "Administrator authentication failed. Administrator account is disabled", "Administrator authentication failed. Administrator account is disabled.",
    "51006", "Logon", "NOTICE", "Failure", "Low", "User disabled", "Administrator authentication failed. Account is disabled due to inactivity", "Administrator authentication failed. Account is disabled due to inactivity.",
    "51007", "Logon", "NOTICE", "Failure", "Low", "User disabled", "Authentication failed. Account is disabled due to password expiration", "Authentication failed. Account is disabled due to password expiration",
    "51008", "Logon", "NOTICE", "Failure", "Low", "Logon violates policy", "Administrator authentication failed. Account is disabled due to excessive failed authentication attempts", "Administrator authentication failed. Account is disabled due to excessive failed authentication attempts.",
    "51009", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication failed. ISE Runtime is not running", "Authentication failed. ISE Runtime is not running",
    "51020", "Logon", "NOTICE", "Failure", "Low", "No such user", "Administrator authentication failed. Login username does not exist.", "Administrator authentication failed. Login username does not exist.",
    "51021", "Logon", "NOTICE", "Failure", "Low", "Incorrect password", "Administrator authentication failed. Wrong password.", "Administrator authentication failed. Wrong password.",
    "51022", "Logon", "NOTICE", "Failure", "Low", "Other", "Administrator authentication failed. System Error", "Administrator authentication failed. System Error",
    "51106", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication for web services failed", "Authentication for web services failed.",
    "60075", "Logon", "NOTICE", "Success", "Informational", "", "Sponsor has successfully authenticated", "Sponsor has successfully authenticated",
    "60076", "Logon", "NOTICE", "Failure", "Low", "Other", "Sponsor authentication has failed", "Sponsor authentication has failed; please see Failure Code for more details",
    "60077", "Logon", "NOTICE", "Failure", "Low", "Other", "MyDevices user authentication has failed", "MyDevices user authentication has failed",
    "60078", "Logon", "INFO", "Success", "Informational", "", "MyDevices user has successfully authenticated", "MyDevices user has successfully authenticated",
    "60080", "Logon", "INFO", "Success", "Informational", "", "A SSH CLI user has successfully logged in", "A SSH CLI User has successfully logged in",
    "60081", "Logon", "INFO", "Failure", "Low", "No such user or password", "A SSH CLI user has attempted unsuccessfully to login", "A SSH CLI user has attempted unsuccessfully to login",
    "60082", "Logon", "INFO", "Failure", "Low", "User locked", "A SSH CLI user has attempted to login, however account is locked out", "A SSH CLI user has attempted to login, however account is locked out",
    "60135", "Logoff", "INFO", "Failure", "Low", "Other", "MyDevices user SSO logout has failed", "MyDevices user SSO logout has failed",
    "60136", "Logoff", "INFO", "Failure", "Low", "Other", "Sponsor user SSO logout has failed", "Sponsor user SSO logout has failed",
    "60204", "Logon", "INFO", "Success", "Informational", "", "System root CLI account has successfully logged in", "System root CLI account has successfully logged in",
    "60205", "Logon", "INFO", "Success", "Informational", "", "A CLI user has logged in from console", "A CLI user has logged in from console",
    "60206", "Logoff", "INFO", "Success", "Informational", "", "A CLI user has logged out from console", "A CLI user has logged out from console",
    "61012", "Logon", "INFO", "Success", "Informational", "", "ISE has authenticated against APIC successfully", "ISE has authenticated against APIC successfully",
    "61013", "Logon", "INFO", "Failure", "Low", "Other", "ISE failed to authenticate against APIC", "ISE failed to authenticate against APIC",
    "61014", "Logon", "INFO", "Success", "Informational", "", "ISE has refreshed authentication against APIC successfully", "ISE has refreshed authentication against APIC successfully",
    "61015", "Logon", "INFO", "Failure", "Low", "Other", "ISE failed to refresh authenticate against APIC", "ISE failed to refresh authenticate against APIC",
    "60507", "Logon", "ERROR", "Failure", "Low", "No such user", "ERS request rejected due to unauthorized user.", "ERS request was rejected because the user who sent the request is unauthorized.",
    "51025", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication for web services failed", "Authentication for web services failed.",
    "61076", "Logoff", "INFO", "Success", "Informational", "", "Sponsor has been successfully logged out", "Sponsor has been successfully logged out",
    "61077", "Logoff", "INFO", "Success", "Informational", "", "MyDevices has been successfully logged out", "MyDevices has been successfully logged out",
    "10003", "Logon", "ERROR", "Failure", "Low", "No such user", "Internal error: Administrator authentication received blank Administrator name", "Internal error: AAC RT component received Administrator authentication request",
    "10004", "Logon", "ERROR", "Failure", "Low", "Incorrect password", "Internal error: Administrator authentication received blank Administrator password", "Internal error: AAC RT component received an Administrator authentication request with blank admin password",
    "10005", "Logon", "INFO", "Success", "Informational", "", "Administrator authenticated successfully", "Administrator authenticated successfully",
    "10006", "Logon", "INFO", "Failure", "Low", "No such user or password", "Administrator authentication failed", "Administrator authentication failed",
    "10007", "Logon", "ERROR", "Failure", "Low", "Other", "Administrator authentication failed - DB Error", "Administrator authentication failed - DB Error",
    "22000", "Logon", "ERROR", "Failure", "Low", "Other", "Authentication resulted in internal error", "Authentication resulted in internal error",
    "22004", "Logon", "INFO", "Failure", "Low", "Incorrect password", "Wrong password", "Wrong password",
    "22028", "Logon", "INFO", "Failure", "Low", "No such user or password", "Authentication failed and the advanced options are ignored", "Authentication of the user failed and the advanced option settings specified in the identity portion of the relevant authentication policy were ignored. For PEAP, LEAP, EAP-FAST or RADIUS MSCHAP authentications, when authentication fails, ISE stops processing the request.",
    "22037", "Logon", "DEBUG", "Success", "Informational", "", "Authentication Passed", "Authentication Passed, Skipping Attribute Retrieval",
    "22040", "Logon", "INFO", "Failure", "Low", "Incorrect password", "Wrong password or invalid shared secret", "Wrong password or invalid shared secret",
    "22091", "Logon", "INFO", "Failure", "Low", "Logon violates policy", "Authentication failed. User account is disabled due to excessive failed authentication attempts at global level", "Authentication failed. User account is disabled due to excessive failed authentication attempts at global level.",
    "5400", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication failed", "User authentication failed. See FailureReason for more information",
    "5401", "Logon", "NOTICE", "Failure", "Low", "Other", "Authentication failed", "User authentication failed. See FailureReason for more information",
    "5412", "Logon", "NOTICE", "Failure", "Low", "Other", "TACACS+ authentication request ended with error", "TACACS+ authentication request ended with an error",
    "5418", "Logon", "NOTICE", "Failure", "Low", "Other", "Guest Authentication Failed", "Guest Authentication failed; please see Failure code for more details",
    "5447", "Logon", "NOTICE", "Success", "Informational", "", "MDM Authentication Passed", "MDM Authentication passed",
    "5448", "Logon", "NOTICE", "Failure", "Low", "Other", "MDM Authentication Failed", "MDM Authentication failed; please see Failure code for more details",
    "86010", "Logon", "INFO", "Failure", "Low", "No such user or password", "Guest user authentication failed", "Guest user authentication failed. Please check your password and account permission",
    "86011", "Logon", "INFO", "Failure", "Low", "User disabled", "Guest user is not enabled", "Guest user authentication failed. User is not enabled. Please contact your system administrator",
    "86014", "Logon", "INFO", "Failure", "Low", "User disabled", "User is suspended", "User authentication failed. User account is suspended",
    "86020", "Logon", "INFO", "Failure", "Low", "Other", "Guest Unknown Error", "User authentication failed. Please contact your System Administrator",
    "24015", "Logon", "DEBUG", "Success", "Informational", "", "Authenticating user against LDAP Server", "Authenticating user against LDAP Server",
    "24020", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "User authentication against the LDAP Server failed", "User authentication against the LDAP Server failed. The user entered the wrong password or the user record in the LDAP Server is disabled or expired",
    "24021", "Logon", "ERROR", "Failure", "Low", "Other", "User authentication ended with an error", "User authentication against LDAP Server ended with an error",
    "24022", "Logon", "DEBUG", "Success", "Informational", "", "User authentication succeeded", "User authentication against LDAP Server succeeded",
    "24050", "Logon", "WARN", "Failure", "Low", "Incorrect password", "Cannot authenticate with LDAP Identity Store because password was not present or was empty", "ISE did not receive user password or received empty password. Plain password authentication cannot be performed with no password or empty password",
    "24054", "Logon", "DEBUG", "Failure", "Low", "Password expired", "User authentication against LDAP server detected that user password has expired", "The password has expired but there are remaining grace authentications. The user needs to change it",
    "24055", "Logon", "DEBUG", "Failure", "Low", "Password expired", "User authentication against LDAP server detected that the user is authenticating for the first time after the password administrator set the password", "The user needs to change his password immediately",
    "24056", "Logon", "WARN", "Failure", "Low", "Password expired", "User authentication against LDAP server detected that user password has expired and there are no more grace authentications", "The user needs to contact the password administrator in order to have its password reset",
    "24057", "Logon", "WARN", "Failure", "Low", "Logon violates policy", "User authentication against LDAP server detected that the password failure limit has been reached and the account is locked", "The user needs to retry later or contact the password administrator to reset the password",
    "24337", "Logon", "DEBUG", "Success", "Informational", "", "Authentication Ticket (TGT) request succeeded", "Authentication Ticket (TGT) request succeeded",
    "24338", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication Ticket (TGT) request failed", "Authentication Ticket (TGT) request failed",
    "24402", "Logon", "INFO", "Success", "Informational", "", "User authentication against Active Directory succeeded", "User authentication against Active Directory succeeded",
    "24403", "Logon", "INFO", "Failure", "Low", "Other", "User authentication against Active Directory failed", "User authentication against Active Directory failed",
    "24406", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "User authentication against Active Directory failed since user has invalid credentials", "User authentication against Active Directory failed since user has invalid credentials",
    "24407", "Logon", "DEBUG", "Failure", "Low", "Password expired", "User authentication against Active Directory failed since user is required to change his password", "User authentication against Active Directory failed since user is required to change his password",
    "24408", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "User authentication against Active Directory failed since user has entered the wrong password", "User authentication against Active Directory failed since user has entered the wrong password",
    "24409", "Logon", "DEBUG", "Failure", "Low", "User disabled", "User authentication against Active Directory failed since the user's account is disabled", "User authentication against Active Directory failed since the user's account is disabled",
    "24410", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "User authentication against Active Directory failed since user is considered to be in restricted logon hours", "User authentication against Active Directory failed since user is considered to be in restricted logon hours",
    "24414", "Logon", "DEBUG", "Failure", "Low", "Account expired", "User authentication against Active Directory failed since the user's account has expired", "User authentication against Active Directory failed since the user's account has expired",
    "24415", "Logon", "DEBUG", "Failure", "Low", "User locked", "User authentication against Active Directory failed since user's account is locked out", "User authentication against Active Directory failed since user's account is locked out",
    "24418", "Logon", "ERROR", "Failure", "Low", "Logon violates policy", "Machine authentication against Active Directory failed since it is disabled in configuration", "Machine authentication against Active Directory failed since it is disabled in configuration",
    "24454", "Logon", "ERROR", "Failure", "Low", "Session expired", "User authentication against Active Directory failed because of a timeout error", "User authentication against Active Directory failed because of a timeout error",
    "24470", "Logon", "INFO", "Success", "Informational", "", "Machine authentication against Active Directory is successful", "Machine authentication against Active Directory is successful.",
    "24484", "Logon", "DEBUG", "Failure", "Low", "Password expired", "Machine authentication against Active Directory has failed because the machine's password has expired", "Machine authentication against Active Directory has failed because the machine's password has expired.",
    "24485", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "Machine authentication against Active Directory has failed because of wrong password", "Machine authentication against Active Directory has failed because of wrong password.",
    "24486", "Logon", "DEBUG", "Failure", "Low", "User disabled", "Machine authentication against Active Directory has failed because the machine's account is disabled", "Machine authentication against Active Directory has failed because the machine's account is disabled.",
    "24487", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "Machine authentication against Active Directory failed since machine is considered to be in restricted logon hours", "Machine authentication against Active Directory failed since machine is considered to be in restricted logon hours",
    "24489", "Logon", "DEBUG", "Failure", "Low", "Account expired", "Machine authentication against Active Directory has failed because the machine's account has expired", "Machine authentication against Active Directory has failed because the machine's account has expired.",
    "24490", "Logon", "DEBUG", "Failure", "Low", "User locked", "Machine authentication against Active Directory has failed because the machine's account is locked out", "Machine authentication against Active Directory has failed because the machine's account is locked out.",
    "24491", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "Machine authentication against Active Directory has failed because the machine has invalid credentials", "Machine authentication against Active Directory has failed because the machine has invalid credentials.",
    "24492", "Logon", "ERROR", "Failure", "Low", "No such user or password", "Machine authentication against Active Directory has failed", "Machine authentication against Active Directory has failed.",
    "24496", "Logon", "WARN", "Failure", "Low", "Logon violates policy", "Authentication rejected due to a white or black list restriction", "Authentication rejected due to a white or black list restriction",
    "24505", "Logon", "DEBUG", "Success", "Informational", "", "User authentication has succeeded", "User authentication against the RSA SecurID Server has succeeded.",
    "24508", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "User authentication failed", "User authentication against RSA SecurID Server failed",
    "24518", "Logon", "DEBUG", "Failure", "Low", "Other", "User canceled New PIN operation; User authentication against RSA SecurIDServer failed", "User canceled New PIN operation; User authentication against RSA SecurID Server failed",
    "24547", "Logon", "WARN", "Failure", "Low", "Session expired", "RSA request timeout expired. RSA authentication session cancelled", "RSA request timeout expired. RSA authentication session cancelled.",
    "24612", "Logon", "INFO", "Success", "Informational", "", "Authentication against the RADIUS token server succeeded", "Authentication against the RADIUS token server succeeded.",
    "24613", "Logon", "ERROR", "Failure", "Low", "Other", "Authentication against the RADIUS token server failed", "Authentication against the RADIUS token server failed.",
    "24614", "Logon", "INFO", "Failure", "Low", "No such user", "RADIUS token server authentication failure is translated as Unknown user failure", "RADIUS token server authentication failure is translated as Unknown user failure.",
    "24639", "Logon", "DEBUG", "Success", "Informational", "", "Authentication passed via Passcode cache", "User record was found in Passcode cache, passcode matches the passcode on the authentication request. Authentication passed via Passcode cache.",
    "24704", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "Authentication failed because identity credentials are ambiguous", "Authentication found several accounts matching to the given credentials (i.e identity name and password)",
    "24705", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication failed because ISE server is not joined to required domains", "Authentication failed because ISE server is not joined to required domains",
    "24706", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication failed because NTLM was blocked", "Authentication failed because NTLM was blocked",
    "24707", "Logon", "DEBUG", "Failure", "Low", "Other", "Authentication failed because all identity names have been rejected", "Authentication failed all identity names has been rejected according AD Identity Store Advanced Settings",
    "24708", "Logon", "DEBUG", "Failure", "Low", "No such user", "User not found in Active Directory. Some authentication domains were not available", "User not found in Active Directory. Some authentication domains were not available during identity resolution",
    "24709", "Logon", "DEBUG", "Failure", "Low", "No such user", "Host not found in Active Directory. Some authentication domains were not available", "Host not found in Active Directory. Some authentication domains were not available during identity resolution",
    "24712", "Logon", "DEBUG", "Failure", "Low", "Logon violates policy", "Authentication failed because domain trust is restricted", "Authentication failed because domain trust is restricted",
    "24814", "Logon", "INFO", "Failure", "Low", "Other", "The responding provider was unable to successfully authenticate the principal", "The responding provider was unable to successfully authenticate the principal",
    "24853", "Logon", "DEBUG", "Success", "Informational", "", "Plain text password authentication in external ODBC database succeeded", "Plain text password authentication in external ODBC database succeeded",
    "24854", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "Plain text password authentication in external ODBC database failed", "Plain text password authentication in external ODBC database failed",
    "24860", "Logon", "DEBUG", "Failure", "Low", "No such user or password", "ODBC database indicated plain text password authentication failure", "ODBC database indicated plain text password authentication failure",
    "24890", "Logon", "WARN", "Failure", "Low", "Other", "Social Login operation failed", "Social Login operation failed. Check the message details for more information",
    "24716", "Logon", "INFO", "Success", "Informational", "", "Active Directory Kerberos ticket authentication succeeded", "Active Directory Kerberos ticket authentication succeeded",
    "24717", "Logon", "ERROR", "Failure", "Low", "Other", "Active Directory Kerberos ticket authentication failed", "Active Directory Kerberos ticket authentication failed",
    "24719", "Logon", "DEBUG", "Failure", "Low", "Incorrect password", "Active Directory Kerberos ticket authentication failed because of the ISE account password mismatch, integrity check failure or expired ticket", "Active Directory Kerberos ticket authentication failed because of the ISE account password mismatch, integrity check failure or expired ticket",
    "89157", "Logon", "ERROR", "Failure", "Low", "Other", "CMCS authentication failure", "ISE is unable to authenticate with the Cisco MDM Cloud Service",
    "89159", "Logon", "ERROR", "Failure", "Low", "Other", "APNS authentication failure", "ISE is unable to authenticate with the Apple Push Notification System (APNS)",
    "89160", "Logon", "INFO", "Success", "Informational", "", "MDM User Authentication completed", "The User Authentication part of mobile device enrollment has completed",
    "33102", "Logon", "INFO", "Success", "Informational", "", "Successful user login to ISE configuration mode", "ISE administrator logged in to ISE configuration mode",
    "33103", "Logon", "INFO", "Failure", "Low", "Other", "User login to ISE configuration mode failed", "Login to ISE configuration mode failed",
    "5200", "Logon", "NOTICE", "Success", "Informational", "", "Authentication succeeded", "User authentication ended successfully",
    "5201", "Logon", "NOTICE", "Success", "Informational", "", "Authentication succeeded", "User authentication ended successfully",
    "5231", "Logon", "NOTICE", "Success", "Informational", "", "Guest Authentication Passed", "Guest Authentication Passed",
    "11002", "Logon", "DEBUG", "Success", "Informational", "", "Returned RADIUS Access-Accept", "Returned RADIUS Access-Accept - authentication succeeded",
    "11003", "Logon", "DEBUG", "Failure", "Low", "Other", "Returned RADIUS Access-Reject", "Returned RADIUS Access-Reject - authentication failed",
    "11039", "Logon", "INFO", "Failure", "Low", "Other", "RADIUS authentication request rejected due to critical logging error", "A RADIUS authentication request was rejected due to a critical logging error.",
    "11052", "Logon", "ERROR", "Failure", "Low", "Other", "Authentication request dropped due to unsupported port number", "An authentication request was dropped because it was received through an unsupported port number.",
    "11812", "Logon", "INFO", "Success", "Informational", "", "EAP-MSCHAP authentication succeeded", "EAP-MSCHAP authentication succeeded.",
    "11813", "Logon", "INFO", "Failure", "Low", "Other", "EAP-MSCHAP authentication failed", "EAP-MSCHAP authentication failed.",
    "11814", "Logon", "INFO", "Success", "Informational", "", "Inner EAP-MSCHAP authentication succeeded", "EAP-MSCHAP authentication for the inner EAP method succeeded.",
    "11815", "Logon", "INFO", "Failure", "Low", "Other", "Inner EAP-MSCHAP authentication failed", "EAP-MSCHAP authentication for the inner EAP method failed.",
    "11823", "Logon", "INFO", "Failure", "Low", "Other", "EAP-MSCHAP authentication attempt failed", "EAP-MSCHAP authentication attempt failed.",
    "11824", "Logon", "DEBUG", "Success", "Informational", "", "EAP-MSCHAP authentication attempt passed", "EAP-MSCHAP authentication attempt passed.",
    "12005", "Logon", "INFO", "Success", "Informational", "", "EAP-MD5 authentication succeeded", "EAP-MD5 authentication succeeded.",
    "12006", "Logon", "INFO", "Failure", "Low", "Other", "EAP-MD5 authentication failed", "EAP-MD5 authentication failed.",
    "12208", "Logon", "INFO", "Failure", "Low", "Other", "Client certificate was received but authentication failed", "ISE received client certificate during tunnel establishment or inside the tunnel but the authentication failed.",
    "12306", "Logon", "INFO", "Success", "Informational", "", "PEAP authentication succeeded", "PEAP authentication succeeded.",
    "12307", "Logon", "INFO", "Failure", "Low", "Other", "PEAP authentication failed", "PEAP authentication failed.",
    "12308", "Logon", "WARN", "Failure", "Low", "Other", "Client sent Result TLV indicating failure", "Internal error, possibly in the supplicant: PEAP v0 authentication failed because client sent Result TLV indicating failure. Client indicates that it does not support Crypto-Binding TLV",
    "12506", "Logon", "INFO", "Success", "Informational", "", "EAP-TLS authentication succeeded", "EAP-TLS authentication succeeded.",
    "12507", "Logon", "INFO", "Failure", "Low", "Other", "EAP-TLS authentication failed", "EAP-TLS authentication failed.",
    "12528", "Logon", "INFO", "Success", "Informational", "", "Inner EAP-TLS authentication succeeded", "EAP-TLS authentication for the inner EAP method succeeded.",
    "12529", "Logon", "INFO", "Failure", "Low", "Other", "Inner EAP-TLS authentication failed", "EAP-TLS authentication for the inner EAP method failed.",
    "12612", "Logon", "INFO", "Success", "Informational", "", "EAP-GTC authentication succeeded", "EAP-GTC authentication has succeeded.",
    "12613", "Logon", "INFO", "Failure", "Low", "Other", "EAP-GTC authentication failed", "EAP-GTC authentication has failed.",
    "12614", "Logon", "INFO", "Success", "Informational", "", "Inner EAP-GTC authentication succeeded", "EAP-GTC authentication for the inner EAP method has succeeded.",
    "12615", "Logon", "INFO", "Failure", "Low", "Other", "Inner EAP-GTC authentication failed", "EAP-GTC authentication for the inner EAP method has failed.",
    "12623", "Logon", "INFO", "Failure", "Low", "Other", "EAP-GTC authentication attempt failed", "The EAP-GTC authentication attempt has failed.",
    "12624", "Logon", "DEBUG", "Success", "Informational", "", "EAP-GTC authentication attempt passed", "The EAP-GTC authentication attempt has passed.",
    "12705", "Logon", "INFO", "Success", "Informational", "", "LEAP authentication passed; Continuing protocol", "LEAP authentication passed. Continue LEAP protocol.",
    "12706", "Logon", "INFO", "Failure", "Low", "Other", "LEAP authentication failed; Finishing protocol", "LEAP authentication has failed. Protocol finished with a failure.",
    "12707", "Logon", "INFO", "Failure", "Low", "Other", "LEAP authentication error; Finishing protocol", "A LEAP authentication error has occurred. Protocol finished with an error.",
    "12854", "Logon", "WARN", "Failure", "Low", "Incorrect password", "Cannot authenticate because password was not present or was empty", "ISE did not receive user password or received empty password. Plain password authentication cannot be performed with no password or empty password",
    "12975", "Logon", "INFO", "Success", "Informational", "", "EAP-TTLS authentication succeeded", "EAP-TTLS authentication succeeded.",
    "12976", "Logon", "INFO", "Failure", "Low", "Other", "EAP-TTLS authentication failed", "EAP-TTLS authentication failed.",
    "11700", "Logon", "INFO", "Success", "Informational", "", "5G AKA Authentication succeeded", "5G AKA Authentication succeeded."
];
let EventOriginalTypeList = toscalar(EventFieldsLookup 
    | summarize make_set(EventOriginalType));
let CiscoISEAuthParser=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    Syslog
    | where not(disabled)
    // ************************** <Prefilterring> ******************************
    | where 
        (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or (SyslogMessage has_any (username_has_any)))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SyslogMessage, srcipaddr_has_any_prefix))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
    // eventtype_in filtering done later in the parser
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    // ************************** </Prefilterring> *****************************
    | where ProcessName has_any ("CISE", "CSCO")
    | parse kind = regex SyslogMessage with @"\d{10}\s" EventOriginalType @"\s(NOTICE|INFO|WARN|WARNING|ERROR|FATAL|DEBUG)"
    | where EventOriginalType in (EventOriginalTypeList)
    | lookup EventFieldsLookup on EventOriginalType
    // Filtering on eventtype_in, eventresultdetails_in and eventresult
    | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))
        and ((array_length(eventresultdetails_in) == 0) or (EventResultDetails in~ (eventresultdetails_in)))
        and ((eventresult == "*") or (EventResult == eventresult))
    | parse-kv SyslogMessage as (FailureReason: string, NetworkDeviceName: string, Protocol: string, DestinationIPAddress: string, DestinationPort: int, ['User-Name']: string, UserName: string, User: string, ['Remote-Address']: string, ['Device IP Address']: string, ['Device Port']: int, ['cisco-av-pair=audit-session-id']: string, ['Caller-Station-ID']: string) with (pair_delimiter=',', kv_delimiter='=')
    | project-rename
        LogonProtocol=Protocol
        ,
        TargetIpAddr=DestinationIPAddress
        ,
        TargetPortNumber=DestinationPort
        ,
        TargetSessionId=["cisco-av-pair=audit-session-id"]
        ,
        SrcPortNumber=['Device Port']
    | invoke _ASIM_ResolveSrcFQDN("['Caller-Station-ID']")
    | extend
        EventStartTime = coalesce(EventTime, TimeGenerated)
        ,
        EventEndTime = coalesce(EventTime, TimeGenerated)
    | extend DvcHostname = coalesce(NetworkDeviceName, Computer, HostName)
    | extend TargetUsername = coalesce(['User-Name'], UserName, User)
    | extend
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername)
        ,
        SrcIpAddr = coalesce(['Device IP Address'], ['Remote-Address'], tostring(extract(@"Caller-Station-ID=(\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3})", 1, SyslogMessage)), "")
    | extend EventOriginalResultDetails = case(isnotempty(FailureReason), FailureReason, EventOriginalResultDetails)
    | extend DvcIpAddr = iif(isnotempty(HostIP) and HostIP != "Unknown IP", HostIP, extract(@"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", 1, Computer))
    // ********************** <Postfilterring> **********************************
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
    // ********************** </Postfilterring> *********************************
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend 
        EventVendor = "Cisco"
        ,
        EventProduct = "ISE"
        ,
        EventProductVersion = "3.2"
        ,
        EventCount = int(1)
        ,
        EventSchema = "Authentication"
        ,
        EventSchemaVersion = "0.1.3"     
    // ************************* <Aliases> **********************
    | extend 
        Dvc = coalesce(DvcIpAddr, DvcHostname)
        ,
        IpAddr = SrcIpAddr
        ,
        Dst = TargetIpAddr
        ,
        Src = SrcIpAddr
        ,
        User = TargetUsername
    // ************************* </Aliases> ******************** 
    | project-away
        TenantId,
        SourceSystem,
        MG,
        Computer,
        EventTime,
        Facility,
        HostName,
        SeverityLevel,
        SyslogMessage,
        HostIP,
        ProcessName,
        ProcessID,
        _ResourceId,
        FailureReason,
        NetworkDeviceName,
        ['User-Name'],
        UserName,
        User,
        ['Remote-Address'],
        ['Device IP Address'],
        ['Caller-Station-ID']
};
CiscoISEAuthParser(
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationCiscoMeraki
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'meraki_CL' table to the ASIM Authentication normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationCiscoMeraki(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let LogSubTypeList = dynamic(["8021x_auth", "wpa_auth", "splash_auth", "8021x_deauth", "8021x_client_deauth", "wpa_deauth", "8021x_eap_failure", "8021x_eap_success"]);
let EventResultDetailsLookup = datatable (reason: string, EventResultDetails: string)
    [
    "0", "Other",
    "1", "Other",
    "2", "Password expired",
    "3", "Other",
    "4", "Session expired",
    "5", "Other",
    "6", "Other",
    "7", "Other",
    "8", "Other",
    "9", "Other",
    "10", "Logon violates policy",
    "11", "Logon violates policy",
    "12", "Other",
    "13", "Logon violates policy",
    "14", "Other",
    "15", "Other",
    "16", "Other",
    "17", "Other",
    "18", "Incorrect key",
    "19", "Incorrect key",
    "20", "Incorrect key",
    "21", "Other",
    "22", "Other",
    "23", "Other",
    "24", "Logon violates policy",
];
let EventFieldsLookup = datatable (
    LogSubType: string,
    EventResult: string,
    EventType: string,
    EventSeverity: string
)
    [
    "8021x_auth", "Success", "Logon", "Informational",
    "wpa_auth", "Success", "Logon", "Informational",
    "splash_auth", "Success", "Logon", "Informational",
    "8021x_eap_success", "Success", "Logon", "Informational",
    "8021x_deauth", "Success", "Logoff", "Informational",
    "8021x_client_deauth", "Success", "Logoff", "Informational",
    "wpa_deauth", "Success", "Logoff", "Informational",
    "8021x_eap_failure", "Failure", "Logon", "Low",
    "disassociation", "Failure", "Logon", "Low",
];
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    (
        meraki_CL
        | project-rename LogMessage =  Message
        )
    | where not(disabled)
        and LogMessage has "events"
        and (LogMessage has_any (LogSubTypeList) or LogMessage has_all ("disassociation", "auth_neg_failed"))
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or LogMessage has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(LogMessage, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
    // eventtype_in filtering done later in the parser
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        Epoch = tostring(Parser[0]),
        Device = tostring(Parser[1]),
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | extend EpochTimestamp = split(Epoch, ".")
    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
    | extend EventEndTime = EventStartTime
    | where LogType == "events"
    | parse Substring with * "type=" LogSubType: string " " restOfMessage: string
    | where LogSubType in (LogSubTypeList) or (LogSubType == "disassociation" and Substring has "auth_neg_failed")
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | parse-kv Substring as(last_known_client_ip: string, ip: string, client_ip: string, client_mac: string, identity: string, reason: string, aid: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend TargetUsername = identity
    | extend TargetUsername = trim('"', TargetUsername)
    // post-filtering username_has_any
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        Dvc = DvcHostname, 
        aid = trim('"', aid)
    | extend
        SrcIpAddr = tostring(split(coalesce(last_known_client_ip, ip, client_ip), " ")[0]),
        DvcMacAddr = client_mac,
        AdditionalFields = bag_pack("aid", aid),
        EventOriginalType = LogType,
        EventOriginalSubType = LogSubType,
        TargetUsernameType = iff(isnotempty(TargetUsername), "Simple", ""),
        EventUid = _ResourceId
    | extend
        SrcIpAddr = trim('"', SrcIpAddr),
        DvcMacAddr = trim('"', DvcMacAddr),
        reason = trim('"', reason)
    // post-filtering srcipaddr_has_any_prefix
    | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
    | extend
        DvcIpAddr = SrcIpAddr,
        IpAddr = SrcIpAddr,
        User = TargetUsername
    | lookup EventFieldsLookup on LogSubType
    | lookup EventResultDetailsLookup on reason
    | extend EventResultDetails = iff(tolong(reason) between (25 .. 65535), "Other", EventResultDetails)
    // Filtering on eventtype_in, eventresultdetails_in and eventresult
    | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
        and (eventresult == "*" or (EventResult == eventresult))
    | extend
        EventCount=int(1),
        EventProduct="Meraki",
        EventVendor="Cisco",
        EventSchema="Authentication",
        EventSchemaVersion="0.1.3"
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Substring,
        LogType,
        LogSubType,
        restOfMessage,
        reason,
        last_known_client_ip,
        client_ip,
        ip,
        client_mac,
        identity,
        aid,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG
};
parser(
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationCiscoMerakiSyslog
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'Syslog' table to the ASIM Authentication normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationCiscoMerakiSyslog(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let LogSubTypeList = dynamic(["8021x_auth", "wpa_auth", "splash_auth", "8021x_deauth", "8021x_client_deauth", "wpa_deauth", "8021x_eap_failure", "8021x_eap_success"]);
let EventResultDetailsLookup = datatable (reason: string, EventResultDetails: string)
    [
    "0", "Other",
    "1", "Other",
    "2", "Password expired",
    "3", "Other",
    "4", "Session expired",
    "5", "Other",
    "6", "Other",
    "7", "Other",
    "8", "Other",
    "9", "Other",
    "10", "Logon violates policy",
    "11", "Logon violates policy",
    "12", "Other",
    "13", "Logon violates policy",
    "14", "Other",
    "15", "Other",
    "16", "Other",
    "17", "Other",
    "18", "Incorrect key",
    "19", "Incorrect key",
    "20", "Incorrect key",
    "21", "Other",
    "22", "Other",
    "23", "Other",
    "24", "Logon violates policy",
];
let EventFieldsLookup = datatable (
    LogSubType: string,
    EventResult: string,
    EventType: string,
    EventSeverity: string
)
    [
    "8021x_auth", "Success", "Logon", "Informational",
    "wpa_auth", "Success", "Logon", "Informational",
    "splash_auth", "Success", "Logon", "Informational",
    "8021x_eap_success", "Success", "Logon", "Informational",
    "8021x_deauth", "Success", "Logoff", "Informational",
    "8021x_client_deauth", "Success", "Logoff", "Informational",
    "wpa_deauth", "Success", "Logoff", "Informational",
    "8021x_eap_failure", "Failure", "Logon", "Low",
    "disassociation", "Failure", "Logon", "Low",
];
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    (
        Syslog
        | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))
        | project-rename LogMessage =  SyslogMessage
        )
    | where not(disabled)
        and LogMessage has "events"
        and (LogMessage has_any (LogSubTypeList) or LogMessage has_all ("disassociation", "auth_neg_failed"))
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or LogMessage has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(LogMessage, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
    // eventtype_in filtering done later in the parser
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        Epoch = tostring(Parser[0]),
        Device = tostring(Parser[1]),
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | extend EpochTimestamp = split(Epoch, ".")
    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
    | extend EventEndTime = EventStartTime
    | where LogType == "events"
    | parse Substring with * "type=" LogSubType: string " " restOfMessage: string
    | where LogSubType in (LogSubTypeList) or (LogSubType == "disassociation" and Substring has "auth_neg_failed")
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | parse-kv Substring as(last_known_client_ip: string, ip: string, client_ip: string, client_mac: string, identity: string, reason: string, aid: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend TargetUsername = identity
    | extend TargetUsername = trim('"', TargetUsername)
    // post-filtering username_has_any
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)))
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        Dvc = DvcHostname, 
        aid = trim('"', aid)
    | extend
        SrcIpAddr = tostring(split(coalesce(last_known_client_ip, ip, client_ip), " ")[0]),
        DvcMacAddr = client_mac,
        AdditionalFields = bag_pack("aid", aid),
        EventOriginalType = LogType,
        EventOriginalSubType = LogSubType,
        TargetUsernameType = iff(isnotempty(TargetUsername), "Simple", ""),
        EventUid = _ResourceId
    | extend
        SrcIpAddr = trim('"', SrcIpAddr),
        DvcMacAddr = trim('"', DvcMacAddr),
        reason = trim('"', reason)
    // post-filtering srcipaddr_has_any_prefix
    | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
    | extend
        DvcIpAddr = SrcIpAddr,
        IpAddr = SrcIpAddr,
        User = TargetUsername
    | lookup EventFieldsLookup on LogSubType
    | lookup EventResultDetailsLookup on reason
    | extend EventResultDetails = iff(tolong(reason) between (25 .. 65535), "Other", EventResultDetails)
    // Filtering on eventtype_in, eventresultdetails_in and eventresult
    | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
        and (eventresult == "*" or (EventResult == eventresult))
    | extend
        EventCount=int(1),
        EventProduct="Meraki",
        EventVendor="Cisco",
        EventSchema="Authentication",
        EventSchemaVersion="0.1.3"
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Substring,
        LogType,
        LogSubType,
        restOfMessage,
        reason,
        last_known_client_ip,
        client_ip,
        ip,
        client_mac,
        identity,
        aid,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG,
        EventTime,
        Facility,
        HostName,
        SeverityLevel,
        ProcessID,
        HostIP,
        ProcessName,ASimMatchingUsername,CollectorHostName,temp_isMatchTargetUsername
};
parser(
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationCrowdStrikeFalconHost
// Description: This ASIM parser supports normalizing CrowdStrike Falcon Endpoint Protection logs to the ASIM Authentication normalized schema. These events are captured through CrowdStrike Falcon Endpoint Protection data connector which allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationCrowdStrikeFalconHost(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
  [
  "0", "Informational",
  "1", "Informational",
  "2", "Low",
  "3", "Medium",
  "4", "High",
  "5", "High"
];
let parser = ( 
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    CommonSecurityLog
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and (DeviceVendor == "CrowdStrike" and DeviceProduct == "FalconHost")
        and (DeviceEventCategory == "AuthActivityAuditEvent" and DeviceEventClassID in ("userAuthenticate", "twoFactorAuthenticate"))
        and ((array_length(username_has_any) == 0) or DestinationUserName has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0 or ProcessName has_any (targetappname_has_any))
        and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        // eventtype_in filtering done later in the parser
        and array_length(eventresultdetails_in) == 0 // EventResultDetails not available in source
    // eventresult filtering done later in the parser
    | extend
        EventResult = iff(EventOutcome == "true", "Success", "Failure"),
        EventType = "Logon"
    | where (eventresult == '*' or eventresult =~ EventResult)
        and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
    | lookup EventSeverityLookup on LogSeverity
    | extend
        EventStartTime = todatetime(DeviceCustomDate1),
        EventCount = int(1),
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventProduct = "FalconHost",
        EventVendor = "CrowdStrike"
    | project-rename 
        TargetIpAddr = DestinationTranslatedAddress,
        EventUid = _ItemId,
        EventOriginalSeverity = LogSeverity,
        EventOriginalSubType = DeviceEventClassID,
        EventOriginalType = DeviceEventCategory,
        EventProductVersion = DeviceVersion,
        EventOriginalResultDetails = EventOutcome,
        TargetUsername = DestinationUserName,
        TargetAppName = ProcessName
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        EventEndTime = EventStartTime,
        DvcIpAddr = TargetIpAddr,
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
        TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
        TargetAppType = iff(isnotempty(TargetAppName), "Service", ""),
        LogonMethod = iff(EventOriginalSubType =~ "userAuthenticate", "Username and Password", "Two Factor Authentication")
    | extend
        User = TargetUsername,
        Dst = TargetIpAddr,
        Dvc = coalesce(DvcIpAddr, EventProduct),
        Application = TargetAppName
    | project-away 
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        Computer,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        Activity,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        IndicatorThreatType,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        _ResourceId,
        ExtID,
        Message,
        temp_*
};
parser(
    starttime=datetime(null),
    endtime=datetime(null),
    username_has_any=dynamic([]),
    targetappname_has_any=dynamic([]),
    srcipaddr_has_any_prefix=dynamic([]),
    srchostname_has_any=dynamic([]),
    eventtype_in=dynamic([]),
    eventresultdetails_in=dynamic([]),
    eventresult=dynamic([]),
    disabled=false
)
}



//
// Function Name: vimAuthenticationEmpty
// Description: This function returns an empty ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationEmpty
{
let EmptyAuthenticationTable=datatable(
    EventProduct:string
  , EventProductVersion: string
  , EventVendor:string
  , EventCount:int
  , EventReportUrl:string
  , EventSchemaVersion:string
  , EventSchema:string
  , TimeGenerated:datetime
  , EventOriginalUid:string
  , EventOriginalType:string
  , EventOriginalSubType:string
  , EventMessage:string
  , EventResult:string
  , EventResultDetails:string
  , EventOriginalResultDetails:string
  , EventStartTime:datetime
  , EventEndTime:datetime
  , EventType:string
  , EventSubType:string
  , EventUid:string
  , EventSeverity:string
  , EventOriginalSeverity:string
  , EventOwner:string
  , ActorSessionId:string
  , TargetSessionId:string
  , ActorUserId:string
  , ActorUsername:string
  , ActorUserType:string
  , ActorUserIdType:string
  , ActorUsernameType:string
  , ActorScopeId:string
  , ActorOriginalUserType:string
  , TargetUserId:string
  , TargetUsername:string
  , TargetUserType:string
  , SrcDvcId:string
  , SrcDvcIdType:string
  , SrcDeviceType:string
  , SrcDvcOs:string
  , HttpUserAgent:string
  , SrcIsp:string
  , SrcGeoCity:string
  , SrcGeoCountry:string
  , SrcGeoRegion:string
  , SrcGeoLatitude:real
  , SrcGeoLongitude:real
  , SrcIpAddr:string
  , SrcPortNumber:string
  , SrcHostname:string
  , SrcDomain:string
  , SrcDomainType:string
  , SrcFQDN:string
  , SrcDescription:string
  , SrcDvcScopeId:string
  , SrcRiskLevel:int
  , SrcOriginalRiskLevel:string
  , ActingAppId:string
  , ActingAppName:string
  , ActingAppType:string
  , ActingOriginalAppType:string
  , TargetAppId:string
  , TargetAppName:string
  , TargetAppType:string
  , TargetOriginalAppType:string
  , TargetDvcId:string
  , TargetDvcIdType:string
  , TargetHostname:string
  , TargetDomain:string
  , TargetDomainType:string
  , TargetFQDN:string
  , TargetDescription:string
  , TargetDeviceType:string
  , TargetIpAddr:string
  , TargetDvcOs:string
  , TargetUrl:string
  , TargetPortNumber:int
  , TargetDvcScope:string
  , TargetDvcScopeId:string
  , TargetGeoCity:string
  , TargetGeoCountry:string
  , TargetGeoRegion:string
  , TargetGeoLatitude:real
  , TargetGeoLongitude:real
  , LogonMethod: string	
  , LogonProtocol: string	
  , TargetUserIdType: string	
  , TargetUsernameType: string	
  , UserScope:string
  , UserScopeId:string
  , TargetOriginalUserType:string
  , TargetUserSessionId:string
  , User: string	
  , IpAddr: string
  , SrcDvcHostnameType: string	
  , LogonTarget: string
  , Dvc: string	
  , DvcId: string
  , DvcIpAddr: string	
  , DvcHostname: string
  , DvcDomain:string
  , DvcDomainType:string
  , DvcFQDN:string
  , DvcDescription:string
  , DvcIdType:string
  , DvcMacAddr:string
  , DvcZone:string
  , DvcOs:string
  , DvcOsVersion:string
  , DvcAction:string
  , DvcOriginalAction:string
  , DvcScope:string
  , DvcScopeOd:string
  , AdditionalFields:dynamic
  , Type:string
  , Src:string
  , Dst:string
  , Rule:string
  , RuleName:string
  , RuleNumber:int
  , ThreatId:string
  , ThreatName:string
  , ThreatCategory:string
  , ThreatOriginalRiskLevel:string
  , ThreatOriginalConfidence:string
  , ThreatIsActive:bool
  , ThreatField:string
  , ThreatConfidence:int
  , ThreatRiskLevel:string
  , ThreatFirstReportedTime:datetime
  , ThreatLastReportedTime:datetime
  , Application:string
  )[];
EmptyAuthenticationTable
}



//
// Function Name: vimAuthenticationGoogleWorkspace
// Description: This ASIM parser supports normalizing the Google Workspace sign-in logs(type=login) ingested in 'GWorkspace_ReportsAPI_login_CL' table to the ASIM Authentication normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationGoogleWorkspace(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false
  )
{
    let GoogleWorkspaceSchema = datatable
(
    event_name_s: string,
    event_type_s: string,
    id_uniqueQualifier_s: string,
    actor_email_s: string,
    actor_profileId_s: string,
    IPAddress: string,
    login_challenge_method_s: string,
    id_applicationName_s: string,
    affected_email_address_s: string,
    is_suspicious_b: bool,
    is_second_factor_b: bool,
    login_type_s: string,
    sensitive_action_name_s: string,
    login_challenge_status_s: string,
    TimeGenerated: datetime,
    _ItemId: string,
    _ResourceId: string,
    Computer: string,
    MG: string,
    ManagementGroupName: string,
    RawData: string,
    SourceSystem: string,
    TenantId: string
)[];
    let EventFieldsLookup = datatable
(
    EventOriginalSubType: string,
    EventType: string,
    EventResult: string,
    DvcAction: string
)
[
    "login_success", "Logon", "Success", "Allowed",
    "login_failure", "Logon", "Failure", "Blocked",
    "login_challenge", "Logon", "", "",
    "login_verification", "Logon", "", "",
    "risky_sensitive_action_blocked", "Logon", "Failure", "Blocked",
    "riskay_sensitive_action_allowed", "Logon", "Success", "Allowed",
    "logout", "Logoff", "Success", "Allowed",
    "suspicious_login", "Logon", "Failure", "Blocked",
    "suspicious_login_less_secure_app", "Logon", "Failure", "Blocked",
    "suspicious_programmatic_login", "Logon", "Failure", "Blocked",
    "user_signed_out_due_to_suspicious_session_cookie", "Logoff", "Success", "Allowed"
];
    let ThreatEventTypes = dynamic(['suspicious_login', 'suspicious_login_less_secure_app', 'suspicious_programmatic_login', 'user_signed_out_due_to_suspicious_session_cookie']);
    let SupportedEventNames = EventFieldsLookup
        | project EventOriginalSubType;
    union isfuzzy=true  GoogleWorkspaceSchema, GWorkspace_ReportsAPI_login_CL
    | where not(disabled)
    //  -- Pre filtering
    | where 
        (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or actor_email_s has_any (username_has_any))
        and ((array_length(targetappname_has_any) == 0) or 'Google Workspace - login' in~ (targetappname_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(IPAddress, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and ((array_length(eventtype_in) == 0) or ("Logon" in~ (eventtype_in)) or ("Logoff" in~ (eventtype_in)))
        // eventresultdetails_in filtering done later in the parser
        // eventresult filtering done later in the parser
        and event_name_s in (SupportedEventNames)
    | lookup EventFieldsLookup on $left.event_name_s == $right.EventOriginalSubType
    // Filtering on 'eventresult' and eventtype_in
    | where (eventresult == "*" or (EventResult == eventresult))
        and ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))
    | project-rename
        TargetUsername = actor_email_s,
        TargetUserId = actor_profileId_s,
        SrcIpAddr = IPAddress,
        LogonMethod = login_challenge_method_s,
        EventOriginalType = event_type_s,
        EventOriginalUid = id_uniqueQualifier_s
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        TargetUsername = iif(event_name_s in (ThreatEventTypes), affected_email_address_s, TargetUsername),
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
        TargetUserIdType = iif(isnotempty(TargetUserId), "GWorkspaceProfileID", ""),
        EventSeverity = iif(event_name_s in (ThreatEventTypes), "High", "Informational")
    | extend 
        AdditionalFields = bag_pack
                  (
                      "Is_Suspicious",
                      is_suspicious_b,
                      "Is_Second_Factor_b",
                      is_second_factor_b,
                      "Logon_Type",
                      login_type_s,
                      "Sensitive_Action_Name",
                      sensitive_action_name_s
                  ),
        EventResult = case
              (
                  event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == "passed",
                  "Success",
                  event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == "incorrect_answer_entered",
                  "Failure",
                  EventResult
              ),
        EventResultDetails = iif(event_name_s in ('login_challenge', 'login_verification') and login_challenge_status_s == "incorrect_answer_entered", "MFA not satisfied", ""),
        RuleName = case
          (
              event_name_s == 'suspicious_login',
              "Google has detected a suspicious login for TargetUSerName",
              event_name_s == 'suspicious_login_less_secure_app',
              "Google has detected a suspicious login for TargetUSerName from a less secure app",
              event_name_s == 'suspicious_programmatic_login',
              "Google has detected a suspicious programmatic login for TargetUserName",
              event_name_s == 'user_signed_out_due_to_suspicious_session_cookie',
              "Suspicious session cookie detected for user TargetUserName",
              ""
          ),
        ThreatField = iif(event_name_s in (ThreatEventTypes), "TargetUserName", ""),
        ThreatFirstReportedTime = iif(event_name_s in (ThreatEventTypes), TimeGenerated, datetime(null)),
        ThreatLastReportedTime = iif(event_name_s in (ThreatEventTypes), TimeGenerated, datetime(null))
    // filtering on 'eventresultdetails_in'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
    | extend
        EventOriginalSubType = event_name_s,
        TargetAppName = "Google Workspace - login",
        Dst = "Google Workspace",
        Application = "Google Workspace",
        TargetAppType = "SaaS application",
        IpAddr = SrcIpAddr,
        User = TargetUsername,
        EventCount = int(1),
        EventStartTime = TimeGenerated,
        EventEndTime = TimeGenerated,
        EventProduct = "Workspace",
        EventVendor = "Google",
        Dvc="Workspace",
        EventSchema = 'Authentication',
        EventSchemaVersion = '0.1.3',
        EventUid = _ItemId
    | project-away 
        *_s,
        *_b,
        _ResourceId,
        Computer,
        MG,
        ManagementGroupName,
        RawData,
        SourceSystem,
        TenantId,
        temp*
};
parser
(
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationM365Defender
// Description: This ASIM parser supports filtering and normalizing endpoint authentication events, collected by Microsoft 365 Defender for Endpoint, stored in the  DeviceLogonEvents table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationM365Defender(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let EventResultDetailsLookup=datatable
(
    EventOriginalResultDetails: string,
    EventResultDetails: string
)
[
    'InvalidUserNameOrPassword', 'No such user or password'
];
let EventSubTypeLookup = datatable (EventOriginalType: string, EventSubType: string)
[ 
    'Interactive', 'Interactive',
    'Remote interactive (RDP) logons', 'RemoteInteractive',
    'Network', 'Remote',
    'Batch', 'Service',
    'Service', 'Service',
    'Unknown', '',
    'RemoteInteractive', 'RemoteInteractive',
    'CachedInteractive', 'Interactive'
];
let EventResultLookup = datatable (ActionType: string, EventResult: string)
[ 
    'LogonSuccess', 'Success',
    'LogonFailed', 'Failure',
    'LogonAttempted', 'NA'
];
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    )
{
    let UnixDeviceLogonEvents = (disabled: bool=false)
{
    DeviceLogonEvents  
        | where not(disabled)
        // -- prefilter
        | where
            (isnull(starttime) or TimeGenerated >= starttime) 
            and (isnull(endtime) or TimeGenerated <= endtime) 
            and ((array_length(username_has_any) == 0) or (InitiatingProcessAccountName has_any (username_has_any)) or AccountName has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RemoteIP, srcipaddr_has_any_prefix))
            and ((array_length(srchostname_has_any) == 0) or (RemoteDeviceName has_any (srchostname_has_any)))
            and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
        // eventresultdetails_in filtering done later in the parser
        // eventresult filtering done later in the parser
        // -- end prefilter
        | where InitiatingProcessFolderPath startswith "/"
        | extend 
            TargetDvcOs        = "Linux"
            ,
            ActorUsernameType  = "Simple"
            ,
            TargetUsernameType = "Simple"
        | project-rename 
            ActorUsername      = InitiatingProcessAccountName
            ,
            ActingProcessName  = InitiatingProcessFolderPath
            ,
            TargetUsername     = AccountName
        | project-away 
            InitiatingProcessAccountSid,
            AccountDomain,
            InitiatingProcessAccountDomain,
            InitiatingProcessFileName,
            AccountSid
};
    let WindowsDeviceLogonEvents = (disabled: bool=false)
{
    DeviceLogonEvents  
        | where not(disabled)
        // -- prefilter
        | where
            (isnull(starttime) or TimeGenerated >= starttime) 
            and (isnull(endtime) or TimeGenerated <= endtime) 
            and ((array_length(username_has_any) == 0) or (AccountName has_any (username_has_any)) or (AccountDomain has_any (username_has_any)) or (strcat(AccountDomain, '\\', AccountName) has_any (username_has_any)) or (InitiatingProcessAccountName has_any (username_has_any)) or (InitiatingProcessAccountDomain has_any (username_has_any)) or (strcat(InitiatingProcessAccountDomain, '\\', InitiatingProcessAccountName) has_any (username_has_any)))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RemoteIP, srcipaddr_has_any_prefix))
            and ((array_length(srchostname_has_any) == 0) or (RemoteDeviceName has_any (srchostname_has_any)))
            and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
        // eventresultdetails_in filtering done later in the parser
        // eventresult filtering done later in the parser
        // -- end prefilter
        | where InitiatingProcessFolderPath !startswith "/"
        | extend 
            TargetDvcOs = "Windows"
            ,
            TargetUserIdType            = 'SID'
            ,
            ActorUserIdType             = 'SID'
            ,
            ActorUsername               = case
                              (
                                  isempty(InitiatingProcessAccountName),
                                  "",
                                  isempty(InitiatingProcessAccountDomain),
                                  InitiatingProcessAccountName,
                                  strcat(InitiatingProcessAccountDomain, '\\', InitiatingProcessAccountName)
                              )
            ,
            TargetUsername              = iff
                              (
                                  isempty(AccountDomain),
                                  AccountName,
                                  strcat(AccountDomain, '\\', AccountName)
                              )           
            ,
            TargetUsernameType          = iff (AccountDomain == '', 'Simple', 'Windows')
            ,
            ActorUsernameType           = iff (InitiatingProcessAccountDomain == '', 'Simple', 'Windows')
            ,
            ActingProcessName           = strcat (InitiatingProcessFolderPath, '\\', InitiatingProcessFileName)
        | project-rename 
            ActorUserId        = InitiatingProcessAccountSid
            ,
            TargetUserId       = AccountSid
        // -- Specific identifiers aliases
        | extend 
            TargetUserSid         = TargetUserId
            ,
            ActorUserSid          = ActorUserId
            ,
            TargetWindowsUsername = TargetUsername
            ,
            ActorWindowsUsername  = ActorUsername
            ,
            ActorUserType         = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
        | extend 
            TargetUserType = iff
                (
                    IsLocalAdmin, 
                    'Admin',
                    _ASIM_GetWindowsUserType (TargetWindowsUsername, TargetUserSid)
                )
        | project-away
            InitiatingProcessAccountName,
            InitiatingProcessAccountDomain,
            AccountDomain,
            AccountName,
            InitiatingProcessFolderPath,
            InitiatingProcessFileName
};
    union 
        WindowsDeviceLogonEvents (disabled=disabled),
        UnixDeviceLogonEvents (disabled=disabled)
    | project-away SourceSystem, TenantId, Timestamp, MachineGroup
    // mapping ASimMatchingUsername
    | extend
        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        ,
        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    | project-rename 
        EventOriginalResultDetails  = FailureReason 
        ,
        EventOriginalType           = LogonType
        ,
        EventUid                    = _ItemId
        ,
        LogonProtocol               = Protocol
        ,
        TargetDvcId                 = DeviceId
        ,
        SrcHostname                 = RemoteDeviceName
        ,
        ActingProcessCommandLine    = InitiatingProcessCommandLine
        ,
        ActingProcessCreationTime   = InitiatingProcessCreationTime
        ,
        ActingProcessMD5            = InitiatingProcessMD5
        ,
        ActingProcessSHA1           = InitiatingProcessSHA1 
        ,
        ActingProcessSHA256         = InitiatingProcessSHA256
        ,
        ActingProcessIntegrityLevel = InitiatingProcessIntegrityLevel
        ,
        ActingProcessTokenElevation = InitiatingProcessTokenElevation
        ,
        ParentProcessName           = InitiatingProcessParentFileName
        ,
        ParentProcessCreationTime   = InitiatingProcessParentCreationTime
        //??, ActingProcessName           = InitiatingProcessFolderPath 
        ,
        ActorUserUpn                = InitiatingProcessAccountUpn
        ,
        ActorUserAadId              = InitiatingProcessAccountObjectId
        ,
        SrcPortNumber               = RemotePort
    | extend 
        EventCount                  = int(1)
        ,
        EventStartTime              = TimeGenerated
        ,
        EventEndTime                = TimeGenerated
        ,
        EventSchemaVersion          = '0.1.3'
        ,
        EventType                   = 'Logon'
        ,
        EventVendor                 = 'Microsoft'
        ,
        EventProduct                = 'M365 Defender for EndPoint'
        ,
        EventSchema                 = 'Authentication'
        ,
        TargetDvcIdType             = 'MDEid'
        ,
        ActingProcessId             = tostring (InitiatingProcessId)
        ,
        ParentProcessId             = tostring (InitiatingProcessParentId)
        ,
        EventOriginalUid            = tostring (ReportId)
        ,
        TargetSessionId             = tostring (LogonId)
        ,
        SrcIpAddr                   = iff (RemoteIP == '-', '', RemoteIP)
    | extend
        Hash = coalesce
      (
          ActingProcessSHA256
        ,
          ActingProcessSHA1
        ,
          ActingProcessMD5
      )
    | extend
        HashType = tostring(dynamic(["SHA256", "SHA1", "MD5"])[array_index_of(pack_array(ActingProcessSHA256, ActingProcessSHA1, ActingProcessMD5), Hash)])     
    | invoke _ASIM_ResolveFQDN('DeviceName')
    | project-rename 
        TargetFQDN         = FQDN
        ,
        TargetHostname     = ExtractedHostname
        ,
        TargetDomainType   = DomainType
        ,
        TargetDomain       = Domain  
    | project-away DeviceName
    | lookup EventResultDetailsLookup on EventOriginalResultDetails
    // filtering on 'eventresultdetails_in', 'TargetUsername' and 'ActorUsername'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
        and ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
    | lookup EventSubTypeLookup on EventOriginalType
    | lookup EventResultLookup on ActionType
    // Filtering on 'eventresult'
    | where (eventresult == "*" or (EventResult == eventresult))
    | extend
        EventSeverity = iff (EventResult == "Success", "Informational", "Low")
    // -- Specific identifiers aliases
    | extend
        TargetDvcMDEid        = TargetDvcId
        ,
        DvcMDEid              = TargetDvcId
    // --  Aliases
    | extend 
        User          = TargetUsername 
        ,
        Prcess        = ActingProcessName
        ,
        IpAddr        = SrcIpAddr
        ,
        ActingAppName = ActingProcessName
        ,
        ActingAppType = "Process"
        ,
        Dvc           = coalesce (TargetFQDN, TargetHostname)
        ,
        Src           = coalesce (SrcIpAddr, SrcHostname)
        // -- Alias Dvc to Target
        ,
        DvcFQDN       = TargetFQDN
        ,
        DvcHostname   = TargetHostname
        ,
        DvcDomain     = TargetDomain
        ,
        DvcDomainType = TargetDomainType
        ,
        DvcId         = TargetDvcId
        ,
        DvcIdType     = TargetDvcIdType
        ,
        DvcOs         = TargetDvcOs
    | extend 
        LogonTarget   = Dvc
        ,
        Dst = Dvc
    | project-away
        ReportId,
        LogonId,
        InitiatingProcessId,
        InitiatingProcessParentId,
        ActionType,
        InitiatingProcessFileSize,
        InitiatingProcessVersionInfoCompanyName,
        InitiatingProcessVersionInfoFileDescription,
        InitiatingProcessVersionInfoInternalFileName,
        InitiatingProcessVersionInfoOriginalFileName,
        InitiatingProcessVersionInfoProductName,
        InitiatingProcessVersionInfoProductVersion,
        AppGuardContainerId,
        RemoteIPType,
        IsLocalAdmin,
        RemoteIP,
        temp*
};
parser (
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationMD4IoT
// Description: This ASIM parser supports filtering and normalizing Microsoft Defender for IoT endpoint logs to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationMD4IoT(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let Authentication_MD4IoT=(
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false
  ) {
  SecurityIoTRawEvent
  | where not(disabled)
  | where RawEventName == "Login"
  // ************************************************************************* 
  //       <Prefilterring>
  // *************************************************************************
  | where 
      (isnull(starttime) or TimeGenerated >= starttime) 
      and (isnull(endtime) or TimeGenerated <= endtime)
      and ((array_length(username_has_any) == 0) or EventDetails has_any (username_has_any))
      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
      and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(EventDetails, srcipaddr_has_any_prefix)))
      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
      // Filtering for eventtype_in done later in the parser
      and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
  // Filtering for eventresult done later in the parser
  // ************************************************************************* 
  //       </Prefilterring>
  // ************************************************************************* 
  | extend
      EventDetails = todynamic(EventDetails)
  //
  | extend
      EventOriginalUid = tostring(EventDetails.OriginalEventId), 
      EventProduct = 'Microsoft Defender for IoT',
      EventCount=int(1),
      EventVendor = 'Microsoft', 
      EventSchemaVersion = '0.1.0', 
      EventStartTime = todatetime(EventDetails.TimestampUTC), 
      EventEndTime = todatetime(TimeGenerated), 
      EventType = iff (EventDetails.Operation == 'Logout', 'Logoff', 'Logon'),  
      EventResult = iff (EventDetails.Operation == 'LoginFailed', 'Failure', 'Success')  
  // Filtering on 'eventtype_in' and 'eventresult'
  | where ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
      and (eventresult == "*" or (EventResult == eventresult))
  | extend
      ActingProcessId = tostring(EventDetails.ProcessId),  
      ActingProcessName = tostring(EventDetails.Executable),  // -- Linux input device or service used to authenticate, for example pts/1, tty1, pts/0, ssh:notty 
      DvcOs = iif (EventDetails.MessageSource == "Linux", "Linux", "Windows"),  // -- Intermediate fix
      TargetUsernameType = "Simple",
      TargetUsername = tostring(EventDetails.UserName)
  | extend SrcIpAddr = tostring(EventDetails.RemoteAddress)
  // Post-filtering on username_has_any and srcipaddr_has_any_prefix
  | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
      and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
  // mapping ASimMatchingUsername
  | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
  // ActorUsername not coming from source. Hence, not mapped.
  | extend ASimMatchingUsername = case
      (
                                  array_length(username_has_any) == 0,
                                  "-",
                                  temp_isMatchTargetUsername,
                                  "TargetUsername",
                                  "No match"
                              )
  | project-rename
      DvcHostname = DeviceId, 
      EventProductVersion = AgentVersion,  // -- Not available in Windows
      _ResourceId = AssociatedResourceId, 
      _SubscriptionId = AzureSubscriptionId 
  //
  // -- aliases
  | extend 
      User = TargetUsername, 
      Process = ActingProcessName, 
      Dvc = DvcHostname,
      SrcDvcIpAddr = SrcIpAddr,
      IpAddr = SrcIpAddr
};
  Authentication_MD4IoT(
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationMicrosoftWindowsEvent
// Description: This ASIM parser supports filtering and normalizing Windows Authentication events (4624, 4625, 4634, and 4647), collected either by the Log Analytics Agent or the Azure Monitor Agent, into either the WindowsEvent (WEF) or SecurityEvent tables, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationMicrosoftWindowsEvent(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let LogonEvents=dynamic([4624, 4625]);
let LogoffEvents=dynamic([4634, 4647]);
let LogonTypes=datatable(LogonType: int, EventSubType: string)
[
    2, 'Interactive',
    3, 'Network',
    4, 'Batch',
    5, 'Service',
    7, 'Unlock',
    8, 'NetworkCleartext',
    9, 'NewCredentials',
    10, 'RemoteInteractive',
    11, 'CachedInteractive'
];
// https://techcommunity.microsoft.com/t5/core-infrastructure-and-security/quick-reference-troubleshooting-netlogon-error-codes/ba-p/256000
let LogonStatus=datatable 
(
    EventStatus: string,
    EventOriginalResultDetails: string,
    EventResultDetails: string
)
[
    '0x80090325', 'SEC_E_UNTRUSTED_ROOT', 'Other',
    '0xc0000064', 'STATUS_NO_SUCH_USER', 'No such user or password',
    '0xc000006f', 'STATUS_INVALID_LOGON_HOURS', 'Logon violates policy',
    '0xc0000070', 'STATUS_INVALID_WORKSTATION', 'Logon violates policy',
    '0xc0000071', 'STATUS_PASSWORD_EXPIRED', 'Password expired',
    '0xc0000072', 'STATUS_ACCOUNT_DISABLED', 'User disabled',
    '0xc0000133', 'STATUS_TIME_DIFFERENCE_AT_DC', 'Other',
    '0xc000018d', 'STATUS_TRUSTED_RELATIONSHIP_FAILURE', 'Other',
    '0xc0000193', 'STATUS_ACCOUNT_EXPIRED', 'Account expired',
    '0xc0000380', 'STATUS_SMARTCARD_WRONG_PIN', 'Other',
    '0xc0000381', 'STATUS_SMARTCARD_CARD_BLOCKED', 'Other',
    '0xc0000382', 'STATUS_SMARTCARD_CARD_NOT_AUTHENTICATED', 'Other',
    '0xc0000383', 'STATUS_SMARTCARD_NO_CARD', 'Other',
    '0xc0000384', 'STATUS_SMARTCARD_NO_KEY_CONTAINER', 'Other',
    '0xc0000385', 'STATUS_SMARTCARD_NO_CERTIFICATE', 'Other',
    '0xc0000386', 'STATUS_SMARTCARD_NO_KEYSET', 'Other',
    '0xc0000387', 'STATUS_SMARTCARD_IO_ERROR', 'Other',
    '0xc0000388', 'STATUS_DOWNGRADE_DETECTED', 'Other',
    '0xc0000389', 'STATUS_SMARTCARD_CERT_REVOKED', 'Other',
    '0x80090302', 'SEC_E_UNSUPPORTED_FUNCTION', 'Other',
    '0x80090308', 'SEC_E_INVALID_TOKEN', 'Other',
    '0x8009030e', 'SEC_E_NO_CREDENTIALS', 'Other',
    '0xc0000008', 'STATUS_INVALID_HANDLE', 'Other',
    '0xc0000017', 'STATUS_NO_MEMORY', 'Other',
    '0xc0000022', 'STATUS_ACCESS_DENIED', 'Other',
    '0xc0000034', 'STATUS_OBJECT_NAME_NOT_FOUND', 'Other',
    '0xc000005e', 'STATUS_NO_LOGON_SERVERS', 'Other',
    '0xc000006a', 'STATUS_WRONG_PASSWORD', 'Incorrect password',
    '0xc000006d', 'STATUS_LOGON_FAILURE', 'Other',
    '0xc000006e', 'STATUS_ACCOUNT_RESTRICTION', 'Logon violates policy',
    '0xc0000073', 'STATUS_NONE_MAPPED', 'Other',
    '0xc00000fe', 'STATUS_NO_SUCH_PACKAGE', 'Other',
    '0xc000009a', 'STATUS_INSUFFICIENT_RESOURCES', 'Other',
    '0xc00000dc', 'STATUS_INVALID_SERVER_STATE', 'Other',
    '0xc0000106', 'STATUS_NAME_TOO_LONG', 'Other',
    '0xc000010b', 'STATUS_INVALID_LOGON_TYPE', 'Logon violates policy',
    '0xc000015b', 'STATUS_LOGON_TYPE_NOT_GRANTED', 'Logon violates policy',
    '0xc000018b', 'STATUS_NO_TRUST_SAM_ACCOUNT', 'Logon violates policy',
    '0xc0000224', 'STATUS_PASSWORD_MUST_CHANGE', 'Other',
    '0xc0000234', 'STATUS_ACCOUNT_LOCKED_OUT', 'User locked',
    '0xc00002ee', 'STATUS_UNFINISHED_CONTEXT_DELETED', 'Other'
];
let WinLogon=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false)
{ 
    WindowsEvent
    | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
        (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or (tostring(EventData.TargetUserName) has_any (username_has_any)) or (tostring(EventData.TargetDomainName) has_any (username_has_any)) or (strcat(tostring(EventData.TargetDomainName), '\\', tostring(EventData.TargetUserName)) has_any (username_has_any)) or (tostring(EventData.SubjectUserName) has_any (username_has_any)) or (tostring(EventData.SubjectDomainName) has_any (username_has_any)) or (strcat(tostring(EventData.SubjectDomainName), '\\', tostring(EventData.SubjectUserName)) has_any (username_has_any)))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(tostring(EventData.IpAddress), srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0 or tostring(EventData.WorkstationName) has_any (srchostname_has_any))
    // eventtype_in filtering done later in the parser
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | where Provider == 'Microsoft-Windows-Security-Auditing'
    | where EventID in (LogonEvents) or EventID in (LogoffEvents)
    | extend
        LogonProtocol = tostring(EventData.AuthenticationPackageName),
        SrcDvcIpAddr = tostring(EventData.IpAddress), // Backword Compatibility. Will be removed by July 2024
        SrcIpAddr = tostring(EventData.IpAddress),
        TargetPortNumber = toint(EventData.IpPort),
        LogonGuid = tostring(EventData.LogonGuid),
        LogonType = toint(EventData.LogonType),
        ActingProcessCreationTime = EventData.ProcessCreationTime,
        ActingProcessId = tostring(toint(EventData.ProcessId)),
        ActingProcessName = tostring(EventData.ProcessName),
        Status = tostring(EventData.Status),
        ActorSessionId = tostring(EventData.SubjectLogonId),
        ActorUsername = tostring(iff (EventData.SubjectDomainName in ('-', ''), EventData.SubjectUserName, strcat(EventData.SubjectDomainName, @"\", EventData.SubjectUserName))),
        ActorUserId = tostring(EventData.SubjectUserSid),
        SubStatus = tostring(EventData.SubStatus),
        TargetDomainName = tostring(EventData.TargetDomainName),
        TargetSessionId = tostring(EventData.TargetLogonId),
        TargetUserId = tostring(EventData.TargetUserSid),
        TargetUsername = tostring(iff (EventData.TargetDomainName in ('-', ''), EventData.TargetUserName, strcat(EventData.TargetDomainName, @"\", EventData.TargetUserName)))
    // mapping ASimMatchingUsername
    | extend
        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        ,
        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    | extend 
        SrcDvcHostname = tostring(EventData.WorkstationName), // Backword Compatibility. Will be removed by July 2024
        SrcHostname = tostring(EventData.WorkstationName),
        EventProduct = "Security Events"
    | extend EventStatus= iff(SubStatus == '0x0', Status, SubStatus)
    // -- creating EventMessage matching EventMessage in SecurityEvent table
    | extend
        EventMessage = case
              (
                  EventID == 4634,
                  "4634 - An account was logged off.", 
                  EventID == 4625,
                  "4625 - An account failed to log on.",
                  EventID == 4624,
                  "4624 - An account was successfully logged on.",
                  "4647 - User initiated logoff."
              ),
        EventResult = iff(EventID == 4625, 'Failure', 'Success')
    // Filtering on 'eventresult' and 'username_has_any'
    | where (eventresult == "*" or (EventResult == eventresult))
        and ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
    | project-rename 
        TargetDvcHostname = Computer
        ,
        EventOriginalUid = EventOriginId
        ,
        EventOriginalType=EventID
    | extend
        EventCount=int(1)
        ,
        EventSchemaVersion='0.1.3'
        ,
        ActorUserIdType='SID'
        ,
        TargetUserIdType='SID'
        ,
        EventVendor='Microsoft'  
        ,
        EventStartTime =TimeGenerated
        ,
        EventEndTime=TimeGenerated
        ,
        EventType=iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon')                  
        ,
        ActorUsernameType= iff(EventData.SubjectDomainName in ('-', ''), 'Simple', 'Windows')                  
        ,
        TargetUsernameType=iff (TargetDomainName in ('-', ''), 'Simple', 'Windows')
        ,
        SrcDvcOs = 'Windows'
        ,
        EventStatus= iff(SubStatus == '0x0', Status, SubStatus)
    // filtering on 'eventtype_in'
    | where (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))
    | extend
        ActorUserType = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
        ,
        TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
    | lookup LogonStatus on EventStatus
    // filtering on 'eventresultdetails_in'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
    | lookup LogonTypes on LogonType
    /// ** Aliases 
    | extend
        User=TargetUsername
        ,
        LogonTarget=TargetDvcHostname
        ,
        Dvc=SrcHostname
};
let SecEventLogon =(starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false)
{
    SecurityEvent
    | where not(disabled)
    // ************************************************************************* 
    //       <Prefilterring>
    // *************************************************************************
    | where 
        (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or (TargetUserName has_any (username_has_any)) or (TargetDomainName has_any (username_has_any)) or (strcat(TargetDomainName, '\\', TargetUserName) has_any (username_has_any)) or (SubjectUserName has_any (username_has_any)) or (SubjectDomainName has_any (username_has_any)) or (strcat(SubjectDomainName, '\\', SubjectUserName) has_any (username_has_any)))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(IpAddress, srcipaddr_has_any_prefix))
        and ((array_length(srchostname_has_any) == 0) or (WorkstationName has_any (srchostname_has_any)))
    // eventtype_in filtering done later in the parser
    // eventresultdetails_in filtering done later in the parser
    // eventresult filtering done later in the parser
    // ************************************************************************* 
    //       </Prefilterring>
    // ************************************************************************* 
    | where EventID in (LogonEvents) or 
        EventID in (LogoffEvents)
    | project-rename 
        EventMessage = Activity
        ,
        ActorSessionId=SubjectLogonId
        ,
        TargetSessionId=TargetLogonId
        ,
        ActorUserId=SubjectUserSid
        ,
        TargetUserId =TargetUserSid
        ,
        SrcDvcHostname = WorkstationName // Backword Compatibility. Will be removed by July 2024
        ,
        TargetDvcHostname = Computer
        ,
        EventOriginalUid = EventOriginId
        ,
        LogonProtocol=AuthenticationPackageName
        ,
        SrcDvcIpAddr=IpAddress // Backword Compatibility. Will be removed by July 2024
        ,
        EventOriginalType=EventID
    | extend
        EventResult = iff(EventOriginalType == 4625, 'Failure', 'Success')
        ,
        EventCount=int(1)
        ,
        EventSchemaVersion='0.1.0'
        ,
        EventProduct = "Security Events"
        ,
        ActorUserIdType='SID'
        ,
        TargetUserIdType='SID'
        ,
        EventVendor='Microsoft' 
        ,
        EventStartTime =TimeGenerated
        ,
        EventEndTime=TimeGenerated
        ,
        EventType=iff(EventOriginalType in (LogoffEvents), 'Logoff', 'Logon')
        ,
        ActorUsername = iff (SubjectDomainName in ('-', ''), SubjectUserName, SubjectAccount)
        ,
        ActorUsernameType= iff(SubjectDomainName in ('-', ''), 'Simple', 'Windows')
        ,
        TargetUsername = iff (TargetDomainName in ('-', ''), trim(@'\\', TargetUserName), trim(@'\\', TargetAccount))
        ,
        TargetUsernameType=iff (TargetDomainName in ('-', ''), 'Simple', 'Windows')
        ,
        SrcDvcOs = 'Windows'
        ,
        EventStatus= iff(SubStatus == '0x0', Status, SubStatus)
        ,
        SrcHostname = SrcDvcHostname // Backword Compatibility. Will be removed by July 2024
        ,
        SrcIpAddr = SrcDvcIpAddr // Backword Compatibility. Will be removed by July 2024
    // mapping ASimMatchingUsername
    | extend
        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        ,
        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    // filtering on 'eventtype_in', 'eventresult', 'TargetUsername' and 'ActorUsername'
    | where (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))
        and (eventresult == "*" or (EventResult == eventresult))
        and ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
    | project-away TargetUserName, AccountType
    | extend
        ActorUserType = _ASIM_GetWindowsUserType (ActorUsername, ActorUserId)
        ,
        TargetUserType = _ASIM_GetWindowsUserType (TargetUsername, TargetUserId)
    | lookup LogonStatus on EventStatus
    // filtering on 'eventresultdetails_in'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
    | lookup LogonTypes on LogonType
    /// ** Aliases 
    | extend
        User=TargetUsername
        ,
        LogonTarget=TargetDvcHostname
        ,
        Dvc=SrcDvcHostname
};
union isfuzzy=true SecEventLogon(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
              ,    WinLogon(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimAuthenticationOktaSSO
// Description: This ASIM parser supports normalizing Okta sign in logs, stored in the  Okta_CL table to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationOktaSSO(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let OktaSignin = (
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false) {
  let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
  let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
  let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
  let emptyOctV1Table = datatable(TimeGenerated: datetime)[];
    // https://developer.okta.com/docs/reference/api/event-types/#catalog
    let OktaV1 = union isfuzzy=true emptyOctV1Table, Okta_CL 
        | where not(disabled)
        // ************************************************************************* 
        //       <Prefiltering>
        // *************************************************************************
        | extend 
            outcome_result_s=column_ifexists('outcome_result_s', ""),
            eventType_s=column_ifexists('eventType_s', ""),
            legacyEventType_s=column_ifexists('legacyEventType_s', ""),
            client_geographicalContext_geolocation_lat_d = column_ifexists('client_geographicalContext_geolocation_lat_d', ""),
            client_geographicalContext_geolocation_lon_d = column_ifexists('client_geographicalContext_geolocation_lon_d', ""),
            actor_alternateId_s = column_ifexists('actor_alternateId_s', ""),
            client_ipAddress_s = column_ifexists('client_ipAddress_s', "")
        | where 
            (isnull(starttime) or TimeGenerated >= starttime) 
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or actor_alternateId_s has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(client_ipAddress_s, srcipaddr_has_any_prefix)))
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            // eventtype_in filtering done later in the parser
            and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
        // eventresult filtering done later in the parser
        // ************************************************************************* 
        //       </Prefiltering>
        // ************************************************************************* 
        | where eventType_s in (OktaSigninEvents)
        | extend 
            EventProduct='Okta'
            ,
            EventVendor='Okta'
            ,
            EventSchema = 'Authentication'
            ,
            EventCount=int(1)
            ,
            EventSchemaVersion='0.1.0'
            ,
            EventResult = case (outcome_result_s in (OktaSuccessfulOutcome), 'Success', outcome_result_s in (OktaFailedOutcome), 'Failure', 'Partial')
            ,
            EventStartTime=TimeGenerated
            ,
            EventEndTime=TimeGenerated
            ,
            EventType=iff(eventType_s hassuffix 'start', 'Logon', 'Logoff')
            ,
            EventSubType=legacyEventType_s
            ,
            EventMessage=column_ifexists('displayMessage_s', "")
            ,
            EventOriginalResultDetails=column_ifexists('outcome_reason_s', "")
            ,
            EventOriginalUid = column_ifexists('uuid_g', "")
            ,
            TargetUserIdType='OktaId'
            ,
            TargetUsernameType='UPN'
            ,
            TargetSessionId=column_ifexists('authenticationContext_externalSessionId_s', "")
            ,
            TargetUserId=column_ifexists('actor_id_s', "")
            ,
            TargetUsername=column_ifexists('actor_alternateId_s', "")
            ,
            TargetUserType=column_ifexists('actor_type_s', "")
            ,
            SrcGeoLatitude=toreal(client_geographicalContext_geolocation_lat_d)
            ,
            SrcGeoLongitude=toreal(client_geographicalContext_geolocation_lon_d)
            ,
            SrcDvcOs=column_ifexists('client_userAgent_os_s', "")
            ,
            SrcIsp=column_ifexists('securityContext_isp_s', "")
            ,
            SrcGeoCity=column_ifexists('client_geographicalContext_city_s', "")
            ,
            SrcGeoCountry=column_ifexists('client_geographicalContext_country_s', "")
            ,
            SrcIpAddr = column_ifexists('client_ipAddress_s', "")
            ,
            ActingAppName=column_ifexists('client_userAgent_browser_s', "")
            ,
            ActingAppType="Browser"
            ,
            LogonMethod=column_ifexists('authenticationContext_credentialType_s', "")
            ,
            HttpUserAgent=column_ifexists('client_userAgent_rawUserAgent_s', "")
        // Filtering on 'eventresult' and 'eventtype_in'
        | where (eventresult == "*" or (EventResult == eventresult))
            and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        // mapping ASimMatchingUsername
        | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        // ActorUsername not coming from source. Hence, not mapped.
        | extend ASimMatchingUsername = case
            (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
        // ** Aliases
        | extend 
            User=TargetUsername
            ,
            Dvc=EventVendor
            ,
            IpAddr=SrcIpAddr
        | project-away *_s, *_d, *_b, *_g, *_t;
    OktaV1
};
OktaSignin (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationOktaV2
// Description: This ASIM parser supports normalizing Okta sign in logs, stored in the OktaV2_CL table, to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationOktaV2(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let OktaSignin = (
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false) {
  let OktaSuccessfulOutcome = dynamic(['SUCCESS', 'ALLOW']);
  let OktaFailedOutcome = dynamic(['FAILURE', 'SKIPPED', 'DENY']);
  let OktaSigninEvents=dynamic(['user.session.start', 'user.session.end']);
  let emptyOctaV2Table = datatable(
  TimeGenerated: datetime,
  ActorDetailEntry: dynamic,
  ActorDisplayName: string,
  AuthenticationContext: string,
  AuthenticationProvider: string,
  AuthenticationStep: string,
  AuthenticationContextAuthenticationProvider: string,
  AuthenticationContextAuthenticationStep: int,
  AuthenticationContextCredentialProvider: string,
  AuthenticationContextInterface: string,
  AuthenticationContextIssuerId: string,
  AuthenticationContextIssuerType: string,
  DebugData: dynamic,
  DvcAction: string,
  EventResult:string,
  OriginalActorAlternateId: string,
  OriginalClientDevice: string,
  OriginalOutcomeResult: string,
  OriginalSeverity: string,
  OriginalTarget: dynamic,
  OriginalUserId: string,
  OriginalUserType: string,
  Request: dynamic,
  SecurityContextAsNumber: int,
  SecurityContextAsOrg: string,
  SecurityContextDomain: string,
  SecurityContextIsProxy: bool,
  TransactionDetail: dynamic,
  TransactionId: string,
  TransactionType: string
)[];
    // https://developer.okta.com/docs/reference/api/event-types/#catalog
    let OktaV2 = union isfuzzy=true emptyOctaV2Table, OktaV2_CL
        | where not(disabled) 
        | extend
            EventOriginalType=column_ifexists('EventOriginalType', "") 
            ,
            OriginalActorAlternateId = column_ifexists('OriginalActorAlternateId', "")
            ,
            ActorUsername=column_ifexists('ActorUsername', "")
            ,
            SrcIpAddr = column_ifexists('SrcIpAddr', "")
        | where 
            (isnull(starttime) or TimeGenerated >= starttime) 
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or ActorUsername has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            // eventtype_in filtering done later in the parser
            and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
        // eventresult filtering done later in the parser
        // ************************************************************************* 
        //       </Prefiltering>
        // ************************************************************************* 
        | where EventOriginalType in (OktaSigninEvents)
        | extend ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)
        | extend 
            EventProduct='Okta'
            ,
            EventSchema = 'Authentication'
            ,
            EventVendor='Okta'
            ,
            EventCount=int(1)
            ,
            EventSchemaVersion='0.1.0'
            ,
            EventStartTime=TimeGenerated
            ,
            EventEndTime=TimeGenerated
            ,
            EventType=iff(EventOriginalType hassuffix 'start', 'Logon', 'Logoff')       
            ,
            TargetSessionId=column_ifexists('ActorSessionId', "")
            ,
            TargetUserId= column_ifexists('ActorUserId', "")
            ,
            TargetUsername=ActorUsername
            ,
            TargetUserType=column_ifexists('ActorUserType', "")
            ,
            TargetUserIdType=column_ifexists('ActorUserIdType', "")
            ,
            TargetUsernameType=column_ifexists('ActorUsernameType', "")
            //** extend non-normalized fields to be projected-away 
            ,
            //
            ActorDetailEntry,
            ActorDisplayName
            ,
            AuthenticationContextAuthenticationProvider
            ,
            AuthenticationContextAuthenticationStep,
            AuthenticationContextCredentialProvider
            ,
            AuthenticationContextInterface
            ,
            AuthenticationContextIssuerId
            ,
            AuthenticationContextIssuerType
            ,
            DebugData,
            DvcAction
            ,
            OriginalActorAlternateId
            ,
            OriginalClientDevice
            ,
            OriginalOutcomeResult
            ,
            OriginalSeverity
            ,
            OriginalTarget,
            OriginalUserId
            ,
            OriginalUserType
            ,
            Request,
            SecurityContextAsNumber,
            SecurityContextAsOrg
            ,
            SecurityContextDomain
            ,
            SecurityContextIsProxy
            ,
            TransactionDetail,
            TransactionId
            ,
            TransactionType
        // Filtering on 'eventresult' and 'eventtype_in'
        | where (eventresult == "*" or (EventResult == eventresult))
            and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        // mapping ASimMatchingUsername
        | extend
            temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
            ,
            temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
        | extend ASimMatchingUsername = case
            (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
        // ** Aliases
        | extend 
            User=TargetUsername
            ,
            Dvc=EventVendor
            ,
            IpAddr=SrcIpAddr
        | project-away
            ActorDetailEntry,
            ActorDisplayName
            ,
            AuthenticationContextAuthenticationProvider
            ,
            AuthenticationContextAuthenticationStep,
            AuthenticationContextCredentialProvider
            ,
            AuthenticationContextInterface
            ,
            AuthenticationContextIssuerId
            ,
            AuthenticationContextIssuerType
            ,
            DebugData,
            DvcAction
            ,
            OriginalActorAlternateId
            ,
            OriginalClientDevice
            ,
            OriginalOutcomeResult
            ,
            OriginalSeverity
            ,
            OriginalTarget,
            OriginalUserId
            ,
            OriginalUserType
            ,
            Request,
            SecurityContextAsNumber,
            SecurityContextAsOrg
            ,
            SecurityContextDomain
            ,
            SecurityContextIsProxy
            ,
            TransactionDetail,
            TransactionId
            ,
            TransactionType;
    OktaV2
};
OktaSignin (
    starttime=starttime,
    endtime=endtime,
    username_has_any=username_has_any,
    targetappname_has_any=targetappname_has_any,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    srchostname_has_any=srchostname_has_any,
    eventtype_in=eventtype_in,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimAuthenticationPaloAltoCortexDataLake
// Description: This ASIM parser supports normalizing Palo Alto Cortex Data Lake logs to the ASIM Authentication normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationPaloAltoCortexDataLake(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
  [
  "0", "Low",
  "1", "Low",
  "2", "Low",
  "3", "Low",
  "4", "Low",
  "5", "Low",
  "6", "Medium",
  "7", "Medium",
  "8", "Medium",
  "9", "High",
  "10", "High"
];
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    CommonSecurityLog
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and DeviceVendor == "Palo Alto Networks"
        and DeviceProduct == "LF"
        and DeviceEventClassID == "AUTH"
        and ((array_length(username_has_any) == 0) or (AdditionalExtensions has_any (username_has_any)))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
        and (array_length(srchostname_has_any) == 0 or AdditionalExtensions has_any(srchostname_has_any))
        and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
    // eventresult filtering done later in the parser
    | extend
        EventResult = iff(Message has "Invalid Certificate", "Failure", "Success"),
        EventType = "Logon"
    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
        and (eventresult == '*' or EventResult has eventresult)
    | parse-kv AdditionalExtensions as (PanOSSourceDeviceHost: string, PanOSSourceDeviceOSFamily: string, PanOSAuthenticationProtocol: string, PanOSAuthenticatedUserDomain: string, PanOSAuthenticatedUserName: string, PanOSAuthenticatedUserUUID: string, start: string, PanOSLogSource: string, PanOSRuleMatchedUUID: string, PanOSAuthenticationDescription: string, PanOSClientTypeName: string, PanOSConfigVersion: string, PanOSMFAVendor: string, PanOSSourceDeviceCategory: string, PanOSSourceDeviceModel: string, PanOSSourceDeviceProfile: string, PanOSSourceDeviceVendor: string, PanOSUserAgentString: string, PanOSCortexDataLakeTenantID: string, PanOSSessionID: string) with (pair_delimiter=";", kv_delimiter="=")
    | where ((array_length(username_has_any) == 0) or (PanOSAuthenticatedUserName has_any (username_has_any)))
        and (array_length(srchostname_has_any) == 0 or PanOSSourceDeviceHost has_any(srchostname_has_any))
    | invoke _ASIM_ResolveDvcFQDN('DeviceName')
    | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')
    | lookup EventSeverityLookup on LogSeverity
    | extend
        EventStartTime = todatetime(start),
        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
        TargetIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
        EventMessage = Message,
        LogonMethod = case(
                  FieldDeviceCustomNumber1 == 1,
                  "Username & Password",
                  FieldDeviceCustomNumber1 == 2,
                  "Multi factor authentication",
                  FieldDeviceCustomNumber1 == 3,
                  "Multi factor authentication",
                  ""
              ),
        AdditionalFields = bag_pack(
                      "FileName",
                      FileName,
                      "PanOSLogSource",
                      PanOSLogSource,
                      "PanOSRuleMatchedUUID",
                      PanOSRuleMatchedUUID,
                      DeviceCustomNumber1Label,
                      FieldDeviceCustomNumber1, 
                      DeviceCustomNumber2Label,
                      FieldDeviceCustomNumber2,
                      DeviceCustomString3Label,
                      DeviceCustomString3,
                      DeviceCustomString4Label,
                      DeviceCustomString4,
                      DeviceCustomString5Label,
                      DeviceCustomString5,
                      DeviceCustomString6Label,
                      DeviceCustomString6,
                      "PanOSAuthenticationDescription",
                      PanOSAuthenticationDescription,
                      "PanOSClientTypeName",
                      PanOSClientTypeName,
                      "PanOSConfigVersion",
                      PanOSConfigVersion,
                      "PanOSMFAVendor",
                      PanOSMFAVendor,
                      "PanOSSourceDeviceCategory",
                      PanOSSourceDeviceCategory,
                      "PanOSSourceDeviceModel",
                      PanOSSourceDeviceModel,
                      "PanOSSourceDeviceProfile",
                      PanOSSourceDeviceProfile,
                      "PanOSSourceDeviceVendor",
                      PanOSSourceDeviceVendor
                  )
    | project-rename
        DvcIpAddr = Computer,
        EventUid = _ItemId,
        DvcId = DeviceExternalID,
        EventOriginalResultDetails = Message,
        EventOriginalSeverity = LogSeverity,
        EventOriginalType = DeviceEventClassID,
        EventOriginalUid = ExtID,
        EventProductVersion = DeviceVersion,
        LogonProtocol = PanOSAuthenticationProtocol,
        SrcDvcOs = PanOSSourceDeviceOSFamily,
        TargetUsername = PanOSAuthenticatedUserName,
        TargetUserId = PanOSAuthenticatedUserUUID,
        TargetDomain = PanOSAuthenticatedUserDomain,
        EventOriginalSubType = Activity,
        HttpUserAgent =  PanOSUserAgentString,
        TargetDvcScopeId = PanOSCortexDataLakeTenantID,
        TargetSessionId = PanOSSessionID,
        TargetDvc = DeviceCustomString1
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        Dst = TargetIpAddr,
        Src = coalesce(SrcFQDN, SrcHostname, SrcIpAddr),
        TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
        User = TargetUsername,
        IpAddr = SrcIpAddr,
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        TargetDomainType = case(
                      array_length(split(DestinationUserName, ".")) > 1,
                      "FQDN",
                      array_length(split(DestinationUserName, "\\")) > 1,
                      "Windows",
                      ""
                  ),
        TargetUserIdType = iff(isnotempty(TargetUserId), "UID", ""),
        TargetUsernameType = _ASIM_GetUsernameType(TargetUsername)
    | extend
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventProduct = "Cortex Data Lake",
        EventVendor = "Palo Alto"
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        EventOutcome,
        PanOS*,
        start,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        Indicator*,
        _ResourceId,
        temp_*
};
parser(
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationPostgreSQL
// Description: This ASIM parser supports filtering and normalizing PostgreSQL sign in logs to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationPostgreSQL(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let PostgreSQLSignInAuthorized=(
 starttime: datetime=datetime(null), 
 endtime: datetime=datetime(null), 
 username_has_any: dynamic = dynamic([]),
 targetappname_has_any: dynamic = dynamic([]),
 srcipaddr_has_any_prefix: dynamic = dynamic([]),
 srchostname_has_any: dynamic = dynamic([]),
 eventtype_in: dynamic = dynamic([]),
 eventresultdetails_in: dynamic = dynamic([]),
 eventresult: string = '*',
 disabled: bool=false
 ) {
  PostgreSQL_CL
 | where not(disabled)
 // ************************************************************************* 
 //      <Prefilterring>
 // *************************************************************************
 | where 
     (isnull(starttime) or TimeGenerated >= starttime)
     and (isnull(endtime) or TimeGenerated <= endtime)
     and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
     and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
     and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
     and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
     and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
     and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
     and (eventresult == "*" or ('Success' == eventresult))
 // ************************************************************************* 
 //      </Prefilterring>
 // ************************************************************************* 
 | where RawData has 'connection authorized'
 | extend
     EventVendor = 'PostgreSQL'
     ,
     EventProduct = 'PostgreSQL'
     ,
     EventCount = int(1)
     ,
     EventSchema = 'Authentication'
     ,
     EventSchemaVersion = '0.1.1'
     ,
     EventResult = 'Success'
     ,
     EventStartTime = TimeGenerated
     ,
     EventEndTime = TimeGenerated
     ,
     EventType = 'Logon'
     ,
     DvcHostname = Computer
     ,
     DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
     ,
     TargetUsernameType = 'Simple'
     ,
     TargetUsername = extract(@'user=([^\s,]+)', 1, RawData)
     ,
     EventOriginalRestultDetails = 'Connection authorized'
 // ********************** <Postfilterring> **********************************
 | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
 // ********************** </Postfilterring> *********************************
 // mapping ASimMatchingUsername
 | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
 // ActorUsername not coming from source. Hence, not mapped.
 | extend ASimMatchingUsername = case
     (
                                 array_length(username_has_any) == 0,
                                 "-",
                                 temp_isMatchTargetUsername,
                                 "TargetUsername",
                                 "No match"
                             )
 // ************************ 
 //      <Aliases> 
 // ************************
 | extend
     User=TargetUsername
     ,
     Dvc=Computer
 // ************************ 
 //      </Aliases> 
 // ************************
 | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
 };
 let PostgreSQLAuthFailure1=(
     starttime: datetime=datetime(null), 
     endtime: datetime=datetime(null), 
     username_has_any: dynamic = dynamic([]),
     targetappname_has_any: dynamic = dynamic([]),
     srcipaddr_has_any_prefix: dynamic = dynamic([]),
     srchostname_has_any: dynamic = dynamic([]),
     eventtype_in: dynamic = dynamic([]),
     eventresultdetails_in: dynamic = dynamic([]),
     eventresult: string = '*',
     disabled: bool=false
     ) {
     PostgreSQL_CL
     | where not(disabled)
     // ************************************************************************* 
     //      <Prefilterring>
     // *************************************************************************
     | where 
         (isnull(starttime) or TimeGenerated >= starttime)
         and (isnull(endtime) or TimeGenerated <= endtime)
         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
         and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
         and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
         and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
         and (eventresult == "*" or ('Failure' == eventresult))
     // ************************************************************************* 
     //      </Prefilterring>
     // *************************************************************************
     | where RawData has 'authentication failed'
     | extend 
         EventVendor = 'PostgreSQL'
         ,
         EventProduct = 'PostgreSQL'
         ,
         EventCount = int(1)
         ,
         EventSchema = 'Authentication'
         ,
         EventSchemaVersion = '0.1.1'
         ,
         EventResult = 'Failure'
         ,
         EventStartTime = TimeGenerated
         ,
         EventEndTime = TimeGenerated
         ,
         EventType = 'Logon'
         ,
         DvcHostname = Computer
         ,
         DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
         ,
         TargetUsernameType = 'Simple'
         ,
         TargetUsername = extract(@'for user\s"(.*?)"', 1, RawData)
         ,
         EventResultDetails = 'No such user or password'
         ,
         EventOriginalRestultDetails = 'User authentication failed'
     // ********************** <Postfilterring> **********************************
     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
     // ********************** </Postfilterring> *********************************
     // mapping ASimMatchingUsername
     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
     // ActorUsername not coming from source. Hence, not mapped.
     | extend ASimMatchingUsername = case
         (
                                     array_length(username_has_any) == 0,
                                     "-",
                                     temp_isMatchTargetUsername,
                                     "TargetUsername",
                                     "No match"
                                 )
     // ************************ 
     //      <Aliases> 
     // ************************
     | extend
         User=TargetUsername
         ,
         Dvc=Computer
     // ************************ 
     //      </Aliases> 
     // ************************
     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
 };
 let PostgreSQLAuthFailure2=(
     starttime: datetime=datetime(null), 
     endtime: datetime=datetime(null), 
     username_has_any: dynamic = dynamic([]),
     targetappname_has_any: dynamic = dynamic([]),
     srcipaddr_has_any_prefix: dynamic = dynamic([]),
     srchostname_has_any: dynamic = dynamic([]),
     eventtype_in: dynamic = dynamic([]),
     eventresultdetails_in: dynamic = dynamic([]),
     eventresult: string = '*',
     disabled: bool=false
     ) {
     PostgreSQL_CL
     | where not(disabled)
     // ************************************************************************* 
     //      <Prefilterring>
     // *************************************************************************
     | where 
         (isnull(starttime) or TimeGenerated >= starttime)
         and (isnull(endtime) or TimeGenerated <= endtime)
         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
         and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
         and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
         and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
         and (eventresult == "*" or ('Failure' == eventresult))
     // ************************************************************************* 
     //      </Prefilterring>
     // *************************************************************************
     | where RawData has_all ('role', 'does', 'not', 'exist')
     | extend 
         EventVendor = 'PostgreSQL'
         ,
         EventProduct = 'PostgreSQL'
         ,
         EventCount = int(1)
         ,
         EventSchema = 'Authentication'
         ,
         EventSchemaVersion = '0.1.1'
         ,
         EventResult = 'Failure'
         ,
         EventStartTime = TimeGenerated
         ,
         EventEndTime = TimeGenerated
         ,
         EventType = 'Logon'
         ,
         DvcHostname = Computer
         ,
         DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
         ,
         TargetUsernameType = 'Simple'
         ,
         TargetUsername = extract(@'role\s"(.*?)"\sdoes', 1, RawData)
         ,
         EventResultDetails = 'No such user or password'
         ,
         EventOriginalRestultDetails = 'Role does not exist'
     // ********************** <Postfilterring> **********************************
     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
     // ********************** </Postfilterring> *********************************
     // mapping ASimMatchingUsername
     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
     // ActorUsername not coming from source. Hence, not mapped.
     | extend ASimMatchingUsername = case
         (
                                     array_length(username_has_any) == 0,
                                     "-",
                                     temp_isMatchTargetUsername,
                                     "TargetUsername",
                                     "No match"
                                 )
     // ************************ 
     //      <Aliases> 
     // ************************
     | extend
         User=TargetUsername
         ,
         Dvc=Computer
     // ************************ 
     //      </Aliases> 
     // ************************
     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
 };
 let PostgreSQLAuthFailure3=(
     starttime: datetime=datetime(null), 
     endtime: datetime=datetime(null), 
     username_has_any: dynamic = dynamic([]),
     targetappname_has_any: dynamic = dynamic([]),
     srcipaddr_has_any_prefix: dynamic = dynamic([]),
     srchostname_has_any: dynamic = dynamic([]),
     eventtype_in: dynamic = dynamic([]),
     eventresultdetails_in: dynamic = dynamic([]),
     eventresult: string = '*',
     disabled: bool=false
     ) {
     PostgreSQL_CL
     | where not(disabled)
     // ************************************************************************* 
     //      <Prefilterring>
     // *************************************************************************
     | where 
         (isnull(starttime) or TimeGenerated >= starttime)
         and (isnull(endtime) or TimeGenerated <= endtime)
         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))
         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
         and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
         and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
         and (eventresult == "*" or ('Failure' == eventresult))
     // ************************************************************************* 
     //      </Prefilterring>
     // *************************************************************************
     | where RawData has_all ('no', 'entry', 'user')
     | extend 
         EventVendor = 'PostgreSQL'
         ,
         EventProduct = 'PostgreSQL'
         ,
         EventCount = int(1)
         ,
         EventSchema = 'Authentication'
         ,
         EventSchemaVersion = '0.1.1'
         ,
         EventResult = 'Failure'
         ,
         EventStartTime = TimeGenerated
         ,
         EventEndTime = TimeGenerated
         ,
         EventType = 'Logon'
         ,
         DvcHostname = Computer
         ,
         DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
         ,
         TargetUsernameType = 'Simple'
         ,
         TargetUsername = extract(@'user\s"(.*?)",', 1, RawData)
         ,
         SrcIpAddr = extract(@'host\s"(.*?)",', 1, RawData)
         ,
         EventResultDetails = 'No such user or password'
         ,
         EventOriginalRestultDetails = 'No entry for user'
     // ********************** <Postfilterring> **********************************
     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
     // ********************** </Postfilterring> *********************************
     // mapping ASimMatchingUsername
     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
     // ActorUsername not coming from source. Hence, not mapped.
     | extend ASimMatchingUsername = case
         (
                                     array_length(username_has_any) == 0,
                                     "-",
                                     temp_isMatchTargetUsername,
                                     "TargetUsername",
                                     "No match"
                                 )
     // ************************ 
     //      <Aliases> 
     // ************************
     | extend
         User=TargetUsername
         ,
         Dvc=Computer
     // ************************ 
     //      </Aliases> 
     // ************************
     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
 };
 let PostgreSQLDisconnect=(
     starttime: datetime=datetime(null), 
     endtime: datetime=datetime(null), 
     username_has_any: dynamic = dynamic([]),
     targetappname_has_any: dynamic = dynamic([]),
     srcipaddr_has_any_prefix: dynamic = dynamic([]),
     srchostname_has_any: dynamic = dynamic([]),
     eventtype_in: dynamic = dynamic([]),
     eventresultdetails_in: dynamic = dynamic([]),
     eventresult: string = '*',
     disabled: bool=false
     ) {
     PostgreSQL_CL
     | where not(disabled)
     // ************************************************************************* 
     //      <Prefilterring>
     // *************************************************************************
     | where 
         (isnull(starttime) or TimeGenerated >= starttime)
         and (isnull(endtime) or TimeGenerated <= endtime)
         and ((array_length(username_has_any) == 0) or RawData has_any (username_has_any))
         and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))
         and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
         and ((array_length(eventtype_in) == 0) or "Logoff" in~ (eventtype_in))
         and (array_length(eventresultdetails_in) == 0 or 'Session expired' in~ (eventresultdetails_in))
         and (eventresult == "*" or ('Success' == eventresult))
     // ************************************************************************* 
     //      </Prefilterring>
     // *************************************************************************
     | where RawData has 'disconnection'
     | extend 
         EventVendor = 'PostgreSQL'
         ,
         EventProduct = 'PostgreSQL'
         ,
         EventCount = int(1)
         ,
         EventSchema = 'Authentication'
         ,
         EventSchemaVersion = '0.1.1'
         ,
         EventResult = 'Success'
         ,
         EventStartTime = TimeGenerated
         ,
         EventEndTime = TimeGenerated
         ,
         EventType = 'Logoff'
         ,
         DvcHostname = Computer
         ,
         DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
         ,
         TargetUsernameType = 'Simple'
         ,
         TargetUsername = extract(@'user=([^\s,]+)', 1, RawData)
         ,
         SrcIpAddr = extract(@'host=([\d.]+)', 1, RawData)
         ,
         EventResultDetails = 'Session expired'
         ,
         EventOriginalRestultDetails = 'User session closed'
     // ********************** <Postfilterring> **********************************
     | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
         and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
     // ********************** </Postfilterring> *********************************
     // mapping ASimMatchingUsername
     | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
     // ActorUsername not coming from source. Hence, not mapped.
     | extend ASimMatchingUsername = case
         (
                                     array_length(username_has_any) == 0,
                                     "-",
                                     temp_isMatchTargetUsername,
                                     "TargetUsername",
                                     "No match"
                                 )
     // ************************ 
     //      <Aliases> 
     // ************************
     | extend
         User=TargetUsername
         ,
         Dvc=Computer
     // ************************ 
     //      </Aliases> 
     // ************************
     | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
 };
 union isfuzzy=false PostgreSQLSignInAuthorized(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
               ,  PostgreSQLAuthFailure1(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
               ,  PostgreSQLAuthFailure2(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
               ,  PostgreSQLAuthFailure3(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
               ,  PostgreSQLDisconnect(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimAuthenticationSalesforceSC
// Description: This ASIM parser supports filtering and normalizing the Salesforce Service Cloud logs stored in 'SalesforceServiceCloud_CL' table to the ASIM authentication normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationSalesforceSC(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    )
{
    let SalesforceSchema = datatable
(
    api_version_s: string,
    browser_type_s: string,
    cipher_suite_s: string,
    client_ip_s: string,
    delegated_user_id_s: string,
    delegated_user_name_s: string,
    event_type_s: string,
    login_key_s: string,
    login_status_s: string,
    login_type_s: string,
    login_sub_type_s: string,
    organization_id_s: string,
    platform_type_s: string,
    request_id_s: string,
    request_status_s: string,
    session_key_s: string,
    source_ip_s: string,
    timestamp_s: string,
    tls_protocol_s: string,
    uri_s: string,
    user_id_s: string,
    user_name_s: string,
    user_type_s: string,
    wave_session_id_g: string
)[];
    let EventResultLookup = datatable
(
    login_status_s: string,
    DvcAction: string,
    EventResultDetails: string,
    EventResult: string,
    EventSeverity: string
)
[
    "LOGIN_CHALLENGE_ISSUED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_CHALLENGE_PENDING", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_DATA_DOWNLOAD_ONLY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_END_SESSION_TXN_SECURITY_POLICY", "Blocked", "Logon violates policy", "Failure", "Informational",
    "LOGIN_ERROR_API_TOO_OLD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ASYNC_USER_CREATE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_AVANTGO_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_AVANTGO_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CLIENT_NO_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CLIENT_REQ_UPDATE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CSS_FROZEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_CSS_PW_LOCKOUT", "Blocked", "User locked", "Failure", "Informational",
    "LOGIN_ERROR_DUPLICATE_USERNAME", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_EXPORT_RESTRICTED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_GLOBAL_BLOCK_DOMAIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_HT_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_HTP_METHD_INVALID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INSECURE_LOGIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INVALID_GATEWAY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INVALID_ID_FIELD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_INVALID_PASSWORD", "Blocked", "Incorrect password", "Failure", "Informational",
    "LOGIN_ERROR_LOGINS_EXCEEDED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_MUST_USE_API_TOKEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_MUTUAL_AUTHENTICATION", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NETWORK_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_HT_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_NETWORK_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_NETWORK_INFO", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_NO_SET_COOKIES", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_OFFLINE_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_OFFLINE_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_CLOSED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_DOMAIN_ONLY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_IN_MAINTENANCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_IS_DOT_ORG", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_LOCKOUT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_SIGNING_UP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_ORG_SUSPENDED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_OUTLOOK_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_PAGE_REQUIRES_LOGIN", "Blocked", "Session expired", "Failure", "Informational",
    "LOGIN_ERROR_PASSWORD_EMPTY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_PASSWORD_LOCKOUT", "Blocked", "User locked", "Failure", "Informational",
    "LOGIN_ERROR_PORTAL_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_RATE_EXCEEDED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_RESTRICTED_DOMAIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_RESTRICTED_TIME", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SESSION_TIMEOUT", "Blocked", "Session expired", "Failure", "Informational",
    "LOGIN_ERROR_SSO_PWD_INVALID", "Blocked", "Incorrect password", "Failure", "Informational",
    "LOGIN_ERROR_SSO_SVC_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SSO_URL_INVALID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_STORE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_STORE_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SWITCH_SFDC_INSTANCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SWITCH_SFDC_LOGIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SYNCOFFLINE_DISBLD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_SYSTEM_DOWN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USER_API_ONLY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USER_FROZEN", "Blocked", "User locked", "Failure", "Informational",
    "LOGIN_ERROR_USER_INACTIVE", "Blocked", "User disabled", "Failure", "Informational",
    "LOGIN_ERROR_USER_NON_MOBILE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USER_STORE_ACCESS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_USERNAME_EMPTY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_WIRELESS_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ERROR_WIRELESS_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_LIGHTNING_LOGIN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_NO_ERROR", "Allowed", "", "Success", "Informational",
    "LOGIN_OAUTH_API_DISABLED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_CONSUMER_DELETED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_DS_NOT_EXPECTED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_EXCEED_GET_AT_LMT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_CODE_CHALLENGE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_CODE_VERIFIER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_DEVICE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_DS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_DSIG", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_IP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_NONCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_SIG_METHOD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_TIMESTAMP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_TOKEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_VERIFIER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_INVALID_VERSION", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_MISSING_DS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NO_CALLBACK_URL", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NO_CONSUMER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NO_TOKEN", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_NONCE_REPLAY", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_PACKAGE_MISSING", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_PACKAGE_OLD", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_OAUTH_UNEXPECTED_PARAM", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_ORG_TRIAL_EXP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_READONLY_CANNOT_VALIDATE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_AUDIENCE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_CONFIG", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_FORMAT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_IN_RES_TO", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_ISSUER", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_ORG_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_PORTAL_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_RECIPIENT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SESSION_LEVEL", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SIGNATURE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SITE_URL", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_STATUS", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_SUB_CONFIRM", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_TIMESTAMP", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_INVALID_USERNAME", "Blocked", "No such user", "Failure", "Informational",
    "LOGIN_SAML_INVALID_VERSION", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_MISMATCH_CERT", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_MISSING_ORG_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_MISSING_PORTAL_ID", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_PROVISION_ERROR", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_REPLAY_ATTEMPTED", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_SAML_SITE_INACTIVE", "Blocked", "Other", "Failure", "Informational",
    "LOGIN_TWOFACTOR_REQ", "Blocked", "Logon violates policy", "Failure", "Informational"
];
    let SalesforceEventType = dynamic(['Login', 'LoginAs', 'Logout']);
    let EventTypeLookup = datatable(event_type_s: string, EventType: string)
[
    "Login", "Logon",
    "LoginAs", "Logon",
    "Logout", "Logoff"
];
    let DvcOsLookup = datatable
(
    platform_type_s: string,
    DvcOs: string,
    DvcOsVersion: string
)
[
    "1000", "Windows", "",
    "1008", "Windows", "2003",
    "1013", "Windows", "8.1",
    "1015", "Windows", "10",
    "2003", "Macintosh/Apple", "OSX",
    "4000", "Linux", "",
    "5005", "Android", "",
    "5006", "iPhone", "",
    "5007", "iPad", "",
    "5200", "Android", "10.0"
];
    let LogonMethodLookup = datatable
(
    LoginType_s: string,
    LogonMethodOriginal: string,
    LogonMethod: string
)
[
    "7", "AppExchange", "Other",
    "A", "Application", "Other",
    "s", "Certificate-based login", "PKI",
    "k", "Chatter Communities External User", "Other",
    "n", "Chatter Communities External User Third Party SSO", "Other",
    "r", "Employee Login to Community", "Other",
    "z", "Lightning Login", "Username & Password",
    "l", "Networks Portal API Only", "Other",
    "6", "Remote Access Client", "Other",
    "i", "Remote Access 2.0", "Other",
    "I", "Other Apex API", "Other",
    "R", "Partner Product", "Other",
    "w", "Passwordless Login", "Passwordless",
    "3", "Customer Service Portal", "Other",
    "q", "Partner Portal Third-Party SSO", "Other",
    "9", "Partner Portal", "Other",
    "5", "SAML Idp Initiated SSO", "Other",
    "m", "SAML Chatter Communities External User SSO", "Other",
    "b", "SAML Customer Service Portal SSO", "Other",
    "c", "SAML Partner Portal SSO", "Other",
    "h", "SAML Site SSO", "Other",
    "8", "SAML Sfdc Initiated SSO", "Other",
    "E", "SelfService", "Other",
    "j", "Third Party SSO", "Other"
];
    let LogonProtocolLookup = datatable
(
    LoginSubType_s: string,
    LogonProtocolOriginal: string,
    LogonProtocol: string
)
[
    "uiup", "UI Username-Password", "Basic Auth",
    "oauthpassword", "OAuth Username-Password", "OAuth",
    "oauthtoken", "OAuth User-Agent", "OAuth",
    "oauthhybridtoken", "OAuth User-Agent for Hybrid Apps", "OAuth",
    "oauthtokenidtoken", "OAuth User-Agent with ID Token", "OAuth",
    "oauthclientcredential", "OAuth Client Credential", "OAuth",
    "oauthcode", "OAuth Web Server", "OAuth",
    "oauthhybridauthcode", "OAuth Web Server for Hybrid Apps", "OAuth",
];
    let TempEventResultLookup = datatable(request_status_s: string, TempEventResult: string)
[
    "S", "Success",
    "F", "Failure",
    "A", "Failure",
    "R", "Success",
    "N", "Failure",
    "U", "NA"
];
    let UserTypeLookup = datatable(user_type_s: string, TargetUserType: string)
[
    "CsnOnly", "Other",
    "CspLitePortal", "Other",
    "CustomerSuccess", "Other",
    "Guest", "Anonymous",
    "PowerCustomerSuccess", "Other",
    "PowerPartner", "Other",
    "SelfService", "Other",
    "Standard", "Regular",
    "A", "Application",
    "b", "Other",
    "C", "Other",
    "D", "Other",
    "F", "Other",
    "G", "Anonymous",
    "L", "Other",
    "N", "Service",
    "n", "Other",
    "O", "Other",
    "o", "Other",
    "P", "Other",
    "p", "Other",
    "S", "Regular",
    "X", "Admin"
];
    union isfuzzy=true
        SalesforceSchema,
        SalesforceServiceCloud_CL 
    | where not(disabled)
    | extend TimeGenerated = todatetime(tostring(split(timestamp_s, '.', 0)[0]))
    //  -- Pre filtering
    | where 
        (isnull(starttime) or TimeGenerated >= starttime) 
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or (user_name_s has_any (username_has_any)) or (delegated_user_name_s has_any (username_has_any)))
        and ((array_length(targetappname_has_any) == 0) or ('Salesforce Dot Com(SFDC)' in~ (targetappname_has_any)))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(source_ip_s, srcipaddr_has_any_prefix)))
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        // eventtype_in filtering done later in the parser
        // eventresultdetails_in filtering done later in the parser
        // eventresult filtering done later in the parser
        and event_type_s in~ (SalesforceEventType)
    //  -- end pre-filtering
    // mapping ASimMatchingUsername
    | extend
        temp_isMatchTargetUsername=user_name_s has_any(username_has_any)
        ,
        temp_isMatchActorUsername=delegated_user_name_s has_any(username_has_any)
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    | extend LoginType_s = login_type_s, LoginSubType_s = login_sub_type_s
    | lookup EventResultLookup on login_status_s
    // filtering on 'eventresultdetails_in'
    | where (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
    | lookup EventTypeLookup on event_type_s
    // Filtering on eventtype_in
    | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))
    | lookup LogonMethodLookup on LoginType_s
    | lookup LogonProtocolLookup on LoginSubType_s
    | lookup TempEventResultLookup on request_status_s
    | lookup DvcOsLookup on platform_type_s
    | lookup UserTypeLookup on user_type_s
    | project-rename
        EventProductVersion = api_version_s,
        EventOriginalResultDetails = login_status_s,
        TargetUserId = user_id_s,
        SrcIpAddr = source_ip_s,
        EventOriginalUid = request_id_s,
        TlsCipher = cipher_suite_s,
        TlsVersion = tls_protocol_s,
        HttpUserAgent= browser_type_s,
        TargetUserScopeId = organization_id_s,
        TargetUrl = uri_s,
        TargetOriginalUserType = user_type_s,
        ActorUsername = delegated_user_name_s,
        ActorUserId = delegated_user_id_s,
        TargetUsername = user_name_s
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
    | extend
        EventVendor = 'Salesforce',
        EventProduct='Service Cloud',
        EventCount = int(1),
        EventSchema = 'Authentication',
        EventSchemaVersion = '0.1.3',
        TargetAppName = "Salesforce Dot Com(SFDC)",
        TargetAppType = "SaaS application",
        EventUid = _ItemId,
        EventOriginalType=event_type_s,
        SrcIpAddr = coalesce(SrcIpAddr, client_ip_s)
    | extend
        TargetSessionId = coalesce(session_key_s, login_key_s),
        TargetUserScope = "Salesforce Organization",
        TargetUserIdType = iff(isnotempty(TargetUserId), "SaleforceId", ""),
        ActorUserIdType = iff(isnotempty(ActorUserId), "SaleforceId", ""),
        TargetUsernameType = iff(isnotempty(TargetUsername), "UPN", ""),
        ActorUsernameType = iff(isnotempty(ActorUsername), "UPN", ""),
        User = coalesce(TargetUsername, TargetUserId),
        Src = SrcIpAddr,
        IpAddr = SrcIpAddr,
        Dvc = EventProduct,
        EventResult = coalesce(EventResult, TempEventResult),
        Application = TargetAppName,
        EventStartTime = TimeGenerated,
        EventEndTime = TimeGenerated
    // Filtering on 'eventresult'
    | where (eventresult == "*" or (EventResult == eventresult))
    | project-away
        *_s,
        *_t,
        *_g,
        TenantId,
        SourceSystem,
        Computer,
        MG,
        ManagementGroupName,
        Message,
        RawData,
        TempEventResult,
        _ItemId,
        temp*
};
parser (
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationSentinelOne
// Description: This ASIM parser supports normalizing SentinelOne logs to the ASIM Authentication normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationSentinelOne(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let EventResultDetailsLookup = datatable (comments_s: string, EventResultDetails: string)
[
"invalid 2FA code", "Incorrect password",
"IP/User mismatch", "No such user or password",
"invalid password", "Incorrect password",
"user temporarily locked 2FA attempt", "User locked",
"no active site", "Other"
];
let EventFieldsLookup = datatable (
    activityType_d: real,
    EventType: string,
    EventResult: string,
    EventOriginalResultDetails: string
)
    [
    27, "Logon", "Success", "User Logged In",
    33, "Logoff", "Success", "User Logged Out",
    133, "Logon", "Failure", "Existing User Login Failure",
    134, "Logon", "Failure", "Unknown User Login",
    139, "Logon", "Failure", "User Failed to Start an Unrestricted Session",
    3629, "Logon", "Success", "Login Using Saved 2FA Recovery Code"
];
let EventTypeLookup = datatable (alertInfo_eventType_s: string, EventType: string)
    [
    "WINLOGONATTEMPT", "Logon",
    "WINLOGOFFATTEMPT", "Logoff"
];
let EventSubTypeLookup = datatable (alertInfo_loginType_s: string, EventSubType: string)
    [
    "BATCH", "System",
    "CACHED_INTERACTIVE", "Interactive",
    "CACHED_REMOTE_INTERACTIVE", "RemoteInteractive",
    "CACHED_UNLOCK", "System",
    "INTERACTIVE", "Interactive",
    "NETWORK_CLEAR_TEXT", "Remote",
    "NETWORK_CREDENTIALS", "Remote",
    "NETWORK", "Remote",
    "REMOTE_INTERACTIVE", "RemoteInteractive",
    "SERVICE", "Service",
    "SYSTEM", "System",
    "UNLOCK", "System"
];
let DeviceTypeLookup = datatable (
    agentDetectionInfo_machineType_s: string,
    SrcDeviceType: string
)
    [
    "desktop", "Computer",
    "server", "Computer",
    "laptop", "Computer",
    "kubernetes node", "Other",
    "unknown", "Other"
];
let ThreatConfidenceLookup_undefined = datatable(
    alertInfo_analystVerdict_s: string,
    ThreatConfidence_undefined: int
)
    [
    "FALSE_POSITIVE", 5,
    "Undefined", 15,
    "SUSPICIOUS", 25,
    "TRUE_POSITIVE", 33
];
let ThreatConfidenceLookup_suspicious = datatable(
    alertInfo_analystVerdict_s: string,
    ThreatConfidence_suspicious: int
)
    [
    "FALSE_POSITIVE", 40,
    "Undefined", 50,
    "SUSPICIOUS", 60,
    "TRUE_POSITIVE", 67 
];
let ThreatConfidenceLookup_malicious = datatable(
    alertInfo_analystVerdict_s: string,
    ThreatConfidence_malicious: int
)
    [
    "FALSE_POSITIVE", 75,
    "Undefined", 80,
    "SUSPICIOUS", 90,
    "TRUE_POSITIVE", 100
];
let TargetUserTypesList = dynamic(["Regular", "Machine", "Admin", "System", "Application", "Service Principal", "Service", "Anonymous"]);
let parser=(
starttime: datetime=datetime(null), 
endtime: datetime=datetime(null), 
username_has_any: dynamic = dynamic([]),
targetappname_has_any: dynamic = dynamic([]),
srcipaddr_has_any_prefix: dynamic = dynamic([]),
srchostname_has_any: dynamic = dynamic([]),
eventtype_in: dynamic = dynamic([]),
eventresultdetails_in: dynamic = dynamic([]),
eventresult: string = '*',
disabled: bool=false
) {
let alldata = SentinelOne_CL
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or DataFields_s has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(DataFields_s, srcipaddr_has_any_prefix)))
        and ((array_length(srchostname_has_any) == 0) or (alertInfo_loginAccountDomain_s has_any (srchostname_has_any)))
// Filtering for eventtype_in done later in the parser
// Filtering for eventresultdetails_in done later in the parser
// Filtering for eventresult done later in the parser
;
let activitydata = alldata
    | where event_name_s == "Activities."
        and activityType_d in (27, 33, 133, 134, 139, 3629)
    | parse-kv DataFields_s as (ipAddress: string, username: string, userScope: string, accountName: string, fullScopeDetails: string, fullScopeDetailsPath: string, role: string, scopeLevel: string, source: string, sourceType: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
    | lookup EventFieldsLookup on activityType_d
    | lookup EventResultDetailsLookup on comments_s
    // Filtering on eventtype_in, eventresultdetails_in and eventresult
    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails has_any (eventresultdetails_in))
        and (eventresult == '*' or EventResult has eventresult)
    | extend 
        SrcIpAddr = iff(ipAddress == "null", "", ipAddress),
        EventOriginalType = tostring(toint(activityType_d)),
        TargetUsername = username,
        TargetUserScope = userScope,
        AdditionalFields = bag_pack(
                   "accountName",
                   accountName,
                   "fullScopeDetails",
                   fullScopeDetails,
                   "fullScopeDetailsPath",
                   fullScopeDetailsPath,
                   "scopeLevel",
                   scopeLevel,
                   "source",
                   source,
                   "sourceType",
                   sourceType
               ),
        TargetOriginalUserType = role,
        TargetUserType = case(
                 role in (TargetUserTypesList),
                 role,
                 role == "null",
                 "",
                 "Other"
             )
    // Post-filtering on srcipaddr_has_any_prefix and username_has_any
    | where ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
        and ((array_length(username_has_any) == 0) or DataFields_s has_any (username_has_any))
    | project-rename
        EventStartTime = createdAt_t,
        TargetUserId = userId_s,
        EventOriginalUid = activityUuid_g,
        EventMessage = primaryDescription_s
    | extend TargetUserIdType = iff(isnotempty(TargetUserId), "Other", "");
let alertdata = alldata
    | where event_name_s == "Alerts."
        and alertInfo_eventType_s in ("WINLOGONATTEMPT", "WINLOGOFFATTEMPT")
        and array_length(eventresultdetails_in) == 0 // EventResultDetails not available in this event
        and ((array_length(username_has_any) == 0) or alertInfo_loginsUserName_s has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(alertInfo_srcMachineIp_s, srcipaddr_has_any_prefix))
        and ((array_length(srchostname_has_any) == 0) or (alertInfo_loginAccountDomain_s has_any (srchostname_has_any)))
    | lookup EventTypeLookup on alertInfo_eventType_s
    // Filtering on eventtype_in
    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
    | lookup EventSubTypeLookup on alertInfo_loginType_s
    | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s
    | extend EventResult = iff(alertInfo_loginIsSuccessful_s == "true", "Success", "Failure")
    // Filtering on eventresult
    | where (eventresult == '*' or EventResult has eventresult);
let undefineddata = alertdata
    | where ruleInfo_treatAsThreat_s == "UNDEFINED"
    | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;
let suspiciousdata = alertdata
    | where ruleInfo_treatAsThreat_s == "Suspicious"
    | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;
let maliciousdata = alertdata
    | where ruleInfo_treatAsThreat_s == "Malicious"
    | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;
let alertdatawiththreatfield = union undefineddata, suspiciousdata, maliciousdata
    | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')
    | invoke _ASIM_ResolveSrcFQDN('alertInfo_loginAccountDomain_s')
    // Post-filtering on srchostname_has_any
    | where ((array_length(srchostname_has_any) == 0) or (SrcHostname has_any (srchostname_has_any)))
    | extend
        EventSeverity = iff(ruleInfo_severity_s == "Critical", "High", ruleInfo_severity_s),
        ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)
    | project-rename
        EventStartTime = alertInfo_createdAt_t,
        SrcIpAddr = alertInfo_srcMachineIp_s,
        ActingAppName = sourceProcessInfo_name_s,
        DvcId = agentDetectionInfo_uuid_g,
        DvcOs = agentDetectionInfo_osName_s,
        DvcOsVersion = agentDetectionInfo_osRevision_s,
        EventOriginalSeverity = ruleInfo_severity_s,
        EventOriginalType = alertInfo_eventType_s,
        EventOriginalSubType = alertInfo_loginType_s,
        RuleName = ruleInfo_name_s,
        TargetUserId = alertInfo_loginAccountSid_s,
        TargetUsername = alertInfo_loginsUserName_s,
        ThreatOriginalConfidence = ruleInfo_treatAsThreat_s
    | extend
        Rule = RuleName,
        ActingAppType = iff(isnotempty(ActingAppName), "Process", ""),
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        TargetUserType = _ASIM_GetUserType(TargetUsername, TargetUserId),
        TargetUserIdType = iff(isnotempty(TargetUserId), "SID", "");
union activitydata, alertdatawiththreatfield
// mapping ASimMatchingUsername
| extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
// ActorUsername not coming from source. Hence, not mapped.
| extend ASimMatchingUsername = case
    (
                                array_length(username_has_any) == 0,
                                "-",
                                temp_isMatchTargetUsername,
                                "TargetUsername",
                                "No match"
                            )
| extend
    EventCount = int(1),
    EventProduct = "SentinelOne",
    EventSchemaVersion = "0.1.3",
    EventVendor = "SentinelOne",
    EventSchema = "Authentication"
| extend
    Dvc = coalesce(DvcHostname, EventProduct),
    EventEndTime = EventStartTime,
    EventUid = _ItemId,
    User = TargetUsername
| extend
    IpAddr = SrcIpAddr,
    Src = SrcIpAddr
| project-away
    *_b,
    *_d,
    *_g,
    *_s,
    *_t,
    ipAddress,
    username,
    accountName,
    fullScopeDetails,
    fullScopeDetailsPath,
    role,
    scopeLevel,
    source,
    sourceType,
    userScope,
    Computer,
    MG,
    ManagementGroupName,
    RawData,
    SourceSystem,
    TenantId,
    _ItemId,
    _ResourceId,
    ThreatConfidence_*
};
parser(
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationSshd
// Description: This ASIM parser supports filtering and normalizing OpenSSH server (sshd) sign in logs, collected using Syslog to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationSshd(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false
  )
{
    let prefilter = (T: (SyslogMessage: string, TimeGenerated: datetime))
{
    T
        | where 
            (isnull(starttime) or TimeGenerated >= starttime) 
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
            and ((array_length(targetappname_has_any) == 0) or 'sshd' in~ (targetappname_has_any))
            and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SyslogMessage, srcipaddr_has_any_prefix)))
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in) or "Logoff" in~ (eventtype_in))
// eventresultdetails_in filtering done later in the parser
// eventresult filtering done later in the parser
};
    let SyslogProjects = Syslog
        | project
            TimeGenerated,
            Computer,
            SyslogMessage,
            ProcessName,
            ProcessID,
            HostIP,
            Type,
            _ItemId,
            _ResourceId,
            _SubscriptionId;
    //
    // -- Successful login
    let SSHDAccepted=(disabled: bool=false)
{ 
    // -- Parse events with the format "Accepted password for <User> from <IP address> port <port> ssh2"
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith 'Accepted'
        | invoke prefilter()
        | parse SyslogMessage with "Accepted password for " TargetUsername: string " from " SrcIpAddr: string " port" SrcPortNumber: int *
        | extend
            EventResult     = 'Success'
            ,
            EventSeverity = 'Informational'
            ,
            EventType     = 'Logon'
            ,
            EventCount    = int(1)
        | project-away SyslogMessage, ProcessName
};
    //
    // -- Failed login - incorrect password
    let SSHDFailed=(disabled: bool=false)
{
    // -- Parse events with the format Failed (password|none|publickey) for <User> from <IP address> port <port> ssh2[: RSA <cipher>:<key>]"
    // -- Or a number of such events message repeated <n> times: [ <message> ]
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and (
            SyslogMessage startswith 'Failed' 
            or (SyslogMessage startswith 'message repeated' and SyslogMessage has 'Failed')
            )
        | invoke prefilter()
        | parse SyslogMessage with * "Failed " * " for " TargetUsername: string " from " SrcIpAddr: string " port" SrcPortNumber: int *
        | parse SyslogMessage with "message repeated" EventCount: int " times:" * 
        | extend
            EventResult          = 'Failure'
            ,
            EventSeverity      = 'Low' 
            ,
            EventType          = 'Logon'
            ,
            LogonMethod        = iff (SyslogMessage has 'publickey', 'PKI', 'Username & password')
            ,
            EventResultDetails = iff (SyslogMessage has 'publickey', 'Incorrect key', 'Incorrect password')
            ,
            EventCount         = toint(coalesce(EventCount, 1))
        | project-away SyslogMessage, ProcessName
};
    //
    // -- Logoff - Timeout
    let SSHDTimeout=(disabled: bool=false)
{
    // -- Parse events with the format "Timeout, client not responding from user yanivsh 131.107.174.198 port 7623"
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith 'Timeout'
        | invoke prefilter()
        | parse-where SyslogMessage with * "user " TargetUsername: string " " SrcIpAddr: string " port " SrcPortNumber: int
        | extend
            EventSeverity    = 'Informational'
            ,
            EventType      = 'Logoff'
            ,
            EventResult    = 'Success'
            ,
            EventCount     = int(1)
        | project-away SyslogMessage, ProcessName
};
    //
    // -- Failed login - invalid user
    let SSHDInvalidUser=(disabled: bool=false)
{
    // -- Parse events with the format "Invalid user [<User>] from <IP address> port <port>"
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith 'Invalid user'
        | invoke prefilter()
        | parse SyslogMessage with "Invalid user " TargetUsername: string " from " SrcIpAddr: string " port " SrcPortNumber: int
        | parse SyslogMessage with "Invalid user  from " SrcIpAddrNoUser: string " port " SrcPortNumberNoUser: int
        | extend
            EventResult             = 'Failure'
            ,
            EventSeverity         = 'Low'
            ,
            EventType             = 'Logon'
            ,
            EventResultDetails    = 'No such user'
            ,
            EventCount            = int(1)
            ,
            SrcIpAddr             = coalesce(SrcIpAddr, SrcIpAddrNoUser)
            ,
            SrcPortNumber         = coalesce(SrcPortNumber, SrcPortNumberNoUser)
        | project-away SyslogMessage, ProcessName, SrcIpAddrNoUser, SrcPortNumberNoUser
};
    //
    // -- Blocked intrusion attempts
    let SSHDABreakInAttemptMappingFailed=(disabled: bool=false)
{
    // -- Parse events with the format "reverse mapping checking getaddrinfo for <host> [<Ip address>] failed - POSSIBLE BREAK-IN ATTEMPT!"
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith "reverse mapping checking getaddrinfo for"
        | invoke prefilter()
        | parse SyslogMessage with * " for " Src " [" SrcIpAddr "]" *
        | invoke _ASIM_ResolveSrcFQDN ('Src')
        | extend
            EventResult             = 'Failure'
            ,
            EventType             = 'Logon'
            ,
            DvcAction             = 'Block'
            ,
            TargetUsername        = ''
            ,
            EventSeverity         = 'Medium'
            ,
            EventCount            = int(1)
            ,
            EventResultDetails    = 'Logon violates policy'
            ,
            RuleName              = "Reverse mapping failed"
        | extend
            Rule = RuleName
        | project-away SyslogMessage, ProcessName, Src
};
    let SSHDABreakInAttemptMappingMismatch=(disabled: bool=false)
{
    // -- Parse events with the format "Address 61.70.128.48 maps to host-61-70-128-48.static.kbtelecom.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!"
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage has "but this does not map back to the address"
        | invoke prefilter()
        | parse SyslogMessage with "Address " SrcIpAddr: string " maps to " Src: string ", but this" *
        | invoke _ASIM_ResolveSrcFQDN ('Src')
        | extend
            EventResult          = 'Failure'
            ,
            EventType          = 'Logon'
            ,
            DvcAction          = 'Block'
            ,
            TargetUsername     = ''
            ,
            EventSeverity      = 'Medium'
            ,
            EventCount         = int(1)
            ,
            EventResultDetails = 'Logon violates policy'
            ,
            RuleName = "Address to host to address mapping does not map back to address"
        | extend
            Rule = RuleName
        | project-away SyslogMessage, ProcessName, Src
};
    let SSHDABreakInAttemptNastyPtr=(disabled: bool=false)
{
    // -- Parse events with the format "Nasty PTR record "<RR>" is set up for <IP Address>, ignoring"
    SyslogProjects
        | where not(disabled)
        | where ProcessName == "sshd" and SyslogMessage startswith "Nasty PTR record"
        | invoke prefilter()
        | parse SyslogMessage with * "set up for " SrcIpAddr: string ", ignoring"
        | extend
            EventResult          = 'Failure'
            ,
            EventType          = 'Logon'
            ,
            DvcAction          = 'Block'
            ,
            TargetUsername     = ''
            ,
            EventSeverity      = 'Medium'
            ,
            EventCount         = int(1)
            ,
            EventResultDetails = 'Logon violates policy'
            ,
            RuleName = "Nasty PTR record set for IP Address"
        | extend
            Rule = RuleName
        | project-away SyslogMessage, ProcessName
};
    union isfuzzy=false 
        SSHDAccepted (disabled=disabled)
        ,
        SSHDFailed (disabled=disabled)
        ,
        SSHDInvalidUser (disabled=disabled)
        ,
        SSHDTimeout (disabled=disabled)
        ,
        SSHDABreakInAttemptMappingFailed (disabled=disabled)
        ,
        SSHDABreakInAttemptMappingMismatch (disabled=disabled)
        ,
        SSHDABreakInAttemptNastyPtr (disabled=disabled)
    // Post-filtering
    | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
        and ((array_length(srcipaddr_has_any_prefix) == 0) or (has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)))
        and ((array_length(eventtype_in) == 0) or EventType in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or EventResultDetails in~ (eventresultdetails_in))
        and (eventresult == "*" or (EventResult == eventresult))
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | invoke _ASIM_ResolveDvcFQDN ('Computer')
    | extend 
        EventVendor             = 'OpenBSD'
        ,
        EventProduct          = 'OpenSSH'
        ,
        DvcOs                 = 'Linux'
        ,
        TargetDvcOs           = 'Linux'
        ,
        LogonProtocol         = 'ssh'
        ,
        TargetAppName         = 'sshd'
        ,
        TargetAppType         = 'Service'
        ,
        EventSubType          = 'Remote'
        ,
        EventSchema           = 'Authentication'
        ,
        EventSchemaVersion    = '0.1.2'
        ,
        EventStartTime        = TimeGenerated
        ,
        EventEndTime          = TimeGenerated
        ,
        TargetUsernameType    = 'Simple'
        ,
        DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", "")
        ,
        TargetAppId           = tostring(ProcessID)
    | project-away Computer, ProcessID, temp*
    | project-rename 
        EventUid                = _ItemId
        ,
        DvcScopeId            = _SubscriptionId
        ,
        DvcId                 = _ResourceId
        ,
        DvcIpAddr             = HostIP
    //
    // -- Aliases
    | extend
        User                    = TargetUsername
        ,
        Dvc                   = DvcHostname
        ,
        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)
        ,
        TargetDomain          = DvcDomain
        ,
        TargetFQDN            = DvcFQDN
        ,
        TargetDomainType      = DvcDomainType
        ,
        TargetHostname        = DvcHostname
        ,
        TargetDvcId           = DvcId
        ,
        TargetDvcScopeId      = DvcScopeId
        ,
        TargetDvcIdType       = DvcDomainType
        ,
        IpAddr                = DvcIpAddr
        ,
        TargetIpAddr          = DvcIpAddr
};
  parser
  (
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationSu
// Description: This ASIM parser supports filtering and normalizing Linux su elevation commands collected using Syslog to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationSu(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false
  )
{
    let prefilter = (T: (SyslogMessage: string, TimeGenerated: datetime))
{
    T
        | where 
            (isnull(starttime) or TimeGenerated >= starttime) 
            and (isnull(endtime) or TimeGenerated <= endtime)
            and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
            and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
            and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
            and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
            and ((array_length(eventtype_in) == 0) or ('Logoff' in~ (eventtype_in)) or ('Elevation' in~ (eventtype_in)))
            and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
            and (eventresult == "*" or (eventresult == "Success"))
};
    let SyslogProjects = Syslog
        | project
            TimeGenerated,
            Computer,
            SyslogMessage,
            ProcessName,
            ProcessID,
            HostIP,
            Type,
            _ItemId,
            _ResourceId,
            _SubscriptionId;
    //
    // -- Sucessful SU
    // Parses the event "Successful su for <user> by <user>"
    let SuSignInAuthorized=(disabled: bool=false)
{
    SyslogProjects 
        | where not(disabled)
        | where ProcessName == "su" and SyslogMessage startswith "Successful su for"
        | invoke prefilter()
        | parse SyslogMessage with * "for " TargetUsername: string " by " ActorUsername: string
        | extend
            EventType = 'Elevation'
        | project-away SyslogMessage, ProcessName
};
    // 
    // -- SU end
    // Parsers the event "pam_unix(su[-l]:session): session closed for user <user>"
    let SuDisconnect=(disabled: bool=false)
{
    SyslogProjects 
        | where not(disabled)
        | where ProcessName == "su" and SyslogMessage has_all ('pam_unix(su', 'session): session closed for user')
        | invoke prefilter()
        | parse SyslogMessage with * "for user " TargetUsername: string
        | extend
            EventType = 'Logoff'
        | project-away SyslogMessage, ProcessName
};
    union isfuzzy=false 
        SuSignInAuthorized (disabled = disabled)
        ,
        SuDisconnect(disabled = disabled)
    // Post-filtering
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
        and (array_length(eventtype_in) == 0 or EventType in~ (eventtype_in))
    // mapping ASimMatchingUsername
    | extend
        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        ,
        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
    | extend ASimMatchingUsername = case
                                (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    | invoke _ASIM_ResolveDvcFQDN ('Computer')
    | extend
        EventVendor             = 'Linux'
        ,
        EventProduct          = 'su'
        ,
        DvcOs                 = 'Linux'
        ,
        TargetDvcOs           = 'Linux'
        ,
        EventCount            = int(1)
        ,
        EventSchema           = 'Authentication'
        ,
        EventSchemaVersion    = '0.1.2'
        ,
        EventResult           = 'Success'
        ,
        EventStartTime        = TimeGenerated
        ,
        EventEndTime          = TimeGenerated
        ,
        ActorUsernameType     = 'Simple'
        ,
        TargetUsernameType    = 'Simple'
        ,
        EventSeverity         = 'Informational'
        ,
        ActingAppType         = 'Process'
        ,
        DvcIdType             = iff (isnotempty(_ResourceId), "AzureResourceId", "")
        ,
        ActingAppId           = tostring(ProcessID)
    | project-away Computer, ProcessID, temp*
    | project-rename 
        EventUid                = _ItemId
        ,
        DvcScopeId            = _SubscriptionId
        ,
        DvcId                 = _ResourceId
        ,
        DvcIpAddr             = HostIP
    //
    // -- Aliases
    | extend
        User                    = TargetUsername
        ,
        Dvc                   = DvcHostname
        ,
        Dst                   = coalesce (DvcFQDN, DvcHostname, DvcIpAddr)
        ,
        TargetDomain          = DvcDomain
        ,
        TargetFQDN            = DvcFQDN
        ,
        TargetDomainType      = DvcDomainType
        ,
        TargetHostname        = DvcHostname
        ,
        TargetDvcId           = DvcId
        ,
        TargetDvcScopeId      = DvcScopeId
        ,
        TargetDvcIdType       = DvcDomainType
        ,
        IpAddr                = DvcIpAddr
        ,
        TargetIpAddr          = DvcIpAddr
};
parser (
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationSudo
// Description: This ASIM parser supports normalizing Syslog sudo sign in logs to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationSudo(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let SudoSignInAuthorized=(
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false
  ) {
  Syslog 
  | where not(disabled)
  | where ProcessName == "sudo" and 
      SyslogMessage has 'TTY=' and 
      SyslogMessage has 'USER=' and
      SyslogMessage has 'COMMAND='
      and (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
      and ((array_length(srcipaddr_has_any_prefix) == 0)) // SrcIpAddr not available in source
      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
      and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
      and (array_length(eventresultdetails_in) == 0 or 'Other' in~ (eventresultdetails_in))
      and (eventresult == "*" or ('Success' == eventresult))
  | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with (pair_delimiter=' ', kv_delimiter='=')
  | project-rename TargetUsername = USER
  | extend
      EventVendor                 = 'Linux',
      EventProduct                = 'sudo',
      EventCount                  = int(1),
      EventSchema                 = 'Authentication',
      EventSchemaVersion          = '0.1.1',
      EventResult                 = 'Success',
      EventStartTime              = TimeGenerated,
      EventEndTime                = TimeGenerated,
      EventType                   = 'Logon',
      DvcHostname                 = Computer,
      ActorUsernameType           = 'Simple',
      ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),
      TargetUsernameType          = 'Simple',
      EventResultDetails          = 'Other',
      EventOriginalRestultDetails = 'Connection authorized'
  // Post-filtering on username_has_any
  | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
  // mapping ASimMatchingUsername
  | extend
      temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
      ,
      temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
  | extend ASimMatchingUsername = case
      (
                                  array_length(username_has_any) == 0,
                                  "-",
                                  temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                  "Both",
                                  temp_isMatchTargetUsername,
                                  "TargetUsername",
                                  temp_isMatchActorUsername,
                                  "ActorUsername",
                                  "No match"
                              )
  // ************************
  //      <Aliases>
  // ************************
  | extend
      User  = TargetUsername,
      Dvc   = Computer
  // ************************
  //      </Aliases>
  // ************************
  | project-away Computer, MG, SourceSystem, TenantId, temp_*
};
let SudoAuthFailure1=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    Syslog
    | where not(disabled)
    | where ProcessName == "sudo" and (SyslogMessage has 'user NOT in sudoers' or SyslogMessage has 'incorrect password attempts')
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0)) // SrcIpAddr not available in source
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and ((array_length(eventtype_in) == 0) or "Logon" in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or 'No such user or password' in~ (eventresultdetails_in))
        and (eventresult == "*" or ('Failure' == eventresult))
    | parse-kv SyslogMessage as (TTY: string, PWD: string, USER: string, COMMAND: string) with  (pair_delimiter=' ', kv_delimiter='=')
    | project-rename 
        EventUid       = _ItemId,
        TargetUsername = USER
    | extend
        ActorUsername               = extract(@'^(.*?):', 1, SyslogMessage),
        ActorUsernameType           = 'Simple',
        DvcHostname                 = Computer,
        EventCount                  = int(1),
        EventEndTime                = TimeGenerated,
        EventOriginalRestultDetails = 'User authentication failed',
        EventProduct                = 'sudo',
        EventResult                 = 'Failure',
        EventResultDetails          = 'No such user or password',
        EventSchema                 = 'Authentication',
        EventSchemaVersion          = '0.1.1',
        EventStartTime              = TimeGenerated,
        EventType                   = 'Logon',
        EventVendor                 = 'Linux',
        TargetUsernameType          = 'Simple'
    // Post-filtering on username_has_any
    | where ((array_length(username_has_any) == 0) or (TargetUsername has_any (username_has_any)) or (ActorUsername has_any (username_has_any)))
    // mapping ASimMatchingUsername
    | extend
        temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
        ,
        temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername and temp_isMatchActorUsername,
                                    "Both",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    | project-away Computer, MG, SourceSystem, TenantId, temp_*
};
let SudoDisconnect=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    Syslog 
    | where not(disabled)
    | where ProcessName == "sudo"
        and SyslogMessage has 'session closed for user '
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and ((array_length(username_has_any) == 0) or SyslogMessage has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and ((array_length(srcipaddr_has_any_prefix) == 0)) // SrcIpAddr not available in source
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and ((array_length(eventtype_in) == 0) or "Logoff" in~ (eventtype_in))
        and (array_length(eventresultdetails_in) == 0 or 'Other' in~ (eventresultdetails_in))
        and (eventresult == "*" or ('Success' == eventresult))
    | parse SyslogMessage with * "for user " TargetUsername: string
    // Post-filtering on username_has_any
    | where ((array_length(username_has_any) == 0) or TargetUsername has_any (username_has_any))
    // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
    | extend
        DvcHostname                 = Computer,
        EventCount                  = int(1),
        EventEndTime                = TimeGenerated,
        EventOriginalRestultDetails = 'User session closed',
        EventProduct                = 'sudo',
        EventResult                 = 'Success',
        EventResultDetails          = 'Other',
        EventSchema                 = 'Authentication',
        EventSchemaVersion          = '0.1.1',
        EventStartTime              = TimeGenerated,
        EventType                   = 'Logoff',
        EventVendor                 = 'Linux',
        TargetUsernameType          = 'Simple'
    // ************************
    //      <Aliases>
    // ************************
    | extend
        Dvc   = Computer,
        User  = TargetUsername
    // ************************
    //      </Aliases>
    // ************************
    | project-away Computer, MG, SourceSystem, TenantId, temp_*
};
union isfuzzy=false 
  SudoSignInAuthorized(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled), 
  SudoAuthFailure1(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled), 
  SudoDisconnect(starttime=starttime, endtime=endtime, username_has_any=username_has_any, targetappname_has_any=targetappname_has_any, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, srchostname_has_any=srchostname_has_any, eventtype_in=eventtype_in, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimAuthenticationVectraXDRAudit
// Description: This ASIM parser supports filtering and normalizing Vectra XDR Audit Logs Event in the Audits_Data_CL table to the ASIM Authentication schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationVectraXDRAudit(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    username_has_any: dynamic = dynamic([]),
    targetappname_has_any: dynamic = dynamic([]),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    srchostname_has_any: dynamic = dynamic([]),
    eventtype_in: dynamic = dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string = '*',
    disabled: bool=false
    ) {
    Audits_Data_CL
    | where not(disabled)
        and event_action_s in ("login", "logout")
        and (isnull(starttime) or event_timestamp_t >= starttime)
        and (isnull(endtime) or event_timestamp_t <= endtime)
        and ((array_length(username_has_any) == 0) or username_s has_any (username_has_any))
        and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
        and (array_length(srcipaddr_has_any_prefix) == 0) // SrcIpAddr not available in source
        and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
        and ((array_length(eventtype_in) == 0) or ("Logon" in~ (eventtype_in)) or ("Logoff" in~ (eventtype_in)))
        and (array_length(eventresultdetails_in) == 0) // EventResultDetails not available in source
    // eventresult filtering done later in the parser
    | extend
        EventCount = int(1),
        EventEndTime = event_timestamp_t,
        EventProduct = 'Vectra XDR',
        EventResult = case(result_status_s == "success", "Success", result_status_s == "failure", "Failure", "NA"),
        EventSchema = "Authentication",
        EventSchemaVersion = "0.1.3",
        EventStartTime = event_timestamp_t,
        EventType = case(event_action_s == "login", "Logon", event_action_s == "logout", "Logoff", ""),
        EventVendor = 'Vectra',
        ActorUserId = tostring(toint(user_id_d)),
        ActorUserIdType = "VectraUserId",
        ActorUsernameType = "UPN",
        EventUid = tostring(toint(id_d))
    // Post-filtering on eventtype_in and eventresult
    | where ((array_length(eventtype_in) == 0) or (EventType in~ (eventtype_in)))
        and ((eventresult == "*") or (EventResult == eventresult))
    | project-rename
        DvcIpAddr = source_ip_s,
        ActorOriginalUserType = user_type_s,
        ActorUsername = username_s,
        EventMessage = Message,
        EventProductVersion = version_s
    // mapping ASimMatchingUsername
    | extend temp_isMatchActorUsername=ActorUsername has_any(username_has_any)
    // TargetUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchActorUsername,
                                    "ActorUsername",
                                    "No match"
                                )
    | extend
        User = ActorUsername,
        Dvc = DvcIpAddr
    | project-away
        *_d,
        *_s,
        event_timestamp_t,
        api_client_id_g,
        TenantId,
        _ResourceId,
        RawData,
        SourceSystem,
        Computer,
        MG,
        ManagementGroupName
};
parser (
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



//
// Function Name: vimAuthenticationVMwareCarbonBlackCloud
// Description: This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Authentication normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuthenticationVMwareCarbonBlackCloud(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['username_has_any']:dynamic=dynamic([]),
    ['targetappname_has_any']:dynamic=dynamic([]),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['srchostname_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=False)
{
let parser = (
  starttime: datetime=datetime(null), 
  endtime: datetime=datetime(null), 
  username_has_any: dynamic = dynamic([]),
  targetappname_has_any: dynamic = dynamic([]),
  srcipaddr_has_any_prefix: dynamic = dynamic([]),
  srchostname_has_any: dynamic = dynamic([]),
  eventtype_in: dynamic = dynamic([]),
  eventresultdetails_in: dynamic = dynamic([]),
  eventresult: string = '*',
  disabled: bool=false
  ) {
  CarbonBlackAuditLogs_CL
  | where not(disabled)
  | where (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (description_s has_any ("logged in", "login", "second factor authentication") and description_s !has "connector")
      and ((array_length(username_has_any) == 0) or (loginName_s has_any (username_has_any)))
      and (array_length(targetappname_has_any) == 0) // TargetAppName not available in source
      and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(clientIp_s, srcipaddr_has_any_prefix))
      and (array_length(srchostname_has_any) == 0) // SrcHostname not available in source
      and (array_length(eventtype_in) == 0 or 'Logon' has_any (eventtype_in))
  // Filtering for eventresultdetails_in done later in the parser
  // Filtering for eventresult done later in the parser
  | extend
      EventResult = iff(description_s has "successfully", "Success", "Failure"),
      EventType = "Logon"
  | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
      and (eventresult == '*' or EventResult has eventresult)
  | extend EventResultDetails = case(
                                EventResult == "Failure" and description_s has ("locked"),
                                "User locked",
                                EventResult == "Failure" and description_s has_any ("logged in", "login"),
                                "Incorrect password",
                                EventResult == "Failure" and description_s has ("second factor authentication"),
                                "MFA not satisfied",
                                ""
                            )
  // Filtering on eventresultdetails_in
  | where (array_length(eventresultdetails_in) == 0 or EventResultDetails has_any (eventresultdetails_in))
  | extend
      EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),
      AdditionalFields = bag_pack("flagged", flagged_b),
      EventSeverity = iff(flagged_b == true, "Low", "Informational"),
      EventCount = int(1),
      EventProduct = "Carbon Black Cloud",
      EventSchema = "Authentication",
      EventSchemaVersion = "0.1.3",
      EventVendor = "VMware",
      EventOriginalResultDetails = iff(EventResult == "Failure", tostring(split(description_s, ';')[1]), "")
  | project-rename
      EventMessage = description_s,
      EventOriginalUid = eventId_g,
      TargetUsername = loginName_s,
      SrcIpAddr = clientIp_s,
      EventUid=_ItemId,
      EventOwner = orgName_s
  | extend
      IpAddr = SrcIpAddr,
      TargetUsernameType = _ASIM_GetUsernameType(TargetUsername),
      TargetUserType = _ASIM_GetUserType(TargetUsername, ""),
      Dvc = EventProduct,
      EventEndTime = EventStartTime,
      User = TargetUsername,
      Src = SrcIpAddr
  // mapping ASimMatchingUsername
    | extend temp_isMatchTargetUsername=TargetUsername has_any(username_has_any)
    // ActorUsername not coming from source. Hence, not mapped.
    | extend ASimMatchingUsername = case
        (
                                    array_length(username_has_any) == 0,
                                    "-",
                                    temp_isMatchTargetUsername,
                                    "TargetUsername",
                                    "No match"
                                )
  | project-away
      *_s,
      *_d,
      *_b,
      _ResourceId,
      Computer,
      MG,
      ManagementGroupName,
      RawData,
      SourceSystem,
      TenantId,
      temp_*
};
parser(
  starttime=starttime,
  endtime=endtime,
  username_has_any=username_has_any,
  targetappname_has_any=targetappname_has_any,
  srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
  srchostname_has_any=srchostname_has_any,
  eventtype_in=eventtype_in,
  eventresultdetails_in=eventresultdetails_in,
  eventresult=eventresult,
  disabled=disabled
)
}



