
// Log Analytics Dependency Function

.create-or-alter function with (skipvalidation=true) _GetWatchlist(
    ['watchlistAlias']:string,
    ['keys']:dynamic=dynamic([])
)
{
    let function = (watchlists:string, keys:dynamic = dynamic([])) {
        Watchlist
        | where TimeGenerated < now()
        | where _DTItemType == 'watchlist-item'
        | where WatchlistAlias in (watchlists)
        | where array_length(keys) == 0 or SearchKey in (keys)
        | summarize hint.shufflekey=_DTItemId arg_max(_DTTimestamp, _DTItemStatus, LastUpdatedTimeUTC, SearchKey, WatchlistItem) by _DTItemId
        | where _DTItemStatus != 'Delete'
        | project-away _DTTimestamp, _DTItemStatus
    };
    function(watchlistAlias, keys)
}




//
// Function Name: ASIM_Enrich_IdentityInfo
// Description: This ASIM tabular function enabled enriching your result set with user information from the [UEBA IdentityInfo table](https://learn.microsoft.com/azure/sentinel/ueba-reference#identityinfo-table). For more information on how to use this enrichment function refer to [ASIM functions](https://learn.microsoft.com/azure/sentinel/normalization-functions).
  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_Enrich_IdentityInfo(    ['T']:(*),
    ['AadIdField']:string='',
    ['TenantIdField']:string='',
    ['SidField']:string='',
    ['UpnField']:string='',
    ['EmailField']:string='')
{
let AADinfo = 
    IdentityInfo
    | where TimeGenerated > ago(14d)
    | where AccountObjectId != ""
    | project-away AccountName, AccountDomain, GivenName, Surname, Type, TenantId, OnPremisesExtensionAttributes, UserState, UserStateChangedOn, SourceSystem
    | project-away InvestigationPriority, InvestigationPriorityPercentile, ExtensionProperty, AccountCloudSID, Applications, ServicePrincipals
    | summarize arg_max(TimeGenerated, *) by UserScopeId = AccountTenantId, UserId = AccountObjectId
    | project-away TimeGenerated
    | project-rename
        Username = AccountUPN,
        UserDisplayName = AccountDisplayName,
        UserSid = AccountSID,
        UserDN = OnPremisesDistinguishedName,
        UserTags = Tags,
        UserRiskLevel = RiskLevel,
        UserRiskLevelDetails = RiskLevelDetails,
        UserRiskState = RiskState, 
        UserBlastRadius = BlastRadius,
        UserGroupMembership = GroupMembership,
        UserAssignedRoles = AssignedRoles,
        UserDepartment = Department,
        UserEmployeeId = EmployeeId,
        UserJobTitle = JobTitle,
        UserMailAddress = MailAddress,
        UserAdditionalMailAddresses = AdditionalMailAddresses,
        UserManager = Manager,
        UserStreetAddress = StreetAddress,
        UserCity = City,
        UserCountry = Country,
        UserRegion = State,
        UserPhone = Phone,
        UserAccountEnabled = IsAccountEnabled,
        UserAccountCreationTime = AccountCreationTime,
        RelatedUsers = RelatedAccounts,
        UserDeleted = DeletedDateTime,
        UserLastSeen = LastSeenDate,
        UserUACFlags = UACFlags,
        UserIsMFARegistered = IsMFARegistered,
        UserRiskScore = EntityRiskScore
    | extend 
        UsernameType = "UPN",
        UserIdType = "AadId",
        UserType = iff(UserType == "Guest", UserType, ""),
        UserUpn = Username
;
T 
| extend
    jkUserId = column_ifexists(AadIdField,''),
    jkUserScopeId = column_ifexists(TenantIdField,''), 
    jkUserSid = column_ifexists(SidField,''), 
    jkUsername = column_ifexists(UpnField,''), 
    jkUserMailAddress = column_ifexists(EmailField,'')
| extend 
    jkUserAadFullId = iff (isnotempty(jkUserScopeId), strcat(jkUserScopeId, '/', jkUserId), jkUserId)
| extend
    join_key = coalesce (jkUserAadFullId, jkUserSid, jkUsername, jkUserMailAddress)
| lookup ( 
    AADinfo 
    | extend join_key = case ( 
        isnotempty(TenantIdField), strcat(UserScopeId, '/', UserId), 
        isnotempty(AadIdField), UserId,
        isnotempty(SidField), UserSid,
        isnotempty(UpnField), UserUpn,            
        isnotempty(EmailField), UserMailAddress,
        ''
    )
) on join_key
| project-away jkUserId, jkUserAadFullId, jkUserMailAddress, jkUsername, jkUserScopeId, jkUserSid, join_key
}



//
// Function Name: _ASIM_Enrich_IdentityInfo
// Description: This ASIM tabular function enabled enriching your result set with user information from the [UEBA IdentityInfo table](https://learn.microsoft.com/azure/sentinel/ueba-reference#identityinfo-table). For more information on how to use this enrichment function refer to [ASIM functions](https://learn.microsoft.com/azure/sentinel/normalization-functions).
  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_Enrich_IdentityInfo(    ['T']:(*),
    ['AadIdField']:string='',
    ['TenantIdField']:string='',
    ['SidField']:string='',
    ['UpnField']:string='',
    ['EmailField']:string='')
{
let AADinfo = 
    IdentityInfo
    | where TimeGenerated > ago(14d)
    | where AccountObjectId != ""
    | project-away AccountName, AccountDomain, GivenName, Surname, Type, TenantId, OnPremisesExtensionAttributes, UserState, UserStateChangedOn, SourceSystem
    | project-away InvestigationPriority, InvestigationPriorityPercentile, ExtensionProperty, AccountCloudSID, Applications, ServicePrincipals
    | summarize arg_max(TimeGenerated, *) by UserScopeId = AccountTenantId, UserId = AccountObjectId
    | project-away TimeGenerated
    | project-rename
        Username = AccountUPN,
        UserDisplayName = AccountDisplayName,
        UserSid = AccountSID,
        UserDN = OnPremisesDistinguishedName,
        UserTags = Tags,
        UserRiskLevel = RiskLevel,
        UserRiskLevelDetails = RiskLevelDetails,
        UserRiskState = RiskState, 
        UserBlastRadius = BlastRadius,
        UserGroupMembership = GroupMembership,
        UserAssignedRoles = AssignedRoles,
        UserDepartment = Department,
        UserEmployeeId = EmployeeId,
        UserJobTitle = JobTitle,
        UserMailAddress = MailAddress,
        UserAdditionalMailAddresses = AdditionalMailAddresses,
        UserManager = Manager,
        UserStreetAddress = StreetAddress,
        UserCity = City,
        UserCountry = Country,
        UserRegion = State,
        UserPhone = Phone,
        UserAccountEnabled = IsAccountEnabled,
        UserAccountCreationTime = AccountCreationTime,
        RelatedUsers = RelatedAccounts,
        UserDeleted = DeletedDateTime,
        UserLastSeen = LastSeenDate,
        UserUACFlags = UACFlags,
        UserIsMFARegistered = IsMFARegistered,
        UserRiskScore = EntityRiskScore
    | extend 
        UsernameType = "UPN",
        UserIdType = "AadId",
        UserType = iff(UserType == "Guest", UserType, ""),
        UserUpn = Username
;
T 
| extend
    jkUserId = column_ifexists(AadIdField,''),
    jkUserScopeId = column_ifexists(TenantIdField,''), 
    jkUserSid = column_ifexists(SidField,''), 
    jkUsername = column_ifexists(UpnField,''), 
    jkUserMailAddress = column_ifexists(EmailField,'')
| extend 
    jkUserAadFullId = iff (isnotempty(jkUserScopeId), strcat(jkUserScopeId, '/', jkUserId), jkUserId)
| extend
    join_key = coalesce (jkUserAadFullId, jkUserSid, jkUsername, jkUserMailAddress)
| lookup ( 
    AADinfo 
    | extend join_key = case ( 
        isnotempty(TenantIdField), strcat(UserScopeId, '/', UserId), 
        isnotempty(AadIdField), UserId,
        isnotempty(SidField), UserSid,
        isnotempty(UpnField), UserUpn,            
        isnotempty(EmailField), UserMailAddress,
        ''
    )
) on join_key
| project-away jkUserId, jkUserAadFullId, jkUserMailAddress, jkUsername, jkUserScopeId, jkUserSid, join_key
}



//
// Function Name: ASIM_GetDisabledParsers
// Description: This ASIM function reads the ASimDisabledParsers watchlist and determined based on it if the the parser provided as parameter is disabled.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetDisabledParsers(    ['CallerContext']:string)
{
let function = (CallerContext:string) {
  ASIM_GetWatchlistRaw ('ASimDisabledParsers', pack_array('Any',CallerContext))
  | extend SourceSpecificParser = tostring(WatchlistItem.SourceSpecificParser)
  | where isnotempty(SourceSpecificParser)
  | distinct SourceSpecificParser 
};
function (CallerContext)
}



//
// Function Name: _ASIM_GetDisabledParsers
// Description: This ASIM function reads the ASimDisabledParsers watchlist and determined based on it if the the parser provided as parameter is disabled.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetDisabledParsers(    ['CallerContext']:string)
{
let function = (CallerContext:string) {
  ASIM_GetWatchlistRaw ('ASimDisabledParsers', pack_array('Any',CallerContext))
  | extend SourceSpecificParser = tostring(WatchlistItem.SourceSpecificParser)
  | where isnotempty(SourceSpecificParser)
  | distinct SourceSpecificParser 
};
function (CallerContext)
}



//
// Function Name: ASIM_GetSourceBySourceType
// Description: This ASIM function reads the ASimSourceType watchlist. It is more performant than using the general _GetWatchlist function.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetSourceBySourceType(    ['SourceType']:string)
{
let function = (SourceType:string) {
  let Sources_by_SourceType=(SourceType:string) {
    ASIM_GetWatchlistsRaw (dynamic(['ASimSourceType','Sources_by_SourceType']), SourceType)
    | extend Source = tostring(WatchlistItem.Source) 
    | where isnotempty(Source)
    | summarize make_set(Source)
  };
  toscalar (Sources_by_SourceType(SourceType))
};
function (SourceType)
}



//
// Function Name: _ASIM_GetSourceBySourceType
// Description: This ASIM function reads the ASimSourceType watchlist. It is more performant than using the general _GetWatchlist function.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetSourceBySourceType(    ['SourceType']:string)
{
let function = (SourceType:string) {
  let Sources_by_SourceType=(SourceType:string) {
    ASIM_GetWatchlistsRaw (dynamic(['ASimSourceType','Sources_by_SourceType']), SourceType)
    | extend Source = tostring(WatchlistItem.Source) 
    | where isnotempty(Source)
    | summarize make_set(Source)
  };
  toscalar (Sources_by_SourceType(SourceType))
};
function (SourceType)
}



//
// Function Name: ASIM_GetUsernameType
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the UserType based on the username

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetUsernameType(    ['username']:string)
{
let ASIM_GetUsernameType = (username:string) { 
    case ( 
        username contains "@" , "UPN"
        , username contains "\\", "Windows"
        , (username has "CN=" or username has "OU=" or username has "DC="), "DN"
        , isempty(username), ""
        , "Simple"
    )
};
ASIM_GetUsernameType (username)
}



//
// Function Name: _ASIM_GetUsernameType
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the UserType based on the username

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetUsernameType(    ['username']:string)
{
let ASIM_GetUsernameType = (username:string) { 
    case ( 
        username contains "@" , "UPN"
        , username contains "\\", "Windows"
        , (username has "CN=" or username has "OU=" or username has "DC="), "DN"
        , isempty(username), ""
        , "Simple"
    )
};
ASIM_GetUsernameType (username)
}



//
// Function Name: ASIM_GetUserType
// Description: Deprecated function, please use _ASIM_GetWindowsUserType instead. This ASIM tabular function is intended for use in ASIM parsers and sets the UserType in Windows systems based on the username and sid

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetUserType(    ['username']:string,
    ['sid']:string)
{
let ASIM_GetUserType = (username:string, sid:string) { 
    case ( 
        sid startswith "S-1-5-80", "Service",
        sid startswith "S-1-5-21", case (
              sid endswith "-500", "Admin",
              sid endswith "-501", "Guest",
              sid endswith "-502", "Service", // A user account that's used by the Key Distribution Center (KDC) service. The account exists only on domain controllers.
              username contains "admin", "Admin",
              username endswith "$", "Machine",
              "Regular"),
        username endswith "$", "Machine",
        sid == "S-1-5-113", "Other", // Local account
        sid == "S-1-5-7", "Anonymous", 
        sid == "S-1-5-17", "Service", // An account that's used by the default Internet Information Services (IIS) user
        sid == "S-1-5-18", "System", 
        sid == "S-1-5-19", "Service", 
        sid == "S-1-5-20", "Service" ,
        isempty(username), "",
        "Other"
    )
};
ASIM_GetUserType(username,sid)
}



//
// Function Name: _ASIM_GetUserType
// Description: Deprecated function, please use _ASIM_GetWindowsUserType instead. This ASIM tabular function is intended for use in ASIM parsers and sets the UserType in Windows systems based on the username and sid

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetUserType(    ['username']:string,
    ['sid']:string)
{
let ASIM_GetUserType = (username:string, sid:string) { 
    case ( 
        sid startswith "S-1-5-80", "Service",
        sid startswith "S-1-5-21", case (
              sid endswith "-500", "Admin",
              sid endswith "-501", "Guest",
              sid endswith "-502", "Service", // A user account that's used by the Key Distribution Center (KDC) service. The account exists only on domain controllers.
              username contains "admin", "Admin",
              username endswith "$", "Machine",
              "Regular"),
        username endswith "$", "Machine",
        sid == "S-1-5-113", "Other", // Local account
        sid == "S-1-5-7", "Anonymous", 
        sid == "S-1-5-17", "Service", // An account that's used by the default Internet Information Services (IIS) user
        sid == "S-1-5-18", "System", 
        sid == "S-1-5-19", "Service", 
        sid == "S-1-5-20", "Service" ,
        isempty(username), "",
        "Other"
    )
};
ASIM_GetUserType(username,sid)
}



//
// Function Name: ASIM_GetWatchlistRaw
// Description: This ASIM function reads the ASimDisabledParsers watchlist. It is more performant than using the general _GetWatchlist function.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetWatchlistRaw(    ['watchlist']:string,
    ['keys']:dynamic=dynamic([]))
{
let function = (watchlist:string, keys:dynamic = dynamic([])) {
  Watchlist
  | where TimeGenerated < now() 
  | where _DTItemType == 'watchlist-item' 
  | where WatchlistAlias == watchlist
  | where array_length(keys) == 0 or SearchKey in (keys)
  | summarize hint.shufflekey=_DTItemId arg_max(_DTTimestamp, _DTItemStatus, LastUpdatedTimeUTC, SearchKey, WatchlistItem) by _DTItemId 
  | where _DTItemStatus != 'Delete' 
  | project-away _DTTimestamp, _DTItemStatus
};
function (watchlist,keys)
}



//
// Function Name: _ASIM_GetWatchlistRaw
// Description: This ASIM function reads the ASimDisabledParsers watchlist. It is more performant than using the general _GetWatchlist function.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetWatchlistRaw(    ['watchlist']:string,
    ['keys']:dynamic=dynamic([]))
{
let function = (watchlist:string, keys:dynamic = dynamic([])) {
  Watchlist
  | where TimeGenerated < now() 
  | where _DTItemType == 'watchlist-item' 
  | where WatchlistAlias == watchlist
  | where array_length(keys) == 0 or SearchKey in (keys)
  | summarize hint.shufflekey=_DTItemId arg_max(_DTTimestamp, _DTItemStatus, LastUpdatedTimeUTC, SearchKey, WatchlistItem) by _DTItemId 
  | where _DTItemStatus != 'Delete' 
  | project-away _DTTimestamp, _DTItemStatus
};
function (watchlist,keys)
}



//
// Function Name: ASIM_GetWatchlistsRaw
// Description: This ASIM function reads multiple watchlists in raw format. The primary use case is giving an option for using multiple watchlist names for the same watchlist. It is more performant than using the general _GetWatchlist function.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetWatchlistsRaw(    ['watchlists']:dynamic,
    ['keys']:dynamic=dynamic([]))
{
let function = (watchlists:dynamic, keys:dynamic = dynamic([])) {
  Watchlist
  | where TimeGenerated < now() 
  | where _DTItemType == 'watchlist-item' 
  | where WatchlistAlias in (watchlists)
  | where array_length(keys) == 0 or SearchKey in (keys)
  | summarize hint.shufflekey=_DTItemId arg_max(_DTTimestamp, _DTItemStatus, LastUpdatedTimeUTC, SearchKey, WatchlistItem) by _DTItemId 
  | where _DTItemStatus != 'Delete' 
  | project-away _DTTimestamp, _DTItemStatus
};
function (watchlists,keys)
}



//
// Function Name: _ASIM_GetWatchlistsRaw
// Description: This ASIM function reads multiple watchlists in raw format. The primary use case is giving an option for using multiple watchlist names for the same watchlist. It is more performant than using the general _GetWatchlist function.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetWatchlistsRaw(    ['watchlists']:dynamic,
    ['keys']:dynamic=dynamic([]))
{
let function = (watchlists:dynamic, keys:dynamic = dynamic([])) {
  Watchlist
  | where TimeGenerated < now() 
  | where _DTItemType == 'watchlist-item' 
  | where WatchlistAlias in (watchlists)
  | where array_length(keys) == 0 or SearchKey in (keys)
  | summarize hint.shufflekey=_DTItemId arg_max(_DTTimestamp, _DTItemStatus, LastUpdatedTimeUTC, SearchKey, WatchlistItem) by _DTItemId 
  | where _DTItemStatus != 'Delete' 
  | project-away _DTTimestamp, _DTItemStatus
};
function (watchlists,keys)
}



//
// Function Name: ASIM_GetWindowsUserType
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the UserType in Windows systems based on the username and sid

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_GetWindowsUserType(    ['username']:string,
    ['sid']:string)
{
let ASIM_GetWindowsUserType = (username:string, sid:string) { 
    case ( 
        sid startswith "S-1-5-80", "Service",
        sid startswith "S-1-5-21", case (
              sid endswith "-500", "Admin",
              sid endswith "-501", "Guest",
              sid endswith "-502", "Service", // A user account that's used by the Key Distribution Center (KDC) service. The account exists only on domain controllers.
              username contains "admin", "Admin",
              username endswith "$", "Machine",
              "Regular"),
        username endswith "$", "Machine",
        sid == "S-1-5-113", "Other", // Local account
        sid == "S-1-5-7", "Anonymous", 
        sid == "S-1-5-17", "Service", // An account that's used by the default Internet Information Services (IIS) user
        sid == "S-1-5-18", "System", 
        sid == "S-1-5-19", "Service", 
        sid == "S-1-5-20", "Service" ,
        isempty(username), "",
        "Other"
    )
};
ASIM_GetWindowsUserType(username,sid)
}



//
// Function Name: _ASIM_GetWindowsUserType
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the UserType in Windows systems based on the username and sid

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_GetWindowsUserType(    ['username']:string,
    ['sid']:string)
{
let ASIM_GetWindowsUserType = (username:string, sid:string) { 
    case ( 
        sid startswith "S-1-5-80", "Service",
        sid startswith "S-1-5-21", case (
              sid endswith "-500", "Admin",
              sid endswith "-501", "Guest",
              sid endswith "-502", "Service", // A user account that's used by the Key Distribution Center (KDC) service. The account exists only on domain controllers.
              username contains "admin", "Admin",
              username endswith "$", "Machine",
              "Regular"),
        username endswith "$", "Machine",
        sid == "S-1-5-113", "Other", // Local account
        sid == "S-1-5-7", "Anonymous", 
        sid == "S-1-5-17", "Service", // An account that's used by the default Internet Information Services (IIS) user
        sid == "S-1-5-18", "System", 
        sid == "S-1-5-19", "Service", 
        sid == "S-1-5-20", "Service" ,
        isempty(username), "",
        "Other"
    )
};
ASIM_GetWindowsUserType(username,sid)
}



//
// Function Name: ASIM_IdentityInfo
// Description: This ASIM function deduplicate and normalizes the IdentityInfo table to improve its usability in queries. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_IdentityInfo
{
IdentityInfo
  | where TimeGenerated > ago(14d)
  | where AccountObjectId != ""
  | project-away AccountName, AccountDomain, GivenName, Surname, Type, TenantId, OnPremisesExtensionAttributes, UserState, UserStateChangedOn, SourceSystem
  | project-away InvestigationPriority, InvestigationPriorityPercentile, ExtensionProperty, AccountCloudSID, Applications, ServicePrincipals
  | summarize arg_max(TimeGenerated, *) by UserScopeId = AccountTenantId, UserId = AccountObjectId
  | project-away TimeGenerated
  | project-rename
      Username = AccountUPN,
      UserDisplayName = AccountDisplayName,
      UserSid = AccountSID,
      UserDN = OnPremisesDistinguishedName,
      UserTags = Tags,
      UserRiskLevel = RiskLevel,
      UserRiskLevelDetails = RiskLevelDetails,
      UserRiskState = RiskState, 
      UserBlastRadius = BlastRadius,
      UserGroupMembership = GroupMembership,
      UserAssignedRoles = AssignedRoles,
      UserDepartment = Department,
      UserEmployeeId = EmployeeId,
      UserJobTitle = JobTitle,
      UserMailAddress = MailAddress,
      UserAdditionalMailAddresses = AdditionalMailAddresses,
      UserManager = Manager,
      UserStreetAddress = StreetAddress,
      UserCity = City,
      UserCountry = Country,
      UserRegion = State,
      UserPhone = Phone,
      UserAccountEnabled = IsAccountEnabled,
      UserAccountCreationTime = AccountCreationTime,
      RelatedUsers = RelatedAccounts,
      UserDeleted = DeletedDateTime,
      UserLastSeen = LastSeenDate,
      UserUACFlags = UACFlags,
      UserIsMFARegistered = IsMFARegistered,
      UserRiskScore = EntityRiskScore
  | extend 
      UsernameType = "UPN",
      UserIdType = "AadId",
      UserType = iff(UserType == "Guest", UserType, ""),
      UserUpn = Username
}



//
// Function Name: _ASIM_IdentityInfo
// Description: This ASIM function deduplicate and normalizes the IdentityInfo table to improve its usability in queries. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_IdentityInfo
{
IdentityInfo
  | where TimeGenerated > ago(14d)
  | where AccountObjectId != ""
  | project-away AccountName, AccountDomain, GivenName, Surname, Type, TenantId, OnPremisesExtensionAttributes, UserState, UserStateChangedOn, SourceSystem
  | project-away InvestigationPriority, InvestigationPriorityPercentile, ExtensionProperty, AccountCloudSID, Applications, ServicePrincipals
  | summarize arg_max(TimeGenerated, *) by UserScopeId = AccountTenantId, UserId = AccountObjectId
  | project-away TimeGenerated
  | project-rename
      Username = AccountUPN,
      UserDisplayName = AccountDisplayName,
      UserSid = AccountSID,
      UserDN = OnPremisesDistinguishedName,
      UserTags = Tags,
      UserRiskLevel = RiskLevel,
      UserRiskLevelDetails = RiskLevelDetails,
      UserRiskState = RiskState, 
      UserBlastRadius = BlastRadius,
      UserGroupMembership = GroupMembership,
      UserAssignedRoles = AssignedRoles,
      UserDepartment = Department,
      UserEmployeeId = EmployeeId,
      UserJobTitle = JobTitle,
      UserMailAddress = MailAddress,
      UserAdditionalMailAddresses = AdditionalMailAddresses,
      UserManager = Manager,
      UserStreetAddress = StreetAddress,
      UserCity = City,
      UserCountry = Country,
      UserRegion = State,
      UserPhone = Phone,
      UserAccountEnabled = IsAccountEnabled,
      UserAccountCreationTime = AccountCreationTime,
      RelatedUsers = RelatedAccounts,
      UserDeleted = DeletedDateTime,
      UserLastSeen = LastSeenDate,
      UserUACFlags = UACFlags,
      UserIsMFARegistered = IsMFARegistered,
      UserRiskScore = EntityRiskScore
  | extend 
      UsernameType = "UPN",
      UserIdType = "AadId",
      UserType = iff(UserType == "Guest", UserType, ""),
      UserUpn = Username
}



//
// Function Name: ASIM_LookupAADcodes
// Description: This query creates a table for conversion of AAD STS Error Codes from a numeric value to a descriptive error message.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_LookupAADcodes(    ['ResultType']:string)
{
let function = (ResultType:string) {
  let AADResultTypes=dynamic 
  ({
    '53003':'Logon violates policy',
    '50034':'No such user or password',
    '50059':'No such user or password',
    '50053':'User locked',
    '50055':'Password expired',
    '50056':'Incorrect password',
    '50057':'User disabled',
    '50058':'Logon violates policy',
    '50011':'Logon violates policy', 
    '50064':'No such user or password',
    '50076':'Logon violates policy',
    '50079':'Logon violates policy',
    '50105':'Logon violates policy',
    '50126':'No such user or password',
    '50132':'Password expired',
    '50133':'Password expired',
    '50144':'Password expired',
    '50173':'Password expired',
    '80012':'Logon violates policy',
    '51004':'No such user or password',
    '50072':'Logon violates policy',
    '50005':'Logon violates policy',
    '50020':'Logon violates policy',
    '50074':'Logon violates policy', 
    '70008':'Password expired',
    '700016':'No such user or password', 
    '500011':'No such user or password'   
  });
  let AADResultTypeLookup = AADResultTypes[tostring(ResultType)];
  case (
    AADResultTypeLookup != "", AADResultTypeLookup,
    'Unassigned'
  )
};
function(ResultType)
}



//
// Function Name: _ASIM_LookupAADcodes
// Description: This query creates a table for conversion of AAD STS Error Codes from a numeric value to a descriptive error message.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_LookupAADcodes(    ['ResultType']:string)
{
let function = (ResultType:string) {
  let AADResultTypes=dynamic 
  ({
    '53003':'Logon violates policy',
    '50034':'No such user or password',
    '50059':'No such user or password',
    '50053':'User locked',
    '50055':'Password expired',
    '50056':'Incorrect password',
    '50057':'User disabled',
    '50058':'Logon violates policy',
    '50011':'Logon violates policy', 
    '50064':'No such user or password',
    '50076':'Logon violates policy',
    '50079':'Logon violates policy',
    '50105':'Logon violates policy',
    '50126':'No such user or password',
    '50132':'Password expired',
    '50133':'Password expired',
    '50144':'Password expired',
    '50173':'Password expired',
    '80012':'Logon violates policy',
    '51004':'No such user or password',
    '50072':'Logon violates policy',
    '50005':'Logon violates policy',
    '50020':'Logon violates policy',
    '50074':'Logon violates policy', 
    '70008':'Password expired',
    '700016':'No such user or password', 
    '500011':'No such user or password'   
  });
  let AADResultTypeLookup = AADResultTypes[tostring(ResultType)];
  case (
    AADResultTypeLookup != "", AADResultTypeLookup,
    'Unassigned'
  )
};
function(ResultType)
}



//
// Function Name: ASIM_LookupDnsQueryType
// Description: This ASIM function returns the DNS query type name (also called the resource record, or RR) associated with the RR numerical value provided as a parameter. For example, for the RR code 16, the function returns TXT.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_LookupDnsQueryType(    ['QueryType']:int)
{
let function = (QueryType:int) {
  let QueryTypeTable=dynamic
    ({
      "0":"Reserved",
      "1":"A",
      "2":"NS",
      "3":"MD",
      "4":"MF",
      "5":"CNAME",
      "6":"SOA",
      "7":"MB",
      "8":"MG",
      "9":"MR",
      "10":"NULL",
      "11":"WKS",
      "12":"PTR",
      "13":"HINFO",
      "14":"MINFO",
      "15":"MX",
      "16":"TXT",
      "17":"RP",
      "18":"AFSDB",
      "19":"X25",
      "20":"ISDN",
      "21":"RT",
      "22":"NSAP",
      "23":"NSAP-PTR",
      "24":"SIG",
      "25":"KEY",
      "26":"PX",
      "27":"GPOS",
      "28":"AAAA",
      "29":"LOC",
      "30":"NXT",
      "31":"EID",
      "32":"NIMLOC",
      "33":"SRV",
      "34":"ATMA",
      "35":"NAPTR",
      "36":"KX",
      "37":"CERT",
      "38":"A6",
      "39":"DNAME",
      "40":"SINK",
      "41":"OPT",
      "42":"APL",
      "43":"DS",
      "44":"SSHFP",
      "45":"IPSECKEY",
      "46":"RRSIG",
      "47":"NSEC",
      "48":"DNSKEY",
      "49":"DHCID",
      "50":"NSEC3",
      "51":"NSEC3PARAM",
      "52":"TLSA",
      "53":"SMIMEA",
      "54":"Unassigned",
      "55":"HIP",
      "56":"NINFO",
      "57":"RKEY",
      "58":"TALINK",
      "59":"CDS",
      "60":"CDNSKEY",
      "61":"OPENPGPKEY",
      "62":"CSYNC",
      "99":"SPF",
      "100":"UINFO",
      "101":"UID",
      "102":"GID",
      "103":"UNSPEC",
      "104":"NID",
      "105":"L32",
      "106":"L64",
      "107":"LP",
      "108":"EUI48",
      "109":"EUI64",
      "249":"TKEY",
      "250":"TSIG",
      "251":"IXFR",
      "252":"AXFR",
      "253":"MAILB",
      "254":"MAILA",
      "255":"All",
      "256":"URI",
      "257":"CAA",
      "258":"AVC",
      "259":"DOA",
      "32768":"TA",
      "32769":"DLV",
      "65535": "Reserved"
  });
  let QueryTypeLookup = QueryTypeTable[tostring(QueryType)];
  case (
    QueryTypeLookup != "", QueryTypeLookup,
    QueryType between (65280 .. 65534), 'Reserved for Private Use',
    'Unassigned'
  )
};
function(QueryType)
}



//
// Function Name: _ASIM_LookupDnsQueryType
// Description: This ASIM function returns the DNS query type name (also called the resource record, or RR) associated with the RR numerical value provided as a parameter. For example, for the RR code 16, the function returns TXT.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_LookupDnsQueryType(    ['QueryType']:int)
{
let function = (QueryType:int) {
  let QueryTypeTable=dynamic
    ({
      "0":"Reserved",
      "1":"A",
      "2":"NS",
      "3":"MD",
      "4":"MF",
      "5":"CNAME",
      "6":"SOA",
      "7":"MB",
      "8":"MG",
      "9":"MR",
      "10":"NULL",
      "11":"WKS",
      "12":"PTR",
      "13":"HINFO",
      "14":"MINFO",
      "15":"MX",
      "16":"TXT",
      "17":"RP",
      "18":"AFSDB",
      "19":"X25",
      "20":"ISDN",
      "21":"RT",
      "22":"NSAP",
      "23":"NSAP-PTR",
      "24":"SIG",
      "25":"KEY",
      "26":"PX",
      "27":"GPOS",
      "28":"AAAA",
      "29":"LOC",
      "30":"NXT",
      "31":"EID",
      "32":"NIMLOC",
      "33":"SRV",
      "34":"ATMA",
      "35":"NAPTR",
      "36":"KX",
      "37":"CERT",
      "38":"A6",
      "39":"DNAME",
      "40":"SINK",
      "41":"OPT",
      "42":"APL",
      "43":"DS",
      "44":"SSHFP",
      "45":"IPSECKEY",
      "46":"RRSIG",
      "47":"NSEC",
      "48":"DNSKEY",
      "49":"DHCID",
      "50":"NSEC3",
      "51":"NSEC3PARAM",
      "52":"TLSA",
      "53":"SMIMEA",
      "54":"Unassigned",
      "55":"HIP",
      "56":"NINFO",
      "57":"RKEY",
      "58":"TALINK",
      "59":"CDS",
      "60":"CDNSKEY",
      "61":"OPENPGPKEY",
      "62":"CSYNC",
      "99":"SPF",
      "100":"UINFO",
      "101":"UID",
      "102":"GID",
      "103":"UNSPEC",
      "104":"NID",
      "105":"L32",
      "106":"L64",
      "107":"LP",
      "108":"EUI48",
      "109":"EUI64",
      "249":"TKEY",
      "250":"TSIG",
      "251":"IXFR",
      "252":"AXFR",
      "253":"MAILB",
      "254":"MAILA",
      "255":"All",
      "256":"URI",
      "257":"CAA",
      "258":"AVC",
      "259":"DOA",
      "32768":"TA",
      "32769":"DLV",
      "65535": "Reserved"
  });
  let QueryTypeLookup = QueryTypeTable[tostring(QueryType)];
  case (
    QueryTypeLookup != "", QueryTypeLookup,
    QueryType between (65280 .. 65534), 'Reserved for Private Use',
    'Unassigned'
  )
};
function(QueryType)
}



//
// Function Name: ASIM_LookupDnsResponseCode
// Description: This ASIM function returns the DNS response code(RCode) name associated with the response code numerical value provided as a parameter. For example, for the RCode 3, the function returns NXDOMAIN.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_LookupDnsResponseCode(    ['ResponseCode']:int)
{
let function = (ResponseCode:int) {
  let ResponseCodesTable=dynamic
    ({
      '0':'NOERROR',
      '1':'FORMERR',
      '2':'SERVFAIL',
      '3':'NXDOMAIN',
      '4':'NOTIMP',
      '5':'REFUSED',
      '6':'YXDOMAIN',
      '7':'YXRRSET',
      '8':'NXRRSET',
      '9':'NOTAUTH',
      '10':'NOTZONE',
      '11':'DSOTYPENI',
      '16':'BADVERS',
      //'16':'BADSIG',
      '17':'BADKEY',
      '18':'BADTIME',
      '19':'BADMODE',
      '20':'BADNAME',
      '21':'BADALG',
      '22':'BADTRUNC',
      '23':'BADCOOKIE'
          });
  let ResponseCodeNameLookup = ResponseCodesTable[tostring(ResponseCode)];
  case (
    ResponseCodeNameLookup != "", ResponseCodeNameLookup,
    ResponseCode between (3841 .. 4095), 'Reserved for Private Use',
    'Unassigned'
  )
};
function(ResponseCode)
}



//
// Function Name: _ASIM_LookupDnsResponseCode
// Description: This ASIM function returns the DNS response code(RCode) name associated with the response code numerical value provided as a parameter. For example, for the RCode 3, the function returns NXDOMAIN.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_LookupDnsResponseCode(    ['ResponseCode']:int)
{
let function = (ResponseCode:int) {
  let ResponseCodesTable=dynamic
    ({
      '0':'NOERROR',
      '1':'FORMERR',
      '2':'SERVFAIL',
      '3':'NXDOMAIN',
      '4':'NOTIMP',
      '5':'REFUSED',
      '6':'YXDOMAIN',
      '7':'YXRRSET',
      '8':'NXRRSET',
      '9':'NOTAUTH',
      '10':'NOTZONE',
      '11':'DSOTYPENI',
      '16':'BADVERS',
      //'16':'BADSIG',
      '17':'BADKEY',
      '18':'BADTIME',
      '19':'BADMODE',
      '20':'BADNAME',
      '21':'BADALG',
      '22':'BADTRUNC',
      '23':'BADCOOKIE'
          });
  let ResponseCodeNameLookup = ResponseCodesTable[tostring(ResponseCode)];
  case (
    ResponseCodeNameLookup != "", ResponseCodeNameLookup,
    ResponseCode between (3841 .. 4095), 'Reserved for Private Use',
    'Unassigned'
  )
};
function(ResponseCode)
}



//
// Function Name: ASIM_LookupHTTPStatusCode
// Description: This ASIM function returns the HTTP Status code name associated with the response code numerical value provided as a parameter. For example, for the Status code 200, the function returns OK.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_LookupHTTPStatusCode(    ['StatusCode']:string)
{
let function = (StatusCode:string) {
  let HTTPStatusCodesTable=dynamic
  ({
  "100":"Continue",
  "101":"Switching Protocols",
  "102":"Processing",
  "103":"Early Hints",
  "200":"OK",
  "201":"Created",
  "202":"Accepted",
  "203":"Non-Authoritative Information",
  "204":"No Content",
  "205":"Reset Content",
  "206":"Partial Content",
  "207":"Multi-Status",
  "208":"Already Reported",
  "226":"IM Used",
  "300":"Multiple Choices",
  "301":"Moved Permanently",
  "302":"Found",
  "303":"See Other",
  "304":"Not Modified",
  "305":"Use Proxy",
  "306":"Switch Proxy",
  "307":"Temporary Redirect",
  "308":"Permanent Redirect",
  "400":"Bad Request",
  "400.1":"Invalid Destination Header",
  "400.2":"Invalid Depth Header",
  "400.3":"Invalid If Header",
  "400.4":"Invalid Overwrite Header",
  "400.5":"Invalid Translate Header",
  "400.6":"Invalid Request Body",
  "400.7":"Invalid Content Length",
  "400.8":"Invalid Timeout",
  "400.9":"Invalid Lock Token",
  "400.10":"Invalid X-Forwarded-For (XFF) header",
  "400.11":"Invalid WebSocket request",
  "400.601":"Bad client request (ARR)",
  "400.602":"Invalid time format (ARR)",
  "400.603":"Parse range error (ARR)",
  "400.604":"Client gone (ARR)",
  "400.605":"Maximum number of forwards (ARR)",
  "400.606":"Asynchronous competition error (ARR)",
  "401":"Unauthorized",
  "401.1":"Logon failed",
  "401.2":"Logon failed due to server configuration",
  "401.3":"Unauthorized due to ACL on resource",
  "401.4":"Authorization failed by filter",
  "401.5":"Authorization failed by ISAPI/CGI application",
  "401.501":"Access Denied: Too many requests from the same client IP; Dynamic IP Restriction Concurrent request rate limit reached.",
  "401.502":"Forbidden: Too many requests from the same client IP; Dynamic IP Restriction Maximum request rate limit reached.",
  "401.503":"Access Denied: the IP address is included in the Deny list of IP Restriction",
  "401.504":"Access Denied: the host name is included in the Deny list of IP Restriction",
  "402":"Payment Required",
  "403":"Forbidden",
  "403.1":"Execute access forbidden",
  "403.2":"Read access forbidden",
  "403.3":"Write access forbidden",
  "403.4":"SSL required",
  "403.5":"SSL 128 required",
  "403.6":"IP address rejected",
  "403.7":"Client certificate required",
  "403.8":"Site access denied",
  "403.9":"Forbidden: Too many clients are trying to connect to the web server",
  "403.10":"Forbidden: web server is configured to deny Execute access",
  "403.11":"Forbidden: Password has been changed",
  "403.12":"Mapper denied access",
  "403.13":"Client certificate revoked",
  "403.14":"Directory listing denied",
  "403.15":"Forbidden: Client access licenses have exceeded limits on the web server",
  "403.16":"Client certificate is untrusted or invalid",
  "403.17":"Client certificate has expired or is not yet valid",
  "403.18":"Cannot execute requested URL in the current application pool",
  "403.19":"Cannot execute CGI applications for the client in this application pool",
  "403.20":"Forbidden: Passport logon failed",
  "403.21":"Forbidden: Source access denied",
  "403.22":"Forbidden: Infinite depth is denied",
  "403.501":"Forbidden: Too many requests from the same client IP; Dynamic IP Restriction Concurrent request rate limit reached",
  "403.502":"Forbidden: Too many requests from the same client IP; Dynamic IP Restriction Maximum request rate limit reached",
  "403.503":"Forbidden: the IP address is included in the Deny list of IP Restriction",
  "403.504":"Forbidden: the host name is included in the Deny list of IP Restriction",
  "404":"Not Found",
  "404.0":"Not found",
  "404.1":"Site Not Found",
  "404.2":"ISAPI or CGI restriction",
  "404.3":"Multipurpose Internet Mail Extensions (MIME) type restriction",
  "404.4":"No handler configured",
  "404.5":"Denied by request filtering configuration",
  "404.6":"Verb denied",
  "404.7":"File extension denied",
  "404.8":"Hidden namespace",
  "404.9":"File attribute hidden",
  "404.10":"Request header too long",
  "404.11":"Request contains double escape sequence",
  "404.12":"Request contains high-bit characters",
  "404.13":"Content length too large",
  "404.14":"Request URL too long",
  "404.15":"Query string too long",
  "404.16":"DAV request sent to the static file handler",
  "404.17":"Dynamic content mapped to the static file handler via a wildcard MIME mapping",
  "404.18":"Querystring sequence denied",
  "404.19":"Denied by filtering rule",
  "404.20":"Too Many URL Segments",
  "404.501":"Not Found: Too many requests from the same client IP; Dynamic IP Restriction Concurrent request rate limit reached",
  "404.502":"Not Found: Too many requests from the same client IP; Dynamic IP Restriction Maximum request rate limit reached",
  "404.503":"Not Found: the IP address is included in the Deny list of IP Restriction",
  "404.504":"Not Found: the host name is included in the Deny list of IP Restriction",      
  "405":"Method Not Allowed",
  "406":"Not Acceptable",
  "407":"Proxy Authentication Required",
  "408":"Request Timeout",
  "409":"Conflict",
  "410":"Gone",
  "411":"Length Required",
  "412":"Precondition Failed",
  "413":"Payload Too Large",
  "414":"URI Too Long",
  "415":"Unsupported Media Type",
  "416":"Range Not Satisfiable",
  "417":"Expectation Failed",
  "418":"I'm a teapot", // probably the most common one ;^)
  "421":"Misdirect Request",
  "422":"Unprocessable Entity",
  "423":"Locked",
  "424":"Failed Dependency",
  "425":"Too Early",
  "426":"Upgrade Required",
  "428":"Precondition Required",
  "429":"Too Many Requests",
  "431":"Request Header Fields Too Large",
  "451":"Unavailable For Legal Reasons/Redirect",
  "500":"Internal Server Error",
  "500.0":"Module or ISAPI error occurred",
  "500.11":"Application is shutting down on the web server",
  "500.12":"Application is busy restarting on the web server",
  "500.13":"Web server is too busy",
  "500.15":"Direct requests for Global.asax are not allowed",
  "500.19":"Configuration data is invalid",
  "500.21":"Module not recognized",
  "500.22":"An ASP.NET httpModules configuration does not apply in Managed Pipeline mode",
  "500.23":"An ASP.NET httpHandlers configuration does not apply in Managed Pipeline mode",
  "500.24":"An ASP.NET impersonation configuration does not apply in Managed Pipeline mode",
  "500.50":"A rewrite error occurred during RQ_BEGIN_REQUEST notification handling. A configuration or inbound rule execution error occurred.",
  "500.51":"A rewrite error occurred during GL_PRE_BEGIN_REQUEST notification handling. A global configuration or global rule execution error occurred",
  "500.52":"A rewrite error occurred during RQ_SEND_RESPONSE notification handling. An outbound rule execution occurred",
  "500.53":"A rewrite error occurred during RQ_RELEASE_REQUEST_STATE notification handling. An outbound rule execution error occurred. The rule is configured to be executed before the output user cache gets updated",
  "500.100":"Internal ASP error",
  "501":"Not Implemented",
  "502":"Bad Gateway",
  "502.1":"CGI application timeout",
  "502.2":"Bad gateway: Premature Exit/Map request failure (ARR)",
  "502.3":"Bad Gateway: Forwarder Connection Error (ARR)/WinHTTP asynchronous completion failure (ARR)",
  "502.4":"Bad Gateway: No Server (ARR)",
  "502.5":"WebSocket failure (ARR)",
  "502.6":"Forwarded request failure (ARR)",
  "502.7":"Execute request failure (ARR)",
  "503":"Service Unavailable",
  "503.0":"Application pool unavailable",
  "503.2":"Concurrent request limit exceeded",
  "503.3":"ASP.NET queue full",
  "503.4":"FastCGI queue full",
  "504":"Gateway Timeout",
  "505":"HTTP Version Not Supported",
  "506":"Variant Also Negotiates",
  "507":"Insufficient Storage",
  "508":"Loop Detected",
  "510":"Not Extended",
  "511":"Network Authentication Required",
  "419":"Page Expired",
  "420":"Method Failure",
  "430":"Request Header Field Too Large",
  "450":"Blocked by Windows Parental Controls",
  "498":"Invalid Token",
  "499":"Token Required(Esri)/Client Closed Request(nginx)",
  "509":"Bandwith Limit Exceeded",
  "529":"Site is overloaded",
  "530":"Site is frozen/Cloudflare HTTP error 530 is returned with an accompanying 1XXX error displayed",
  "598":"Network read timeout error",
  "599":"Network Connect Timeout Error",
  "440":"Login Time-out",
  "449":"Retry With",
  "444":"No Response",
  "494":"Request header too large",
  "495":"SSL Certificate Error",
  "496":"SSL Certificate Required",
  "497":"HTTP Request Sent to HTTPS Port",
  "520":"Web Server Returned an Unknown Error",
  "521":"Web Server Is Down",
  "523":"Origin Is Unreachable",
  "524":"A Timeout Occurred",
  "525":"SSL Handshake Failed",
  "526":"Invalid SSL Certificate",
  "527":"Railgun Error",
  "561":"Unauthorized",
  "110":"Response is Stale",
  "111":"Revalidation Failed",
  "112":"Disconnected Operation",
  "113":"Heuristic Expiration",
  "199":"Miscellaneous Warning",
  "214":"Transformation Applied",
  "299":"Miscellaneous Persistent Warning",
  "460":"AWS ELB Client closed the connection with the load balancer before the idle timeout period elapsed",
  "463":"AWS ELB The load balancer received an X-Forwarded-For request header with more than 30 IP addresses"
  });
  let HTTPStatusCodeLookup = HTTPStatusCodesTable[tostring(StatusCode)];
  iff (isnotempty(HTTPStatusCodeLookup), HTTPStatusCodeLookup, 'Unassigned')
};
function (StatusCode)
}



//
// Function Name: _ASIM_LookupHTTPStatusCode
// Description: This ASIM function returns the HTTP Status code name associated with the response code numerical value provided as a parameter. For example, for the Status code 200, the function returns OK.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_LookupHTTPStatusCode(    ['StatusCode']:string)
{
let function = (StatusCode:string) {
  let HTTPStatusCodesTable=dynamic
  ({
  "100":"Continue",
  "101":"Switching Protocols",
  "102":"Processing",
  "103":"Early Hints",
  "200":"OK",
  "201":"Created",
  "202":"Accepted",
  "203":"Non-Authoritative Information",
  "204":"No Content",
  "205":"Reset Content",
  "206":"Partial Content",
  "207":"Multi-Status",
  "208":"Already Reported",
  "226":"IM Used",
  "300":"Multiple Choices",
  "301":"Moved Permanently",
  "302":"Found",
  "303":"See Other",
  "304":"Not Modified",
  "305":"Use Proxy",
  "306":"Switch Proxy",
  "307":"Temporary Redirect",
  "308":"Permanent Redirect",
  "400":"Bad Request",
  "400.1":"Invalid Destination Header",
  "400.2":"Invalid Depth Header",
  "400.3":"Invalid If Header",
  "400.4":"Invalid Overwrite Header",
  "400.5":"Invalid Translate Header",
  "400.6":"Invalid Request Body",
  "400.7":"Invalid Content Length",
  "400.8":"Invalid Timeout",
  "400.9":"Invalid Lock Token",
  "400.10":"Invalid X-Forwarded-For (XFF) header",
  "400.11":"Invalid WebSocket request",
  "400.601":"Bad client request (ARR)",
  "400.602":"Invalid time format (ARR)",
  "400.603":"Parse range error (ARR)",
  "400.604":"Client gone (ARR)",
  "400.605":"Maximum number of forwards (ARR)",
  "400.606":"Asynchronous competition error (ARR)",
  "401":"Unauthorized",
  "401.1":"Logon failed",
  "401.2":"Logon failed due to server configuration",
  "401.3":"Unauthorized due to ACL on resource",
  "401.4":"Authorization failed by filter",
  "401.5":"Authorization failed by ISAPI/CGI application",
  "401.501":"Access Denied: Too many requests from the same client IP; Dynamic IP Restriction Concurrent request rate limit reached.",
  "401.502":"Forbidden: Too many requests from the same client IP; Dynamic IP Restriction Maximum request rate limit reached.",
  "401.503":"Access Denied: the IP address is included in the Deny list of IP Restriction",
  "401.504":"Access Denied: the host name is included in the Deny list of IP Restriction",
  "402":"Payment Required",
  "403":"Forbidden",
  "403.1":"Execute access forbidden",
  "403.2":"Read access forbidden",
  "403.3":"Write access forbidden",
  "403.4":"SSL required",
  "403.5":"SSL 128 required",
  "403.6":"IP address rejected",
  "403.7":"Client certificate required",
  "403.8":"Site access denied",
  "403.9":"Forbidden: Too many clients are trying to connect to the web server",
  "403.10":"Forbidden: web server is configured to deny Execute access",
  "403.11":"Forbidden: Password has been changed",
  "403.12":"Mapper denied access",
  "403.13":"Client certificate revoked",
  "403.14":"Directory listing denied",
  "403.15":"Forbidden: Client access licenses have exceeded limits on the web server",
  "403.16":"Client certificate is untrusted or invalid",
  "403.17":"Client certificate has expired or is not yet valid",
  "403.18":"Cannot execute requested URL in the current application pool",
  "403.19":"Cannot execute CGI applications for the client in this application pool",
  "403.20":"Forbidden: Passport logon failed",
  "403.21":"Forbidden: Source access denied",
  "403.22":"Forbidden: Infinite depth is denied",
  "403.501":"Forbidden: Too many requests from the same client IP; Dynamic IP Restriction Concurrent request rate limit reached",
  "403.502":"Forbidden: Too many requests from the same client IP; Dynamic IP Restriction Maximum request rate limit reached",
  "403.503":"Forbidden: the IP address is included in the Deny list of IP Restriction",
  "403.504":"Forbidden: the host name is included in the Deny list of IP Restriction",
  "404":"Not Found",
  "404.0":"Not found",
  "404.1":"Site Not Found",
  "404.2":"ISAPI or CGI restriction",
  "404.3":"Multipurpose Internet Mail Extensions (MIME) type restriction",
  "404.4":"No handler configured",
  "404.5":"Denied by request filtering configuration",
  "404.6":"Verb denied",
  "404.7":"File extension denied",
  "404.8":"Hidden namespace",
  "404.9":"File attribute hidden",
  "404.10":"Request header too long",
  "404.11":"Request contains double escape sequence",
  "404.12":"Request contains high-bit characters",
  "404.13":"Content length too large",
  "404.14":"Request URL too long",
  "404.15":"Query string too long",
  "404.16":"DAV request sent to the static file handler",
  "404.17":"Dynamic content mapped to the static file handler via a wildcard MIME mapping",
  "404.18":"Querystring sequence denied",
  "404.19":"Denied by filtering rule",
  "404.20":"Too Many URL Segments",
  "404.501":"Not Found: Too many requests from the same client IP; Dynamic IP Restriction Concurrent request rate limit reached",
  "404.502":"Not Found: Too many requests from the same client IP; Dynamic IP Restriction Maximum request rate limit reached",
  "404.503":"Not Found: the IP address is included in the Deny list of IP Restriction",
  "404.504":"Not Found: the host name is included in the Deny list of IP Restriction",      
  "405":"Method Not Allowed",
  "406":"Not Acceptable",
  "407":"Proxy Authentication Required",
  "408":"Request Timeout",
  "409":"Conflict",
  "410":"Gone",
  "411":"Length Required",
  "412":"Precondition Failed",
  "413":"Payload Too Large",
  "414":"URI Too Long",
  "415":"Unsupported Media Type",
  "416":"Range Not Satisfiable",
  "417":"Expectation Failed",
  "418":"I'm a teapot", // probably the most common one ;^)
  "421":"Misdirect Request",
  "422":"Unprocessable Entity",
  "423":"Locked",
  "424":"Failed Dependency",
  "425":"Too Early",
  "426":"Upgrade Required",
  "428":"Precondition Required",
  "429":"Too Many Requests",
  "431":"Request Header Fields Too Large",
  "451":"Unavailable For Legal Reasons/Redirect",
  "500":"Internal Server Error",
  "500.0":"Module or ISAPI error occurred",
  "500.11":"Application is shutting down on the web server",
  "500.12":"Application is busy restarting on the web server",
  "500.13":"Web server is too busy",
  "500.15":"Direct requests for Global.asax are not allowed",
  "500.19":"Configuration data is invalid",
  "500.21":"Module not recognized",
  "500.22":"An ASP.NET httpModules configuration does not apply in Managed Pipeline mode",
  "500.23":"An ASP.NET httpHandlers configuration does not apply in Managed Pipeline mode",
  "500.24":"An ASP.NET impersonation configuration does not apply in Managed Pipeline mode",
  "500.50":"A rewrite error occurred during RQ_BEGIN_REQUEST notification handling. A configuration or inbound rule execution error occurred.",
  "500.51":"A rewrite error occurred during GL_PRE_BEGIN_REQUEST notification handling. A global configuration or global rule execution error occurred",
  "500.52":"A rewrite error occurred during RQ_SEND_RESPONSE notification handling. An outbound rule execution occurred",
  "500.53":"A rewrite error occurred during RQ_RELEASE_REQUEST_STATE notification handling. An outbound rule execution error occurred. The rule is configured to be executed before the output user cache gets updated",
  "500.100":"Internal ASP error",
  "501":"Not Implemented",
  "502":"Bad Gateway",
  "502.1":"CGI application timeout",
  "502.2":"Bad gateway: Premature Exit/Map request failure (ARR)",
  "502.3":"Bad Gateway: Forwarder Connection Error (ARR)/WinHTTP asynchronous completion failure (ARR)",
  "502.4":"Bad Gateway: No Server (ARR)",
  "502.5":"WebSocket failure (ARR)",
  "502.6":"Forwarded request failure (ARR)",
  "502.7":"Execute request failure (ARR)",
  "503":"Service Unavailable",
  "503.0":"Application pool unavailable",
  "503.2":"Concurrent request limit exceeded",
  "503.3":"ASP.NET queue full",
  "503.4":"FastCGI queue full",
  "504":"Gateway Timeout",
  "505":"HTTP Version Not Supported",
  "506":"Variant Also Negotiates",
  "507":"Insufficient Storage",
  "508":"Loop Detected",
  "510":"Not Extended",
  "511":"Network Authentication Required",
  "419":"Page Expired",
  "420":"Method Failure",
  "430":"Request Header Field Too Large",
  "450":"Blocked by Windows Parental Controls",
  "498":"Invalid Token",
  "499":"Token Required(Esri)/Client Closed Request(nginx)",
  "509":"Bandwith Limit Exceeded",
  "529":"Site is overloaded",
  "530":"Site is frozen/Cloudflare HTTP error 530 is returned with an accompanying 1XXX error displayed",
  "598":"Network read timeout error",
  "599":"Network Connect Timeout Error",
  "440":"Login Time-out",
  "449":"Retry With",
  "444":"No Response",
  "494":"Request header too large",
  "495":"SSL Certificate Error",
  "496":"SSL Certificate Required",
  "497":"HTTP Request Sent to HTTPS Port",
  "520":"Web Server Returned an Unknown Error",
  "521":"Web Server Is Down",
  "523":"Origin Is Unreachable",
  "524":"A Timeout Occurred",
  "525":"SSL Handshake Failed",
  "526":"Invalid SSL Certificate",
  "527":"Railgun Error",
  "561":"Unauthorized",
  "110":"Response is Stale",
  "111":"Revalidation Failed",
  "112":"Disconnected Operation",
  "113":"Heuristic Expiration",
  "199":"Miscellaneous Warning",
  "214":"Transformation Applied",
  "299":"Miscellaneous Persistent Warning",
  "460":"AWS ELB Client closed the connection with the load balancer before the idle timeout period elapsed",
  "463":"AWS ELB The load balancer received an X-Forwarded-For request header with more than 30 IP addresses"
  });
  let HTTPStatusCodeLookup = HTTPStatusCodesTable[tostring(StatusCode)];
  iff (isnotempty(HTTPStatusCodeLookup), HTTPStatusCodeLookup, 'Unassigned')
};
function (StatusCode)
}



//
// Function Name: ASIM_LookupICMPType
// Description: This ASIM function returns ICMP Type name associated with the numerical value provided as a parameter. For example, for 8, the function returns "Echo" (which is the type used by the ping command).  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_LookupICMPType(    ['NetworkIcmpCode']:int)
{
let function = (NetworkIcmpCode:int) {
  let ICMPTypeTable=dynamic
    ({
    "0":"Echo Reply",
    "1":"Unassigned",
    "2":"Unassigned",
    "3":"Destination Unreachable",
    "4":"Source Quench (Deprecated)",
    "5":"Redirect",
    "6":"Alternate Host Address (Deprecated)",
    "7":"Unassigned",
    "8":"Echo",
    "9":"Router Advertisement",
    "10":"Router Solicitation",
    "11":"Time Exceeded",
    "12":"Parameter Problem",
    "13":"Timestamp",
    "14":"Timestamp Reply",
    "15":"Information Request (Deprecated)",
    "16":"Information Reply (Deprecated)",
    "17":"Address Mask Request (Deprecated)",
    "18":"Address Mask Reply (Deprecated)",
    "19":"Reserved (for Security)",
    "20":"Reserved (for Robustness Experiment)", 
    "21":"Reserved (for Robustness Experiment)",
    "22":"Reserved (for Robustness Experiment)",
    "23":"Reserved (for Robustness Experiment)",
    "24":"Reserved (for Robustness Experiment)",
    "25":"Reserved (for Robustness Experiment)",
    "26":"Reserved (for Robustness Experiment)",
    "27":"Reserved (for Robustness Experiment)",
    "28":"Reserved (for Robustness Experiment)",
    "29":"Reserved (for Robustness Experiment)",
    "30":"Traceroute (Deprecated)",
    "31":"Datagram Conversion Error (Deprecated)",
    "32":"Mobile Host Redirect (Deprecated)",
    "33":"IPv6 Where-Are-You (Deprecated)",
    "34":"IPv6 I-Am-Here (Deprecated)",
    "35":"Mobile Registration Request (Deprecated)",
    "36":"Mobile Registration Reply (Deprecated)",
    "37":"Domain Name Request (Deprecated)",
    "38":"Domain Name Reply (Deprecated)",
    "39":"SKIP (Deprecated)",
    "40":"Photuris",
    "41":"ICMP messages utilized by experimental mobility protocols such as Seamoby",
    "42":"Extended Echo Request",
    "43":"Extended Echo Reply",
    "253":"RFC3692-style Experiment 1",
    "254":"RFC3692-style Experiment 2",
    "255":"Reserved"   
  });
  let NetworkIcmpTypeLookup = ICMPTypeTable[tostring(NetworkIcmpCode)];
  case (
    NetworkIcmpTypeLookup != "", NetworkIcmpTypeLookup,
    'Unassigned'
  )
};
function(NetworkIcmpCode)
}



//
// Function Name: _ASIM_LookupICMPType
// Description: This ASIM function returns ICMP Type name associated with the numerical value provided as a parameter. For example, for 8, the function returns "Echo" (which is the type used by the ping command).  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_LookupICMPType(    ['NetworkIcmpCode']:int)
{
let function = (NetworkIcmpCode:int) {
  let ICMPTypeTable=dynamic
    ({
    "0":"Echo Reply",
    "1":"Unassigned",
    "2":"Unassigned",
    "3":"Destination Unreachable",
    "4":"Source Quench (Deprecated)",
    "5":"Redirect",
    "6":"Alternate Host Address (Deprecated)",
    "7":"Unassigned",
    "8":"Echo",
    "9":"Router Advertisement",
    "10":"Router Solicitation",
    "11":"Time Exceeded",
    "12":"Parameter Problem",
    "13":"Timestamp",
    "14":"Timestamp Reply",
    "15":"Information Request (Deprecated)",
    "16":"Information Reply (Deprecated)",
    "17":"Address Mask Request (Deprecated)",
    "18":"Address Mask Reply (Deprecated)",
    "19":"Reserved (for Security)",
    "20":"Reserved (for Robustness Experiment)", 
    "21":"Reserved (for Robustness Experiment)",
    "22":"Reserved (for Robustness Experiment)",
    "23":"Reserved (for Robustness Experiment)",
    "24":"Reserved (for Robustness Experiment)",
    "25":"Reserved (for Robustness Experiment)",
    "26":"Reserved (for Robustness Experiment)",
    "27":"Reserved (for Robustness Experiment)",
    "28":"Reserved (for Robustness Experiment)",
    "29":"Reserved (for Robustness Experiment)",
    "30":"Traceroute (Deprecated)",
    "31":"Datagram Conversion Error (Deprecated)",
    "32":"Mobile Host Redirect (Deprecated)",
    "33":"IPv6 Where-Are-You (Deprecated)",
    "34":"IPv6 I-Am-Here (Deprecated)",
    "35":"Mobile Registration Request (Deprecated)",
    "36":"Mobile Registration Reply (Deprecated)",
    "37":"Domain Name Request (Deprecated)",
    "38":"Domain Name Reply (Deprecated)",
    "39":"SKIP (Deprecated)",
    "40":"Photuris",
    "41":"ICMP messages utilized by experimental mobility protocols such as Seamoby",
    "42":"Extended Echo Request",
    "43":"Extended Echo Reply",
    "253":"RFC3692-style Experiment 1",
    "254":"RFC3692-style Experiment 2",
    "255":"Reserved"   
  });
  let NetworkIcmpTypeLookup = ICMPTypeTable[tostring(NetworkIcmpCode)];
  case (
    NetworkIcmpTypeLookup != "", NetworkIcmpTypeLookup,
    'Unassigned'
  )
};
function(NetworkIcmpCode)
}



//
// Function Name: ASIM_LookupNetworkProtocol
// Description: This ASIM function returns IP network protocol name associated with the numerical value provided as a parameter. For example, for 6, the function returns "TCP".  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_LookupNetworkProtocol(    ['NetworkProtocol']:int)
{
let function = (NetworkProtocol:int) {
  let NetworkProtocolTable=dynamic
    ({
    "0":"HOPOPT",
    "1":"ICMP",
    "2":"IGMP",
    "3":"GGP",
    "4":"IPv4",
    "5":"ST",
    "6":"TCP",
    "7":"CBT",
    "8":"EGP",
    "9":"IGP",
    "10":"BBN-RCC-MON",
    "11":"NVP-II",
    "12":"PUP",
    "13":"ARGUS (deprecated)",
    "14":"EMCON",
    "15":"XNET",
    "16":"CHAOS",
    "17":"UDP",
    "18":"MUX",
    "19":"DCN-MEAS",
    "20":"HMP",
    "21":"PRM",
    "22":"XNS-IDP",
    "23":"TRUNK-1",
    "24":"TRUNK-2",
    "25":"LEAF-1",
    "26":"LEAF-2",
    "27":"RDP",
    "28":"IRTP",
    "29":"ISO-TP4",
    "30":"NETBLT",
    "31":"MFE-NSP",
    "32":"MERIT-INP",
    "33":"DCCP",
    "34":"3PC",
    "35":"IDPR",
    "36":"XTP",
    "37":"DDP",
    "38":"IDPR-CMTP",
    "39":"TP++",
    "40":"IL",
    "41":"IPv6",
    "42":"SDRP",
    "43":"IPv6-Route",
    "44":"IPv6-Frag",
    "45":"IDRP",
    "46":"RSVP",
    "47":"GRE",
    "48":"DSR",
    "49":"BNA",
    "50":"ESP",
    "51":"AH",
    "52":"I-NLSP",
    "53":"SWIPE (deprecated)",
    "54":"NARP",
    "55":"MOBILE",
    "56":"TLSP",
    "57":"SKIP",
    "58":"IPv6-ICMP",
    "59":"IPv6-NoNxt",
    "60":"IPv6-Opts",
    "61":"",
    "62":"CFTP",
    "63":"",
    "64":"SAT-EXPAK",
    "65":"KRYPTOLAN",
    "66":"RVD",
    "67":"IPPC",
    "68":"",
    "69":"SAT-MON",
    "70":"VISA",
    "71":"IPCV",
    "72":"CPNX",
    "73":"CPHB",
    "74":"WSN",
    "75":"PVP",
    "76":"BR-SAT-MON",
    "77":"SUN-ND",
    "78":"WB-MON",
    "79":"WB-EXPAK",
    "80":"ISO-IP",
    "81":"VMTP",
    "82":"SECURE-VMTP",
    "83":"VINES",
    "84":"TTP",
    // "84":"IPTM",
    "85":"NSFNET-IGP",
    "86":"DGP",
    "87":"TCF",
    "88":"EIGRP",
    "89":"OSPFIGP",
    "90":"Sprite-RPC",
    "91":"LARP",
    "92":"MTP",
    "93":"AX.25",
    "94":"IPIP",
    "95":"MICP (deprecated)",
    "96":"SCC-SP",
    "97":"ETHERIP",
    "98":"ENCAP",
    "99":"",
    "100":"GMTP",
    "101":"IFMP",
    "102":"PNNI",
    "103":"PIM",
    "104":"ARIS",
    "105":"SCPS",
    "106":"QNX",
    "107":"A/N",
    "108":"IPComp",
    "109":"SNP",
    "110":"Compaq-Peer",
    "111":"IPX-in-IP",
    "112":"VRRP",
    "113":"PGM",
    "114":"",
    "115":"L2TP",
    "116":"DDX",
    "117":"IATP",
    "118":"STP",
    "119":"SRP",
    "120":"UTI",
    "121":"SMP",
    "122":"SM (deprecated)",
    "123":"PTP",
    "124":"ISIS over IPv4",
    "125":"FIRE",
    "126":"CRTP",
    "127":"CRUDP",
    "128":"SSCOPMCE",
    "129":"IPLT",
    "130":"SPS",
    "131":"PIPE",
    "132":"SCTP",
    "133":"FC",
    "134":"RSVP-E2E-IGNORE",
    "135":"Mobility Header",
    "136":"UDPLite",
    "137":"MPLS-in-IP",
    "138":"manet",
    "139":"HIP",
    "140":"Shim6",
    "141":"WESP",
    "142":"ROHC",
    "143":"Ethernet",
    "253":"",
    "254":"",
    "255":"Reserved"
  });
  let NetworkProtocolLookup = NetworkProtocolTable[tostring(NetworkProtocol)];
  case (
    NetworkProtocolLookup != "", NetworkProtocolLookup,
    'Unassigned'
  )
};
function(NetworkProtocol)
}



//
// Function Name: _ASIM_LookupNetworkProtocol
// Description: This ASIM function returns IP network protocol name associated with the numerical value provided as a parameter. For example, for 6, the function returns "TCP".  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_LookupNetworkProtocol(    ['NetworkProtocol']:int)
{
let function = (NetworkProtocol:int) {
  let NetworkProtocolTable=dynamic
    ({
    "0":"HOPOPT",
    "1":"ICMP",
    "2":"IGMP",
    "3":"GGP",
    "4":"IPv4",
    "5":"ST",
    "6":"TCP",
    "7":"CBT",
    "8":"EGP",
    "9":"IGP",
    "10":"BBN-RCC-MON",
    "11":"NVP-II",
    "12":"PUP",
    "13":"ARGUS (deprecated)",
    "14":"EMCON",
    "15":"XNET",
    "16":"CHAOS",
    "17":"UDP",
    "18":"MUX",
    "19":"DCN-MEAS",
    "20":"HMP",
    "21":"PRM",
    "22":"XNS-IDP",
    "23":"TRUNK-1",
    "24":"TRUNK-2",
    "25":"LEAF-1",
    "26":"LEAF-2",
    "27":"RDP",
    "28":"IRTP",
    "29":"ISO-TP4",
    "30":"NETBLT",
    "31":"MFE-NSP",
    "32":"MERIT-INP",
    "33":"DCCP",
    "34":"3PC",
    "35":"IDPR",
    "36":"XTP",
    "37":"DDP",
    "38":"IDPR-CMTP",
    "39":"TP++",
    "40":"IL",
    "41":"IPv6",
    "42":"SDRP",
    "43":"IPv6-Route",
    "44":"IPv6-Frag",
    "45":"IDRP",
    "46":"RSVP",
    "47":"GRE",
    "48":"DSR",
    "49":"BNA",
    "50":"ESP",
    "51":"AH",
    "52":"I-NLSP",
    "53":"SWIPE (deprecated)",
    "54":"NARP",
    "55":"MOBILE",
    "56":"TLSP",
    "57":"SKIP",
    "58":"IPv6-ICMP",
    "59":"IPv6-NoNxt",
    "60":"IPv6-Opts",
    "61":"",
    "62":"CFTP",
    "63":"",
    "64":"SAT-EXPAK",
    "65":"KRYPTOLAN",
    "66":"RVD",
    "67":"IPPC",
    "68":"",
    "69":"SAT-MON",
    "70":"VISA",
    "71":"IPCV",
    "72":"CPNX",
    "73":"CPHB",
    "74":"WSN",
    "75":"PVP",
    "76":"BR-SAT-MON",
    "77":"SUN-ND",
    "78":"WB-MON",
    "79":"WB-EXPAK",
    "80":"ISO-IP",
    "81":"VMTP",
    "82":"SECURE-VMTP",
    "83":"VINES",
    "84":"TTP",
    // "84":"IPTM",
    "85":"NSFNET-IGP",
    "86":"DGP",
    "87":"TCF",
    "88":"EIGRP",
    "89":"OSPFIGP",
    "90":"Sprite-RPC",
    "91":"LARP",
    "92":"MTP",
    "93":"AX.25",
    "94":"IPIP",
    "95":"MICP (deprecated)",
    "96":"SCC-SP",
    "97":"ETHERIP",
    "98":"ENCAP",
    "99":"",
    "100":"GMTP",
    "101":"IFMP",
    "102":"PNNI",
    "103":"PIM",
    "104":"ARIS",
    "105":"SCPS",
    "106":"QNX",
    "107":"A/N",
    "108":"IPComp",
    "109":"SNP",
    "110":"Compaq-Peer",
    "111":"IPX-in-IP",
    "112":"VRRP",
    "113":"PGM",
    "114":"",
    "115":"L2TP",
    "116":"DDX",
    "117":"IATP",
    "118":"STP",
    "119":"SRP",
    "120":"UTI",
    "121":"SMP",
    "122":"SM (deprecated)",
    "123":"PTP",
    "124":"ISIS over IPv4",
    "125":"FIRE",
    "126":"CRTP",
    "127":"CRUDP",
    "128":"SSCOPMCE",
    "129":"IPLT",
    "130":"SPS",
    "131":"PIPE",
    "132":"SCTP",
    "133":"FC",
    "134":"RSVP-E2E-IGNORE",
    "135":"Mobility Header",
    "136":"UDPLite",
    "137":"MPLS-in-IP",
    "138":"manet",
    "139":"HIP",
    "140":"Shim6",
    "141":"WESP",
    "142":"ROHC",
    "143":"Ethernet",
    "253":"",
    "254":"",
    "255":"Reserved"
  });
  let NetworkProtocolLookup = NetworkProtocolTable[tostring(NetworkProtocol)];
  case (
    NetworkProtocolLookup != "", NetworkProtocolLookup,
    'Unassigned'
  )
};
function(NetworkProtocol)
}



//
// Function Name: ASIM_ResolveDnsQueryType
// Description: This ASIM tabular function is intended for use in ASIM DNS parsers and sets the DnsQueryType and DnsQueryTypeName based on an resource record (or RR) code provided as a parameter. For example, for the RR code 16 the function sets DnsQueryType to 3 and DnsQueryTypeName to TXT. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveDnsQueryType(    ['T']:(*),
    ['field']:string)
{
let DnsQueryTypeLookup=datatable(DnsQueryType:int,DnsQueryTypeName:string)[
   0,"Reserved",
   1,"A",
   2,"NS",
   3,"MD",
   4,"MF",
   5,"CNAME",
   6,"SOA",
   7,"MB",
   8,"MG",
   9,"MR",
   10,"NULL",
   11,"WKS",
   12,"PTR",
   13,"HINFO",
   14,"MINFO",
   15,"MX",
   16,"TXT",
   17,"RP",
   18,"AFSDB",
   19,"X25",
   20,"ISDN",
   21,"RT",
   22,"NSAP",
   23,"NSAP-PTR",
   24,"SIG",
   25,"KEY",
   26,"PX",
   27,"GPOS",
   28,"AAAA",
   29,"LOC",
   30,"NXT",
   31,"EID",
   32,"NIMLOC",
   33,"SRV",
   34,"ATMA",
   35,"NAPTR",
   36,"KX",
   37,"CERT",
   38,"A6",
   39,"DNAME",
   40,"SINK",
   41,"OPT",
   42,"APL",
   43,"DS",
   44,"SSHFP",
   45,"IPSECKEY",
   46,"RRSIG",
   47,"NSEC",
   48,"DNSKEY",
   49,"DHCID",
   50,"NSEC3",
   51,"NSEC3PARAM",
   52,"TLSA",
   53,"SMIMEA",
   54,"Unassigned",
   55,"HIP",
   56,"NINFO",
   57,"RKEY",
   58,"TALINK",
   59,"CDS",
   60,"CDNSKEY",
   61,"OPENPGPKEY",
   62,"CSYNC",
   99,"SPF",
   100,"UINFO",
   101,"UID",
   102,"GID",
   103,"UNSPEC",
   104,"NID",
   105,"L32",
   106,"L64",
   107,"LP",
   108,"EUI48",
   109,"EUI64",
   249,"TKEY",
   250,"TSIG",
   251,"IXFR",
   252,"AXFR",
   253,"MAILB",
   254,"MAILA",
   255,"All",
   256,"URI",
   257,"CAA",
   258,"AVC",
   259,"DOA",
   32768,"TA",
   32769,"DLV",
   65535, "Reserved"
];
T
| extend DnsQueryType = toint(column_ifexists(field,0))
| lookup DnsQueryTypeLookup on DnsQueryType
| extend DnsQueryTypeName = 
   case (
     DnsQueryTypeName != "", DnsQueryTypeName,
     DnsQueryType between (65280 .. 65534), 'Reserved for Private Use',
     'Unassigned'
   )
}



//
// Function Name: _ASIM_ResolveDnsQueryType
// Description: This ASIM tabular function is intended for use in ASIM DNS parsers and sets the DnsQueryType and DnsQueryTypeName based on an resource record (or RR) code provided as a parameter. For example, for the RR code 16 the function sets DnsQueryType to 3 and DnsQueryTypeName to TXT. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveDnsQueryType(    ['T']:(*),
    ['field']:string)
{
let DnsQueryTypeLookup=datatable(DnsQueryType:int,DnsQueryTypeName:string)[
   0,"Reserved",
   1,"A",
   2,"NS",
   3,"MD",
   4,"MF",
   5,"CNAME",
   6,"SOA",
   7,"MB",
   8,"MG",
   9,"MR",
   10,"NULL",
   11,"WKS",
   12,"PTR",
   13,"HINFO",
   14,"MINFO",
   15,"MX",
   16,"TXT",
   17,"RP",
   18,"AFSDB",
   19,"X25",
   20,"ISDN",
   21,"RT",
   22,"NSAP",
   23,"NSAP-PTR",
   24,"SIG",
   25,"KEY",
   26,"PX",
   27,"GPOS",
   28,"AAAA",
   29,"LOC",
   30,"NXT",
   31,"EID",
   32,"NIMLOC",
   33,"SRV",
   34,"ATMA",
   35,"NAPTR",
   36,"KX",
   37,"CERT",
   38,"A6",
   39,"DNAME",
   40,"SINK",
   41,"OPT",
   42,"APL",
   43,"DS",
   44,"SSHFP",
   45,"IPSECKEY",
   46,"RRSIG",
   47,"NSEC",
   48,"DNSKEY",
   49,"DHCID",
   50,"NSEC3",
   51,"NSEC3PARAM",
   52,"TLSA",
   53,"SMIMEA",
   54,"Unassigned",
   55,"HIP",
   56,"NINFO",
   57,"RKEY",
   58,"TALINK",
   59,"CDS",
   60,"CDNSKEY",
   61,"OPENPGPKEY",
   62,"CSYNC",
   99,"SPF",
   100,"UINFO",
   101,"UID",
   102,"GID",
   103,"UNSPEC",
   104,"NID",
   105,"L32",
   106,"L64",
   107,"LP",
   108,"EUI48",
   109,"EUI64",
   249,"TKEY",
   250,"TSIG",
   251,"IXFR",
   252,"AXFR",
   253,"MAILB",
   254,"MAILA",
   255,"All",
   256,"URI",
   257,"CAA",
   258,"AVC",
   259,"DOA",
   32768,"TA",
   32769,"DLV",
   65535, "Reserved"
];
T
| extend DnsQueryType = toint(column_ifexists(field,0))
| lookup DnsQueryTypeLookup on DnsQueryType
| extend DnsQueryTypeName = 
   case (
     DnsQueryTypeName != "", DnsQueryTypeName,
     DnsQueryType between (65280 .. 65534), 'Reserved for Private Use',
     'Unassigned'
   )
}



//
// Function Name: ASIM_ResolveDnsResponseCode
// Description: This ASIM tabular function is intended for use in ASIM DNS parsers and sets the DnsResponseCode and DnsResponseCodeName based on an RCode provided as a parameter. For example, for the RCode 3, the function sets DnsResponseCode to 3 and DnsResponseCodeName to NXDOMAIN. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveDnsResponseCode(    ['T']:(*),
    ['field']:string)
{
let DnsResponseCodeLookup=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[
  0,'NOERROR',
  1,'FORMERR',
  2,'SERVFAIL',
  3,'NXDOMAIN',
  4,'NOTIMP',
  5,'REFUSED',
  6,'YXDOMAIN',
  7,'YXRRSET',
  8,'NXRRSET',
  9,'NOTAUTH',
  10,'NOTZONE',
  11,'DSOTYPENI',
  16,'BADVERS',
  16,'BADSIG',
  17,'BADKEY',
  18,'BADTIME',
  19,'BADMODE',
  20,'BADNAME',
  21,'BADALG',
  22,'BADTRUNC',
  23,'BADCOOKIE'
];
T
| extend DnsResponseCode = toint(column_ifexists(field,0))
| lookup DnsResponseCodeLookup on DnsResponseCode
| extend DnsResponseCodeName = 
  case (
    DnsResponseCodeName != "", DnsResponseCodeName,
    DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use',
    'Unassigned'
  )
}



//
// Function Name: _ASIM_ResolveDnsResponseCode
// Description: This ASIM tabular function is intended for use in ASIM DNS parsers and sets the DnsResponseCode and DnsResponseCodeName based on an RCode provided as a parameter. For example, for the RCode 3, the function sets DnsResponseCode to 3 and DnsResponseCodeName to NXDOMAIN. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveDnsResponseCode(    ['T']:(*),
    ['field']:string)
{
let DnsResponseCodeLookup=datatable(DnsResponseCode:int,DnsResponseCodeName:string)[
  0,'NOERROR',
  1,'FORMERR',
  2,'SERVFAIL',
  3,'NXDOMAIN',
  4,'NOTIMP',
  5,'REFUSED',
  6,'YXDOMAIN',
  7,'YXRRSET',
  8,'NXRRSET',
  9,'NOTAUTH',
  10,'NOTZONE',
  11,'DSOTYPENI',
  16,'BADVERS',
  16,'BADSIG',
  17,'BADKEY',
  18,'BADTIME',
  19,'BADMODE',
  20,'BADNAME',
  21,'BADALG',
  22,'BADTRUNC',
  23,'BADCOOKIE'
];
T
| extend DnsResponseCode = toint(column_ifexists(field,0))
| lookup DnsResponseCodeLookup on DnsResponseCode
| extend DnsResponseCodeName = 
  case (
    DnsResponseCodeName != "", DnsResponseCodeName,
    DnsResponseCode between (3841 .. 4095), 'Reserved for Private Use',
    'Unassigned'
  )
}



//
// Function Name: ASIM_ResolveDstFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the DstHostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveDstFQDN(    ['T']:(*),
    ['field']:string)
{
T
| invoke _ASIM_ResolveFQDN (field)
| project-rename 
    DstHostname = ExtractedHostname,
    DstDomain = Domain,
    DstFQDN = FQDN,
    DstDomainType = DomainType
}



//
// Function Name: _ASIM_ResolveDstFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the DstHostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveDstFQDN(    ['T']:(*),
    ['field']:string)
{
T
| invoke _ASIM_ResolveFQDN (field)
| project-rename 
    DstHostname = ExtractedHostname,
    DstDomain = Domain,
    DstFQDN = FQDN,
    DstDomainType = DomainType
}



//
// Function Name: ASIM_ResolveDvcFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the DvcHostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveDvcFQDN(    ['T']:(*),
    ['field']:string)
{
T
| invoke _ASIM_ResolveFQDN (field)
| project-rename 
    DvcHostname = ExtractedHostname,
    DvcDomain = Domain,
    DvcFQDN = FQDN,
    DvcDomainType = DomainType
}



//
// Function Name: _ASIM_ResolveDvcFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the DvcHostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveDvcFQDN(    ['T']:(*),
    ['field']:string)
{
T
| invoke _ASIM_ResolveFQDN (field)
| project-rename 
    DvcHostname = ExtractedHostname,
    DvcDomain = Domain,
    DvcFQDN = FQDN,
    DvcDomainType = DomainType
}



//
// Function Name: ASIM_ResolveFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the Hostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field. The resulting fields have to be renamed to the needed final names, for example FQDN to DstFQDN.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveFQDN(    ['T']:(*),
    ['field']:string)
{
T
| extend ExtractedHostname = column_ifexists (field,'')
| extend DotSplitHostname = split(ExtractedHostname,".")
| extend SlashSplitHostname = split(ExtractedHostname,"\\")
| extend DomainType = case(
    array_length(SlashSplitHostname) > 1, "Windows",
    array_length(DotSplitHostname) > 1, "FQDN",
    ""
)
| extend 
    FQDN = iif (DomainType == '', '', ExtractedHostname),
    Domain = case (
        DomainType == "Windows", SlashSplitHostname[0],
        DomainType == "FQDN", tostring(strcat_array(array_slice(DotSplitHostname, 1, -1), '.')),
        ""),
    ExtractedHostname = case (
        DomainType == "Windows", SlashSplitHostname[1],
        DomainType == "FQDN", DotSplitHostname[0],
        ExtractedHostname)   
| project-away DotSplitHostname, SlashSplitHostname
}



//
// Function Name: _ASIM_ResolveFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the Hostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field. The resulting fields have to be renamed to the needed final names, for example FQDN to DstFQDN.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveFQDN(    ['T']:(*),
    ['field']:string)
{
T
| extend ExtractedHostname = column_ifexists (field,'')
| extend DotSplitHostname = split(ExtractedHostname,".")
| extend SlashSplitHostname = split(ExtractedHostname,"\\")
| extend DomainType = case(
    array_length(SlashSplitHostname) > 1, "Windows",
    array_length(DotSplitHostname) > 1, "FQDN",
    ""
)
| extend 
    FQDN = iif (DomainType == '', '', ExtractedHostname),
    Domain = case (
        DomainType == "Windows", SlashSplitHostname[0],
        DomainType == "FQDN", tostring(strcat_array(array_slice(DotSplitHostname, 1, -1), '.')),
        ""),
    ExtractedHostname = case (
        DomainType == "Windows", SlashSplitHostname[1],
        DomainType == "FQDN", DotSplitHostname[0],
        ExtractedHostname)   
| project-away DotSplitHostname, SlashSplitHostname
}



//
// Function Name: ASIM_ResolveICMPType
// Description: This ASIM tabular function is intended for use in ASIM Network related parsers and sets the NetworkIcmpCode and NetworkIcmpType fields based on a numerical protocol number provided as a parameter. For example, for the 8 as an input, the function sets NetworkIcmpCode to 8, and NetworkIcmpType to "Echo" . The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveICMPType(    ['T']:(*),
    ['field']:string)
{
let NetworkIcmpTypeLookup = datatable(NetworkIcmpCode:int, NetworkIcmpType:string) [
  0,"Echo Reply",
  1,"Unassigned",
  2,"Unassigned",
  3,"Destination Unreachable",
  4,"Source Quench (Deprecated)",
  5,"Redirect",
  6,"Alternate Host Address (Deprecated)",
  7,"Unassigned",
  8,"Echo",
  9,"Router Advertisement",
  10,"Router Solicitation",
  11,"Time Exceeded",
  12,"Parameter Problem",
  13,"Timestamp",
  14,"Timestamp Reply",
  15,"Information Request (Deprecated)",
  16,"Information Reply (Deprecated)",
  17,"Address Mask Request (Deprecated)",
  18,"Address Mask Reply (Deprecated)",
  19,"Reserved (for Security)",
  20,"Reserved (for Robustness Experiment)", 
  21,"Reserved (for Robustness Experiment)",
  22,"Reserved (for Robustness Experiment)",
  23,"Reserved (for Robustness Experiment)",
  24,"Reserved (for Robustness Experiment)",
  25,"Reserved (for Robustness Experiment)",
  26,"Reserved (for Robustness Experiment)",
  27,"Reserved (for Robustness Experiment)",
  28,"Reserved (for Robustness Experiment)",
  29,"Reserved (for Robustness Experiment)",
  30,"Traceroute (Deprecated)",
  31,"Datagram Conversion Error (Deprecated)",
  32,"Mobile Host Redirect (Deprecated)",
  33,"IPv6 Where-Are-You (Deprecated)",
  34,"IPv6 I-Am-Here (Deprecated)",
  35,"Mobile Registration Request (Deprecated)",
  36,"Mobile Registration Reply (Deprecated)",
  37,"Domain Name Request (Deprecated)",
  38,"Domain Name Reply (Deprecated)",
  39,"SKIP (Deprecated)",
  40,"Photuris",
  41,"ICMP messages utilized by experimental mobility protocols such as Seamoby",
  42,"Extended Echo Request",
  43,"Extended Echo Reply",
  253,"RFC3692-style Experiment 1",
  254,"RFC3692-style Experiment 2",
  255,"Reserved"   
];
T
| extend NetworkIcmpCode = toint(column_ifexists(field,0))
| lookup NetworkIcmpTypeLookup on NetworkIcmpCode
| extend NetworkIcmpType = 
  case (
    NetworkIcmpType != "", NetworkIcmpType,
    'Unassigned'
  )
}



//
// Function Name: _ASIM_ResolveICMPType
// Description: This ASIM tabular function is intended for use in ASIM Network related parsers and sets the NetworkIcmpCode and NetworkIcmpType fields based on a numerical protocol number provided as a parameter. For example, for the 8 as an input, the function sets NetworkIcmpCode to 8, and NetworkIcmpType to "Echo" . The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveICMPType(    ['T']:(*),
    ['field']:string)
{
let NetworkIcmpTypeLookup = datatable(NetworkIcmpCode:int, NetworkIcmpType:string) [
  0,"Echo Reply",
  1,"Unassigned",
  2,"Unassigned",
  3,"Destination Unreachable",
  4,"Source Quench (Deprecated)",
  5,"Redirect",
  6,"Alternate Host Address (Deprecated)",
  7,"Unassigned",
  8,"Echo",
  9,"Router Advertisement",
  10,"Router Solicitation",
  11,"Time Exceeded",
  12,"Parameter Problem",
  13,"Timestamp",
  14,"Timestamp Reply",
  15,"Information Request (Deprecated)",
  16,"Information Reply (Deprecated)",
  17,"Address Mask Request (Deprecated)",
  18,"Address Mask Reply (Deprecated)",
  19,"Reserved (for Security)",
  20,"Reserved (for Robustness Experiment)", 
  21,"Reserved (for Robustness Experiment)",
  22,"Reserved (for Robustness Experiment)",
  23,"Reserved (for Robustness Experiment)",
  24,"Reserved (for Robustness Experiment)",
  25,"Reserved (for Robustness Experiment)",
  26,"Reserved (for Robustness Experiment)",
  27,"Reserved (for Robustness Experiment)",
  28,"Reserved (for Robustness Experiment)",
  29,"Reserved (for Robustness Experiment)",
  30,"Traceroute (Deprecated)",
  31,"Datagram Conversion Error (Deprecated)",
  32,"Mobile Host Redirect (Deprecated)",
  33,"IPv6 Where-Are-You (Deprecated)",
  34,"IPv6 I-Am-Here (Deprecated)",
  35,"Mobile Registration Request (Deprecated)",
  36,"Mobile Registration Reply (Deprecated)",
  37,"Domain Name Request (Deprecated)",
  38,"Domain Name Reply (Deprecated)",
  39,"SKIP (Deprecated)",
  40,"Photuris",
  41,"ICMP messages utilized by experimental mobility protocols such as Seamoby",
  42,"Extended Echo Request",
  43,"Extended Echo Reply",
  253,"RFC3692-style Experiment 1",
  254,"RFC3692-style Experiment 2",
  255,"Reserved"   
];
T
| extend NetworkIcmpCode = toint(column_ifexists(field,0))
| lookup NetworkIcmpTypeLookup on NetworkIcmpCode
| extend NetworkIcmpType = 
  case (
    NetworkIcmpType != "", NetworkIcmpType,
    'Unassigned'
  )
}



//
// Function Name: ASIM_ResolveNetworkProtocol
// Description: This ASIM tabular function is intended for use in ASIM Network related parsers and sets the NetworkProtocol based on a numerical protocol number provided as a parameter. For example, for the protocol number 6 the function sets NetworkProtocol to TCP. The function also sets the auxiliary field NetworkProtocolNumber. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveNetworkProtocol(    ['T']:(*),
    ['field']:string)
{
let NetworkProtocolLookup = datatable(NetworkProtocolNumber:int, NetworkProtocol:string) [
  0,"HOPOPT",
  1,"ICMP",
  2,"IGMP",
  3,"GGP",
  4,"IPv4",
  5,"ST",
  6,"TCP",
  7,"CBT",
  8,"EGP",
  9,"IGP",
  10,"BBN-RCC-MON",
  11,"NVP-II",
  12,"PUP",
  13,"ARGUS (deprecated)",
  14,"EMCON",
  15,"XNET",
  16,"CHAOS",
  17,"UDP",
  18,"MUX",
  19,"DCN-MEAS",
  20,"HMP",
  21,"PRM",
  22,"XNS-IDP",
  23,"TRUNK-1",
  24,"TRUNK-2",
  25,"LEAF-1",
  26,"LEAF-2",
  27,"RDP",
  28,"IRTP",
  29,"ISO-TP4",
  30,"NETBLT",
  31,"MFE-NSP",
  32,"MERIT-INP",
  33,"DCCP",
  34,"3PC",
  35,"IDPR",
  36,"XTP",
  37,"DDP",
  38,"IDPR-CMTP",
  39,"TP++",
  40,"IL",
  41,"IPv6",
  42,"SDRP",
  43,"IPv6-Route",
  44,"IPv6-Frag",
  45,"IDRP",
  46,"RSVP",
  47,"GRE",
  48,"DSR",
  49,"BNA",
  50,"ESP",
  51,"AH",
  52,"I-NLSP",
  53,"SWIPE (deprecated)",
  54,"NARP",
  55,"MOBILE",
  56,"TLSP",
  57,"SKIP",
  58,"IPv6-ICMP",
  59,"IPv6-NoNxt",
  60,"IPv6-Opts",
  61,"",
  62,"CFTP",
  63,"",
  64,"SAT-EXPAK",
  65,"KRYPTOLAN",
  66,"RVD",
  67,"IPPC",
  68,"",
  69,"SAT-MON",
  70,"VISA",
  71,"IPCV",
  72,"CPNX",
  73,"CPHB",
  74,"WSN",
  75,"PVP",
  76,"BR-SAT-MON",
  77,"SUN-ND",
  78,"WB-MON",
  79,"WB-EXPAK",
  80,"ISO-IP",
  81,"VMTP",
  82,"SECURE-VMTP",
  83,"VINES",
  84,"TTP",
  84,"IPTM",
  85,"NSFNET-IGP",
  86,"DGP",
  87,"TCF",
  88,"EIGRP",
  89,"OSPFIGP",
  90,"Sprite-RPC",
  91,"LARP",
  92,"MTP",
  93,"AX.25",
  94,"IPIP",
  95,"MICP (deprecated)",
  96,"SCC-SP",
  97,"ETHERIP",
  98,"ENCAP",
  99,"",
  100,"GMTP",
  101,"IFMP",
  102,"PNNI",
  103,"PIM",
  104,"ARIS",
  105,"SCPS",
  106,"QNX",
  107,"A/N",
  108,"IPComp",
  109,"SNP",
  110,"Compaq-Peer",
  111,"IPX-in-IP",
  112,"VRRP",
  113,"PGM",
  114,"",
  115,"L2TP",
  116,"DDX",
  117,"IATP",
  118,"STP",
  119,"SRP",
  120,"UTI",
  121,"SMP",
  122,"SM (deprecated)",
  123,"PTP",
  124,"ISIS over IPv4",
  125,"FIRE",
  126,"CRTP",
  127,"CRUDP",
  128,"SSCOPMCE",
  129,"IPLT",
  130,"SPS",
  131,"PIPE",
  132,"SCTP",
  133,"FC",
  134,"RSVP-E2E-IGNORE",
  135,"Mobility Header",
  136,"UDPLite",
  137,"MPLS-in-IP",
  138,"manet",
  139,"HIP",
  140,"Shim6",
  141,"WESP",
  142,"ROHC",
  143,"Ethernet",
  253,"",
  254,"",
  255,"Reserved"
];
T
| extend NetworkProtocolNumber = toint(column_ifexists(field,0))
| lookup NetworkProtocolLookup on NetworkProtocolNumber
| extend NetworkProtocol = 
  case (
    NetworkProtocol != "", NetworkProtocol,
    'Unassigned'
  )
}



//
// Function Name: _ASIM_ResolveNetworkProtocol
// Description: This ASIM tabular function is intended for use in ASIM Network related parsers and sets the NetworkProtocol based on a numerical protocol number provided as a parameter. For example, for the protocol number 6 the function sets NetworkProtocol to TCP. The function also sets the auxiliary field NetworkProtocolNumber. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field.  

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveNetworkProtocol(    ['T']:(*),
    ['field']:string)
{
let NetworkProtocolLookup = datatable(NetworkProtocolNumber:int, NetworkProtocol:string) [
  0,"HOPOPT",
  1,"ICMP",
  2,"IGMP",
  3,"GGP",
  4,"IPv4",
  5,"ST",
  6,"TCP",
  7,"CBT",
  8,"EGP",
  9,"IGP",
  10,"BBN-RCC-MON",
  11,"NVP-II",
  12,"PUP",
  13,"ARGUS (deprecated)",
  14,"EMCON",
  15,"XNET",
  16,"CHAOS",
  17,"UDP",
  18,"MUX",
  19,"DCN-MEAS",
  20,"HMP",
  21,"PRM",
  22,"XNS-IDP",
  23,"TRUNK-1",
  24,"TRUNK-2",
  25,"LEAF-1",
  26,"LEAF-2",
  27,"RDP",
  28,"IRTP",
  29,"ISO-TP4",
  30,"NETBLT",
  31,"MFE-NSP",
  32,"MERIT-INP",
  33,"DCCP",
  34,"3PC",
  35,"IDPR",
  36,"XTP",
  37,"DDP",
  38,"IDPR-CMTP",
  39,"TP++",
  40,"IL",
  41,"IPv6",
  42,"SDRP",
  43,"IPv6-Route",
  44,"IPv6-Frag",
  45,"IDRP",
  46,"RSVP",
  47,"GRE",
  48,"DSR",
  49,"BNA",
  50,"ESP",
  51,"AH",
  52,"I-NLSP",
  53,"SWIPE (deprecated)",
  54,"NARP",
  55,"MOBILE",
  56,"TLSP",
  57,"SKIP",
  58,"IPv6-ICMP",
  59,"IPv6-NoNxt",
  60,"IPv6-Opts",
  61,"",
  62,"CFTP",
  63,"",
  64,"SAT-EXPAK",
  65,"KRYPTOLAN",
  66,"RVD",
  67,"IPPC",
  68,"",
  69,"SAT-MON",
  70,"VISA",
  71,"IPCV",
  72,"CPNX",
  73,"CPHB",
  74,"WSN",
  75,"PVP",
  76,"BR-SAT-MON",
  77,"SUN-ND",
  78,"WB-MON",
  79,"WB-EXPAK",
  80,"ISO-IP",
  81,"VMTP",
  82,"SECURE-VMTP",
  83,"VINES",
  84,"TTP",
  84,"IPTM",
  85,"NSFNET-IGP",
  86,"DGP",
  87,"TCF",
  88,"EIGRP",
  89,"OSPFIGP",
  90,"Sprite-RPC",
  91,"LARP",
  92,"MTP",
  93,"AX.25",
  94,"IPIP",
  95,"MICP (deprecated)",
  96,"SCC-SP",
  97,"ETHERIP",
  98,"ENCAP",
  99,"",
  100,"GMTP",
  101,"IFMP",
  102,"PNNI",
  103,"PIM",
  104,"ARIS",
  105,"SCPS",
  106,"QNX",
  107,"A/N",
  108,"IPComp",
  109,"SNP",
  110,"Compaq-Peer",
  111,"IPX-in-IP",
  112,"VRRP",
  113,"PGM",
  114,"",
  115,"L2TP",
  116,"DDX",
  117,"IATP",
  118,"STP",
  119,"SRP",
  120,"UTI",
  121,"SMP",
  122,"SM (deprecated)",
  123,"PTP",
  124,"ISIS over IPv4",
  125,"FIRE",
  126,"CRTP",
  127,"CRUDP",
  128,"SSCOPMCE",
  129,"IPLT",
  130,"SPS",
  131,"PIPE",
  132,"SCTP",
  133,"FC",
  134,"RSVP-E2E-IGNORE",
  135,"Mobility Header",
  136,"UDPLite",
  137,"MPLS-in-IP",
  138,"manet",
  139,"HIP",
  140,"Shim6",
  141,"WESP",
  142,"ROHC",
  143,"Ethernet",
  253,"",
  254,"",
  255,"Reserved"
];
T
| extend NetworkProtocolNumber = toint(column_ifexists(field,0))
| lookup NetworkProtocolLookup on NetworkProtocolNumber
| extend NetworkProtocol = 
  case (
    NetworkProtocol != "", NetworkProtocol,
    'Unassigned'
  )
}



//
// Function Name: ASIM_ResolveSrcFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the SrcHostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASIM_ResolveSrcFQDN(    ['T']:(*),
    ['field']:string)
{
T
| invoke _ASIM_ResolveFQDN (field)
| project-rename 
    SrcHostname = ExtractedHostname,
    SrcDomain = Domain,
    SrcFQDN = FQDN,
    SrcDomainType = DomainType
}



//
// Function Name: _ASIM_ResolveSrcFQDN
// Description: This ASIM tabular function is intended for use in ASIM parsers and sets the SrcHostname entity fields based on an FQDN or hostname provided as a parameter. The function is invoked using the [invoke operator](https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator) and requires the source table to have a TimeGenerated field. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) _ASIM_ResolveSrcFQDN(    ['T']:(*),
    ['field']:string)
{
T
| invoke _ASIM_ResolveFQDN (field)
| project-rename 
    SrcHostname = ExtractedHostname,
    SrcDomain = Domain,
    SrcFQDN = FQDN,
    SrcDomainType = DomainType
}



