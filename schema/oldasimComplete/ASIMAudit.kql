//
// Function Name: ASimAuditEvent
// Description: This ASIM parser supports normalizing audit events from all supported sources to the ASIM Audit Event activity normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEvent(    ['pack']:bool=False)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeASimAuditEvent') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser);
let BuiltInDisabled=toscalar('ExcludeASimAuditEventBuiltIn' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
union isfuzzy=true
  vimAuditEventEmpty, 
  ASimAuditEventMicrosoftExchangeAdmin365  (BuiltInDisabled or ('ExcludeASimAuditEventMicrosoftExchangeAdmin365' in (DisabledParsers))),
  ASimAuditEventMicrosoftWindowsEvents  (BuiltInDisabled or ('ExcludeASimAuditEventMicrosoftWindowsEvents' in (DisabledParsers))),
  ASimAuditEventMicrosoftSecurityEvents  (BuiltInDisabled or ('ExcludeASimAuditEventMicrosoftSecurityEvents' in (DisabledParsers))),
  ASimAuditEventMicrosoftEvent  (BuiltInDisabled or ('ExcludeASimAuditEventMicrosoftEvents' in (DisabledParsers))),
  ASimAuditEventAzureActivity  (BuiltInDisabled or ('ExcludeASimAuditEventAzureActivity' in (DisabledParsers))),
  ASimAuditEventCiscoMeraki  (BuiltInDisabled or ('ExcludeASimAuditEventCiscoMeraki' in (DisabledParsers))),
  ASimAuditEventCiscoMerakiSyslog  (BuiltInDisabled or ('ExcludeASimAuditEventCiscoMerakiSyslog' in (DisabledParsers))),
  ASimAuditEventBarracudaWAF (BuiltInDisabled or ('ExcludeASimAuditEventBarracudaWAF' in (DisabledParsers))),
  ASimAuditEventBarracudaCEF (BuiltInDisabled or ('ExcludeASimAuditEventBarracudaCEF' in (DisabledParsers))),
  ASimAuditEventCiscoISE  (BuiltInDisabled or ('ExcludeASimAuditEventCiscoISE' in (DisabledParsers))),
  ASimAuditEventVectraXDRAudit(BuiltInDisabled or ('ExcludeASimAuditEventVectraXDRAudit' in (DisabledParsers))),
  ASimAuditEventSentinelOne  (BuiltInDisabled or ('ExcludeASimAuditEventSentinelOne' in (DisabledParsers))),
  ASimAuditEventCrowdStrikeFalconHost(BuiltInDisabled or ('ExcludeASimAuditEventCrowdStrikeFalconHost' in (DisabledParsers))),
  ASimAuditEventVMwareCarbonBlackCloud(BuiltInDisabled or ('ExcludeASimAuditEventVMwareCarbonBlackCloud' in (DisabledParsers)))
}



//
// Function Name: ASimAuditEventAzureActivity
// Description: This ASIM parser supports normalizing Azure administrative activity in the AzureActivity table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventAzureActivity(    ['disabled']:bool=False)
{
let parser=(disabled:bool=false){
   let AzureActivityOperationLookup = datatable (op:string, EventType:string) 
  [
    'ACTION', 'Execute',
    'WRITE', 'Set',
    'DELETE', 'Delete'
  ];
  let AzureActivityStatusLookup = datatable (ActivityStatusValue:string, ActivitySubstatusValue:string, EventResult:string, EventResultDetails:string) 
  [
      "Accept","Accepted","Success","",
      "Accept","Created","Success","",
      "Accept","OK","Success","",
      "Accept","","Success","",
      "Accepted","","Success","",
      "Active","","Success","Active",
      "Failed","","Failure","",
      "Failure","BadRequest","Failure","Bad Request",
      "Failure","Conflict","Failure","Bad Request",
      "Failure","Forbidden","Failure","Unauthorized",
      "Failure","InternalServerError","Failure","Internal error",
      "Failure","MethodNotAllowed","Failure","Bad Request",
      "Failure","NotFound","Failure","Not found",
      "Failure","Unauthorized","Failure","Unauthorized",
      "Failure","","Failure","",
      "In Progress","","Success","In Progress",
      "Resolved","","Success","",
      "Start","","Success","Start",
      "Started","","Success","Start",
      "Succeeded","","Success","",
      "Success","Created","Success","",
      "Success","NoContent","Success","",
      "Success","OK","Success","",
      "Success","","Success","",
      "Updated","","Success","",
      "Succeeded","OK","Success","",
      "Accepted","Accepted","Success","",
      "Accepted","OK","Success","",
      "Failed","Forbidden","Failure","Unauthorized",
      "Succeeded","Created","Success","",
      "Failed","BadRequest","Failure","Bad request",
      "Accepted","Created","Success","",
      "Failed","Conflict","Failure","Bad request",
      "Failed","MethodNotAllowed","Failure","Bad request",
      "Failure","BadGateway","Failure","Bad request",
      "Succeeded","NoContent","Success","",
      "Failure","ServiceUnavailable","Failure","Internal error",
      "Failure","GatewayTimeout","Failure","Internal error",
      "Failed","NotFound","Failure","Not found",
      "Failed","BadGateway","Failure","Bad request",
      "Failure","UnsupportedMediaType","Failure","Bad request",
      "Failed","Unauthorized","Failure","Unauthorized",
      "Cancel","","Failure","Cancelled"
  ];
  AzureActivity 
  | where not(disabled)
  | where CategoryValue == "Administrative"
  | project-away HTTPRequest, Level, SourceSystem, EventSubmissionTimestamp, TenantId, OperationId, Hierarchy, Category, ResourceId, ResourceProvider, Resource
  | project-rename 
      Operation = OperationNameValue,
      SrcIpAddr = CallerIpAddress,
      EventOriginalUid = EventDataId,
      ActorSessionId = CorrelationId,
      EventOriginalType = CategoryValue
  | extend
      EventCount = int(1),
      EventStartTime = TimeGenerated, 
      EventEndTime= TimeGenerated,
      EventProduct = 'Azure',
      EventVendor = 'Microsoft',
      EventSchemaVersion = '0.1.0',
      EventSchema = 'AuditEvent',
      ObjectType = "Cloud Resource",
      TargetAppName = "Azure",
      TargetAppType = "CSP"
  // --
  // Calculate EventResult, EventResultDetails, and EventResultOriginalDetails
  | extend
      EventOriginalResultDetails = strcat (
          ActivityStatusValue, 
          iff (ActivitySubstatusValue !="", strcat(' [', ActivitySubstatusValue, ']'), "")
      )
  | extend 
      ActivitySubstatusValue = iff (ActivitySubstatusValue matches regex "\\d+", "", ActivitySubstatusValue)
  | lookup AzureActivityStatusLookup on ActivityStatusValue, ActivitySubstatusValue
  | extend EventResult = iff(EventResult == "", "Other", EventResult)
  | extend EventSeverity = iff(EventResult == "Failure", "Low", "Informational")
  | project-away ActivityStatus*, ActivitySubstatus*
  // --
  // Calculate Actor
  | extend 
      Caller = iff(Caller == "Microsoft.RecoveryServices", "", Caller)
  | extend 
      ActorUsernameType = iff (Caller has "@", "UPN", "")
  | extend 
      ActorUsername = iff (ActorUsernameType == "UPN", Caller, ""),
      ActorUserId = iff (ActorUsernameType != "UPN", Caller, "")
  | extend
      ActorUserIdType = iff  (ActorUserId != "", "AADID", "")
  | project-away Caller
  // --
  // Calculate Object
  | extend 
      entity = tostring(Properties_d.entity), 
      resource = tostring(Properties_d.resource),
      entity_name = tostring(Properties_d.["Entity Name"])
  | extend Object = case ( 
          entity != "", entity,
          strcat ("/subscriptions/", SubscriptionId, "/resourceGroups/", ResourceGroup, "/providers/", ResourceProviderValue, "/",resource, iff (entity_name != "", strcat("/", entity_name), ""))
      )
  | project-away entity, resource,entity_name, _SubscriptionId, SubscriptionId, ResourceGroup, ResourceProviderValue
  // --
  // Calculate EventType
  | extend op = toupper(tostring(split(Operation,"/")[-1]))
  | lookup AzureActivityOperationLookup on op
  | extend EventType = iff (EventType == "", "Other", EventType)
  | project-away op
  // Aliases
  | extend AdditionalFields = pack_dictionary("Authorization", Authorization_d, "Claims", Claims_d, "Error", Properties_d.statusMessage)
  // -- Aliases
  | extend 
      IpAddr = SrcIpAddr,
      User = ActorUsername,
      Application = TargetAppName,
      Dst = TargetAppName,
      Src = SrcIpAddr,
  // -- Entity identifier explicit aliases
      ActorUserUpn = ActorUsername,
      ActorUserAadId = ActorUserId
  | project-away OperationName, Properties*, Authorization*, Claims*
  // -- Properties*
};
parser (disabled=disabled)
}



//
// Function Name: ASimAuditEventBarracudaCEF
// Description: This ASIM parser supports normalizing Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventBarracudaCEF(    ['disabled']:bool=False)
{
let EventTypeLookup = datatable (
    ChangeType_s: string,
    EventType_lookup: string
)
    [
    "SET", "Set",
    "ADD", "Create",
    "DEL", "Delete",
    "NONE", "Other",
    "", "Other"
];
let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let ObjectTypeLookup = datatable (ObjectType_s: string, ObjectType: string)[
    "global", "Other",
    "Services", "Service",
    "web_firewall_policy", "Policy Rule",
    "service", "Service",
    "json_url_profile", "Other",
    "server", "Service",
    "header_acl", "Directory Service Object",
    "virtual_ip_config_address", "Configuration Atom",
    "aps_req_rewrite_policy", "Policy Rule",
    "aps_url_acl", "Directory Service Object",
    "websocket_security_policy", "Policy Rule",
    "aps_ftp_acl", "Directory Service Object",
    "user_system_ip", "Configuration Atom",
    "syslog_server", "Service",
    "attack_action", "Configuration Atom",
    "global_adr", "Configuration Atom",
    "aps_content_protection", "Other"
];
let parser = (disabled: bool=false) {
    let BarracudaCEF = 
        CommonSecurityLog
        | where not(disabled)
            and DeviceVendor startswith "Barracuda"
            and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
        | where DeviceEventCategory == "AUDIT" 
            and (toupper(ProcessName) !in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
        | parse trim(@'[^\w(")]+', Message) with * "Reason=" Reason: string 
        | extend Reason = trim('"', Reason)
        | extend 
            EventResultDetails = Reason,
            severity = toint(LogSeverity)
        | lookup SeverityLookup on severity
        | lookup EventTypeLookup on $left.EventOutcome == $right.ChangeType_s
        | lookup ObjectTypeLookup on $left.FileType == $right.ObjectType_s
        | extend
            EventResult = "Success", 
            EventSchema = "AuditEvent",
            EventSchemaVersion = "0.1.0",
            EventVendor = "Barracuda",
            EventProduct = "WAF",
            EventCount = toint(1)
        | extend
            EventType = EventType_lookup,
            Dvc = DeviceName, 
            EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime) - tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
            Operation = ProcessName,
            DvcIpAddr = DeviceAddress,
            NewValue = DeviceCustomString1,
            SrcIpAddr = SourceIP,
            EventMessage = Message,
            OldValue = DeviceCustomString2,
            DvcHostname = DeviceName,
            ActorUsername = DestinationUserName,
            Object = FileName,
            ThreatConfidence = toint(ThreatConfidence) ,
            EventUid = _ItemId    
        | extend
            Src = SrcIpAddr,
            EventEndTime = EventStartTime,
            ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
            ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""),
            User = ActorUsername,
            Value = NewValue 
        | extend
            IpAddr = SrcIpAddr,
            ValueType = iff(isnotempty(Value), "Other", "")
        | project-away
            EventType_lookup,
            ThreatConfidence,
            CommunicationDirection,
            AdditionalExtensions,
            Device*,
            Source*,
            Reason,
            Destination*,
            Activity,
            LogSeverity,
            ApplicationProtocol,
            ProcessID,
            ExtID,
            Protocol,
            ReceiptTime,
            SimplifiedDeviceAction,
            OriginalLogSeverity,
            ProcessName,
            EndTime,
            ExternalID,
            File*,
            ReceivedBytes,
            Message,
            Old*,
            EventOutcome,
            Request*,
            StartTime,
            Field*,
            Flex*,
            Remote*,
            Malicious*,
            severity,
            ThreatSeverity,
            IndicatorThreatType,
            ThreatDescription,
            _ResourceId,
            SentBytes,
            ReportReferenceLink,
            Computer,
            TenantId,
            CollectorHostName,
            _ItemId;
    BarracudaCEF
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuditEventBarracudaWAF
// Description: This ASIM parser supports normalizing Barracuda WAF logs ingested in 'barracuda_CL' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventBarracudaWAF(    ['disabled']:bool=False)
{
let barracudaSchema = datatable(
    LogType_s: string,
    UnitName_s: string,
    EventName_s: string,
    DeviceReceiptTime_s: string,
    ChangeType_s: string,
    CommandName_s: string,
    Severity_s: string,
    LoginIP_s: string,
    NewValue_s: string,
    HostIP_s: string,
    host_s: string,
    OldValue_s: string,
    EventMessage_s: string,
    AdminName_s: string,
    ObjectType_s: string,
    ObjectName_s: string,
    TimeTaken_d: real,
    _ResourceId: string,
    RawData: string,
    SourceIP: string,
    Message: string,
    Computer: string,
    MG: string,
    ManagementGroupName: string,
    TenantId: string,
    SourceSystem: string
)[];
let EventTypeLookup = datatable (
    ChangeType_s: string,
    EventType_lookup: string
)
    [
    "SET", "Set",
    "ADD", "Create",
    "DEL", "Delete",
    "NONE", "Other",
    "", "Other"
];
let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let ObjectTypeLookup = datatable (ObjectType_s: string, ObjectType: string)[
    "global", "Other",
    "Services", "Service",
    "web_firewall_policy", "Policy Rule",
    "service", "Service",
    "json_url_profile", "Other",
    "server", "Service",
    "header_acl", "Directory Service Object",
    "virtual_ip_config_address", "Configuration Atom",
    "aps_req_rewrite_policy", "Policy Rule",
    "aps_url_acl", "Directory Service Object",
    "websocket_security_policy", "Policy Rule",
    "aps_ftp_acl", "Directory Service Object",
    "user_system_ip", "Configuration Atom",
    "syslog_server", "Service",
    "attack_action", "Configuration Atom",
    "global_adr", "Configuration Atom",
    "aps_content_protection", "Other"
];
let parser = (disabled: bool=false) {
    let BarracudaCustom = 
        (union isfuzzy=true
            barracudaSchema,
            barracuda_CL
        | where not(disabled) 
            and LogType_s == "AUDIT" 
            and EventName_s !in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN")
        | parse trim(@'[^\w(")]+', EventMessage_s) with * "Reason=" Reason: string
        | extend Reason = trim('"', Reason)
        | extend
            EventResultDetails = Reason,
            severity = toint(Severity_s)
        | lookup SeverityLookup on severity
        | lookup EventTypeLookup on ChangeType_s
        | lookup ObjectTypeLookup on ObjectType_s
        | extend
            EventType = EventType_lookup,
            EventResult = "Success", 
            EventSchema = "AuditEvent",
            EventSchemaVersion = "0.1.0",
            EventVendor = "Barracuda",
            EventProduct = "WAF",
            EventCount = toint(1)
        | extend
            Dvc = UnitName_s, 
            EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s) - tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s))),
            Operation = CommandName_s,
            DvcIpAddr = HostIP_s,
            NewValue = NewValue_s,
            SrcIpAddr = LoginIP_s,
            EventMessage = EventMessage_s,
            OldValue = OldValue_s,
            DvcHostname = host_s,
            ActorUsername = AdminName_s,
            Object = ObjectName_s      
        | extend
            Src = SrcIpAddr,
            EventEndTime = EventStartTime,
            ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
            ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""),
            User = ActorUsername,
            Value = NewValue          
        | extend
            IpAddr = SrcIpAddr,
            ValueType = iff(isnotempty(Value), "Other", "")
        | project-away
            *_d,
            *_s,
            EventType_lookup,
            _ResourceId,
            Reason,
            severity,
            RawData,
            SourceIP,
            Message,
            Computer,
            MG,
            ManagementGroupName,
            TenantId,
            SourceSystem
        );
    BarracudaCustom
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuditEventCiscoISE
// Description: This ASIM parser supports normalizing administrative activity in the Cisco ISE events to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventCiscoISE(    ['disabled']:bool=False)
{
let EventFieldsLookup=datatable(
EventOriginalType: int,
EventType: string,
EventResult: string,
EventOriginalSeverity: string,
EventSeverity: string,
Object: string,
Operation: string,
EventMessage: string
)[
"52000", "Create", "Success", "NOTICE", "Informational", "ISE instance", "Added configuration", "Added configuration",
"52001", "Set", "Success", "NOTICE", "Informational", "ISE instance", "Changed configuration", "Changed configuration",
"52002", "Delete", "Success", "NOTICE", "Informational", "ISE instance", "Deleted configuration", "Deleted configuration",
"52003", "Other", "Success", "NOTICE", "Informational", "Node", "Deregister Node", "One of the ISE instances in the deployment has been de-registered.",
"52004", "Other", "Success", "NOTICE", "Informational", "Node", "Register Node", "A new ISE instance has been registered and has joined the deployment.",
"52005", "Enable", "Success", "NOTICE", "Informational", "Node", "Activate Node", "An ISE instance has been activated to receive updates from the Primary node.",
"52006", "Disable", "Success", "NOTICE", "Informational", "Node", "Deactivate ISE Node", "An ISE instance has been deactivated and will no longer receive updates from the Primary node.",
"52007", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Force Full replication", "A Force Full replication has been issued for an ISE instance.",
"52008", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Replacement Register Handler", "A new ISE instance has joined the deployment through hardware replacement.",
"52009", "Other", "Success", "NOTICE", "Informational", "Node", "Promote Node", "A Secondary node has been promoted to be the Primary node of the deployment.",
"52013", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Hardware Replacement", "A new ISE instance has joined the deployment through hardware replacement.",
"52015", "Enable", "Success", "NOTICE", "Informational", "LogCollector Target", "Enable LogCollector Target", "Enable the deployment Log Collector target.",
"52016", "Other", "Success", "NOTICE", "Informational", "LogCollector Node", "Select LogCollector Node", "The Log Collector node for the deployment has been selected.",
"52017", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Apply software update", "Apply a software update to the selected ISE instances.",
"52030", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Full replication succeeded", "Full replication was completed successfully",
"52031", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Full replication failed", "Failed to complete full replication",
"52033", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Registration succeeded", "Registration with the primary node was completed successfully",
"52035", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Registration failed", "Failed to perform the full replication requested by the primary instance",
"52038", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Registration succeeded", "The ISE instance was successfully joined to a distributed ISE deployment",
"52039", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Registration failed", "The ISE instance was unable to join a distributed deployment",
"52042", "Other", "Success", "NOTICE", "Informational", "Primary instance", "Demotion succeeded", "Demotion of the existing primary instance was completed successfully",
"52043", "Other", "Failure", "NOTICE", "Low", "Primary instance", "Demotion failed", "Demotion of the existing primary instance failed",
"52045", "Other", "Success", "NOTICE", "Informational", "Secondary instance", "Promotion succeeded", "Promotion of the secondary instance was completed successfully",
"52046", "Other", "Failure", "NOTICE", "Low", "Secondary instance", "Promotion failed", "Promotion of a secondary instance failed",
"52072", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Deregister succeeded", "Deregistration was completed successfully",
"52073", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Deregister failed", "Deregistration failed",
"52078", "Delete", "Failure", "NOTICE", "Low", "ISE secondary instance", "Delete node failed", "Failed to delete the ISE secondary instance in inactive mode from the deployment",
"52079", "Delete", "Success", "NOTICE", "Informational", "ISE secondary instance", "Delete node succeeded", "The ISE primary instance successfully deleted the secondary instance in inactive mode",
"52080", "Delete", "Failure", "NOTICE", "Low", "ISE secondary instance", "Delete node failed", "Failed to delete the ISE secondary instance in inactive mode from the primary instance",
"52082", "Other", "Failure", "NOTICE", "Low", "ISE secondary instance", "Backup failed", "An immediate backup for the secondary instance failed",
"52084", "Other", "Success", "NOTICE", "Informational", "ISE primary instance", "Backup succeeded", "An immediate backup for the primary instance was completed successfully",
"52085", "Other", "Failure", "NOTICE", "Low", "ISE primary instance", "Backup failed", "An immediate backup for the primary failed",
"52091", "Other", "Failure", "NOTICE", "Low", "Update bundle", "Software update failed", "Software update download of update bundle failed",
"52092", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Software update succeeded", "The software update was completed successfully",
"52093", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Software update failed", "The software update failed",
"57000", "Other", "Success", "NOTICE", "Informational", "Log file(s)", "Deleted rolled-over local log file(s)", "Deleted rolled-over local log file(s)",
"58001", "Other", "Success", "NOTICE", "Informational", "ISE process", "ISE process started", "An ISE process has started",
"58002", "Other", "Success", "NOTICE", "Informational", "ISE process", "ISE process stopped", "An ISE process has stopped",
"58003", "Other", "Success", "NOTICE", "Informational", "ISE processes", "ISE processes started", "All ISE processes have started",
"58004", "Other", "Success", "NOTICE", "Informational", "ISE processes", "ISE processes stopped", "All ISE processes have stopped",
"58005", "Other", "Success", "NOTICE", "Informational", "ISE process", "ISE process was restarted by watchdog service", "The watchdog service has restarted an ISE process",
"60000", "Install", "Success", "NOTICE", "Informational", "Node", "Patch installation completed successfully on the node", "Patch installation completed successfully on the node",
"60001", "Install", "Failure", "NOTICE", "Low", "Node", "Patch installation failed on the node", "Patch installation failed on the node",
"60002", "Other", "Success", "NOTICE", "Informational", "Node", "Patch rollback completed successfully on the node", "Patch rollback completed successfully on the node",
"60003", "Other", "Failure", "NOTICE", "Low", "Node", "Patch rollback failed on the node", "Patch rollback failed on the node",
"60050", "Create", "Success", "NOTICE", "Informational", "Node", "Node added to deployment successfully", "Node added to deployment successfully",
"60051", "Create", "Failure", "NOTICE", "Low", "Node", "Failed to add node to deployment", "Failed to add node to deployment",
"60052", "Delete", "Success", "NOTICE", "Informational", "Node", "Node removed from deployment", "Node removed from deployment",
"60053", "Delete", "Failure", "NOTICE", "Low", "Node", "Failed to remove node from deployment", "Failed to remove node from deployment",
"60054", "Other", "Success", "NOTICE", "Informational", "Node", "Node updated successfully", "Node updated successfully",
"60055", "Other", "Failure", "NOTICE", "Low", "Node", "Failed to update node", "Failed to update node",
"60056", "Other", "Success", "NOTICE", "Informational", "Cluster", "The runtime status of the node group has changed", "There is a change in the cluster state",
"60057", "Other", "Success", "NOTICE", "Informational", "PSN node", "A PSN node went down", "One of the PSN nodes in the node group has gone down",
"60058", "Other", "Success", "NOTICE", "Informational", "Heartbeat System", "The initial status of the heartbeat system", "The initial status of the heartbeat system",
"60059", "Other", "Success", "NOTICE", "Informational", "Node", "Node has successfully registered with MnT", "Node has successfully registered with MnT",
"60060", "Other", "Success", "NOTICE", "Informational", "Policy Service nodes", "Administrator invoked OCSP Clear Cache operation for all Policy Service nodes", "The ISE Administrator invoked OCSP Clear Cache operation for all Policy Service nodes",
"60061", "Other", "Success", "NOTICE", "Informational", "Policy Service nodes", "OCSP Clear Cache operation completed successfully", "OCSP Clear Cache operation completed successfully on all Policy Service nodes",
"60062", "Other", "Failure", "NOTICE", "Low", "Policy Service nodes", "OCSP Clear Cache operation terminated with error", "OCSP Clear Cache clear operation terminated with error on one or more Policy Service nodes",
"60063", "Other", "Success", "NOTICE", "Informational", "ISE secondary node", "Replication to node completed successfully", "Replication of data to secondary node completed successfully",
"60064", "Other", "Failure", "NOTICE", "Low", "ISE secondary node", "Replication to node failed", "Replication of data to secondary node failed",
"60068", "Other", "Success", "INFO", "Informational", "Profiler Feed Service", "Profiler Feed Service - manual download initiated", "The Profiler Feed Service has begun the check and download of new and/or updated Profiles in response to Administrator's request",
"60069", "Other", "Success", "INFO", "Informational", "Profiler Feed Service", "Profiler Feed Service - Profiles Downloaded", "The Profiler Feed Service has downloaded new and/or updated Profiles",
"60070", "Other", "Success", "INFO", "Informational", "Profiler Feed Service", "Profiler Feed Service - No Profiles Downloaded", "The Profiler Feed Service found no new and/or updated Profiles to download",
"60083", "Set", "Success", "INFO", "Informational", "Syslog Server", "Syslog Server configuration change", "Syslog Server configuration change has occurred",
"60084", "Set", "Success", "INFO", "Informational", "ADEOS CLI user", "ADEOS CLI user configuration change", "Configuration change occurred for ADEOS CLI user",
"60085", "Set", "Success", "INFO", "Informational", "ADEOS Repository", "ADEOS Repository configuration change", "Configuration change occurred for ADEOS repository",
"60086", "Set", "Success", "INFO", "Informational", "ADEOS SSH Service", "ADEOS SSH Service configuration change", "Configuration change occurred for ADEOS SSH Service",
"60087", "Set", "Success", "INFO", "Informational", "ADEOS Maximum SSH CLI sessions", "ADEOS Maximum SSH CLI sessions configuration change", "Configuration change occurred for ADEOS Maximum CLI sessions",
"60088", "Set", "Success", "INFO", "Informational", "ADEOS SNMP agent", "ADEOS SNMP agent configuration change", "Configuration change occurred for ADEOS SNMP agent",
"60089", "Set", "Success", "INFO", "Informational", "ADEOS CLI kron scheduler", "ADEOS CLI kron scheduler policy configuration change", "Configuration change occurred for ADEOS CLI kron scheduler policy",
"60090", "Set", "Success", "INFO", "Informational", "ADEOS CLI kron scheduler", "ADEOS CLI kron scheduler occurence configuration change", "Configuration change occurred for ADEOS CLI kron scheduler occurence",
"60091", "Set", "Success", "INFO", "Informational", "ADEOS CLI pre-login banner", "ADEOS CLI pre-login banner configuration change", "Configuration change occurred for ADEOS CLI pre-login banner",
"60092", "Set", "Success", "INFO", "Informational", "ADEOS CLI post-login banner", "ADEOS CLI post-login banner configuration change", "Configuration change occurred for ADEOS CLI post-login banner",
"60094", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE Backup has completed successfully", "ISE Backup has completed successfully",
"60095", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE Backup has failed", "ISE Backup has failed",
"60097", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE Log Backup has completed successfully", "ISE Log Backup has completed successfully",
"60098", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE Log Backup has failed", "ISE Log Backup has failed",
"60100", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE Restore has completed successfully", "ISE Restore has completed successfully",
"60101", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE Restore has failed", "ISE Restore has failed",
"60102", "Install", "Success", "INFO", "Informational", "ISE instance", "Application installation completed successfully", "Application installation completed successfully",
"60103", "Install", "Failure", "ERROR", "Low", "ISE instance", "Application installation failed", "Application installation failed",
"60105", "Delete", "Success", "INFO", "Informational", "ISE instance", "Application remove completed successfully", "Application remove completed successfully",
"60106", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Application remove failed", "Application remove failed",
"60107", "Other", "Failure", "ERROR", "Low", "ISE instance", "Application upgrade failed", "Application upgrade failed",
"60111", "Delete", "Success", "INFO", "Informational", "ISE instance", "Application patch remove has completed successfully", "Application patch remove has completed successfully",
"60112", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Application patch remove has failed", "Application patch remove has failed",
"60113", "Other", "Success", "WARN", "Informational", "ISE server", "ISE server reload has been initiated", "ISE server reload has been initiated",
"60114", "Other", "Success", "WARN", "Informational", "ISE server", "ISE server shutdown has been initiated", "ISE server shutdown has been initiated",
"60118", "Delete", "Success", "INFO", "Informational", "File", "ADEOS CLI user has used delete CLI to delete file", "ADEOS CLI user has used delete CLI to delete file",
"60119", "Execute", "Success", "INFO", "Informational", "File", "ADEOS CLI user has used copy CLI to copy file", "ADEOS CLI user has used copy CLI to copy file",
"60120", "Execute", "Success", "INFO", "Informational", "Directory", "ADEOS CLI user has used mkdir CLI to create a directory", "ADEOS CLI user has used mkdir CLI to create a directory",
"60121", "Other", "Success", "INFO", "Informational", "System Config", "ADEOS CLI user has copied out running system configuration", "ADEOS CLI user has copied out running system configuration",
"60122", "Other", "Success", "INFO", "Informational", "System Config", "ADEOS CLI user has copied in system configuration", "ADEOS CLI user has copied in system configuration",
"60123", "Other", "Success", "INFO", "Informational", "System Config", "ADEOS CLI user has saved running system configuration", "ADEOS CLI user has saved running system configuration",
"60126", "Install", "Failure", "ERROR", "Low", "ISE instance", "Application patch installation failed", "Application patch installation failed",
"60128", "Other", "Failure", "ERROR", "Low", "File", "Failure occurred trying to copy file in from ADEOS CLI", "Failure occurred trying to copy file in from ADEOS CLI",
"60129", "Other", "Failure", "ERROR", "Low", "File", "Failure occurred trying to copy file out from ADEOS CLI", "Failure occurred trying to copy file out from ADEOS CLI",
"60130", "Set", "Success", "INFO", "Informational", "ISE Backup", "ISE Scheduled Backup has been configured", "ISE Scheduled Backup has been configured",
"60131", "Create", "Success", "INFO", "Informational", "ISE Support bundle", "ISE Support bundle has been created from web UI", "ISE Support bundle has been created from web UI",
"60132", "Delete", "Success", "INFO", "Informational", "ISE Support bundle", "ISE Support bundle has been deleted from web UI", "ISE Support bundle has been deleted from web UI",
"60133", "Other", "Failure", "ERROR", "Low", "ISE Support bundle", "ISE Support bundle generation from web UI has failed", "ISE Support bundle generation from web UI has failed",
"60153", "Other", "Success", "INFO", "Informational", "Certificate", "Certificate has been exported", "Certificate has been exported",
"60166", "Other", "", "WARN", "Informational", "Certificate", "Certificate will expire soon", "Certificate Expiration warning",
"60167", "Other", "", "WARN", "Informational", "Certificate", "Certificate has expired", "Certificate has expired",
"60172", "Other", "Success", "INFO", "Informational", "ISE instance", "Alarm(s) has/have been acknowledged", "These alarms are acknowledged and will not be displayed on the Dashboard",
"60173", "Other", "Success", "INFO", "Informational", "ISE instance", "Outdated alarms are purged", "Only latest 15000 alarms would be retained and rest of them are purged",
"60187", "Other", "Success", "INFO", "Informational", "ISE instance", "Application upgrade succeeded", "Application upgrade succeeded",
"60189", "Set", "Success", "INFO", "Informational", "ISE instance", "Terminal Session timeout has been modified", "Configuration change occurred for ADEOS CLI Terminal Session timeout",
"60193", "Set", "Success", "INFO", "Informational", "ISE instance", "RSA key configuration has been modified", "Configuration change occurred for ADEOS CLI RSA key",
"60194", "Set", "Success", "INFO", "Informational", "ISE instance", "Host key configuration has been modified", "Configuration change occurred for ADEOS CLI host key",
"60197", "Disable", "Success", "NOTICE", "Informational", "Certificate", "Revoked ISE CA issued Certificate.", "Certificate issued to Endpoint by ISE CA is revoked by Administrator",
"60198", "Delete", "Success", "INFO", "Informational", "MnT", "MnT purge event occurred", "MnT purge event occurred",
"60199", "Other", "Success", "INFO", "Informational", "ISE instance", "An IP-SGT mapping was deployed successfully", "An IP-SGT mapping was deployed successfully to a TrustSec device",
"60200", "Other", "Failure", "INFO", "Low", "ISE instance", "An IP-SGT mapping has failed deploying", "An IP-SGT mapping has failed deploying to a TrustSec device",
"60201", "Other", "Success", "INFO", "Informational", "ISE instance", "IP-SGT deployment to TrustSec device was successful", "IP-SGT deployment to TrustSec device was successful",
"60202", "Other", "Failure", "INFO", "Low", "ISE instance", "IP-SGT deployment to TrustSec device failed", "IP-SGT deployment to TrustSec device failed",
"60207", "Set", "Success", "INFO", "Informational", "ISE instance", "Logging loglevel configuration has been modified", "Configuration change occurred for ADEOS CLI logging loglevel",
"60208", "Other", "Success", "INFO", "Informational", "ISE instance", "Root CA certificate has been replaced", "Root CA certificate has been replaced",
"60209", "Enable", "Success", "INFO", "Informational", "CA service", "CA service enabled", "CA service enabled",
"60210", "Disable", "Success", "INFO", "Informational", "CA service", "CA service disabled", "CA service disabled",
"60213", "Other", "Success", "INFO", "Informational", "ISE instance", "CA keys were replaced by import operation", "CA keys were replaced by import operation",
"60214", "Other", "Success", "INFO", "Informational", "ISE instance", "CA keys were exported", "CA keys were exported",
"60215", "Other", "Success", "INFO", "Informational", "ISE instance", "Endpoint certs were marked expired", "Endpoint certs were marked expired by daily scheduled job",
"60216", "Delete", "Success", "INFO", "Informational", "ISE instance", "Endpoint certs were purged", "Endpoint certs were purged by daily scheduled job",
"60451", "Enable", "Success", "INFO", "Informational", "ISE instance", "Telemetry is enabled on this deployment", "Telemetry is enabled on this deployment",
"60452", "Disable", "Success", "INFO", "Informational", "ISE instance", "Telemetry is disabled on this deployment", "Telemetry is disabled on this deployment",
"61002", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new SGT from IEPG", "ISE has learned a new SGT from IEPG",
"61003", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has propagated a new EEPG to APIC", "ISE has propagated a new EEPG to APIC.",
"61004", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new SXP mapping from APIC endpoint", "ISE has learned a new SXP mapping from APIC endpoint",
"61005", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has propagated a new endpoint(SXP mapping) to APIC", "ISE has propagated a new endpoint(SXP mapping) to APIC",
"61006", "Delete", "Success", "INFO", "Informational", "SGT", "ISE has removed an SGT due to deleted IEPG", "ISE has removed an SGT due to deleted IEPG",
"61007", "Delete", "Success", "INFO", "Informational", "APIC", "ISE has removed EEPG from APIC due to SGT deletion", "ISE has removed EEPG from APIC due to SGT deletion",
"61008", "Delete", "Success", "INFO", "Informational", "APIC", "ISE has removed an SXP mapping due to endpoint deletion on APIC", "ISE has removed an SXP mapping due to endpoint deletion on APIC",
"61009", "Delete", "Success", "INFO", "Informational", "APIC", "ISE has removed endpoint APIC due to SXP mapping removal a new SXP mapping to APIC", "ISE has removed endpoint APIC due to SXP mapping removal a new SXP mapping to APIC",
"61016", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh EPG subscriber against APIC", "ISE failed to refresh EPG subscriber against APIC",
"61017", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh endpoint subscriber against APIC", "ISE failed to refresh endpoint subscriber against APIC",
"61018", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh EEPG subscriber against APIC", "ISE failed to refresh EEPG subscriber against APIC",
"61020", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh L3EXTOUT subscriber against APIC", "ISE failed to refresh L3EXTOUT subscriber against APIC",
"61022", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE has failed to propagate SGT to EEPG", "ISE has failed to propagate SGT to EEPG",
"61023", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE has failed to learn IEPG from APIC", "ISE has failed to learn IEPG from APIC",
"61024", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE has failed to parse VRF for EPG", "ISE has failed to parse VRF for EPG",
"61030", "Other", "Failure", "INFO", "Low", "ISE instance", "TrustSec deploy verification was canceled.", "TrustSec deployment verification process was canceled as a new TrustSec deploy started.",
"61033", "Other", "Success", "INFO", "Informational", "ISE instance", "TrustSec deployment verification process succeeded.", "ISE trustsec configuration was successfully deployed to all network access devices.",
"61034", "Other", "", "INFO", "Low", "ISE instance", "Maximum resource limit reached.", "Maximum resource limit reached.",
"61051", "Set", "Success", "INFO", "Informational", "ISE instance", "Synflood-limit configured", "Synflood-limit configured",
"61052", "Set", "Success", "INFO", "Informational", "ISE instance", "Rate-limit configured", "Rate-limit configured",
"61100", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new tenant from ACI", "ISE has learned a new tenant from ACI",
"61101", "Delete", "Success", "INFO", "Informational", "ACI tenant", "ISE has removed ACI tenant", "ISE has removed ACI tenant",
"61102", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to learn new tenant from ACI in ISE", "Failed to learn new tenant from ACI in ISE",
"61103", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Failed to remove ACI tenant in ISE", "Failed to remove ACI tenant in ISE",
"61104", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new tenant from SDA", "ISE has learned a new tenant from SDA",
"61105", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new VN info", "IISE has learned a new VN info",
"61106", "Create", "Failure", "ERROR", "Low", "ISE instance", "Failed to create VN info in ISE", "Failed to create VN info in ISE",
"61107", "Other", "Success", "INFO", "Informational", "ISE instance", "VN info is updated in ISE", "VN info is updated in ISE",
"61108", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to update VN info in ISE", "Failed to update VN info in ISE",
"61109", "Delete", "Success", "INFO", "Informational", "ACI tenant", "VN info is deleted in ISE", "VN info is deleted in ISE",
"61110", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Failed to deleted VN info in ISE", "Failed to deleted VN info in ISE",
"61111", "Other", "Failure", "ERROR", "Low", "ISE instance", "Domain registration process failed", "Domain registration process failed",
"61114", "Other", "Success", "INFO", "Informational", "ISE instance", "Domain registration completed successfully", "Domain registration completed successfully",
"61115", "Other", "Failure", "ERROR", "Low", "ISE instance", "Domain registration failed", "Domain registration failed",
"61116", "Other", "Failure", "ERROR", "Low", "ACI certificate", "Unable to store ACI certificate", "Unable to store ACI certificate",
"61117", "Other", "Success", "INFO", "Informational", "ACI connector", "ACI connector started successfully", "ACI connector started successfully",
"61118", "Other", "Failure", "ERROR", "Low", "ACI connector", "Failed to start ACI connector", "Failed to start ACI connector",
"61120", "Delete", "Success", "INFO", "Informational", "ACI certificate", "Successfully deleted ACI certificate from ISE", "Successfully deleted ACI certificate from ISE",
"61121", "Delete", "Failure", "ERROR", "Low", "ACI certificate", "Failed to delete ACI certificate from ISE", "Failed to delete ACI certificate from ISE",
"61122", "Delete", "Failure", "ERROR", "Low", "ACI keystore", "Failed to delete ACI keystore", "Failed to delete ACI keystore",
"61123", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new ACI domain", "ISE has learned a new ACI domain",
"61124", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to learn a new ACI domain", "Failed to learn a new ACI domain",
"61125", "Delete", "Success", "INFO", "Informational", "ACI domain", "ISE has removed ACI domain", "ISE has removed ACI domain",
"61126", "Delete", "Failure", "ERROR", "Low", "ACI domain", "Failed to remove ACI domain", "Failed to remove ACI domain",
"61127", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new SDA domain", "ISE has learned a new SDA domain",
"61128", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to learn a new SDA domain", "Failed to learn a new SDA domain",
"61129", "Delete", "Success", "INFO", "Informational", "SDA domain", "ISE has removed SDA domain", "ISE has removed SDA domain",
"61130", "Delete", "Failure", "ERROR", "Low", "SDA domain", "Failed to remove SDA domain", "Failed to remove SDA domain",
"61158", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE failed in receiving SDA SXP configuration", "ISE failed in receiving SDA SXP configuration",
"61160", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE failed to publish Gateway advertisement message to ACI", "ISE failed to publish Gateway advertisement message to ACI",
"61161", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE learned new SXP Listener", "ISE learned new SXP Listener",
"61162", "Other", "Success", "INFO", "Informational", "SXP Listener", "ISE updates VN defined for SXP Listener", "ISE updates VN defined for SXP Listener",
"61163", "Other", "Success", "INFO", "Informational", "SXP Listener", "ISE learned new VN defined for SXP Listener", "ISE learned new VN defined for SXP Listener",
"61164", "Other", "Success", "INFO", "Informational", "SXP Listener", "ISE updates SXP Listener", "ISE updates SXP Listener",
"61165", "Delete", "Success", "INFO", "Informational", "SXP Listener", "ISE removed all SXP connections related to SXP Listener", "ISE removed all SXP connections related to SXP Listener",
"61166", "Other", "Success", "INFO", "Informational", "ACI", "ACI published Gateway advertisement message to SDA", "ACI published Gateway advertisement message to SDA",
"61167", "Other", "Success", "INFO", "Informational", "ISE instance", "Send ACI Gateway advertisement message to ISE", "Send ACI Gateway advertisement message to ISE",
"61168", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to send ACI Gateway advertisement message to ISE", "Failed to send ACI Gateway advertisement message to ISE/SDA",
"61169", "Other", "Success", "INFO", "Informational", "ISE instance", "Successfully Send ACI Gateway advertisement message", "Successfully Send ACI Gateway advertisement message",
"61234", "Other", "Success", "WARN", "Informational", "ISE instance", "Got event with unknown properties", "Got event with unknown properties",
"62000", "Execute", "Success", "INFO", "Informational", "ISE instance", "Agentless script execute completed", "Agentless script execute completed",
"62001", "Execute", "Failure", "WARN", "Low", "ISE instance", "Agentless script execute failed", "Agentless script execute failed",
"62002", "Other", "Success", "INFO", "Informational", "ISE instance", "Agentless script upload completed", "Agentless script upload completed",
"62003", "Other", "Failure", "WARN", "Low", "ISE instance", "Agentless script upload failed", "Agentless script upload failed",
"61300", "Other", "Success", "INFO", "Informational", "ISE instance", "Network Access policy request", "Network Access policy request",
"61301", "Other", "Success", "INFO", "Informational", "ISE instance", "Device Admin policy request", "Device Admin policy request",
"61302", "Other", "Success", "INFO", "Informational", "ISE instance", "Policy component request", "Policy component request",
"60467", "Other", "Failure", "ERROR", "Low", "ISE instance", "OCSP Certificate renewal failed", "OCSP Certificate renewal failed.",
"60468", "Other", "Failure", "ERROR", "Low", "ISE instance", "Root CA Regeneration failed", "Regeneration of Root CA failed.",
"62008", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync service starts", "Meraki connector sync service starts",
"62009", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync service stops", "Meraki connector sync service stops",
"62010", "Other", "Failure", "WARN", "Low", "Meraki connector", "Meraki connector sync service failure", "Meraki connector sync service failure",
"62011", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync cycle starts", "Meraki connector sync cycle starts",
"62012", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync cycle stops", "Meraki connector sync cycle stops",
"62013", "Other", "Failure", "WARN", "Low", "Meraki connector", "Meraki connector sync cycle failure", "Meraki connector sync cycle failure",
"62014", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync operation success", "Meraki connector sync operation success",
"62015", "Other", "Failure", "WARN", "Low", "Meraki connector", "Meraki connector sync operation failure", "Meraki connector sync operation failure",
"62016", "Other", "Success", "INFO", "Informational", "ISE instance", "Port 2484 opened for Data Connect", "Port 2484 opened for Data Connect",
"62017", "Other", "Success", "INFO", "Informational", "ISE instance", "Data Connect port 2484 closed", "Data Connect port 2484 closed"];
let EventOriginalTypeList = toscalar(EventFieldsLookup 
| summarize make_set(EventOriginalType));
let CiscoISEAuditParser=(disabled: bool=false) {
Syslog
| where not(disabled)
| where ProcessName has_any ("CISE", "CSCO")
| parse SyslogMessage with * " " longvalue:long " " EventOriginalType:int " " *
| where EventOriginalType in (EventOriginalTypeList)
| lookup EventFieldsLookup on EventOriginalType 
| parse-kv SyslogMessage as (NetworkDeviceName: string, ['User-Name']: string, UserName: string, User: string, ['Remote-Address']: string, ['Device IP Address']: string) with (pair_delimiter=',', kv_delimiter='=')
| project-rename SrcIpAddr=['Remote-Address'], TargetIpAddr =['Device IP Address']
| extend DvcHostname = coalesce(NetworkDeviceName, Computer, HostName)
| extend ActorUsername = coalesce(['User-Name'], UserName, User)
| extend ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)      
| extend 
    DvcIpAddr = iif(isnotempty(HostIP) and HostIP != "Unknown IP", HostIP, extract(@"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", 1, Computer))
    , EventStartTime = coalesce(EventTime, TimeGenerated)
    , EventEndTime = coalesce(EventTime, TimeGenerated)
    , EventVendor = "Cisco"
    , EventProduct = "ISE"
    , EventProductVersion = "3.2"
    , EventCount = int(1)
    , EventSchema = "AuditEvent"
    , EventSchemaVersion = "0.1.0"
    , ObjectType = "Configuration Atom"
    , TargetAppName = "ISE"
    , TargetAppType = "Service"
// ***************** <Aliases> ********************
| extend 
    Dvc = coalesce(DvcIpAddr, DvcHostname)
    , Application = TargetAppName
    , IpAddr = coalesce(SrcIpAddr, TargetIpAddr)
    , Dst = TargetIpAddr
    , Src = SrcIpAddr
    , User = ActorUsername
// ***************** </Aliases> *******************
| project-away
    TenantId,
    SourceSystem,
    MG,
    Computer,
    EventTime,
    Facility,
    HostName,
    SeverityLevel,
    SyslogMessage,
    HostIP,
    ProcessName,
    ProcessID,
    _ResourceId,
    NetworkDeviceName,
    ['User-Name'],
    UserName
};
CiscoISEAuditParser(disabled=disabled)
}



//
// Function Name: ASimAuditEventCiscoMeraki
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'meraki_CL' table to the ASIM Audit Event normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventCiscoMeraki(    ['disabled']:bool=False)
{
let EventFieldsLookup = datatable(TempOperation: string, Operation: string, EventResult: string, EventType: string)
[
  "vpn_connectivity_change", "VPN connectivity change","Success", "Set",
  "purging ISAKMP-SA", "Purging ISAKMP-SA","Partial", "Delete",
  "purged ISAKMP-SA", "Purged ISAKMP-SA","Success", "Delete",
  "ISAKMP-SA deleted", "ISAKMP-SA deleted","Success", "Delete",
  "IPsec-SA request", "IPsec-SA request queued","Failure", "Other",
  "failed to get sainfo", "Failed to get sainfo","Failure", "Other",
  "failed to pre-process ph2 packet", "Failed to pre-process ph2 packet","Failure", "Other",
  "phase2 negotiation failed", "Phase2 negotiation failed","Failure", "Other",
  "initiate new phase 1 negotiation", "Initiate new phase 1 negotiation","Success", "Initialize",
  "ISAKMP-SA established", "ISAKMP-SA established","Success", "Create",
  "initiate new phase 2 negotiation", "Initiate new phase 2 negotiation","Partial", "Initialize",
  "IPsec-SA established", "IPsec-SA established","Success", "Create",
  "STP role", "Spanning-tree interface role change","Success", "Set",
  "STP BPDU", "Spanning-tree guard state change", "", "",
  "VRRP transition", "VRRP transition","Success", "Set",
  "port status change", "Port status change", "", ""
];
let EventSeverityLookup=datatable(EventResult: string, EventSeverity: string)[
    "Success", "Informational",
    "Partial", "Informational",
    "Failure", "Low"
];
let parser=(disabled: bool=false) {
let allData = union isfuzzy=true
    (
    meraki_CL
    | project-rename LogMessage =  Message
    );
let PreFilteredData = allData
    | where not(disabled)
        and LogMessage has "events"
        and (LogMessage has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or LogMessage has_cs "Site-to-site" or LogMessage has_cs "Port")
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | where LogType == "events";
let SiteToSiteData = PreFilteredData
    | where Substring has_cs "Site-to-site";
let SiteToSite_deleted = SiteToSiteData
    | where Substring has "ISAKMP-SA deleted"
    | extend TempOperation = "ISAKMP-SA deleted"
    | parse Substring with * " deleted " temp_deletedSrcIp:string  "-" temp_deletedTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_deletedSrcIp,
            temp_targetipport = temp_deletedTargetIp;
let SiteToSite_negotiation = SiteToSiteData
    | where Substring has_any("initiate new phase 1 negotiation", "initiate new phase 2 negotiation")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ": " temp_negotiationSrcIp:string "<=>" temp_negotiationTargetIp:string
    | extend temp_srcipport = temp_negotiationSrcIp,
            temp_targetipport = temp_negotiationTargetIp;
let SiteToSite_ESP = SiteToSiteData
    | where Substring has "phase2 negotiation failed due to time up waiting for phase1"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " due to " EventResultDetails " ESP " temp_espSrcIp:string "->" temp_espTargetIp:string
    | extend temp_srcipport = temp_espSrcIp,
            temp_targetipport = temp_espTargetIp;
let SiteToSite_tunnel = SiteToSiteData
    | where Substring has "IPsec-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ":" * "Tunnel " temp_tunnelSrcIp:string "->" temp_tunnelTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_tunnelSrcIp,
            temp_targetipport = temp_tunnelTargetIp;
let SiteToSite_ISAKMPestablished = SiteToSiteData
    | where Substring has "ISAKMP-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " established " temp_estSrcIp:string "-" temp_estTargetIp:string " " temp_restmessage:string
    | extend TempOperation = strcat(TempOperation, ' ', 'established'),
            temp_srcipport = temp_estSrcIp,
            temp_targetipport = temp_estTargetIp;
let SiteToSite_IPsecSArequest = SiteToSiteData
    | where Substring has "IPsec-SA request"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " for " temp_forTaregtSrcIp:string " " * " due to" EventResultDetails:string
    | extend temp_targetipport = temp_forTaregtSrcIp;
let SiteToSite_purging = SiteToSiteData
    | where Substring has_any("purging ISAKMP-SA", "purged ISAKMP-SA")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " spi=" temp_restmessage:string;
let SiteToSite_failed = SiteToSiteData
    | where Substring has_any ("failed to get sainfo", "failed to pre-process ph2 packet")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string
    | extend TempOperation = tostring(split(TempOperation, ' (')[0]);
let VPNConnectivityChangeData = PreFilteredData
    | where Substring has "vpn_connectivity_change"
    | parse-kv Substring as (type: string, peer_contact: string, connectivity: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend type = trim('"', type),
            connectivity = trim('"', connectivity)
    | extend TempOperation = type,
            temp_srcipport = peer_contact;
let StatusChangedData = PreFilteredData
    | where Substring has "status changed"
    | parse Substring with * "port " port:string " " portnextpart:string
    | extend TempOperation = "port status change";
let PortData = PreFilteredData
    | where Substring has_cs "Port"
    | parse Substring with * "Port " Port1:string " received an " TempOperation1:string " from " STPMac:string " " temp_restmessage:string
    | parse Substring with * "Port " Port2:string " changed " TempOperation2:string " from " PortNextPart:string
    | extend Port = coalesce(Port1,Port2)
    | extend TempOperation = coalesce(TempOperation1, TempOperation2);
let VRRPData = PreFilteredData
    | where Substring has_any("VRRP active", "VRRP passive")
    | extend TempOperation = "VRRP transition";
union VPNConnectivityChangeData, StatusChangedData, PortData, VRRPData, SiteToSite_deleted, SiteToSite_ESP, SiteToSite_failed, SiteToSite_IPsecSArequest, SiteToSite_ISAKMPestablished, SiteToSite_negotiation, SiteToSite_purging, SiteToSite_tunnel
      | extend Epoch = tostring(Parser[0]),
          Device = tostring(Parser[1])
      | extend EpochTimestamp = split(Epoch, ".")
      | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
      | lookup EventFieldsLookup on TempOperation
      | extend 
          temp_srcipport = iff(temp_srcipport has "]" and temp_srcipport !has ":", trim(']', temp_srcipport), temp_srcipport),
          temp_targetipport = iff(temp_targetipport has "]" and temp_targetipport !has ":", trim(']', temp_targetipport), temp_targetipport)
      | extend 
          temp_srcipport = iff(temp_srcipport has "[" and temp_srcipport !has ":", replace_string(temp_srcipport,'[',':'), temp_srcipport),
          temp_targetipport = iff(temp_targetipport has "[" and temp_targetipport !has ":", replace_string(temp_targetipport,'[',':'), temp_targetipport),
          DvcMacAddr = iff(Operation == "Spanning-tree guard state change" and isnotempty(STPMac) and STPMac matches regex "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})\'*", STPMac, "")
      | extend temp_srcipport = iff(isempty(DvcMacAddr) and isnotempty(STPMac) and Operation == "Spanning-tree guard state change", STPMac, temp_srcipport)
      | extend
          temp_srcipport = trim("'", temp_srcipport),
          temp_targetipport = trim("'", temp_targetipport)
      | extend 
          temp_srcipport = trim('"', temp_srcipport),
          temp_targetipport = trim('"', temp_targetipport)
      | parse temp_srcipport with * "[" temp_srcip "]:" temp_srcport
      | extend SrcIpAddr = iff(temp_srcipport has ".", split(temp_srcipport, ":")[0], coalesce(temp_srcip, temp_srcipport))
      | parse temp_targetipport with * "[" temp_targetip "]:" temp_targetport
      | extend TargetIpAddr = iff(temp_targetipport has ".", split(temp_targetipport, ":")[0], coalesce(temp_targetip, temp_targetipport))
      | extend TargetPortNumber = iff(TargetIpAddr has ".", toint(split(temp_targetipport, ":")[1]), toint(coalesce(temp_targetport, "")))
      | extend SrcPortNumber = case(
                              isnotempty(temp_srcipport),
                              iff(SrcIpAddr has ".", toint(split(temp_srcipport, ":")[1]), toint(coalesce(temp_srcport, ""))),
                              Substring has_cs "Port",
                              toint(Port),
                              Operation == "Port status change",
                              toint(port),
                              int(null)
                          )
      | extend EventResult = case(
                              (Operation == "Port status change" and Substring has "from Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("connected", "forwarding")),
                              "Success",
                              (Operation == "Port status change" and Substring has "to Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("disconnected", "error disabled", "blocked", "disabled", "not configured")),
                              "Failure",
                              Operation has_cs "Spanning-tree guard state change" and Substring has "learning",
                              "Partial",
                              EventResult
                          )
        | extend EventType = case(Operation in("Port status change", "Spanning-tree guard state change") and EventResult == "Success", "Enable",
            (Operation == "Port status change" and EventResult == "Failure") or (Operation == "Spanning-tree guard state change" and EventResult in ("Partial", "Failure")), "Disable",
            EventType
        )
      | lookup EventSeverityLookup on EventResult
      | extend
          EventResultDetails = case(
                                  Operation == "VPN connectivity change" and isnotempty(connectivity), strcat("connectivity=", connectivity),
                                  Operation == "IPsec-SA request queued" or Operation == "Phase2 negotiation failed", split(Substring, 'due to')[1], 
                                  Substring has "Site-to-site", split(Substring, 'Site-to-site ')[1],
                                  Substring
                              ),
          EventMessage = Substring,
          EventOriginalType = LogType,
          EventUid = _ResourceId
      | invoke _ASIM_ResolveDvcFQDN('Device')
      | extend
          Dvc = DvcHostname,
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          EventEndTime = EventStartTime, 
          EventCount = int(1),
          EventProduct = "Meraki",
          EventVendor = "Cisco",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1"
      | project-away
          LogMessage,
          Parser,
          Epoch,
          EpochTimestamp,
          Device,
          Substring,
          TempOperation*,
          temp*,
          STPMac,
          peer_contact,
          connectivity,
          Port*,
          port,
          portnextpart,
          LogType,
          type,
          TenantId,
          SourceSystem,
          Computer,
          _ResourceId,
          MG,
          ManagementGroupName,
          RawData
  };
  parser(disabled=disabled)
}



//
// Function Name: ASimAuditEventCiscoMerakiSyslog
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'Syslog' table to the ASIM Audit Event normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventCiscoMerakiSyslog(    ['disabled']:bool=False)
{
let EventFieldsLookup = datatable(TempOperation: string, Operation: string, EventResult: string, EventType: string)
[
  "vpn_connectivity_change", "VPN connectivity change","Success", "Set",
  "purging ISAKMP-SA", "Purging ISAKMP-SA","Partial", "Delete",
  "purged ISAKMP-SA", "Purged ISAKMP-SA","Success", "Delete",
  "ISAKMP-SA deleted", "ISAKMP-SA deleted","Success", "Delete",
  "IPsec-SA request", "IPsec-SA request queued","Failure", "Other",
  "failed to get sainfo", "Failed to get sainfo","Failure", "Other",
  "failed to pre-process ph2 packet", "Failed to pre-process ph2 packet","Failure", "Other",
  "phase2 negotiation failed", "Phase2 negotiation failed","Failure", "Other",
  "initiate new phase 1 negotiation", "Initiate new phase 1 negotiation","Success", "Initialize",
  "ISAKMP-SA established", "ISAKMP-SA established","Success", "Create",
  "initiate new phase 2 negotiation", "Initiate new phase 2 negotiation","Partial", "Initialize",
  "IPsec-SA established", "IPsec-SA established","Success", "Create",
  "STP role", "Spanning-tree interface role change","Success", "Set",
  "STP BPDU", "Spanning-tree guard state change", "", "",
  "VRRP transition", "VRRP transition","Success", "Set",
  "port status change", "Port status change", "", ""
];
let EventSeverityLookup=datatable(EventResult: string, EventSeverity: string)[
    "Success", "Informational",
    "Partial", "Informational",
    "Failure", "Low"
];
let parser=(disabled: bool=false) {
let allData = union isfuzzy=true
    (
    Syslog
    | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))
    | project-rename LogMessage =  SyslogMessage
    );
let PreFilteredData = allData
    | where not(disabled)
        and LogMessage has "events"
        and (LogMessage has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or LogMessage has_cs "Site-to-site" or LogMessage has_cs "Port")
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
        LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | where LogType == "events";
let SiteToSiteData = PreFilteredData
    | where Substring has_cs "Site-to-site";
let SiteToSite_deleted = SiteToSiteData
    | where Substring has "ISAKMP-SA deleted"
    | extend TempOperation = "ISAKMP-SA deleted"
    | parse Substring with * " deleted " temp_deletedSrcIp:string  "-" temp_deletedTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_deletedSrcIp,
            temp_targetipport = temp_deletedTargetIp;
let SiteToSite_negotiation = SiteToSiteData
    | where Substring has_any("initiate new phase 1 negotiation", "initiate new phase 2 negotiation")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ": " temp_negotiationSrcIp:string "<=>" temp_negotiationTargetIp:string
    | extend temp_srcipport = temp_negotiationSrcIp,
            temp_targetipport = temp_negotiationTargetIp;
let SiteToSite_ESP = SiteToSiteData
    | where Substring has "phase2 negotiation failed due to time up waiting for phase1"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " due to " EventResultDetails " ESP " temp_espSrcIp:string "->" temp_espTargetIp:string
    | extend temp_srcipport = temp_espSrcIp,
            temp_targetipport = temp_espTargetIp;
let SiteToSite_tunnel = SiteToSiteData
    | where Substring has "IPsec-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ":" * "Tunnel " temp_tunnelSrcIp:string "->" temp_tunnelTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_tunnelSrcIp,
            temp_targetipport = temp_tunnelTargetIp;
let SiteToSite_ISAKMPestablished = SiteToSiteData
    | where Substring has "ISAKMP-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " established " temp_estSrcIp:string "-" temp_estTargetIp:string " " temp_restmessage:string
    | extend TempOperation = strcat(TempOperation, ' ', 'established'),
            temp_srcipport = temp_estSrcIp,
            temp_targetipport = temp_estTargetIp;
let SiteToSite_IPsecSArequest = SiteToSiteData
    | where Substring has "IPsec-SA request"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " for " temp_forTaregtSrcIp:string " " * " due to" EventResultDetails:string
    | extend temp_targetipport = temp_forTaregtSrcIp;
let SiteToSite_purging = SiteToSiteData
    | where Substring has_any("purging ISAKMP-SA", "purged ISAKMP-SA")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " spi=" temp_restmessage:string;
let SiteToSite_failed = SiteToSiteData
    | where Substring has_any ("failed to get sainfo", "failed to pre-process ph2 packet")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string
    | extend TempOperation = tostring(split(TempOperation, ' (')[0]);
let VPNConnectivityChangeData = PreFilteredData
    | where Substring has "vpn_connectivity_change"
    | parse-kv Substring as (type: string, peer_contact: string, connectivity: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend type = trim('"', type),
            connectivity = trim('"', connectivity)
    | extend TempOperation = type,
            temp_srcipport = peer_contact;
let StatusChangedData = PreFilteredData
    | where Substring has "status changed"
    | parse Substring with * "port " port:string " " portnextpart:string
    | extend TempOperation = "port status change";
let PortData = PreFilteredData
    | where Substring has_cs "Port"
    | parse Substring with * "Port " Port1:string " received an " TempOperation1:string " from " STPMac:string " " temp_restmessage:string
    | parse Substring with * "Port " Port2:string " changed " TempOperation2:string " from " PortNextPart:string
    | extend Port = coalesce(Port1,Port2)
    | extend TempOperation = coalesce(TempOperation1, TempOperation2);
let VRRPData = PreFilteredData
    | where Substring has_any("VRRP active", "VRRP passive")
    | extend TempOperation = "VRRP transition";
union VPNConnectivityChangeData, StatusChangedData, PortData, VRRPData, SiteToSite_deleted, SiteToSite_ESP, SiteToSite_failed, SiteToSite_IPsecSArequest, SiteToSite_ISAKMPestablished, SiteToSite_negotiation, SiteToSite_purging, SiteToSite_tunnel
      | extend Epoch = tostring(Parser[0]),
          Device = tostring(Parser[1])
      | extend EpochTimestamp = split(Epoch, ".")
      | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
      | lookup EventFieldsLookup on TempOperation
      | extend 
          temp_srcipport = iff(temp_srcipport has "]" and temp_srcipport !has ":", trim(']', temp_srcipport), temp_srcipport),
          temp_targetipport = iff(temp_targetipport has "]" and temp_targetipport !has ":", trim(']', temp_targetipport), temp_targetipport)
      | extend 
          temp_srcipport = iff(temp_srcipport has "[" and temp_srcipport !has ":", replace_string(temp_srcipport,'[',':'), temp_srcipport),
          temp_targetipport = iff(temp_targetipport has "[" and temp_targetipport !has ":", replace_string(temp_targetipport,'[',':'), temp_targetipport),
          DvcMacAddr = iff(Operation == "Spanning-tree guard state change" and isnotempty(STPMac) and STPMac matches regex "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})\'*", STPMac, "")
      | extend temp_srcipport = iff(isempty(DvcMacAddr) and isnotempty(STPMac) and Operation == "Spanning-tree guard state change", STPMac, temp_srcipport)
      | extend
          temp_srcipport = trim("'", temp_srcipport),
          temp_targetipport = trim("'", temp_targetipport)
      | extend 
          temp_srcipport = trim('"', temp_srcipport),
          temp_targetipport = trim('"', temp_targetipport)
      | parse temp_srcipport with * "[" temp_srcip "]:" temp_srcport
      | extend SrcIpAddr = iff(temp_srcipport has ".", split(temp_srcipport, ":")[0], coalesce(temp_srcip, temp_srcipport))
      | parse temp_targetipport with * "[" temp_targetip "]:" temp_targetport
      | extend TargetIpAddr = iff(temp_targetipport has ".", split(temp_targetipport, ":")[0], coalesce(temp_targetip, temp_targetipport))
      | extend TargetPortNumber = iff(TargetIpAddr has ".", toint(split(temp_targetipport, ":")[1]), toint(coalesce(temp_targetport, "")))
      | extend SrcPortNumber = case(
                              isnotempty(temp_srcipport),
                              iff(SrcIpAddr has ".", toint(split(temp_srcipport, ":")[1]), toint(coalesce(temp_srcport, ""))),
                              Substring has_cs "Port",
                              toint(Port),
                              Operation == "Port status change",
                              toint(port),
                              int(null)
                          )
      | extend EventResult = case(
                              (Operation == "Port status change" and Substring has "from Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("connected", "forwarding")),
                              "Success",
                              (Operation == "Port status change" and Substring has "to Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("disconnected", "error disabled", "blocked", "disabled", "not configured")),
                              "Failure",
                              Operation has_cs "Spanning-tree guard state change" and Substring has "learning",
                              "Partial",
                              EventResult
                          )
        | extend EventType = case(Operation in("Port status change", "Spanning-tree guard state change") and EventResult == "Success", "Enable",
            (Operation == "Port status change" and EventResult == "Failure") or (Operation == "Spanning-tree guard state change" and EventResult in ("Partial", "Failure")), "Disable",
            EventType
        )
      | lookup EventSeverityLookup on EventResult
      | extend
          EventResultDetails = case(
                                  Operation == "VPN connectivity change" and isnotempty(connectivity), strcat("connectivity=", connectivity),
                                  Operation == "IPsec-SA request queued" or Operation == "Phase2 negotiation failed", split(Substring, 'due to')[1], 
                                  Substring has "Site-to-site", split(Substring, 'Site-to-site ')[1],
                                  Substring
                              ),
          EventMessage = Substring,
          EventOriginalType = LogType,
          EventUid = _ResourceId
      | invoke _ASIM_ResolveDvcFQDN('Device')
      | extend
          Dvc = DvcHostname,
          IpAddr = SrcIpAddr,
          Src = SrcIpAddr,
          EventEndTime = EventStartTime, 
          EventCount = int(1),
          EventProduct = "Meraki",
          EventVendor = "Cisco",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1"
      | project-away
          LogMessage,
          Parser,
          Epoch,
          EpochTimestamp,
          Device,
          Substring,
          TempOperation*,
          temp*,
          STPMac,
          peer_contact,
          connectivity,
          Port*,
          port,
          portnextpart,
          LogType,
          type,
          TenantId,
          SourceSystem,
          Computer,
          _ResourceId,
          MG,
          EventTime,
          Facility,
          HostName,
          SeverityLevel,
          ProcessID,
          HostIP,
          ProcessName,CollectorHostName
  };
  parser(disabled=disabled)
}



//
// Function Name: ASimAuditEventCrowdStrikeFalconHost
// Description: This ASIM parser supports normalizing CrowdStrike Falcon Endpoint Protection logs to the ASIM Audit Event normalized schema. These events are captured through CrowdStrike Falcon Endpoint Protection data connector which allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventCrowdStrikeFalconHost(    ['disabled']:bool=False)
{
let EventFieldsLookup = datatable(
    Activity: string,
    Operation: string,
    EventType_lookup: string,
    EventSubType: string,
    Object: string,
    ObjectType: string
) 
    [
    "delete_report_execution", "Delete Report Execution", "Delete", "", "Report Execution", "Scheduled Task",
    "delete_scheduled_report", "Delete Scheduled Report", "Delete", "", "Scheduled Report", "Scheduled Task",
    "update_scheduled_report", "Update Scheduled Report", "Set", "", "Scheduled Report", "Scheduled Task",
    "create_scheduled_report", "Create Scheduled Report", "Create", "", "Scheduled Report", "Scheduled Task",
    "update_class_action", "Update Class Action", "Set", "", "Class Action", "Other",
    "update_policy", "Update Policy", "Set", "", "Policy", "Policy Rule",
    "enable_policy", "Enable Policy", "Enable", "", "Policy", "Policy Rule",
    "create_policy", "Create Policy", "Create", "", "Policy", "Policy Rule",
    "remove_rule_group", "Remove Rule Group", "Other", "Remove", "Rule Group", "Service",
    "create_rule_group", "Create Rule Group", "Create", "", "Rule Group", "Service",
    "delete_rule_group", "Delete Rule Group", "Delete", "", "Rule Group", "Service",
    "add_rule_group", "Add Rule Group", "Other", "Add", "Rule Group", "Service",
    "delete_rule", "Delete Rule", "Delete", "", "Rule", "Policy Rule",
    "update_rule", "Update Rule", "Set", "", "Rule", "Policy Rule",
    "create_rule", "Create Rule", "Create", "", "Rule", "Policy Rule",
    "disable_policy", "Disable Policy", "Disable", "", "Policy", "Policy Rule",
    "delete_policy", "Delete Policy", "Delete", "", "Policy", "Policy Rule",
    "update_priority", "Update Priority", "Set", "", "Policy", "Policy Rule",
    "assign_policy", "Assign Policy", "Other", "Assign", "Policy", "Policy Rule",
    "remove_policy", "Remove Policy", "Other", "Remove", "Policy", "Policy Rule",
    "ip_rules_added", "IP Rules Added", "Create", "", "Rule", "Other",
    "ip_rules_removed", "IP Rules Removed", "Delete", "", "Rule", "Other",
    "hide_host_requested", "Hide Host Requested", "Delete", "", "Host", "Other",
    "mobile_hide_host_requested", "Mobile Hide Host Requested", "Delete", "", "Mobile Host", "Other",
    "CreateAPIClient", "Create API Client", "Create", "", "API Client", "Service",
    "UpdateAPIClient", "Update API Client", "Set", "", "API Client", "Service"
];
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
    [
    "0", "Informational",
    "1", "Informational",
    "2", "Low",
    "3", "Medium",
    "4", "High",
    "5", "High"
];
let UserAuditActivities = dynamic(["delete_report_execution", "delete_scheduled_report", "update_scheduled_report", "create_scheduled_report", "update_class_action", "update_policy", "enable_policy", "create_policy", "remove_rule_group", "create_rule_group", "delete_rule_group", "add_rule_group", "delete_rule", "update_rule", "create_rule", "disable_policy", "delete_policy", "update_priority", "assign_policy", "remove_policy", "ip_rules_added", "ip_rules_removed", "hide_host_requested", "mobile_hide_host_requested"]);
let AuthAuditActivities = dynamic(["CreateAPIClient", "UpdateAPIClient"]);
let parser = (disabled: bool=false) {
    CommonSecurityLog
    | where not(disabled)
    | where (DeviceVendor == "CrowdStrike" and DeviceProduct == "FalconHost")
    | where (DeviceEventClassID == "UserActivityAuditEvent" and Activity in (UserAuditActivities)) or (DeviceEventCategory == "AuthActivityAuditEvent" and Activity in (AuthAuditActivities))
    | lookup EventFieldsLookup on Activity
    | lookup EventSeverityLookup on LogSeverity
    | extend
        EventType = EventType_lookup,
        EventStartTime = case(
                    DeviceEventClassID == "UserActivityAuditEvent",
                    unixtime_milliseconds_todatetime(tolong(ReceiptTime)),
                    DeviceEventCategory == "AuthActivityAuditEvent",
                    todatetime(DeviceCustomDate1),
                    datetime(null)
                ),
        EventOriginalType = case(
                        DeviceEventClassID == "UserActivityAuditEvent",
                        DeviceEventClassID,
                        DeviceEventCategory == "AuthActivityAuditEvent",
                        DeviceEventCategory,
                        ""
                    ),
        EventResult = iff(EventOutcome == "false", "Failure", "Success"),
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1",
        EventCount = int(1),
        DvcAction = "Allowed",
        EventProduct = "FalconHost",
        EventVendor = "CrowdStrike"
    | project-rename
        ActorUsername = DestinationUserName,
        EventUid = _ItemId,
        DvcIpAddr = DestinationTranslatedAddress,
        EventOriginalSeverity = LogSeverity,
        EventProductVersion = DeviceVersion,
        TargetAppName = ProcessName,
        EventOriginalResultDetails = EventOutcome,
        EventOriginalSubType = Activity
    | extend
        EventEndTime = EventStartTime,
        Application = TargetAppName,
        TargetIpAddr = DvcIpAddr,
        User = ActorUsername,
        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
        ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
        TargetAppType = iff(isnotempty(TargetAppName), "Service", "")
    | extend
        Dvc = coalesce(DvcIpAddr, EventProduct),
        Dst = TargetIpAddr
    | project-away 
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        Computer,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        _ResourceId,
        ExtID,
        Message,
        IndicatorThreatType,
        EventType_*
};
parser(disabled=disabled)
}



//
// Function Name: ASimAuditEventMicrosoftEvent
// Description: This ASIM parser supports normalizing Microsoft Windows Events audit events (1102) logs ingested in 'Event' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventMicrosoftEvent(    ['disabled']:bool=False)
{
let parser = (disabled: bool = false) {
  // Parsed Events Ids
  let ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);
  // Eventlog Event Ids
  let EventlogEventIds = dynamic([1102]);
  // Scheduled Task Event Ids
  let ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);
  // Active Directory Replica Source Naming Context Event Ids
  let ActiveDirectoryReplicaIds = dynamic([4929]);
  // Firewall Event Ids
  let FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);
  // Service Event Ids
  let ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]); 
  // Directory Service Object Ids
  let DirectoryServiceIds = dynamic([5136]);
  // Clear Audit Log Event
  let AuditLogClearedEventID = dynamic([1102]); 
  // EventID Lookup
  let EventIDLookup = datatable(
  EventID: int,
  Operation: string,
  EventType: string,
  Object: string,
  ObjectType: string,
  EventResult: string
  )
          [   
      1102, "Delete Logs", "Delete", "Security Logs", "Event Log", "Success",
      4698, "Create Scheduled Task", "Create", "", "Scheduled Task", "Success",
      4699, "Delete Scheduled Task", "Delete", "", "Scheduled Task", "Success",
      4700, "Enable Scheduled Task", "Enable", "", "Scheduled Task", "Success",
      4701, "Disable Scheduled Task ", "Disable", "", "Scheduled Task", "Success",
      4702, "Update Scheduled Task", "Set", "", "Scheduled Task", "Success",
      4929, "Remove Active Directory Replica Source Naming Context", "Delete", "", "Other", "Success",
      5025, "Stop Firewall Service", "Disable", "Firewall Service", "Service", "Success",
      5027, "Retrieve the Security Policy From The Local Storage", "Read", "Firewall Service", "Service", "Failure",
      5028, "Parse the new Security Policy", "Set", "Firewall Service", "Service", "Failure",
      5029, "Initialize the Firewall Driver", "Initialize", "Firewall Service", "Service", "Failure",
      5030, "Start the Firewall Service", "Start", "Firewall Service", "Service", "Failure",
      5034, "Stop Firewall Driver", "Stop", "Firewall Driver", "Driver", "Failure",
      5035, "Start Firewall Driver", "Start", "Firewall Driver", "Driver", "Failure",
      5037, "Terminating Firewall Driver", "Terminate", "Firewall Driver", "Driver", "Failure",
      7035, "Start Control Sent", "Execute", "Service", "Service", "Success",
      7036, "Enter Stop State", "Stop", "Service", "Service", "Success",
      7040, "Changed Service Settings", "Set", "Service", "Service", "Success",
      7045, "Install Service", "Install", "Service", "Service", "Success",
      2009, "Load Group Policy", "Other", "Service", "Service", "Failure",
      5136, "Modified Directory Services Object", "Set", "", "Directory Service Object", "Success"
  ];
      let ParsedEvents =
          Event
                  | where not(disabled)
                  | where EventID in(ParsedEventIds)
                  | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
              | parse-kv EventData as 
                  (
                  SubjectUserSid: string,
                  SubjectUserName: string,
                  SubjectDomainName: string,
                  SubjectLogonId: string,
                  TaskName: string,
                  TaskContent: string,
                  TaskContentNew: string,
                  ClientProcessId: string,
                  DestinationDRA: string,
                  SourceDRA: string,
                  SourceAddr: string,
                  ObjectDN: string,
                  AttributeValue: string
                  )
                  with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
              | project-away EventData
          | lookup EventIDLookup on EventID
      ;
      // Parse EventLog
      let EventLog = ParsedEvents
          | where EventID in(EventlogEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;
      // Parse Scheduled Task
      let ScheduledTask = ParsedEvents
          | where EventID in(ScheduledTaskEventIds)
          | extend 
              Object = TaskName,
              NewValue = coalesce(
              TaskContent,
              TaskContentNew
          )
          | extend 
              Value = NewValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse ADR
      let ActiveDirectoryReplica = ParsedEvents
          | where EventID in(ActiveDirectoryReplicaIds)
          | extend 
              NewValue = SourceDRA,
              OldValue = DestinationDRA,
              SrcFQDN = SourceAddr
          | extend 
              Value = NewValue,
              Object = OldValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse WindowsFirewall
      let WindowsFirewall = ParsedEvents
          | where EventID in(FirewallEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse ServiceEvent
      let ServiceEvent = ParsedEvents
          | where EventID in(ServiceEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse DirectoryService
      let DirectoryService = ParsedEvents
          | where EventID in(DirectoryServiceIds)
          | extend 
              Object = ObjectDN
          | project-rename 
              NewValue = AttributeValue
          | extend
              Value = NewValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN
      ;
      // Union Events
      union
          EventLog,
          ScheduledTask,
          ActiveDirectoryReplica,
          WindowsFirewall,
          ServiceEvent,
          DirectoryService
      | invoke _ASIM_ResolveDvcFQDN("Computer")
      | project-rename 
          ActorUserId = SubjectUserSid,
          ActorSessionId = SubjectLogonId,
          DvcId = _ResourceId,
          ActingAppId = ClientProcessId,
          EventUid = _ItemId
      | extend
          EventCount = int(1),
          EventStartTime = TimeGenerated, 
          EventEndTime= TimeGenerated,
          EventProduct = 'Security Events',
          EventVendor = 'Microsoft',
          EventSchemaVersion = '0.1.0',
          EventSchema = 'AuditEvent',
          EventOriginalType = tostring(EventID),
          DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
          ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
          ActorUsernameType = iff (SubjectDomainName == "", 'Simple', 'Windows'),
          ActorUserIdType = iff (ActorUserId == "", "", "SID"),
          ActingAppType = "Process"
      | extend
          User = ActorUsername,
          Dvc = DvcFQDN
      | project-away Subject*, EventID, Computer
  };
  parser (disabled=disabled)
}



//
// Function Name: ASimAuditEventMicrosoftExchangeAdmin365
// Description: This ASIM parser supports normalizing Microsoft Exchange 365 administrative activity in the OfficeActivity table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventMicrosoftExchangeAdmin365(    ['disabled']:bool=False)
{
let usertypes=datatable (ActorOriginalUserType:string, ActorUserType:string)
[
 // Regular, Regular
 "Admin", "Admin"
 , "DcAdmin", "Admin"
 , "System", "System"
 , "Application", "Application"
 , "ServicePrincipal", "Service Principal"
 , "CustomPolicy", "Other"
 , "SystemPolicy", "Other"
 , "Reserved", "Other"
];
let eventtypes=datatable (op:string, EventType:string)
[
 "Remove", "Delete",
 "New", "Create",
 "Add", "Create",
 "Enable", "Enable",
 "Install", "Install",
 "Set", "Set",
 "Disable", "Disable",
 "disable", "Disable"
];
let parser=(disabled:bool=false){
  OfficeActivity
  | where not(disabled)
  | where RecordType  in ('ExchangeAdmin')
  | project Operation, ResultStatus, Parameters, OrganizationName, OrganizationId, OfficeObjectId, ClientIP, UserId, UserKey, UserAgent, UserType, TimeGenerated, OriginatingServer, SourceRecordId, Type, _ResourceId
  | extend 
      SplitOp = split (Operation,"-")
  | extend
      op=tostring(SplitOp[0])
  | lookup eventtypes on op
  | project-away op
  // --
  // Calculate Object
  | extend
      SplitObject = extract_all(@'^(.*?)[\\/](.*)$', OfficeObjectId)[0]
  | extend 
      Object = case (
          SplitObject[0] == OrganizationName, SplitObject[1], 
          OfficeObjectId == "", SplitOp[1],
          OfficeObjectId
      )
  | project-away SplitOp, OfficeObjectId
  // --
  // Calculate source IP address and port
  | extend 
      SplitIpAddr = extract_all(@'^\[?(.*?)\]?:(\d+)$', ClientIP)[0]
  | extend 
      SrcIpAddr = iff (SplitIpAddr[1] == "", ClientIP, SplitIpAddr[0]),
      SrcPortNumber = toint(iff (SplitIpAddr[1] == "", "", SplitIpAddr[1]))
  | parse UserId with ActorUsername " (" ActingAppName ")"
  | extend 
      ActorUsernameType = iff (ActorUsername == "", "UPN", "Windows"),
      ActorUsername = iff (ActorUsername == "", UserId, ActorUsername),
      ActingAppType = iff (ActingAppName == "", "", "Process")
  | project-rename
      SrcDescription = OriginatingServer,
      NewValue = Parameters 
  | project-away SplitObject, UserKey, SplitIpAddr, ClientIP, UserId
  | project-rename
      HttpUserAgent = UserAgent, 
      ActorOriginalUserType = UserType,
      ActorScopeId = OrganizationId,
      ActorScope = OrganizationName,
      EventOriginalUid = SourceRecordId
  | lookup usertypes on ActorOriginalUserType
  | extend
      EventCount = int(1),
      EventStartTime = TimeGenerated, 
      EventEndTime= TimeGenerated,
      EventProduct = 'Exchange 365',
      EventVendor = 'Microsoft',
      EventSchemaVersion = '0.1.0',
      EventSchema = 'AuditEvent',
      TargetAppName = 'Exchange 365',
      TargetAppType = 'SaaS application',
      EventResult = iff(ResultStatus == "True", "Success", "Failure")
  | project-away 
      ResultStatus
  | extend
      EventSeverity = iff(EventResult == "Failure", "Low", "Informational")
  // -- Aliases
  | extend 
      User=ActorUsername,
      IpAddr = SrcIpAddr,
      Value = NewValue,
      Application = TargetAppName,
      Dst = TargetAppName,
      Src = coalesce (SrcIpAddr, SrcDescription),
      Dvc = TargetAppName,
  // -- Entity identifier explicit aliases
      ActorUserUpn = iif (ActorUsernameType == "UPN", ActorUsername, ""),
      ActorWindowsUsername = iif (ActorUsernameType == "Windows", ActorUsername, "")
 };
 parser (disabled=disabled)
}



//
// Function Name: ASimAuditEventMicrosoftSecurityEvents
// Description: This ASIM parser supports normalizing Microsoft Windows Events audit events (1102) logs ingested in 'SecurityEvent' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventMicrosoftSecurityEvents(    ['disabled']:bool=False)
{
let parser = (disabled: bool = false) {
  // Parsed Events Ids
  let ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);
  // Eventlog Event Ids
  let EventlogEventIds = dynamic([1102]);
  // Scheduled Task Event Ids
  let ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);
  // Active Directory Replica Source Naming Context Event Ids
  let ActiveDirectoryReplicaIds = dynamic([4929]);
  // Firewall Event Ids
  let FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);
  // Service Event Ids
  let ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]); 
  // Directory Service Object Ids
  let DirectoryServiceIds = dynamic([5136]);
  // Clear Audit Log Event
  let AuditLogClearedEventID = dynamic([1102]); 
  // EventID Lookup
  let EventIDLookup = datatable(
  EventID: int,
  Operation: string,
  EventType: string,
  Object: string,
  ObjectType: string,
  EventResult: string
  )
          [   
      1102, "Delete Logs", "Delete", "Security Logs", "Event Log", "Success",
      4698, "Create Scheduled Task", "Create", "", "Scheduled Task", "Success",
      4699, "Delete Scheduled Task", "Delete", "", "Scheduled Task", "Success",
      4700, "Enable Scheduled Task", "Enable", "", "Scheduled Task", "Success",
      4701, "Disable Scheduled Task ", "Disable", "", "Scheduled Task", "Success",
      4702, "Update Scheduled Task", "Set", "", "Scheduled Task", "Success",
      4929, "Remove Active Directory Replica Source Naming Context", "Delete", "", "Other", "Success",
      5025, "Stop Firewall Service", "Disable", "Firewall Service", "Service", "Success",
      5027, "Retrieve the Security Policy From The Local Storage", "Read", "Firewall Service", "Service", "Failure",
      5028, "Parse the new Security Policy", "Set", "Firewall Service", "Service", "Failure",
      5029, "Initialize the Firewall Driver", "Initialize", "Firewall Service", "Service", "Failure",
      5030, "Start the Firewall Service", "Start", "Firewall Service", "Service", "Failure",
      5034, "Stop Firewall Driver", "Stop", "Firewall Driver", "Driver", "Failure",
      5035, "Start Firewall Driver", "Start", "Firewall Driver", "Driver", "Failure",
      5037, "Terminating Firewall Driver", "Terminate", "Firewall Driver", "Driver", "Failure",
      7035, "Start Control Sent", "Execute", "Service", "Service", "Success",
      7036, "Enter Stop State", "Stop", "Service", "Service", "Success",
      7040, "Changed Service Settings", "Set", "Service", "Service", "Success",
      7045, "Install Service", "Install", "Service", "Service", "Success",
      2009, "Load Group Policy", "Other", "Service", "Service", "Failure",
      5136, "Modified Directory Services Object", "Set", "", "Directory Service Object", "Success"
  ];
      let ParsedEvents =
          union
              (
                  // SecurityEvents
                  SecurityEvent
                  | where not(disabled)
                  | where EventID in(ParsedEventIds)
                  | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
              | parse-kv EventData as 
                  (
                  SubjectUserSid: string,
                  SubjectUserName: string,
                  SubjectDomainName: string,
                  SubjectLogonId: string,
                  TaskName: string,
                  TaskContent: string,
                  TaskContentNew: string,
                  ClientProcessId: string,
                  DestinationDRA: string,
                  SourceDRA: string,
                  SourceAddr: string,
                  ObjectDN: string,
                  AttributeValue: string
                  ) 
                  with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
              | project-away EventData
              ),
              (
              SecurityEvent
              | where not(disabled)
              | where EventID in (AuditLogClearedEventID) and EventSourceName == "Microsoft-Windows-Eventlog"
              | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
              | extend Parsed_EventData = parse_xml(EventData)
              | extend
                  SubjectUserSid = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectUserSid),
                  SubjectUserName = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectUserName),
                  SubjectDomainName = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectDomainName),
                  SubjectLogonId = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectLogonId)
              | project-away EventData, Parsed_EventData
              )
          | lookup EventIDLookup on EventID
      ;
      // Parse EventLog
      let EventLog = ParsedEvents
          | where EventID in(EventlogEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;
      // Parse Scheduled Task
      let ScheduledTask = ParsedEvents
          | where EventID in(ScheduledTaskEventIds)
          | extend 
              Object = TaskName,
              NewValue = coalesce(
              TaskContent,
              TaskContentNew
          )
          | extend 
              Value = NewValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse ADR
      let ActiveDirectoryReplica = ParsedEvents
          | where EventID in(ActiveDirectoryReplicaIds)
          | extend 
              NewValue = SourceDRA,
              OldValue = DestinationDRA,
              SrcFQDN = SourceAddr
          | extend 
              Value = NewValue,
              Object = OldValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse WindowsFirewall
      let WindowsFirewall = ParsedEvents
          | where EventID in(FirewallEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse ServiceEvent
      let ServiceEvent = ParsedEvents
          | where EventID in(ServiceEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse DirectoryService
      let DirectoryService = ParsedEvents
          | where EventID in(DirectoryServiceIds)
          | extend 
              Object = ObjectDN
          | project-rename 
              NewValue = AttributeValue
          | extend
              Value = NewValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN
      ;
      // Union Events
      union
          EventLog,
          ScheduledTask,
          ActiveDirectoryReplica,
          WindowsFirewall,
          ServiceEvent,
          DirectoryService
      | invoke _ASIM_ResolveDvcFQDN("Computer")
      | project-rename 
          ActorUserId = SubjectUserSid,
          ActorSessionId = SubjectLogonId,
          DvcId = _ResourceId,
          ActingAppId = ClientProcessId,
          EventUid = _ItemId
      | extend
          EventCount = int(1),
          EventStartTime = TimeGenerated, 
          EventEndTime= TimeGenerated,
          EventProduct = 'Security Events',
          EventVendor = 'Microsoft',
          EventSchemaVersion = '0.1.0',
          EventSchema = 'AuditEvent',
          EventOriginalType = tostring(EventID),
          DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
          ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
          ActorUsernameType = iff (SubjectDomainName == "", 'Simple', 'Windows'),
          ActorUserIdType = iff (ActorUserId == "", "", "SID"),
          ActingAppType = "Process"
      | extend
          User = ActorUsername,
          Dvc = DvcFQDN
      | project-away Subject*, EventID, Computer
  };
  parser (disabled=disabled)
}



//
// Function Name: ASimAuditEventMicrosoftWindowsEvents
// Description: This ASIM parser supports normalizing Microsoft Windows Events audit events (1102) logs ingested in 'WindowsEvent' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventMicrosoftWindowsEvents(    ['disabled']:bool=False)
{
let parser = (disabled: bool = false) {
  // Parsed Events Ids
  let ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);
  // Eventlog Event Ids
  let EventlogEventIds = dynamic([1102]);
  // Scheduled Task Event Ids
  let ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);
  // Active Directory Replica Source Naming Context Event Ids
  let ActiveDirectoryReplicaIds = dynamic([4929]);
  // Firewall Event Ids
  let FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);
  // Service Event Ids
  let ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]); 
  // Directory Service Object Ids
  let DirectoryServiceIds = dynamic([5136]);
  // Clear Audit Log Event
  let AuditLogClearedEventID = dynamic([1102]); 
  // EventID Lookup
  let EventIDLookup = datatable(
  EventID: int,
  Operation: string,
  EventType: string,
  Object: string,
  ObjectType: string,
  EventResult: string
  )
          [   
      1102, "Delete Logs", "Delete", "Security Logs", "Event Log", "Success",
      4698, "Create Scheduled Task", "Create", "", "Scheduled Task", "Success",
      4699, "Delete Scheduled Task", "Delete", "", "Scheduled Task", "Success",
      4700, "Enable Scheduled Task", "Enable", "", "Scheduled Task", "Success",
      4701, "Disable Scheduled Task ", "Disable", "", "Scheduled Task", "Success",
      4702, "Update Scheduled Task", "Set", "", "Scheduled Task", "Success",
      4929, "Remove Active Directory Replica Source Naming Context", "Delete", "", "Other", "Success",
      5025, "Stop Firewall Service", "Disable", "Firewall Service", "Service", "Success",
      5027, "Retrieve the Security Policy From The Local Storage", "Read", "Firewall Service", "Service", "Failure",
      5028, "Parse the new Security Policy", "Set", "Firewall Service", "Service", "Failure",
      5029, "Initialize the Firewall Driver", "Initialize", "Firewall Service", "Service", "Failure",
      5030, "Start the Firewall Service", "Start", "Firewall Service", "Service", "Failure",
      5034, "Stop Firewall Driver", "Stop", "Firewall Driver", "Driver", "Failure",
      5035, "Start Firewall Driver", "Start", "Firewall Driver", "Driver", "Failure",
      5037, "Terminating Firewall Driver", "Terminate", "Firewall Driver", "Driver", "Failure",
      7035, "Start Control Sent", "Execute", "Service", "Service", "Success",
      7036, "Enter Stop State", "Stop", "Service", "Service", "Success",
      7040, "Changed Service Settings", "Set", "Service", "Service", "Success",
      7045, "Install Service", "Install", "Service", "Service", "Success",
      2009, "Load Group Policy", "Other", "Service", "Service", "Failure",
      5136, "Modified Directory Services Object", "Set", "", "Directory Service Object", "Success"
  ];
      let ParsedEvents =
          union
              (
              WindowsEvent
              | where not(disabled)
              | where EventID in(ParsedEventIds)
              | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
              | extend
                  SubjectUserSid = tostring(EventData.SubjectUserSid),
                  SubjectUserName = tostring(EventData.SubjectUserName),
                  SubjectDomainName = tostring(EventData.SubjectDomainName),
                  SubjectLogonId = tostring(EventData.SubjectLogonId),
                  TaskName = tostring(EventData.TaskName),
                  TaskContent = tostring(EventData.TaskContent),
                  TaskContentNew = tostring(EventData.TaskContentNew),
                  ClientProcessId = tostring(EventData.ClientProcessId),
                  DestinationDRA = tostring(EventData.DestinationDRA),
                  SourceDRA = tostring(EventData.SourceDRA),
                  SourceAddr = tostring(EventData.SourceAddr),
                  ObjectDN = tostring(EventData.ObjectDN),
                  AttributeValue = tostring(EventData.AttributeValue)
              | project-away EventData
              ),
              (
              WindowsEvent
              | where not(disabled)
              | where EventID in (AuditLogClearedEventID) and Provider == "Microsoft-Windows-Eventlog"
              | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
              | extend
                  SubjectUserSid = tostring(EventData.SubjectUserSid),
                  SubjectUserName = tostring(EventData.SubjectUserName),
                  SubjectDomainName = tostring(EventData.SubjectDomainName),
                  SubjectLogonId = tostring(EventData.SubjectLogonId)
              | project-away EventData
              )
          | lookup EventIDLookup on EventID
      ;
      // Parse EventLog
      let EventLog = ParsedEvents
          | where EventID in(EventlogEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;
      // Parse Scheduled Task
      let ScheduledTask = ParsedEvents
          | where EventID in(ScheduledTaskEventIds)
          | extend 
              Object = TaskName,
              NewValue = coalesce(
              TaskContent,
              TaskContentNew
          )
          | extend 
              Value = NewValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse ADR
      let ActiveDirectoryReplica = ParsedEvents
          | where EventID in(ActiveDirectoryReplicaIds)
          | extend 
              NewValue = SourceDRA,
              OldValue = DestinationDRA,
              SrcFQDN = SourceAddr
          | extend 
              Value = NewValue,
              Object = OldValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse WindowsFirewall
      let WindowsFirewall = ParsedEvents
          | where EventID in(FirewallEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse ServiceEvent
      let ServiceEvent = ParsedEvents
          | where EventID in(ServiceEventIds)
          | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
      ;
      // Parse DirectoryService
      let DirectoryService = ParsedEvents
          | where EventID in(DirectoryServiceIds)
          | extend 
              Object = ObjectDN
          | project-rename 
              NewValue = AttributeValue
          | extend
              Value = NewValue
          | project-away Task*, *DRA, SourceAddr, ObjectDN
      ;
      // Union Events
      union
          EventLog,
          ScheduledTask,
          ActiveDirectoryReplica,
          WindowsFirewall,
          ServiceEvent,
          DirectoryService
      | invoke _ASIM_ResolveDvcFQDN("Computer")
      | project-rename 
          ActorUserId = SubjectUserSid,
          ActorSessionId = SubjectLogonId,
          DvcId = _ResourceId,
          ActingAppId = ClientProcessId,
          EventUid = _ItemId
      | extend
          EventCount = int(1),
          EventStartTime = TimeGenerated, 
          EventEndTime= TimeGenerated,
          EventProduct = 'Security Events',
          EventVendor = 'Microsoft',
          EventSchemaVersion = '0.1.0',
          EventSchema = 'AuditEvent',
          EventOriginalType = tostring(EventID),
          DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
          ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
          ActorUsernameType = iff (SubjectDomainName == "", 'Simple', 'Windows'),
          ActorUserIdType = iff (ActorUserId == "", "", "SID"),
          ActingAppType = "Process"
      | extend
          User = ActorUsername,
          Dvc = DvcFQDN
      | project-away Subject*, EventID, Computer
  };
  parser (disabled=disabled)
}



//
// Function Name: ASimAuditEventSentinelOne
// Description: This ASIM parser supports normalizing SentinelOne logs to the ASIM Audit Event normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventSentinelOne(    ['disabled']:bool=False)
{
let EventFieldsLookup = datatable(
      activityType_d: real,
      Operation: string,
      EventType_activity: string,
      EventSubType: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      39, "Research Settings Modified", "", "", "Success", "Research Settings", "Policy Rule",
      41, "Learning Mode Settings Modified", "Set", "", "Success", "Mitigation policy", "Policy Rule",
      44, "Auto decommission On", "Enable", "", "Success", "Auto decommission", "Service",
      45, "Auto decommission Off", "Disable", "", "Success", "Auto decommission", "Service",
      46, "Auto Decommission Period Modified", "Set", "", "Success", "Auto decommission", "Service",
      56, "Auto Mitigation Actions Modified", "Set", "", "Success", "Mitigation action", "Other",
      57, "Quarantine Network Settings Modified", "", "", "Success", "NetworkSettings", "Configuration Atom",
      68, "Engine Modified In Policy", "Set", "", "Success", "Engine Policy", "Policy Rule",
      69, "Mitigation Policy Modified", "Set", "", "Success", "Threat Mitigation Policy", "Policy Rule",
      70, "Policy Setting - Agent Notification On Suspicious Modified", "", "", "Success", "Agent notification", "Service",
      82, "Monitor On Execute", "", "", "Success", "On execute setting", "Configuration Atom",
      83, "Monitor On Write", "", "", "Success", "On write setting", "Configuration Atom",
      105, "Deep Visibility Settings Modified", "", "", "Success", "Deep Visibility Setting", "Configuration Atom",
      116, "Policy Settings Modified", "Disable", "", "Success", "Policy Settings", "Policy Rule",
      150, "Live Security Updates Policy Modified", "", "", "Success", "Live Security Updates Policy", "Policy Rule",
      151, "Live Security Updates Policy Inheritance Setting Changed", "Set", "", "Success", "Live Security Updates Policy", "Policy Rule",
      200, "File Upload Settings Modified", "Set", "", "Success", "Binary Vault Settings", "Configuration Atom",
      201, "File Upload Enabled/Disabled", "", "", "Success", "Binary Vault", "Policy Rule",
      4004, "Policy Setting - Show Suspicious Activities Configuration Enabled", "Enable", "", "Success", "Policy Setting", "Policy Rule",
      4005, "Policy Setting - Show Suspicious Activities Configuration Disabled", "Disable", "", "Success", "Policy Setting", "Policy Rule",
      4104, "STAR Manual Response Marked Event As Malicious", "Set", "", "Success", "computerName", "Other",
      4105, "STAR Manual Response Marked Event As Suspicious", "Set", "", "Success", "computerName", "Other",
      5012, "Group Token Regenerated", "Create", "", "Success", "Token", "Policy Rule",
      5020, "Site Created", "Create", "", "Success", "", "Other",
      5021, "Site Modified", "Set", "", "Success", "", "Other",
      5022, "Site Deleted", "Delete", "", "Success", "", "Other",
      5024, "Site Policy Reverted", "", "", "Success", "", "Other",
      5025, "Site Marked As Expired", "Disable", "", "Success", "", "Other",
      5026, "Site Duplicated", "Create", "", "Success", "", "Other",
      5027, "Site Token Regenerated", "Create", "", "Success", "", "Other",
      6000, "Mobile Policy updated", "Set", "", "Success", "Mobile Policy", "Policy Rule",
      6001, "Mobile Policy created", "Create", "", "Success", "Mobile Policy", "Policy Rule",
      6002, "Mobile Policy removed", "Delete", "", "Success", "Mobile Policy", "Policy Rule",
      6010, "UEM Connection created", "Create", "", "Success", "MDM Connection", "Configuration Atom",
      6011, "UEM Connection updated", "Set", "", "Success", "MDM Connection", "Configuration Atom",
      6012, "UEM Connection Removed", "Delete", "", "Success", "MDM Connection", "Configuration Atom",
      73, "Scan New Agents Changed", "", "", "Success", "Scan new agents Setting", "Configuration Atom",
      76, "Anti Tampering Modified", "", "", "Success", "Anti tampering setting", "Configuration Atom",
      77, "Agent UI Settings Modified", "Set  ", "", "Success", "Agent UI setting", "Configuration Atom",
      78, "Snapshots Settings Modified", "", "", "Success", "Snapshots setting", "Configuration Atom",
      79, "Agent Logging Modified", "", "", "Success", "Agent logging setting", "Configuration Atom",
      84, "Deep Visibility Settings Modified", "", "", "Success", "Deep Visibility setting", "Configuration Atom",
      87, "Remote Shell Settings Modified", "", "", "Success", "Remote Shell Settings", "Configuration Atom",
      2100, "Upgrade Policy - Concurrency Limit Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
      2101, "Upgrade Policy - Concurrency Limit Inheritance Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
      2111, "Upgrade Policy - Maintenance Window Time Inheritance Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
  ];
  let EventFieldsLookupMachineActivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_machineactivity: string,
      EventSubType_machineactivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      52, "User Approved Agent Uninstall Request", "Other", "Approve", "Success", "Agent", "Service",
      53, "User Rejected Agent Uninstall Request", "Other", "Reject", "Failure", "Agent", "Service",
      54, "User Decommissioned Agent", "Disable", "", "Success", "Agent", "Service",
      55, "User Recommissioned Agent", "Enable", "", "Success", "Agent", "Service",
      61, "User Disconnected Agent From Network", "Execute", "", "Success", "Agent", "Service",
      62, "User Reconnected Agent to Network", "Execute", "", "Success", "Agent", "Service",
      63, "User Shutdown Agent", "Execute", "", "Success", "Agent", "Service",
      93, "User Reset Agent's Local Config", "Set", "", "Success", "Local config", "Configuration Atom",
      95, "User Moved Agent to Group", "Other", "Move", "Success", "Agent", "Service",
      117, "User Disabled Agent", "Execute", "", "Success", "Agent", "Service",
      118, "User Enabled Agent", "Execute", "", "Success", "Agent", "Service",
      4100, "User Marked Deep Visibility Event As Threat", "Set", "", "Success", "Deep Visibility Event", "Other",
      4101, "User Marked Deep Visibility Event As Suspicious", "Set", "", "Success", "Deep Visibility Event", "Other",
  ];
  let EventFieldsLookupAccountActivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_accountactivity: string,
      EventSubType_accountactivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      130, "Opt-in To EA program", "Create", "", "Success", "", "Other",
      131, "Opt-out From EA Program", "Delete", "", "Success", "", "Other",
      5040, "Account Created", "Create", "", "Success", "", "Other",
      5041, "Account Modified", "Set", "", "Success", "", "Other",
      5042, "Account Deleted", "Delete", "", "Success", "", "Other",
      5044, "Account Policy Reverted", "Set", "", "Success", "", "Other",
      7200, "Add cloud account", "Create", "", "Success", "", "Other",
      7201, "Disable cloud Account", "Disable", "", "Success", "", "Other",
      7202, "Enable cloud Account", "Enable", "", "Success", "", "Other"
  ];
  let EventFieldsLookup_useractivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_useractivity: string,
      EventSubType_useractivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      88, "User Remote Shell Modified", "", "", "Success", "Remote Shell", "Configuration Atom",
      114, "API Token Revoked", "Disable", "", "Success", "API Token", "Service"
  ];
  let EventFieldsLookup_otheractivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_otheractivity: string,
      EventSubType_otheractivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      2, "Hash Defined as Malicious By Cloud", "Set", "", "Success", "", "Other",
      40, "Cloud Intelligence Settings Modified", "", "", "Success", "Cloud Intelligence Settings", "Policy Rule",
      58, "Notification Option Level Modified", "Set", "", "Success", "Notification Level", "Service",
      59, "Event Severity Level Modified", "Set", "", "Success", "EventSeverity Level", "Other",
      60, "Notification - Recipients Configuration Modified", "Set", "", "Success", "Recipients configuration", "Policy Rule",
      101, "User Changed Agent's Customer Identifier", "Set", "", "Success", "Customer Identifier string", "Configuration Atom",
      106, "User Commanded Agents To Move To Another Console", "Execute", "", "Failure", "Agents", "Service",
      107, "User Created RBAC Role", "Create", "", "Success", "", "Other",
      108, "User Edited RBAC Role", "Set", "", "Success", "", "Other",
      109, "User Deleted RBAC Role", "Delete", "", "Success", "", "Other",
      112, "API token Generated", "Create", "", "Success", "API Token", "Service",
      113, "API Token Revoked", "Disable", "", "Success", "API Token", "Service",
      129, "Allowed Domains Settings Changed", "Set", "", "Success", "User Domain Setting", "Other",
      1501, "Location Created", "Create", "", "Success", "", "Service",
      1502, "Location Copied", "Set", "Copy", "Success", "", "Service",
      1503, "Location Modified", "Set", "", "Success", "", "Service",
      1504, "Location Deleted", "Delete", "", "Success", "", "Service",
      2011, "User Issued Kill Command", "Execute", "", "Success", "", "Other",
      2012, "User Issued Remediate Command", "Execute", "", "Success", "", "Other",
      2013, "User Issued Rollback Command", "Execute", "", "Success", "", "Other",
      2014, "User Issued Quarantine Command", "Execute", "", "Success", "", "Other",
      2015, "User Issued Unquarantine Command", "Execute", "", "Success", "", "Other",
      2016, "User Marked Application As Threat", "Set", "", "Success", "", "Other",
      2028, "Threat Incident Status Changed", "Set", "", "Success", "", "Other",
      2029, "Ticket Number Changes", "Set", "", "Success", "", "Other",
      2030, "Analyst Verdict Changes", "Set", "", "Success", "", "Other",
      2036, "Threat Confidence Level Changed By Agent", "Set", "", "Success", "", "Other",
      2037, "Threat Confidence Level Changed By Cloud", "Set", "", "Success", "", "Other",
      3001, "User Added Hash Exclusion", "Set", "", "Success", "Hash", "Other",
      3002, "User Added Blocklist Hash", "Set", "", "Success", "Hash", "Other",
      3008, "New Path Exclusion", "Create", "", "Success", "Path", "Other",
      3009, "New Signer Identity Exclusion", "Create", "", "Success", "Signer Identity", "Other",
      3010, "New File Type Exclusion", "Create", "", "Success", "File Type", "Other",
      3011, "New Browser Type Exclusion", "Create", "", "Success", "Browser Type", "Other",
      3012, "Path Exclusion Modified", "Set", "", "Success", "Path", "Other",
      3013, "Signer Identity Exclusion Modified", "Set", "", "Success", "Signer Identity", "Other",
      3014, "File Type Exclusion Modified", "Set", "", "Success", "File Type", "Other",
      3015, "Browser Type Exclusion Modified", "Set", "", "Success", "Browser Type", "Other",
      3016, "Path Exclusion Deleted", "Delete", "", "Success", "Path", "Other",
      3017, "Signer Identity Exclusion Deleted", "Delete", "", "Success", "Signer Identity", "Other",
      3018, "File Type Exclusion Deleted", "Delete", "", "Success", "File Type", "Other",
      3019, "Browser Type Exclusion Deleted", "Delete", "", "Success", "Browser Type", "Other",
      3020, "User Deleted Hash From Blocklist", "Delete", "", "Success", "Hash", "Other",
      3021, "User Deleted Hash Exclusion", "Delete", "", "Success", "Hash", "Other",
      3100, "User Added Package", "Create", "", "Success", "Package", "Other",
      3101, "User Modified Package", "Set", "", "Success", "Package", "Other",
      3102, "User Deleted Package", "Delete", "", "Success", "Package", "Other",
      3103, "Package Deleted By System - Too Many Packages", "Delete", "", "Success", "Package", "Other",
      3500, "User Toggled Ranger Status", "Set", "", "Success", "Ranger Settings", "Other",
      3501, "Ranger Settings Modified", "Set", "", "Success", "Ranger Settings", "Configuration Atom",
      3502, "Ranger Network Settings Modified", "Set", "", "Success", "Ranger Network Setting", "Other",
      3506, "Ranger - Device Review Modified", "Set", "", "Success", "Device Review", "Other",
      3507, "Ranger - Device Tag Modified On Host", "Set", "", "Success", "Device Tag", "Other",
      3521, "Ranger Deploy Initiated", "Initialize", "", "Success", "Ranger Deploy", "Other",
      3525, "Ranger Deploy - Credential Created", "Create", "", "Success", "Credential", "Configuration Atom",
      3526, "Ranger Deploy - Credential Deleted", "Delete", "", "Success", "Credential", "Configuration Atom",
      3527, "Ranger Deploy - Credential Overridden", "Set", "", "Success", "Credential", "Configuration Atom",
      3530, "Ranger Labels Updated", "Set", "", "Success", "Ranger Labels", "Other",
      3531, "Ranger labels reverted", "Set", "", "Success", "Ranger Labels", "Other",
      3600, "Custom Rules - User Created A Rule", "Create", "", "Success", "", "Policy Rule",
      3601, "Custom Rules - User Changed A Rule", "Set", "", "Success", "", "Policy Rule",
      3602, "Custom Rules - User Deleted A Rule", "Delete", "", "Success", "", "Policy Rule",
      3603, "Custom Rules - Rule Status Changed", "Set", "", "Success", "", "Policy Rule",
      3604, "Custom Rules - Rule Status Change Failed", "Set", "", "Failure", "", "Policy Rule",
      3626, "User 2FA Email Verification Changed", "Set", "", "Success", "", "Service",
      3628, "2FA Code Verification", "Set", "", "Success", "2FA", "Service",
      3641, "Ranger self Provisioning Default Features Modified", "Set", "", "Success", "", "Other",
      3650, "Tag Manager - User Created New Tag", "Create", "", "Success", "Tag", "Other",
      3651, "Tag Manager - User Modified Tag", "Set", "", "Success", "Tag", "Other",
      3652, "Tag Manager - User Deleted Tag", "Delete", "", "Success", "Tag", "Other",
      3653, "Tag Manager - User Attached Tag", "Other", "Attach", "Success", "Tags", "Other",
      3654, "Tag Manager - User Detached Tag", "Detach", "", "Success", "Tags", "Other", 
      3750, "Auto-Upgrade Policy Created", "Create", "", "Success", "", "Policy Rule",
      3751, "Auto-Upgrade Policy Disabled", "Disable", "", "Success", "", "Policy Rule",
      3752, "Auto-Upgrade Policy Activated", "Enable", "", "Success", "", "Policy Rule",
      3753, "Auto-Upgrade Policy Deleted", "Delete", "", "Success", "", "Policy Rule",
      3754, "Auto-Upgrade Policy Reordered", "Other", "Reorder", "Success", "", "Policy Rule",
      3755, "Upgrade Policy Inheritance Setting Changed", "Set", "", "Success", "Upgrade Policy", "Policy Rule",
      3756, "Auto-Upgrade Policy Edited", "Set", "", "Success", "", "Policy Rule",
      3767, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
      3768, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
      3769, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
      3770, "Local Upgrade Authorization Expiry Date Changed", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      3771, "Local Upgrade Authorization Expiry Date Changed", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      3772, "Local Upgrade Unauthorized", "Other", "Unauthorize", "Failure", "Local Upgrade Authorization", "Service",
      3773, "Local Upgrade Authorization Inherits from Site Level", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      3774, "Local Upgrade Authorization Inherits from Site Level", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      4001, "Suspicious Threat Was Marked As Threat", "Set", "", "Success", "", "Other",
      4002, "Suspicious Threat Was Resolved", "Set", "", "Success", "", "Other",
      4006, "Remember Me Length Modified", "Set", "", "Success", "Stay Sign in Duration", "Policy Rule",
      4007, "Suspicious Threat Was Marked As Benign", "Set", "", "Success", "", "Other",
      4008, "Threat Mitigation Status Changed", "Set", "", "Success", "", "Other",
      4009, "Process Was Marked As Threat", "Set", "", "Success", "", "Other",
      4011, "Suspicious Threat Was Unresolved", "Set", "", "Failure", "", "Other",
      4012, "UI Inactivity Timeout Modified", "Set", "", "Success", "Inactivity timeout", "Configuration Atom",
      5242, "Ranger - Device Tag Created", "Create", "", "Success", "", "Other",
      5243, "Ranger - Device Tag Updated", "Set", "", "Success", "", "Other",
      5244, "Ranger - Device Tag Deleted", "Delete", "", "Success", "", "Other",
      5250, "Firewall Control Tag Created", "Create", "", "Success", "", "Other",
      5251, "Firewall Control Tag Updated", "Set", "", "Success", "", "Other",
      5252, "Firewall Control Tag Updated", "Delete", "", "Success", "", "Other",
      5253, "Network Quarantine Control Tag Created", "Create", "", "Success", "", "Other",
      5254, "Network Quarantine Control Tag Updated", "Set", "", "Success", "", "Other",
      5255, "Network Quarantine Control Tag Deleted", "Delete", "", "Success", "", "Other",
      5256, "Firewall Control Tag Added/Removed From Rule", "", "", "Success", "", "Policy Rule",
      5257, "Firewall Control Tag Inherited", "Set", "", "Success", "Firewall Control tags", "Other",
      5258, "Network Quarantine Control Tag Added/Removed From Rule", "", "", "Success", "", "Policy Rule",
      5259, "Network Quarantine Control Tag Inherited", "Set", "", "Success", "Network Quarantine Control Tag", "Other",
      7500, "Remote Ops Password Configured", "Set", "", "Success", "Remote Ops password configuration", "Configuration Atom",
      7501, "Remote Ops Password Deleted", "Delete", "", "Success", "Remote Ops password configuration", "Configuration Atom",
      7602, "User Edited Run Script Guardrails", "Set", "", "Success", "Guardrails", "Service",
      7603, "User Enabled Run Script Guardrails", "Enable", "", "Success", "Guardrails", "Service",
      7604, "User Disabled Run Script Guardrails", "Disable", "", "Success", "Guardrails", "Service",
      5120, "Device Rule Created", "Create", "", "Success", "", "Policy Rule",
      5121, "Device Rule Modified", "Set", "", "Success", "", "Policy Rule",
      5122, "Device Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
      5123, "Device Rules Reordered", "Set", "", "Success", "", "Policy Rule",
      5124, "Device Rules Settings Modified", "Set", "", "Success", "Device Control settings", "Policy Rule",
      5129, "Device Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
      5220, "Firewall Rule Created", "Create", "", "Success", "", "Policy Rule",
      5221, "Firewall Rule Modified", "Set/Other", "", "Success", "", "Policy Rule",
      5222, "Firewall Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
      5225, "Firewall Control Settings Modified", "Set", "", "Success", "Firewall Rule", "Policy Rule",
      5226, "Firewall Rules Reordered", "Set", "", "Success", "Firewall Rule", "Policy Rule",
      5231, "Firewall Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
      5234, "Network Quarantine Rule Created", "Create", "", "Success", "", "Policy Rule",
      5235, "Network Quarantine Rule Modified", "Set", "", "Success", "", "Policy Rule",
      5236, "Network Quarantine Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
      5237, "Network Quarantine Control Settings Modified", "Set", "", "Success", "Network Quarantine Rule", "Policy Rule",
      5238, "Network Quarantine Rules Reordered", "Set", "", "Success", "Network Quarantine Rule", "Policy Rule",
      5241, "Network Quarantine Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
      6030, "Mobile Device Updated", "Other", "", "Success", "Device", "Other",
      6053, "Mobile Incident Resolved", "Set", "", "Success", "", "Other",
      6054, "Mobile Incident Status Changed", "Set", "", "Success", "", "Other",
      6055, "Mobile Incident Analyst Verdict Changed", "Set", "", "Success", "", "Other"
  ];
  let EventTypeLookup_onoff = datatable(
      field: string,
      EventType_field: string,
      NewValue_field: string
  )
      [
      "true", "Enable", "on",
      "false", "Disable", "off"
  ];
  let EventTypeLookup_enableddisabled = datatable(
      field: string,
      EventType_fieldenableddisabled: string,
      NewValue_fieldenableddisabled: string
  )
      [
      "true", "Enable", "enabled",
      "false", "Disable", "disabled"
  ];
  let EventSeverityLookup = datatable (EventResult: string, EventSeverity_lookup: string)
      [
      "Success", "Informational",
      "Failure", "Low"
  ];
  let EventSeverityLookup_activity = datatable (activityType_d: real, EventSeverity_activity: string)
      [
      4100, "Medium",
      4101, "High",
      2016, "Medium",
      2028, "Low",
      4001, "Medium",
      4002, "Low",
      4007, "Low",
      4008, "Medium",
      4009, "Medium",
      4011, "High",
      2, "Medium",
      2011, "Low",
      2012, "Low",
      2013, "Medium",
      2014, "Low",
      2015, "Low",
      4002, "Low",
      4104, "High",
      4105, "Medium"
  ];
  let ThreatConfidenceLookup_undefined = datatable(
      threatInfo_analystVerdict_s: string,
      ThreatConfidence_undefined: int
  )
      [
      "false_positive", 5,
      "undefined", 15,
      "suspicious", 25,
      "true_positive", 33 
  ];
  let ThreatConfidenceLookup_suspicious = datatable(
      threatInfo_analystVerdict_s: string,
      ThreatConfidence_suspicious: int
  )
      [
      "false_positive", 40,
      "undefined", 50,
      "suspicious", 60,
      "true_positive", 67 
  ];
  let ThreatConfidenceLookup_malicious = datatable(
      threatInfo_analystVerdict_s: string,
      ThreatConfidence_malicious: int
  )
      [
      "false_positive", 75,
      "undefined", 80,
      "suspicious", 90,
      "true_positive", 100 
  ];
  let parser = (disabled: bool=false) {
      let RawGroupSiteActivityIds = dynamic([39, 41, 44, 45, 46, 56, 57, 68, 69, 70, 82, 83, 105, 116, 150, 151, 200, 201, 4004, 4005, 4104, 4105, 5012, 5020, 5021, 5022, 5024, 5025, 5026, 5027, 6000, 6001, 6002, 6010, 6011, 6012, 73, 76, 77, 78, 79, 84, 87, 2100, 2101, 2111]);
      let RawOtherActivityIds = dynamic([2, 40, 58, 59, 60, 101, 106, 107, 108, 109, 112, 113, 129, 1501, 1502, 1503, 1504, 2011, 2012, 2013, 2014, 2015, 2016, 2028, 2029, 2030, 2036, 2037, 3001, 3002, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3100, 3101, 3102, 3103, 3500, 3501, 3502, 3506, 3507, 3521, 3525, 3526, 3527, 3530, 3531, 3600, 3601, 3602, 3603, 3604, 3626, 3628, 3641, 3650, 3651, 3652, 3653, 3654, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 4001, 4002, 4006, 4007, 4008, 4009, 4011, 4012, 5242, 5243, 5244, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 7500, 7501, 7602, 7603, 7604, 5120, 5121, 5122, 5123, 5124, 5129, 5220, 5221, 5222, 5225, 5226, 5231, 5234, 5235, 5236, 5237, 5238, 5241, 6030, 6053, 6054, 6055]);
      let activitydata = SentinelOne_CL
          | where not(disabled) and event_name_s == "Activities."
          | project-away
              threatInfo_confidenceLevel_s,
              threatInfo_analystVerdict_s,
              threatInfo_threatName_s,
              threatInfo_incidentStatus_s,
              threatInfo_identifiedAt_t,
              threatInfo_updatedAt_t,
              threatInfo_threatId_s,
              mitigationStatus_s;
      let rawgroupsiteactivitydata = activitydata
          | where activityType_d in (RawGroupSiteActivityIds)
          | parse-kv DataFields_s as (username: string, userName: string, userFullName: string, newValue: string, policyEnabled: string, siteName: string, oldValue: string, ipAddress: string, oldSiteName: string, policy: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | parse-kv policy as (id: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | project-rename ObjectId = id
          | lookup EventFieldsLookup on activityType_d;
      let groupsiteactivitydata_onoff = rawgroupsiteactivitydata
          | where activityType_d in(39, 41, 57, 105, 200, 73, 76, 78, 79, 84, 87, 150)
          | lookup EventTypeLookup_onoff on $left.newValue == $right.field
          | lookup EventTypeLookup_onoff on $left.policyEnabled == $right.field
          | extend
              EventType = coalesce(EventType_field, EventType_field1),
              NewValue = coalesce(NewValue_field, NewValue_field1);
      let groupsiteactivitydata_enabledisabled = rawgroupsiteactivitydata
          | where activityType_d in (70, 82, 83, 201)
          | lookup EventTypeLookup_enableddisabled on $left.newValue == $right.field
          | extend
              EventType = EventType_fieldenableddisabled,
              NewValue = NewValue_fieldenableddisabled;
      let groupsiteactivitydata_other = rawgroupsiteactivitydata
          | where activityType_d !in(39, 41, 57, 105, 200, 73, 76, 78, 79, 84, 87, 150, 70, 82, 83, 201)
          | extend EventType = EventType_activity;
      let groupsiteactivitydata = union
              groupsiteactivitydata_onoff,
              groupsiteactivitydata_enabledisabled,
              groupsiteactivitydata_other
          | extend
              ActorUsername = coalesce(username, userName, userFullName),
              Object = coalesce(Object, siteName, oldSiteName),
              NewValue = coalesce(NewValue, newValue),
              OldValue = oldValue;
      let machineactivitydata = activitydata
          | where activityType_d in (52, 53, 54, 55, 61, 62, 63, 93, 95, 117, 118, 4100, 4101)
          | parse-kv DataFields_s as (username: string, userName: string, computerName: string, threatClassification: string, ipAddress: string, groupName: string, targetGroupName: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookupMachineActivity on activityType_d
          | extend
              EventType = EventType_machineactivity,
              EventSubType = EventSubType_machineactivity,
              ThreatCategory_datafields = threatClassification,
              OldValue = groupName,
              NewValue = targetGroupName,
              ObjectId = agentId_s
          | extend ActorUsername = coalesce(username, userName)
          | invoke _ASIM_ResolveDvcFQDN('computerName');
      let accountactivitydata = activitydata
          | where activityType_d in (130, 131, 5040, 5041, 5042, 5044, 7200, 7201, 7202, 7203)
          | parse-kv DataFields_s as (username: string, accountName: string, cloudProviderAccountName: string, ipAddress: string, accountId: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookupAccountActivity on activityType_d
          | extend
              EventType = EventType_accountactivity,
              EventSubType = EventSubType_accountactivity,
              Object = coalesce(accountName, cloudProviderAccountName),
              ObjectId = accountId;
      let useractivitydata = activitydata
          | where activityType_d in (88, 114)
          | parse-kv DataFields_s as (username: string, byUser: string, newValue: string, ipAddress: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookup_useractivity on activityType_d
          | lookup EventTypeLookup_enableddisabled on $left.newValue == $right.field
          | extend
              ActorUsername = byUser,
              EventType = coalesce(EventType_useractivity, EventType_fieldenableddisabled),
              EventSubType = EventSubType_useractivity,
              NewValue = NewValue_fieldenableddisabled;
      let rawotheractivitydata = activitydata
          | where activityType_d in (RawOtherActivityIds)
          | parse-kv DataFields_s as (username: string, userName: string, email: string, globalTwoFaEnabled: string, cloudIntelligenceOn: string, fileDisplayName: string, roleName: string, oldIncidentStatusTitle: string, oldTicketId: string, oldAnalystVerdictTitle: string, oldConfidenceLevel: string, previous: string, oldStatus: string, oldTagName: string, oldTagDescription: string, newIncidentStatusTitle: string, newTicketId: string, newAnalystVerdictTitle: string, newConfidenceLevel: string, newStatus: string, current: string, Status: string, newTagName: string, newTagDescription: string, value: string, rulesAdded: string, rulesRemoved: string, tagsAdded: string, tagsRemoved: string, incidentName: string, ruleName: string, deviceId: string, ip: string, externalIp: string, affectedDevices: string, featureValue: string, featureName: string, recoveryEmail: string, policyName: string, tagName: string, gatewayExternalIp: string, gatewayMac: string, threatClassification: string, ipAddress: string, applicationPath: string, externalId: string, consoleUrl: string, ruleId: string, policyId: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookup_otheractivity on activityType_d
          | lookup EventTypeLookup_onoff on $left.cloudIntelligenceOn == $right.field
          | lookup EventTypeLookup_onoff on $left.globalTwoFaEnabled == $right.field
          | extend
              ActorUsername = coalesce(username, userName),
              EventType = coalesce(EventType_otheractivity, EventType_field, EventType_field1),
              EventSubType = EventSubType_otheractivity,
              Object = coalesce(Object, fileDisplayName, applicationPath, roleName, ruleName, incidentName, recoveryEmail, featureName, policyName, tagName),
              NewValue = coalesce(newIncidentStatusTitle, newTicketId, newAnalystVerdictTitle, newConfidenceLevel, newStatus, current, Status, newTagName, newTagDescription, featureValue),
              OldValue = coalesce(oldIncidentStatusTitle, oldTicketId, oldAnalystVerdictTitle, oldConfidenceLevel, oldStatus, previous, oldTagName, oldTagDescription),
              TargetIpAddr = coalesce(externalIp, ip, gatewayExternalIp),
              ThreatCategory_datafields = threatClassification,
              RuleName = ruleName,
              TargetDvcId = deviceId,
              ObjectId = coalesce(ruleId, policyId, externalId, deviceId)
          | invoke _ASIM_ResolveDstFQDN('affectedDevices')
          | project-rename
              TargetHostname = DstHostname,
              TargetDomain = DstDomain,
              TargetDomainType = DstDomainType,
              TargetFQDN = DstFQDN,
              TargetUrl = consoleUrl;
      let parsedotheractivitydata_eventtype = rawotheractivitydata
          | where activityType_d in (5256, 5258)
          | extend EventType = case(
                          isnotempty(rulesAdded) or isnotempty(tagsAdded),
                          "Create",
                          isnotempty(rulesRemoved) or isnotempty(tagsRemoved),
                          "Delete",
                          "Set"
                      );
      let parsedotheractivitydata_objectvalue = rawotheractivitydata
          | where activityType_d in (3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3650, 3651, 3652, 3653, 3654)
          | extend Object = strcat(Object, ' ', value);
      let parsedotheractivitydata_severity = rawotheractivitydata
          | where activityType_d in (2036, 2037, 2030)
          | extend EventSeverity_specific = case(
                                      primaryDescription_s has_any ("to malicious", "to True positive"),
                                      "High", 
                                      primaryDescription_s has_any ("to suspicious", "to Undefined"),
                                      "Medium",
                                      primaryDescription_s has "to False positive",
                                      "Low",
                                      "Informational"
                                  );
      let ParsedActivitydata = union
              groupsiteactivitydata,
              machineactivitydata,
              accountactivitydata,
              useractivitydata,
              rawotheractivitydata,
              parsedotheractivitydata_eventtype,
              parsedotheractivitydata_objectvalue
          | where activityType_d !in(2030, 2036, 2037)
          | lookup EventSeverityLookup on EventResult
          | lookup EventSeverityLookup_activity on activityType_d;
      let UnParsedActivitydatawithThreat = union ParsedActivitydata, parsedotheractivitydata_severity
          | where isnotempty(threatId_s)
          | join kind=inner (SentinelOne_CL
              | where event_name_s == "Threats."
              | project
                  TimeGenerated,
                  threatInfo_confidenceLevel_s,
                  threatInfo_analystVerdict_s,
                  threatInfo_threatName_s,
                  threatInfo_incidentStatus_s,
                  threatInfo_identifiedAt_t,
                  threatInfo_updatedAt_t,
                  threatInfo_threatId_s,
                  mitigationStatus_s)
              on $left.threatId_s == $right.threatInfo_threatId_s
          | where TimeGenerated1 >= TimeGenerated
          | summarize arg_min(TimeGenerated1, *) by activityType_d, threatId_s, createdAt_t, TimeGenerated;
      let undefineddata = UnParsedActivitydatawithThreat
          | where threatInfo_confidenceLevel_s == "Undefined"
          | lookup ThreatConfidenceLookup_undefined on threatInfo_analystVerdict_s;
      let suspiciousdata = UnParsedActivitydatawithThreat
          | where threatInfo_confidenceLevel_s == "suspicious"
          | lookup ThreatConfidenceLookup_suspicious on threatInfo_analystVerdict_s;
      let maliciousdata = UnParsedActivitydatawithThreat
          | where threatInfo_confidenceLevel_s == "malicious"
          | lookup ThreatConfidenceLookup_malicious on threatInfo_analystVerdict_s;
      let ParsedActivitydatawithThreat = union undefineddata, suspiciousdata, maliciousdata
          | extend
              ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious),
              AdditionalFields = bag_pack(
                      "threatUpdatedAt",
                      threatInfo_updatedAt_t,
                      "threatAnalystVerdict",
                      threatInfo_analystVerdict_s,
                      "threatIncidentStatus",
                      threatInfo_incidentStatus_s,
                      "mitigationStatus",
                      mitigationStatus_s
                  )
          | project-rename
              ThreatId = threatId_s,
              ThreatName = threatInfo_threatName_s,
              ThreatFirstReportedTime = threatInfo_identifiedAt_t,
              ThreatCategory_threats = threatInfo_classification_s,
              ThreatOriginalConfidence = threatInfo_confidenceLevel_s;
      let ParsedActivitydatawithoutThreat = ParsedActivitydata
          | where isempty(threatId_s);
      union ParsedActivitydatawithThreat, ParsedActivitydatawithoutThreat
      | extend 
          EventSeverity = coalesce(EventSeverity_specific, EventSeverity_activity, EventSeverity_lookup),
          EventProduct = "SentinelOne",
          EventVendor = "SentinelOne",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1",
          EventCount = toint(1),
          AdditionalFields = bag_merge(AdditionalFields, todynamic(DataFields_s)),
          EventOriginalType = tostring(toint(activityType_d)),
          SrcIpAddr = iff(ipAddress != "null", ipAddress, ""),
          DvcAction = iff(EventResult == "Success", "Allow", "Deny"),
          ThreatCategory = coalesce(ThreatCategory_datafields, ThreatCategory_threats)
      | project-rename
          EventStartTime = createdAt_t,
          EventUid = _ItemId,
          EventMessage = primaryDescription_s,
          ActorUserId = userId_s,
          DvcId = agentId_s,
          EventOriginalUid = activityUuid_g
      | extend
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ActorUserId),
          ActorUserIdType = iff(isnotempty(ActorUserId), "Other", ""),
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          TargetDvcIdType = iff(isnotempty(TargetDvcId), "Other", ""),
          ValueType = iff(isnotempty(NewValue), "Other", "")
      | extend
          EventEndTime = EventStartTime,
          User = ActorUsername,
          IpAddr = SrcIpAddr,
          Dvc = coalesce(DvcHostname, DvcId, EventProduct),
          Dst = coalesce(TargetHostname, TargetIpAddr),
          Src = SrcIpAddr,
          Rule = RuleName,
          Value = NewValue
      | project-away
          *_d,
          *_s,
          *_t,
          *_g,
          *_b,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          username,
          userName,
          userFullName,
          newValue,
          policyEnabled,
          siteName,
          oldValue,
          computerName,
          accountName,
          cloudProviderAccountName,
          email,
          globalTwoFaEnabled,
          cloudIntelligenceOn,
          fileDisplayName,
          roleName,
          oldIncidentStatusTitle,
          oldTicketId,
          oldAnalystVerdictTitle,
          oldConfidenceLevel,
          previous,
          oldStatus,
          oldTagName,
          oldTagDescription,
          newIncidentStatusTitle,
          newTicketId,
          newAnalystVerdictTitle,
          newConfidenceLevel,
          newStatus,
          current,
          Status,
          newTagName,
          newTagDescription,
          value,
          rulesAdded,
          rulesRemoved,
          tagsAdded,
          tagsRemoved,
          incidentName,
          ruleName,
          deviceId,
          ip,
          externalIp,
          affectedDevices,
          featureValue,
          featureName,
          recoveryEmail,
          policyName,
          policy,
          tagName,
          gatewayExternalIp,
          gatewayMac,
          threatClassification,
          applicationPath,
          externalId,
          groupName,
          oldSiteName,
          targetGroupName,
          ipAddress,
          EventType_*,
          EventSubType_*,
          EventSeverity_*,
          NewValue_*,
          _ResourceId,
          TimeGenerated1,
          ThreatCategory_*,
          ThreatConfidence_*,
          accountId,
          policyId,
          ruleId,
          byUser
  };
  parser(disabled=disabled)
}



//
// Function Name: ASimAuditEventVectraXDRAudit
// Description: This ASIM parser supports normalizing Vectra XDR Audit Logs Event in the Audits_Data_CL table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventVectraXDRAudit(    ['disabled']:bool=False)
{
let parser = (disabled:bool = false)
{
  Audits_Data_CL
  | where not(disabled) and event_action_s !in ("login","logout")
  | extend
        EventEndTime = event_timestamp_t,
        EventProduct = 'XDR',
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1.0",
        EventStartTime = event_timestamp_t,
        EventType = "Other",
        EventVendor = 'Vectra',
        Type = "Audit Log",
        EventUid = tostring(toint(id_d)),
        ActorUserId = tostring(toint(user_id_d)),
        ActorUserIdType = "UID",
        ActorUsernameType = "UPN",
        EventResult = case(result_status_s=="success", "Success", result_status_s=="failure", "Failure","NA")
  | project-rename
        Dvc = source_ip_s,
        Operation = event_action_s,
        ActorUsername = username_s,
        Object = event_object_s,
        ActorOriginalUserType = user_type_s,
        EventMessage = Message,
        EventProductVersion = version_s
  | extend User = ActorUsername
  | project-away
        id_d, user_id_d, user_role_s, result_status_s,event_timestamp_t, event_data_s, api_client_id_g, TenantId, _ResourceId, RawData, SourceSystem, Computer, MG, ManagementGroupName
};
parser (disabled=disabled)
}



//
// Function Name: ASimAuditEventVMwareCarbonBlackCloud
// Description: This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Audit Event normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimAuditEventVMwareCarbonBlackCloud(    ['disabled']:bool=False)
{
let EventTypeLookup = datatable(temp_type: string, EventType: string)[
"created", "Create",
"updated", "Set",
"deleted", "Delete",
"added", "Create",
"modified", "Set"
];
let parser = (disabled: bool=false) {
    let allData = CarbonBlackAuditLogs_CL
        | where not(disabled)
        | where not(description_s has_any ("logged in", "login"));
    let Enabled = allData
        | where description_s has_cs "Enabled"
        | parse description_s with "Enabled " temp_object1: string " in policy " temp_restmessage1: string
        | parse description_s with "Enabled " temp_object2: string " with " temp_restmessage2: string
        | parse description_s with temp_object3: string " Enabled " temp_restmessage3: string
        | extend
            EventType = "Enable",
            Operation = description_s,
            Object = coalesce(temp_object1, temp_object2, temp_object3),
            ObjectType = iff(description_s has "policy", "Policy Rule", "Configuration Atom"),
            EventSeverity1 = iff(description_s has "Sensor Bypass", "Low", "Informational");
    let Set = allData
        | where description_s startswith "Set"
        | parse description_s with "Set " temp_field_s: string  " to " NewValue: string " for device(s): " temp_deviceid_s: string
        | parse temp_deviceid_s with TargetFQDN: string " (ID: " TargetDvcId: string ")" *
        | invoke _ASIM_ResolveFQDN ("TargetFQDN")
        | extend
            Object = temp_field_s,
            EventType = "Set",
            Operation = strcat("Set ", temp_field_s, " to ", NewValue),
            ObjectType = "Configuration Atom",
            AdditionalFields = bag_pack("devices", temp_deviceid_s);
    let AlertNotify = allData
        | where description_s has "alert notification"
        | parse-kv description_s as (name: string) with (pair_delimiter=" ", kv_delimiter=":")
        | parse description_s with temp_type: string " alert notification " temp_restmessage: string
        | extend
            Operation = strcat(temp_type, " alert notification"),
            temp_type = tolower(temp_type),
            Object = coalesce(name, "alert notification"),
            ObjectType = "Service"
        | lookup EventTypeLookup on temp_type;
    let CustomRole = allData
        | where description_s has "custom role"
        | parse description_s with temp_type1: string " custom role " temp_rolename1: string " (psc:role:" temp_roleid1: string ")" temp_restmessage1: string 
        | parse description_s with * " role " temp_rolename2: string " (psc:role:" temp_roleid2: string ") " temp_type2: string " with" temp_restmessage2: string
        | extend
            temp_type = tolower(coalesce(temp_type1, temp_type2)),
            Object = coalesce(temp_rolename1, temp_rolename2),
            ObjectType = "Other"
        | lookup EventTypeLookup on temp_type
        | extend
            Operation = strcat(temp_type, " custom role ", Object),
            AdditionalFields = bag_pack("role id", coalesce(temp_roleid1, temp_roleid2));
    let Policy = allData
        | where description_s startswith "Policy"
        | parse description_s with "Policy " temp_policyname1: string " (ID: " temp_policyid1 ") " temp_type1: string " successfully"
        | parse description_s with "Policy " temp_policyname2: string " (ID: " temp_policyid2: string ") " temp_type2: string " and renamed to " NewValue: string " (ID: " temp_restmessage2: string
        | parse description_s with "Policy " temp_policyname3: string " (ID: " temp_policyid3 ") " temp_type3: string
        | extend
            Object = coalesce(temp_policyname1, temp_policyname2, temp_policyname3),
            ObjectType = "Policy Rule",
            temp_type = replace_regex(coalesce(temp_type1, temp_type2, temp_type3), @'[is,was]* (\S+)', @'\1'),
            OldValue = temp_policyname2,
            AdditionalFields = bag_pack("policy id", coalesce(temp_policyid1, temp_policyid2, temp_policyid3))
        | lookup EventTypeLookup on temp_type
        | extend
            Operation = iff(isnotempty(temp_type2), strcat("Policy ", Object, " ", temp_type, " and renamed to ", NewValue), strcat("Policy ", Object, " ", temp_type));
    let Changed = allData
        | where description_s startswith "Changed policy"
        | parse description_s with temp_operation_s: string " to " NewValue: string ")" * "device(s): " temp_deviceid_s: string 
        | extend
            EventType = "Set",
            Operation = strcat(temp_operation_s, " to ", NewValue),
            Object = NewValue,
            ObjectType = "Policy Rule",
            AdditionalFields = bag_pack("devices", temp_deviceid_s),
            TargetDvcId = iff(temp_deviceid_s contains ',', split(temp_deviceid_s, ',', 0), temp_deviceid_s);
    let ParamsUpdated = allData
        | where description_s startswith "Parameters updated"
        | parse description_s with "Parameters updated for " temp_config1: string " (ID: " temp_configid1: string ") for policy " temp_policyname1: string " (ID: " temp_policyid1: string ")" temp_restmessage1: string
        | parse description_s with "Parameters updated for " temp_config2: string " (ID: " temp_configid2: string ") for policy with ID " temp_policyid2: string
        | extend
            temp_operation = coalesce(temp_config1, temp_config2),
            temp_configid = coalesce(temp_configid1, temp_configid2)
        | extend
            EventType = "Set", 
            Operation = strcat("Parameters updated for ", temp_operation, " for policy ", temp_policyname1, tostring(split(temp_policyid2, "{")[0])),
            Object = strcat("Policy ", coalesce(temp_policyname1, temp_policyid2)),
            ObjectType = "Policy Rule",
            AdditionalFields = bag_pack("config id", temp_configid);
    let Reputation = allData
        | where description_s has_cs "Reputation"
        | parse description_s with "User " * " " temp_type1: string " Reputation" * " for Organization ID " temp_orgid1: string " of type " temp_reptype1: string " to " temp_list1: string " with content: " temp_content1: string " | " temp_restmessage1: string
        | parse description_s with "User " * " " temp_type2: string " Reputation" * " for Organization ID " temp_orgid2: string ": " temp_content2: string " | " temp_restmessage2: string
        | extend
            temp_type = coalesce(temp_type1, temp_type2),
            Object = iff(isnotempty(temp_reptype1), strcat("Reputation Override of type ", temp_reptype1), "Reputation Override"),
            ObjectType = "Configuration Atom"
        | lookup EventTypeLookup on temp_type
        | extend
            Operation = strcat(temp_type, " ", Object),
            ActorScopeId = coalesce(temp_orgid1, temp_orgid2),
            AdditionalFields = bag_pack("reputation value", coalesce(temp_content1, temp_content2));
    let PolicyUpdateApplied = allData
        | where description_s has "Policy update applied"
        | parse description_s with * "policy to " Object: string
        | extend
            EventType = "Set",
            Operation = "Policy update applied",
            ObjectType = "Policy Rule",
            OriginalObjectType = "Policy"
    ;
    let auto_deletion = allData
        | where description_s has_all ("auto-deletion", "devices")
        | parse description_s with TargetFQDN: string " " *
        | invoke _ASIM_ResolveFQDN ("TargetFQDN")
        | extend
            EventType = "Delete",
            Operation = "auto-deletion",
            Object = TargetFQDN,
            ObjectType = "Directory Service Object",
            OriginalObjectType = "Device";
    let Hash_Deleted = allData
        | where description_s startswith "Hash - "
        | parse description_s with "Hash - " HashName_s: string " " * "on device " TargetFQDN: string
        | invoke _ASIM_ResolveFQDN ("TargetFQDN")
        | extend
            EventType = "Delete",
            Operation = "Delete Request",
            Object = HashName_s,
            ObjectType = "Configuration Atom",
            OriginalObjectType = "Hash";
    let Failure_Deleting_Hash = allData
        | where description_s startswith "Failure deleting hash"
        | parse description_s with "Failure deleting hash '" HashName_s: string "'" * "device '" TargetDvcId: string "'" * "Reason: " EventResultDetails: string
        | extend
            EventType = "Delete",
            Operation = "Deleting hash",
            Object = HashName_s,
            ObjectType = "Configuration Atom",
            OriginalObjectType = "Hash",
            EventResult = "Failure";
    let Delete_Hash = allData
        | where description_s startswith "Delete Hash"
        | parse description_s with "Delete Hash " HashName_s: string " " * "device(s): " temp_deviceid_s: string
        | extend
            EventType = "Delete",
            Operation = "Delete Hash",
            Object = HashName_s,
            ObjectType = "Configuration Atom",
            OriginalObjectType = "Hash",
            AdditionalFields = bag_pack("devices", temp_deviceid_s),
            TargetDvcId = iff(temp_deviceid_s contains ',', split(temp_deviceid_s, ',', 0), temp_deviceid_s);
    let Success_Deleting_Hash = allData
        | where description_s startswith "Success deleting hash"
        | parse description_s with "Success deleting hash '" HashName_s: string "'" * "device '" TargetDvcId: string "'" * "Reason: " EventResultDetails: string
        | extend
            EventType = "Delete",
            Operation = "Deleting hash",
            Object = HashName_s,
            ObjectType = "Configuration Atom",
            OriginalObjectType = "Hash",
            EventResult = "Success";
    let DeviceUninstalled = allData
        | where description_s has_all ("Device", "uninstalled")
        | parse description_s with "Device " TargetFQDN: string " with deviceId " TargetDvcId: string " " *
        | invoke _ASIM_ResolveFQDN ("TargetFQDN")
        | extend
            EventType = "Uninstall",
            Operation = "Uninstall",
            Object = TargetFQDN,
            ObjectType = "Directory Service Object",
            OriginalObjectType = "Device";
    let DeviceReset = allData
        | where description_s startswith ("Device reset requested")
        | parse description_s with "Device reset requested on device " TargetDvcId: string
        | extend 
            EventType = "Set",
            Operation = "Device reset",
            Object = TargetDvcId,
            ObjectType = "Directory Service Object",
            OriginalObjectType = "Device";
    let CreateOrModifyPolicy = allData
        | where description_s startswith "Request received to"
        | parse description_s with * "policy " Object: string
        | extend
            EventType = case(
                description_s has "modify policy",
                "Set", 
                description_s has "create new policy",
                "Create",
                ""
            ),
            Operation = case(
                description_s has "modify policy",
                "modify policy", 
                description_s has "create new policy",
                "create new policy",
                ""
            ),
            Object = replace_string(Object, "- ", ""),
            ObjectType = "Policy Rule",
            OriginalObjectType = "Policy";
    let LogsRequested = allData
        | where description_s startswith ("Logs requested")
        | parse description_s with "Logs requested for device " TargetDvcId: string
        | extend 
            EventType = "Read",
            Operation = "Logs requested",
            Object = TargetDvcId,
            ObjectType = "Directory Service Object",
            OriginalObjectType = "Device";
    let Re_Registration = allData
    | where description_s startswith "Re-registration of device"
    | parse description_s with "Re-registration of device" TargetFQDN: string " of " TargetDvcId: string " device completed" *
    | invoke _ASIM_ResolveFQDN ("TargetFQDN")
    | extend
        EventType = "Enable",
        Operation = "Re-registration of device",
        Object = TargetFQDN,
        ObjectType = "Directory Service Object",
        OriginalObjectType = "Device";
    union
        Enabled,
        Set,
        AlertNotify,
        CustomRole,
        Policy,
        Changed,
        ParamsUpdated,
        Reputation,
        PolicyUpdateApplied,
        auto_deletion,
        Hash_Deleted,
        Failure_Deleting_Hash,
        Delete_Hash,
        Success_Deleting_Hash,
        DeviceUninstalled,
        DeviceReset,
        CreateOrModifyPolicy,
        LogsRequested,
        Re_Registration
    | extend
        EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),
        EventSeverity = coalesce(EventSeverity1, "Informational"),
        AdditionalFields = bag_merge(AdditionalFields, bag_pack("flagged", flagged_b, "request url", requestUrl_s))
    | extend
        EventProduct = "Carbon Black Cloud",
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1",
        EventVendor = "VMware",
        EventResult = iif(isnotempty(EventResult), EventResult, "Success"),
        EventCount = int(1)
    | project-rename
        ActorUsername = loginName_s,
        EventUid = _ItemId,
        SrcIpAddr = clientIp_s,
        EventMessage = description_s,
        EventOriginalUid = eventId_g,
        ActorScope = orgName_s
    | extend
        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
        ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
        TargetDvcIdType = iff(isnotempty(TargetDvcId), "Other", ""),
        EventEndTime = EventStartTime,
        Src = SrcIpAddr,
        IpAddr = SrcIpAddr,
        Dvc = EventProduct,
        User = ActorUsername,
        Value = NewValue,
        ValueType = iff(isnotempty(NewValue), "Other", "")
    | project-away 
        *_s,
        *_d,
        *_b,
        temp*,
        Computer,
        MG,
        ManagementGroupName,
        RawData,
        SourceSystem,
        TenantId,
        _ResourceId,
        name,
        EventSeverity1
};
parser(disabled=disabled)
}



//
// Function Name: imAuditEvent
// Description: This ASIM parser supports normalizing audit events from all supported sources to the ASIM Audit Event activity normalized schema. This is an similar to to the ASIM version, but using different exclusion keys.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) imAuditEvent(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['pack']:bool=False)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers')
  | where SearchKey in ('Any', 'ExcludevimAuditEvent')
  | extend SourceSpecificParser=column_ifexists('SourceSpecificParser', '')
  | distinct SourceSpecificParser);
let BuiltInDisabled=toscalar('ExcludevimAuditEventBuiltIn' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
union isfuzzy=true
    vimAuditEventEmpty,
    vimAuditEventMicrosoftExchangeAdmin365 (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventMicrosoftExchangeAdmin365' in (DisabledParsers)))),
    vimAuditEventMicrosoftWindowsEvents (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventMicrosoftWindowsEvents' in (DisabledParsers)))),
    vimAuditEventMicrosoftSecurityEvents (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventMicrosoftSecurityEvents' in (DisabledParsers)))),
    vimAuditEventMicrosoftEvent (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventMicrosoftEvents' in (DisabledParsers)))),
    vimAuditEventAzureActivity (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventAzureActivity' in (DisabledParsers)))),
    vimAuditEventCiscoMeraki  (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventCiscoMeraki' in (DisabledParsers)))),
    vimAuditEventCiscoMerakiSyslog  (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventCiscoMerakiSyslog' in (DisabledParsers)))),
    vimAuditEventBarracudaWAF (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, operation_has_any=operation_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventBarracudaWAF' in (DisabledParsers)))),
    vimAuditEventBarracudaCEF (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, operation_has_any=operation_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventBarracudaCEF' in (DisabledParsers)))),
    vimAuditEventCiscoISE (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventCiscoISE' in (DisabledParsers)))),
    vimAuditEventVectraXDRAudit (starttime=starttime, endtime=endtime, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventVectraXDRAudit' in (DisabledParsers)))),
    vimAuditEventSentinelOne (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventSentinelOne' in (DisabledParsers)))),
    vimAuditEventCrowdStrikeFalconHost(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventCrowdStrikeFalconHost' in (DisabledParsers)))),
    vimAuditEventVMwareCarbonBlackCloud(starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, eventtype_in=eventtype_in, eventresult=eventresult, actorusername_has_any=actorusername_has_any, operation_has_any=operation_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any, disabled=(BuiltInDisabled or ('ExcludevimAuditEventVMwareCarbonBlackCloud' in (DisabledParsers))))
}



//
// Function Name: vimAuditEventAzureActivity
// Description: This ASIM parser supports filtering and normalizing Azure administrative activity in the AzureActivity table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventAzureActivity(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let parser=  (
          starttime:datetime=datetime(null), 
          endtime:datetime=datetime(null),
          srcipaddr_has_any_prefix:dynamic=dynamic([]), 
          eventresult:string='*',
          actorusername_has_any:dynamic=dynamic([]),
          eventtype_in:dynamic=dynamic([]),
          operation_has_any:dynamic=dynamic([]),
          object_has_any:dynamic=dynamic([]),
          newvalue_has_any:dynamic=dynamic([]),
          disabled:bool = false
  ){
   let AzureActivityOperationLookup = datatable (op:string, EventType:string) 
  [
    'ACTION', 'Execute',
    'WRITE', 'Set',
    'DELETE', 'Delete'
  ];
  let AzureActivityStatusLookup = datatable (ActivityStatusValue:string, ActivitySubstatusValue:string, EventResult:string, EventResultDetails:string) 
  [
      "Accept","Accepted","Success","",
      "Accept","Created","Success","",
      "Accept","OK","Success","",
      "Accept","","Success","",
      "Accepted","","Success","",
      "Active","","Success","Active",
      "Failed","","Failure","",
      "Failure","BadRequest","Failure","Bad Request",
      "Failure","Conflict","Failure","Bad Request",
      "Failure","Forbidden","Failure","Unauthorized",
      "Failure","InternalServerError","Failure","Internal error",
      "Failure","MethodNotAllowed","Failure","Bad Request",
      "Failure","NotFound","Failure","Not found",
      "Failure","Unauthorized","Failure","Unauthorized",
      "Failure","","Failure","",
      "In Progress","","Success","In Progress",
      "Resolved","","Success","",
      "Start","","Success","Start",
      "Started","","Success","Start",
      "Succeeded","","Success","",
      "Success","Created","Success","",
      "Success","NoContent","Success","",
      "Success","OK","Success","",
      "Success","","Success","",
      "Updated","","Success","",
      "Succeeded","OK","Success","",
      "Accepted","Accepted","Success","",
      "Accepted","OK","Success","",
      "Failed","Forbidden","Failure","Unauthorized",
      "Succeeded","Created","Success","",
      "Failed","BadRequest","Failure","Bad request",
      "Accepted","Created","Success","",
      "Failed","Conflict","Failure","Bad request",
      "Failed","MethodNotAllowed","Failure","Bad request",
      "Failure","BadGateway","Failure","Bad request",
      "Succeeded","NoContent","Success","",
      "Failure","ServiceUnavailable","Failure","Internal error",
      "Failure","GatewayTimeout","Failure","Internal error",
      "Failed","NotFound","Failure","Not found",
      "Failed","BadGateway","Failure","Bad request",
      "Failure","UnsupportedMediaType","Failure","Bad request",
      "Failed","Unauthorized","Failure","Unauthorized",
      "Cancel","","Failure","Cancelled"
  ];
  AzureActivity 
  | where not(disabled)
  | where
      (isnull(starttime) or TimeGenerated >= starttime) 
      and (isnull(endtime) or TimeGenerated <= endtime)
      and (array_length(newvalue_has_any) == 0)
  | where CategoryValue == "Administrative"
  | project-away HTTPRequest, Level, SourceSystem, EventSubmissionTimestamp, TenantId, OperationId, Hierarchy, Category, ResourceId, ResourceProvider, Resource
  | where 
      (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(CallerIpAddress,srcipaddr_has_any_prefix))
      and (array_length(actorusername_has_any) == 0 or Caller has_any (actorusername_has_any))
      and (array_length(operation_has_any) == 0 or OperationNameValue has_any (operation_has_any))
      and (array_length(object_has_any) == 0 or Properties  has_any (object_has_any))
  // --
  // Calculate and filter by EventType
  | extend op = toupper(tostring(split(OperationNameValue,"/")[-1]))
  | lookup AzureActivityOperationLookup on op
  | extend EventType = iff (EventType == "", "Other", EventType)
  | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)
  | project-away op
  // --
  // Calculate EventResult, EventResultDetails, and EventResultOriginalDetails
  | extend
      EventOriginalResultDetails = strcat (
          ActivityStatusValue, 
          iff (ActivitySubstatusValue !="", strcat(' [', ActivitySubstatusValue, ']'), "")
      )
  | extend 
      ActivitySubstatusValue = iff (ActivitySubstatusValue matches regex "\\d+", "", ActivitySubstatusValue)
  | lookup AzureActivityStatusLookup on ActivityStatusValue, ActivitySubstatusValue
  | extend EventResult = iff(EventResult == "", "Other", EventResult)
  | where eventresult == "*" or (EventResult == eventresult) // Not optimized
  | extend EventSeverity = iff(EventResult == "Failure", "Low", "Informational")
  | project-away ActivityStatus*, ActivitySubstatus*    // 
  | project-rename 
      Operation = OperationNameValue,
      SrcIpAddr = CallerIpAddress,
      EventOriginalUid = EventDataId,
      ActorSessionId = CorrelationId,
      EventOriginalType = CategoryValue
  | extend
      EventCount = int(1),
      EventStartTime = TimeGenerated, 
      EventEndTime= TimeGenerated,
      EventProduct = 'Azure',
      EventVendor = 'Microsoft',
      EventSchemaVersion = '0.1.0',
      EventSchema = 'AuditEvent',
      ObjectType = "Cloud Resource",
      TargetAppName = "Azure",
      TargetAppType = "CSP"
  // --
  // Calculate Actor
  | extend 
      Caller = iff(Caller == "Microsoft.RecoveryServices", "", Caller)
  | extend 
      ActorUsernameType = iff (Caller has "@", "UPN", "")
  | extend 
      ActorUsername = iff (ActorUsernameType == "UPN", Caller, ""),
      ActorUserId = iff (ActorUsernameType != "UPN", Caller, "")
  | extend
      ActorUserIdType = iff  (ActorUserId != "", "AADID", "")
  | project-away Caller
  // --
  // Calculate Object
  | extend 
      entity = tostring(Properties_d.entity), 
      resource = tostring(Properties_d.resource),
      entity_name = tostring(Properties_d.["Entity Name"])
  | extend Object = case ( 
          entity != "", entity,
          strcat ("/subscriptions/", SubscriptionId, "/resourceGroups/", ResourceGroup, "/providers/", ResourceProviderValue, "/",resource, iff (entity_name != "", strcat("/", entity_name), ""))
      )
  | project-away entity, resource,entity_name, _SubscriptionId, SubscriptionId, ResourceGroup, ResourceProviderValue
  // Aliases
  | extend AdditionalFields = pack_dictionary("Authorization", Authorization_d, "Claims", Claims_d, "Error", Properties_d.statusMessage)
  // -- Aliases
  | extend 
      IpAddr = SrcIpAddr,
      User = ActorUsername,
      Application = TargetAppName,
      Dst = TargetAppName,
      Src = SrcIpAddr,
  // -- Entity identifier explicit aliases
      ActorUserUpn = ActorUsername,
      ActorUserAadId = ActorUserId
  | project-away OperationName, Properties*, Authorization*, Claims*
  // -- Properties*
};
parser
(
  starttime = starttime,
  endtime = endtime,
  srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
  actorusername_has_any = actorusername_has_any,
  eventtype_in = eventtype_in,
  eventresult = eventresult,
  operation_has_any = operation_has_any,
  object_has_any=object_has_any,
  newvalue_has_any=newvalue_has_any,
  disabled=disabled
)
}



//
// Function Name: vimAuditEventBarracudaCEF
// Description: This ASIM parser supports normalizing Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventBarracudaCEF(    ['disabled']:bool=False,
    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]))
{
let EventTypeLookup = datatable (
    ChangeType_s: string,
    EventType_lookup: string
)
    [
    "SET", "Set",
    "ADD", "Create",
    "DEL", "Delete",
    "NONE", "Other",
    "", "Other"
];
let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let ObjectTypeLookup = datatable (ObjectType_s: string, ObjectType: string)[
    "global", "Other",
    "Services", "Service",
    "web_firewall_policy", "Policy Rule",
    "service", "Service",
    "json_url_profile", "Other",
    "server", "Service",
    "header_acl", "Directory Service Object",
    "virtual_ip_config_address", "Configuration Atom",
    "aps_req_rewrite_policy", "Policy Rule",
    "aps_url_acl", "Directory Service Object",
    "websocket_security_policy", "Policy Rule",
    "aps_ftp_acl", "Directory Service Object",
    "user_system_ip", "Configuration Atom",
    "syslog_server", "Service",
    "attack_action", "Configuration Atom",
    "global_adr", "Configuration Atom",
    "aps_content_protection", "Other"
];
let parser = (
    disabled: bool=false,
    starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    eventtype_in: dynamic=dynamic([]),
    eventresult: string='*',
    newvalue_has_any: dynamic=dynamic([]),
    operation_has_any: dynamic=dynamic([]))
    {
      let BarracudaCEF = 
          CommonSecurityLog
          | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
          | where DeviceEventCategory == "AUDIT" 
              and (toupper(ProcessName) !in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN"))
          | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
          | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
          | extend
              Operation = ProcessName,
              EventResult = "Success"
          | where (eventresult == "*" or EventResult =~ eventresult)
              and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
              and (array_length(newvalue_has_any) == 0 or DeviceCustomString1 has_any (newvalue_has_any))
          | parse trim(@'[^\w(")]+', Message) with * "Reason=" Reason:string 
          | extend Reason = trim(@'(")', Reason)
          | extend 
              EventResultDetails = Reason
          | lookup EventTypeLookup on $left.EventOutcome == $right.ChangeType_s
          | extend EventType = EventType_lookup
          | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)
          | extend 
              severity = toint(LogSeverity)
          | lookup SeverityLookup on severity
          | lookup ObjectTypeLookup on $left.FileType == $right.ObjectType_s
          | extend
              EventSchema = "AuditEvent",
              EventSchemaVersion = "0.1.0",
              EventVendor = "Barracuda",
              EventProduct = "WAF",
              EventCount = toint(1)
          | extend
              Dvc = DeviceName, 
              Operation = ProcessName,
              DvcIpAddr = DeviceAddress,
              NewValue = DeviceCustomString1,
              SrcIpAddr = SourceIP,
              EventMessage = Message,
              OldValue = DeviceCustomString2,
              DvcHostname = DeviceName,
              ActorUsername = DestinationUserName,
              Object = FileName,
              EventUid = _ItemId,
              ThreatConfidence = toint(ThreatConfidence),
              EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))
          | extend
              Src = SrcIpAddr,
              ActorUsernameType = iff(isnotempty(ActorUsername),"Simple",""),
              ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""),
              User = ActorUsername,
              Value = NewValue,
              EventEndTime = EventStartTime
          | extend
              IpAddr = SrcIpAddr,
              ValueType = iff(isnotempty(Value),"Other","")
          | project-away
              EventType_lookup,
              ThreatConfidence,
              CommunicationDirection,
              AdditionalExtensions,
              Device*,
              Source*,
              Destination*,
              Activity,
              LogSeverity,
              ApplicationProtocol,
              ProcessID,
              ExtID,
              Protocol,
              Reason,
              ReceiptTime,
              SimplifiedDeviceAction,
              OriginalLogSeverity,
              ProcessName,
              EndTime,
              ExternalID,
              File*,
              ReceivedBytes,
              Message,
              Old*,
              EventOutcome,
              Request*,
              StartTime,
              Field*,
              Flex*,
              Remote*,
              Malicious*,
              severity,
              ThreatSeverity,
              IndicatorThreatType,
              ThreatDescription,
              _ResourceId,
              SentBytes,
              ReportReferenceLink,
              Computer,
              TenantId,CollectorHostName,
              _ItemId;
      BarracudaCEF
    };
    parser(
              disabled=disabled,
              starttime=starttime,
              endtime=endtime,
              srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
              eventtype_in=eventtype_in,
              eventresult=eventresult,
              newvalue_has_any=newvalue_has_any,
              operation_has_any=operation_has_any
          )
}



//
// Function Name: vimAuditEventBarracudaWAF
// Description: This ASIM parser supports normalizing Barracuda WAF logs ingested in 'barracuda_CL' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventBarracudaWAF(    ['disabled']:bool=False,
    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]))
{
let barracudaSchema = datatable(
    LogType_s: string,
    UnitName_s: string,
    EventName_s: string,
    DeviceReceiptTime_s: string,
    ChangeType_s: string,
    CommandName_s: string,
    Severity_s: string,
    LoginIP_s: string,
    NewValue_s: string,
    HostIP_s: string,
    host_s: string,
    OldValue_s: string,
    EventMessage_s: string,
    AdminName_s: string,
    ObjectType_s: string,
    ObjectName_s: string,
    TimeTaken_d: real,
    _ResourceId: string,
    RawData: string,
    SourceIP: string,
    Message: string,
    Computer: string,
    MG: string,
    ManagementGroupName: string,
    TenantId: string,
    SourceSystem: string,
    TimeGenerated: datetime
)[];
let EventTypeLookup = datatable (
    ChangeType_s: string,
    EventType_lookup: string
)
    [
    "SET", "Set",
    "ADD", "Create",
    "DEL", "Delete",
    "NONE", "Other",
    "", "Other"
];
let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let ObjectTypeLookup = datatable (ObjectType_s: string, ObjectType: string)[
    "global", "Other",
    "Services", "Service",
    "web_firewall_policy", "Policy Rule",
    "service", "Service",
    "json_url_profile", "Other",
    "server", "Service",
    "header_acl", "Directory Service Object",
    "virtual_ip_config_address", "Configuration Atom",
    "aps_req_rewrite_policy", "Policy Rule",
    "aps_url_acl", "Directory Service Object",
    "websocket_security_policy", "Policy Rule",
    "aps_ftp_acl", "Directory Service Object",
    "user_system_ip", "Configuration Atom",
    "syslog_server", "Service",
    "attack_action", "Configuration Atom",
    "global_adr", "Configuration Atom",
    "aps_content_protection", "Other"
];
let parser = (
    disabled: bool=false,
    starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    eventtype_in: dynamic=dynamic([]),
    eventresult: string='*',
    newvalue_has_any: dynamic=dynamic([]),
    operation_has_any: dynamic=dynamic([]))
    {
      let BarracudaCustom = 
          union isfuzzy=true
              barracudaSchema,
              barracuda_CL
          | where not(disabled)
          | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime) 
          | where LogType_s == "AUDIT" and EventName_s !in ("LOGIN", "LOGOUT", "UNSUCCESSFUL_LOGIN")
          | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(LoginIP_s, srcipaddr_has_any_prefix))
          | extend
              Operation = CommandName_s,
              EventResult = "Success"
          | where (eventresult == "*" or EventResult =~ eventresult)
              and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
              and (array_length(newvalue_has_any) == 0 or NewValue_s has_any (newvalue_has_any))
          | parse trim(@'[^\w(")]+', EventMessage_s) with * "Reason=" Reason:string
          | extend Reason = trim(@'(")', Reason)
          | extend
              EventResultDetails = Reason
          | lookup EventTypeLookup on ChangeType_s
          | extend EventType = EventType_lookup
          | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)
          | extend 
              severity = toint(Severity_s)
          | lookup SeverityLookup on severity
          | lookup ObjectTypeLookup on ObjectType_s
          | extend
              EventSchema = "AuditEvent",
              EventSchemaVersion = "0.1.0",
              EventVendor = "Barracuda",
              EventProduct = "WAF",
              EventCount = toint(1)
          | extend
              Dvc = UnitName_s,
              DvcIpAddr = HostIP_s,
              NewValue = NewValue_s,
              SrcIpAddr = LoginIP_s,
              EventMessage = EventMessage_s,
              OldValue = OldValue_s,
              DvcHostname = host_s,
              ActorUsername = AdminName_s,
              Object = ObjectName_s,
              EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)))
          | extend
              Src = SrcIpAddr,
              ActorUsernameType = iff(isnotempty(ActorUsername), "Simple", ""),
              ActorUserType = iff(isnotempty(ActorUsername), "Admin", ""),
              User = ActorUsername,
              Value = NewValue,
              EventEndTime = EventStartTime
          | extend
              IpAddr = SrcIpAddr,
              ValueType = iff(isnotempty(Value),"Other","")
          | project-away
              *_d,
              *_s,
              EventType_lookup,
              Reason,
              _ResourceId,
              severity,
              RawData,
              SourceIP,
              Message,
              Computer,
              MG,
              ManagementGroupName,
              TenantId,
              SourceSystem;
      BarracudaCustom
    };
    parser(
              disabled=disabled,
              starttime=starttime,
              endtime=endtime,
              srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
              eventtype_in=eventtype_in,
              eventresult=eventresult,
              newvalue_has_any=newvalue_has_any,
              operation_has_any=operation_has_any
          )
}



//
// Function Name: vimAuditEventCiscoISE
// Description: This ASIM parser supports normalizing administrative activity in the Cisco ISE events to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventCiscoISE(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let EventFieldsLookup=datatable(
EventOriginalType: int,
EventType: string,
EventResult: string,
EventOriginalSeverity: string,
EventSeverity: string,
Object: string,
Operation: string,
EventMessage: string
)[
"52000", "Create", "Success", "NOTICE", "Informational", "ISE instance", "Added configuration", "Added configuration",
"52001", "Set", "Success", "NOTICE", "Informational", "ISE instance", "Changed configuration", "Changed configuration",
"52002", "Delete", "Success", "NOTICE", "Informational", "ISE instance", "Deleted configuration", "Deleted configuration",
"52003", "Other", "Success", "NOTICE", "Informational", "Node", "Deregister Node", "One of the ISE instances in the deployment has been de-registered.",
"52004", "Other", "Success", "NOTICE", "Informational", "Node", "Register Node", "A new ISE instance has been registered and has joined the deployment.",
"52005", "Enable", "Success", "NOTICE", "Informational", "Node", "Activate Node", "An ISE instance has been activated to receive updates from the Primary node.",
"52006", "Disable", "Success", "NOTICE", "Informational", "Node", "Deactivate ISE Node", "An ISE instance has been deactivated and will no longer receive updates from the Primary node.",
"52007", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Force Full replication", "A Force Full replication has been issued for an ISE instance.",
"52008", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Replacement Register Handler", "A new ISE instance has joined the deployment through hardware replacement.",
"52009", "Other", "Success", "NOTICE", "Informational", "Node", "Promote Node", "A Secondary node has been promoted to be the Primary node of the deployment.",
"52013", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Hardware Replacement", "A new ISE instance has joined the deployment through hardware replacement.",
"52015", "Enable", "Success", "NOTICE", "Informational", "LogCollector Target", "Enable LogCollector Target", "Enable the deployment Log Collector target.",
"52016", "Other", "Success", "NOTICE", "Informational", "LogCollector Node", "Select LogCollector Node", "The Log Collector node for the deployment has been selected.",
"52017", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Apply software update", "Apply a software update to the selected ISE instances.",
"52030", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Full replication succeeded", "Full replication was completed successfully",
"52031", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Full replication failed", "Failed to complete full replication",
"52033", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Registration succeeded", "Registration with the primary node was completed successfully",
"52035", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Registration failed", "Failed to perform the full replication requested by the primary instance",
"52038", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Registration succeeded", "The ISE instance was successfully joined to a distributed ISE deployment",
"52039", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Registration failed", "The ISE instance was unable to join a distributed deployment",
"52042", "Other", "Success", "NOTICE", "Informational", "Primary instance", "Demotion succeeded", "Demotion of the existing primary instance was completed successfully",
"52043", "Other", "Failure", "NOTICE", "Low", "Primary instance", "Demotion failed", "Demotion of the existing primary instance failed",
"52045", "Other", "Success", "NOTICE", "Informational", "Secondary instance", "Promotion succeeded", "Promotion of the secondary instance was completed successfully",
"52046", "Other", "Failure", "NOTICE", "Low", "Secondary instance", "Promotion failed", "Promotion of a secondary instance failed",
"52072", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Deregister succeeded", "Deregistration was completed successfully",
"52073", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Deregister failed", "Deregistration failed",
"52078", "Delete", "Failure", "NOTICE", "Low", "ISE secondary instance", "Delete node failed", "Failed to delete the ISE secondary instance in inactive mode from the deployment",
"52079", "Delete", "Success", "NOTICE", "Informational", "ISE secondary instance", "Delete node succeeded", "The ISE primary instance successfully deleted the secondary instance in inactive mode",
"52080", "Delete", "Failure", "NOTICE", "Low", "ISE secondary instance", "Delete node failed", "Failed to delete the ISE secondary instance in inactive mode from the primary instance",
"52082", "Other", "Failure", "NOTICE", "Low", "ISE secondary instance", "Backup failed", "An immediate backup for the secondary instance failed",
"52084", "Other", "Success", "NOTICE", "Informational", "ISE primary instance", "Backup succeeded", "An immediate backup for the primary instance was completed successfully",
"52085", "Other", "Failure", "NOTICE", "Low", "ISE primary instance", "Backup failed", "An immediate backup for the primary failed",
"52091", "Other", "Failure", "NOTICE", "Low", "Update bundle", "Software update failed", "Software update download of update bundle failed",
"52092", "Other", "Success", "NOTICE", "Informational", "ISE instance", "Software update succeeded", "The software update was completed successfully",
"52093", "Other", "Failure", "NOTICE", "Low", "ISE instance", "Software update failed", "The software update failed",
"57000", "Other", "Success", "NOTICE", "Informational", "Log file(s)", "Deleted rolled-over local log file(s)", "Deleted rolled-over local log file(s)",
"58001", "Other", "Success", "NOTICE", "Informational", "ISE process", "ISE process started", "An ISE process has started",
"58002", "Other", "Success", "NOTICE", "Informational", "ISE process", "ISE process stopped", "An ISE process has stopped",
"58003", "Other", "Success", "NOTICE", "Informational", "ISE processes", "ISE processes started", "All ISE processes have started",
"58004", "Other", "Success", "NOTICE", "Informational", "ISE processes", "ISE processes stopped", "All ISE processes have stopped",
"58005", "Other", "Success", "NOTICE", "Informational", "ISE process", "ISE process was restarted by watchdog service", "The watchdog service has restarted an ISE process",
"60000", "Install", "Success", "NOTICE", "Informational", "Node", "Patch installation completed successfully on the node", "Patch installation completed successfully on the node",
"60001", "Install", "Failure", "NOTICE", "Low", "Node", "Patch installation failed on the node", "Patch installation failed on the node",
"60002", "Other", "Success", "NOTICE", "Informational", "Node", "Patch rollback completed successfully on the node", "Patch rollback completed successfully on the node",
"60003", "Other", "Failure", "NOTICE", "Low", "Node", "Patch rollback failed on the node", "Patch rollback failed on the node",
"60050", "Create", "Success", "NOTICE", "Informational", "Node", "Node added to deployment successfully", "Node added to deployment successfully",
"60051", "Create", "Failure", "NOTICE", "Low", "Node", "Failed to add node to deployment", "Failed to add node to deployment",
"60052", "Delete", "Success", "NOTICE", "Informational", "Node", "Node removed from deployment", "Node removed from deployment",
"60053", "Delete", "Failure", "NOTICE", "Low", "Node", "Failed to remove node from deployment", "Failed to remove node from deployment",
"60054", "Other", "Success", "NOTICE", "Informational", "Node", "Node updated successfully", "Node updated successfully",
"60055", "Other", "Failure", "NOTICE", "Low", "Node", "Failed to update node", "Failed to update node",
"60056", "Other", "Success", "NOTICE", "Informational", "Cluster", "The runtime status of the node group has changed", "There is a change in the cluster state",
"60057", "Other", "Success", "NOTICE", "Informational", "PSN node", "A PSN node went down", "One of the PSN nodes in the node group has gone down",
"60058", "Other", "Success", "NOTICE", "Informational", "Heartbeat System", "The initial status of the heartbeat system", "The initial status of the heartbeat system",
"60059", "Other", "Success", "NOTICE", "Informational", "Node", "Node has successfully registered with MnT", "Node has successfully registered with MnT",
"60060", "Other", "Success", "NOTICE", "Informational", "Policy Service nodes", "Administrator invoked OCSP Clear Cache operation for all Policy Service nodes", "The ISE Administrator invoked OCSP Clear Cache operation for all Policy Service nodes",
"60061", "Other", "Success", "NOTICE", "Informational", "Policy Service nodes", "OCSP Clear Cache operation completed successfully", "OCSP Clear Cache operation completed successfully on all Policy Service nodes",
"60062", "Other", "Failure", "NOTICE", "Low", "Policy Service nodes", "OCSP Clear Cache operation terminated with error", "OCSP Clear Cache clear operation terminated with error on one or more Policy Service nodes",
"60063", "Other", "Success", "NOTICE", "Informational", "ISE secondary node", "Replication to node completed successfully", "Replication of data to secondary node completed successfully",
"60064", "Other", "Failure", "NOTICE", "Low", "ISE secondary node", "Replication to node failed", "Replication of data to secondary node failed",
"60068", "Other", "Success", "INFO", "Informational", "Profiler Feed Service", "Profiler Feed Service - manual download initiated", "The Profiler Feed Service has begun the check and download of new and/or updated Profiles in response to Administrator's request",
"60069", "Other", "Success", "INFO", "Informational", "Profiler Feed Service", "Profiler Feed Service - Profiles Downloaded", "The Profiler Feed Service has downloaded new and/or updated Profiles",
"60070", "Other", "Success", "INFO", "Informational", "Profiler Feed Service", "Profiler Feed Service - No Profiles Downloaded", "The Profiler Feed Service found no new and/or updated Profiles to download",
"60083", "Set", "Success", "INFO", "Informational", "Syslog Server", "Syslog Server configuration change", "Syslog Server configuration change has occurred",
"60084", "Set", "Success", "INFO", "Informational", "ADEOS CLI user", "ADEOS CLI user configuration change", "Configuration change occurred for ADEOS CLI user",
"60085", "Set", "Success", "INFO", "Informational", "ADEOS Repository", "ADEOS Repository configuration change", "Configuration change occurred for ADEOS repository",
"60086", "Set", "Success", "INFO", "Informational", "ADEOS SSH Service", "ADEOS SSH Service configuration change", "Configuration change occurred for ADEOS SSH Service",
"60087", "Set", "Success", "INFO", "Informational", "ADEOS Maximum SSH CLI sessions", "ADEOS Maximum SSH CLI sessions configuration change", "Configuration change occurred for ADEOS Maximum CLI sessions",
"60088", "Set", "Success", "INFO", "Informational", "ADEOS SNMP agent", "ADEOS SNMP agent configuration change", "Configuration change occurred for ADEOS SNMP agent",
"60089", "Set", "Success", "INFO", "Informational", "ADEOS CLI kron scheduler", "ADEOS CLI kron scheduler policy configuration change", "Configuration change occurred for ADEOS CLI kron scheduler policy",
"60090", "Set", "Success", "INFO", "Informational", "ADEOS CLI kron scheduler", "ADEOS CLI kron scheduler occurence configuration change", "Configuration change occurred for ADEOS CLI kron scheduler occurence",
"60091", "Set", "Success", "INFO", "Informational", "ADEOS CLI pre-login banner", "ADEOS CLI pre-login banner configuration change", "Configuration change occurred for ADEOS CLI pre-login banner",
"60092", "Set", "Success", "INFO", "Informational", "ADEOS CLI post-login banner", "ADEOS CLI post-login banner configuration change", "Configuration change occurred for ADEOS CLI post-login banner",
"60094", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE Backup has completed successfully", "ISE Backup has completed successfully",
"60095", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE Backup has failed", "ISE Backup has failed",
"60097", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE Log Backup has completed successfully", "ISE Log Backup has completed successfully",
"60098", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE Log Backup has failed", "ISE Log Backup has failed",
"60100", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE Restore has completed successfully", "ISE Restore has completed successfully",
"60101", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE Restore has failed", "ISE Restore has failed",
"60102", "Install", "Success", "INFO", "Informational", "ISE instance", "Application installation completed successfully", "Application installation completed successfully",
"60103", "Install", "Failure", "ERROR", "Low", "ISE instance", "Application installation failed", "Application installation failed",
"60105", "Delete", "Success", "INFO", "Informational", "ISE instance", "Application remove completed successfully", "Application remove completed successfully",
"60106", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Application remove failed", "Application remove failed",
"60107", "Other", "Failure", "ERROR", "Low", "ISE instance", "Application upgrade failed", "Application upgrade failed",
"60111", "Delete", "Success", "INFO", "Informational", "ISE instance", "Application patch remove has completed successfully", "Application patch remove has completed successfully",
"60112", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Application patch remove has failed", "Application patch remove has failed",
"60113", "Other", "Success", "WARN", "Informational", "ISE server", "ISE server reload has been initiated", "ISE server reload has been initiated",
"60114", "Other", "Success", "WARN", "Informational", "ISE server", "ISE server shutdown has been initiated", "ISE server shutdown has been initiated",
"60118", "Delete", "Success", "INFO", "Informational", "File", "ADEOS CLI user has used delete CLI to delete file", "ADEOS CLI user has used delete CLI to delete file",
"60119", "Execute", "Success", "INFO", "Informational", "File", "ADEOS CLI user has used copy CLI to copy file", "ADEOS CLI user has used copy CLI to copy file",
"60120", "Execute", "Success", "INFO", "Informational", "Directory", "ADEOS CLI user has used mkdir CLI to create a directory", "ADEOS CLI user has used mkdir CLI to create a directory",
"60121", "Other", "Success", "INFO", "Informational", "System Config", "ADEOS CLI user has copied out running system configuration", "ADEOS CLI user has copied out running system configuration",
"60122", "Other", "Success", "INFO", "Informational", "System Config", "ADEOS CLI user has copied in system configuration", "ADEOS CLI user has copied in system configuration",
"60123", "Other", "Success", "INFO", "Informational", "System Config", "ADEOS CLI user has saved running system configuration", "ADEOS CLI user has saved running system configuration",
"60126", "Install", "Failure", "ERROR", "Low", "ISE instance", "Application patch installation failed", "Application patch installation failed",
"60128", "Other", "Failure", "ERROR", "Low", "File", "Failure occurred trying to copy file in from ADEOS CLI", "Failure occurred trying to copy file in from ADEOS CLI",
"60129", "Other", "Failure", "ERROR", "Low", "File", "Failure occurred trying to copy file out from ADEOS CLI", "Failure occurred trying to copy file out from ADEOS CLI",
"60130", "Set", "Success", "INFO", "Informational", "ISE Backup", "ISE Scheduled Backup has been configured", "ISE Scheduled Backup has been configured",
"60131", "Create", "Success", "INFO", "Informational", "ISE Support bundle", "ISE Support bundle has been created from web UI", "ISE Support bundle has been created from web UI",
"60132", "Delete", "Success", "INFO", "Informational", "ISE Support bundle", "ISE Support bundle has been deleted from web UI", "ISE Support bundle has been deleted from web UI",
"60133", "Other", "Failure", "ERROR", "Low", "ISE Support bundle", "ISE Support bundle generation from web UI has failed", "ISE Support bundle generation from web UI has failed",
"60153", "Other", "Success", "INFO", "Informational", "Certificate", "Certificate has been exported", "Certificate has been exported",
"60166", "Other", "", "WARN", "Informational", "Certificate", "Certificate will expire soon", "Certificate Expiration warning",
"60167", "Other", "", "WARN", "Informational", "Certificate", "Certificate has expired", "Certificate has expired",
"60172", "Other", "Success", "INFO", "Informational", "ISE instance", "Alarm(s) has/have been acknowledged", "These alarms are acknowledged and will not be displayed on the Dashboard",
"60173", "Other", "Success", "INFO", "Informational", "ISE instance", "Outdated alarms are purged", "Only latest 15000 alarms would be retained and rest of them are purged",
"60187", "Other", "Success", "INFO", "Informational", "ISE instance", "Application upgrade succeeded", "Application upgrade succeeded",
"60189", "Set", "Success", "INFO", "Informational", "ISE instance", "Terminal Session timeout has been modified", "Configuration change occurred for ADEOS CLI Terminal Session timeout",
"60193", "Set", "Success", "INFO", "Informational", "ISE instance", "RSA key configuration has been modified", "Configuration change occurred for ADEOS CLI RSA key",
"60194", "Set", "Success", "INFO", "Informational", "ISE instance", "Host key configuration has been modified", "Configuration change occurred for ADEOS CLI host key",
"60197", "Disable", "Success", "NOTICE", "Informational", "Certificate", "Revoked ISE CA issued Certificate.", "Certificate issued to Endpoint by ISE CA is revoked by Administrator",
"60198", "Delete", "Success", "INFO", "Informational", "MnT", "MnT purge event occurred", "MnT purge event occurred",
"60199", "Other", "Success", "INFO", "Informational", "ISE instance", "An IP-SGT mapping was deployed successfully", "An IP-SGT mapping was deployed successfully to a TrustSec device",
"60200", "Other", "Failure", "INFO", "Low", "ISE instance", "An IP-SGT mapping has failed deploying", "An IP-SGT mapping has failed deploying to a TrustSec device",
"60201", "Other", "Success", "INFO", "Informational", "ISE instance", "IP-SGT deployment to TrustSec device was successful", "IP-SGT deployment to TrustSec device was successful",
"60202", "Other", "Failure", "INFO", "Low", "ISE instance", "IP-SGT deployment to TrustSec device failed", "IP-SGT deployment to TrustSec device failed",
"60207", "Set", "Success", "INFO", "Informational", "ISE instance", "Logging loglevel configuration has been modified", "Configuration change occurred for ADEOS CLI logging loglevel",
"60208", "Other", "Success", "INFO", "Informational", "ISE instance", "Root CA certificate has been replaced", "Root CA certificate has been replaced",
"60209", "Enable", "Success", "INFO", "Informational", "CA service", "CA service enabled", "CA service enabled",
"60210", "Disable", "Success", "INFO", "Informational", "CA service", "CA service disabled", "CA service disabled",
"60213", "Other", "Success", "INFO", "Informational", "ISE instance", "CA keys were replaced by import operation", "CA keys were replaced by import operation",
"60214", "Other", "Success", "INFO", "Informational", "ISE instance", "CA keys were exported", "CA keys were exported",
"60215", "Other", "Success", "INFO", "Informational", "ISE instance", "Endpoint certs were marked expired", "Endpoint certs were marked expired by daily scheduled job",
"60216", "Delete", "Success", "INFO", "Informational", "ISE instance", "Endpoint certs were purged", "Endpoint certs were purged by daily scheduled job",
"60451", "Enable", "Success", "INFO", "Informational", "ISE instance", "Telemetry is enabled on this deployment", "Telemetry is enabled on this deployment",
"60452", "Disable", "Success", "INFO", "Informational", "ISE instance", "Telemetry is disabled on this deployment", "Telemetry is disabled on this deployment",
"61002", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new SGT from IEPG", "ISE has learned a new SGT from IEPG",
"61003", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has propagated a new EEPG to APIC", "ISE has propagated a new EEPG to APIC.",
"61004", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new SXP mapping from APIC endpoint", "ISE has learned a new SXP mapping from APIC endpoint",
"61005", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has propagated a new endpoint(SXP mapping) to APIC", "ISE has propagated a new endpoint(SXP mapping) to APIC",
"61006", "Delete", "Success", "INFO", "Informational", "SGT", "ISE has removed an SGT due to deleted IEPG", "ISE has removed an SGT due to deleted IEPG",
"61007", "Delete", "Success", "INFO", "Informational", "APIC", "ISE has removed EEPG from APIC due to SGT deletion", "ISE has removed EEPG from APIC due to SGT deletion",
"61008", "Delete", "Success", "INFO", "Informational", "APIC", "ISE has removed an SXP mapping due to endpoint deletion on APIC", "ISE has removed an SXP mapping due to endpoint deletion on APIC",
"61009", "Delete", "Success", "INFO", "Informational", "APIC", "ISE has removed endpoint APIC due to SXP mapping removal a new SXP mapping to APIC", "ISE has removed endpoint APIC due to SXP mapping removal a new SXP mapping to APIC",
"61016", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh EPG subscriber against APIC", "ISE failed to refresh EPG subscriber against APIC",
"61017", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh endpoint subscriber against APIC", "ISE failed to refresh endpoint subscriber against APIC",
"61018", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh EEPG subscriber against APIC", "ISE failed to refresh EEPG subscriber against APIC",
"61020", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE failed to refresh L3EXTOUT subscriber against APIC", "ISE failed to refresh L3EXTOUT subscriber against APIC",
"61022", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE has failed to propagate SGT to EEPG", "ISE has failed to propagate SGT to EEPG",
"61023", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE has failed to learn IEPG from APIC", "ISE has failed to learn IEPG from APIC",
"61024", "Other", "Failure", "INFO", "Low", "ISE instance", "ISE has failed to parse VRF for EPG", "ISE has failed to parse VRF for EPG",
"61030", "Other", "Failure", "INFO", "Low", "ISE instance", "TrustSec deploy verification was canceled.", "TrustSec deployment verification process was canceled as a new TrustSec deploy started.",
"61033", "Other", "Success", "INFO", "Informational", "ISE instance", "TrustSec deployment verification process succeeded.", "ISE trustsec configuration was successfully deployed to all network access devices.",
"61034", "Other", "", "INFO", "Low", "ISE instance", "Maximum resource limit reached.", "Maximum resource limit reached.",
"61051", "Set", "Success", "INFO", "Informational", "ISE instance", "Synflood-limit configured", "Synflood-limit configured",
"61052", "Set", "Success", "INFO", "Informational", "ISE instance", "Rate-limit configured", "Rate-limit configured",
"61100", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new tenant from ACI", "ISE has learned a new tenant from ACI",
"61101", "Delete", "Success", "INFO", "Informational", "ACI tenant", "ISE has removed ACI tenant", "ISE has removed ACI tenant",
"61102", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to learn new tenant from ACI in ISE", "Failed to learn new tenant from ACI in ISE",
"61103", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Failed to remove ACI tenant in ISE", "Failed to remove ACI tenant in ISE",
"61104", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new tenant from SDA", "ISE has learned a new tenant from SDA",
"61105", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new VN info", "IISE has learned a new VN info",
"61106", "Create", "Failure", "ERROR", "Low", "ISE instance", "Failed to create VN info in ISE", "Failed to create VN info in ISE",
"61107", "Other", "Success", "INFO", "Informational", "ISE instance", "VN info is updated in ISE", "VN info is updated in ISE",
"61108", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to update VN info in ISE", "Failed to update VN info in ISE",
"61109", "Delete", "Success", "INFO", "Informational", "ACI tenant", "VN info is deleted in ISE", "VN info is deleted in ISE",
"61110", "Delete", "Failure", "ERROR", "Low", "ISE instance", "Failed to deleted VN info in ISE", "Failed to deleted VN info in ISE",
"61111", "Other", "Failure", "ERROR", "Low", "ISE instance", "Domain registration process failed", "Domain registration process failed",
"61114", "Other", "Success", "INFO", "Informational", "ISE instance", "Domain registration completed successfully", "Domain registration completed successfully",
"61115", "Other", "Failure", "ERROR", "Low", "ISE instance", "Domain registration failed", "Domain registration failed",
"61116", "Other", "Failure", "ERROR", "Low", "ACI certificate", "Unable to store ACI certificate", "Unable to store ACI certificate",
"61117", "Other", "Success", "INFO", "Informational", "ACI connector", "ACI connector started successfully", "ACI connector started successfully",
"61118", "Other", "Failure", "ERROR", "Low", "ACI connector", "Failed to start ACI connector", "Failed to start ACI connector",
"61120", "Delete", "Success", "INFO", "Informational", "ACI certificate", "Successfully deleted ACI certificate from ISE", "Successfully deleted ACI certificate from ISE",
"61121", "Delete", "Failure", "ERROR", "Low", "ACI certificate", "Failed to delete ACI certificate from ISE", "Failed to delete ACI certificate from ISE",
"61122", "Delete", "Failure", "ERROR", "Low", "ACI keystore", "Failed to delete ACI keystore", "Failed to delete ACI keystore",
"61123", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new ACI domain", "ISE has learned a new ACI domain",
"61124", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to learn a new ACI domain", "Failed to learn a new ACI domain",
"61125", "Delete", "Success", "INFO", "Informational", "ACI domain", "ISE has removed ACI domain", "ISE has removed ACI domain",
"61126", "Delete", "Failure", "ERROR", "Low", "ACI domain", "Failed to remove ACI domain", "Failed to remove ACI domain",
"61127", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE has learned a new SDA domain", "ISE has learned a new SDA domain",
"61128", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to learn a new SDA domain", "Failed to learn a new SDA domain",
"61129", "Delete", "Success", "INFO", "Informational", "SDA domain", "ISE has removed SDA domain", "ISE has removed SDA domain",
"61130", "Delete", "Failure", "ERROR", "Low", "SDA domain", "Failed to remove SDA domain", "Failed to remove SDA domain",
"61158", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE failed in receiving SDA SXP configuration", "ISE failed in receiving SDA SXP configuration",
"61160", "Other", "Failure", "ERROR", "Low", "ISE instance", "ISE failed to publish Gateway advertisement message to ACI", "ISE failed to publish Gateway advertisement message to ACI",
"61161", "Other", "Success", "INFO", "Informational", "ISE instance", "ISE learned new SXP Listener", "ISE learned new SXP Listener",
"61162", "Other", "Success", "INFO", "Informational", "SXP Listener", "ISE updates VN defined for SXP Listener", "ISE updates VN defined for SXP Listener",
"61163", "Other", "Success", "INFO", "Informational", "SXP Listener", "ISE learned new VN defined for SXP Listener", "ISE learned new VN defined for SXP Listener",
"61164", "Other", "Success", "INFO", "Informational", "SXP Listener", "ISE updates SXP Listener", "ISE updates SXP Listener",
"61165", "Delete", "Success", "INFO", "Informational", "SXP Listener", "ISE removed all SXP connections related to SXP Listener", "ISE removed all SXP connections related to SXP Listener",
"61166", "Other", "Success", "INFO", "Informational", "ACI", "ACI published Gateway advertisement message to SDA", "ACI published Gateway advertisement message to SDA",
"61167", "Other", "Success", "INFO", "Informational", "ISE instance", "Send ACI Gateway advertisement message to ISE", "Send ACI Gateway advertisement message to ISE",
"61168", "Other", "Failure", "ERROR", "Low", "ISE instance", "Failed to send ACI Gateway advertisement message to ISE", "Failed to send ACI Gateway advertisement message to ISE/SDA",
"61169", "Other", "Success", "INFO", "Informational", "ISE instance", "Successfully Send ACI Gateway advertisement message", "Successfully Send ACI Gateway advertisement message",
"61234", "Other", "Success", "WARN", "Informational", "ISE instance", "Got event with unknown properties", "Got event with unknown properties",
"62000", "Execute", "Success", "INFO", "Informational", "ISE instance", "Agentless script execute completed", "Agentless script execute completed",
"62001", "Execute", "Failure", "WARN", "Low", "ISE instance", "Agentless script execute failed", "Agentless script execute failed",
"62002", "Other", "Success", "INFO", "Informational", "ISE instance", "Agentless script upload completed", "Agentless script upload completed",
"62003", "Other", "Failure", "WARN", "Low", "ISE instance", "Agentless script upload failed", "Agentless script upload failed",
"61300", "Other", "Success", "INFO", "Informational", "ISE instance", "Network Access policy request", "Network Access policy request",
"61301", "Other", "Success", "INFO", "Informational", "ISE instance", "Device Admin policy request", "Device Admin policy request",
"61302", "Other", "Success", "INFO", "Informational", "ISE instance", "Policy component request", "Policy component request",
"60467", "Other", "Failure", "ERROR", "Low", "ISE instance", "OCSP Certificate renewal failed", "OCSP Certificate renewal failed.",
"60468", "Other", "Failure", "ERROR", "Low", "ISE instance", "Root CA Regeneration failed", "Regeneration of Root CA failed.",
"62008", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync service starts", "Meraki connector sync service starts",
"62009", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync service stops", "Meraki connector sync service stops",
"62010", "Other", "Failure", "WARN", "Low", "Meraki connector", "Meraki connector sync service failure", "Meraki connector sync service failure",
"62011", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync cycle starts", "Meraki connector sync cycle starts",
"62012", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync cycle stops", "Meraki connector sync cycle stops",
"62013", "Other", "Failure", "WARN", "Low", "Meraki connector", "Meraki connector sync cycle failure", "Meraki connector sync cycle failure",
"62014", "Other", "Success", "INFO", "Informational", "Meraki connector", "Meraki connector sync operation success", "Meraki connector sync operation success",
"62015", "Other", "Failure", "WARN", "Low", "Meraki connector", "Meraki connector sync operation failure", "Meraki connector sync operation failure",
"62016", "Other", "Success", "INFO", "Informational", "ISE instance", "Port 2484 opened for Data Connect", "Port 2484 opened for Data Connect",
"62017", "Other", "Success", "INFO", "Informational", "ISE instance", "Data Connect port 2484 closed", "Data Connect port 2484 closed"
];
let CiscoISEAuditParser=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]), 
    eventresult: string='*',
    actorusername_has_any: dynamic=dynamic([]),
    eventtype_in: dynamic=dynamic([]),
    operation_has_any: dynamic=dynamic([]),
    object_has_any: dynamic=dynamic([]),
    newvalue_has_any: dynamic=dynamic([]),
    disabled: bool = false
) {
let EventOriginalTypeList = toscalar(EventFieldsLookup 
    | where (eventresult == "*" or eventresult == EventResult)
            and (array_length(eventtype_in) == 0 or EventType in (eventtype_in))
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
    | summarize make_set(EventOriginalType));
Syslog
| where not(disabled)
//***************************** <Prefiltering> **************************
| where     (isnull(starttime) or TimeGenerated >= starttime) 
    and (isnull(endtime) or TimeGenerated <= endtime) 
//***************************** </Prefiltering> *************************
| where ProcessName has_any ("CISE", "CSCO")
| parse SyslogMessage with * " " longvalue:long " " EventOriginalType:int " " *
| where EventOriginalType in (EventOriginalTypeList)
| where 
    (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SyslogMessage, srcipaddr_has_any_prefix))
    and (array_length(actorusername_has_any) == 0 or SyslogMessage has_any (actorusername_has_any))
    and (array_length(operation_has_any) == 0 or SyslogMessage has_any (operation_has_any))
    and (array_length(newvalue_has_any) == 0 or SyslogMessage has_any (newvalue_has_any))
| project
    TimeGenerated,
    EventTime,
    EventOriginalType,
    Computer,
    HostName,
    HostIP,
    SyslogMessage
| lookup EventFieldsLookup on EventOriginalType
| parse-kv SyslogMessage as (NetworkDeviceName: string, ['User-Name']: string, UserName: string, User: string, ['Remote-Address']: string, ['Device IP Address']: string) with (pair_delimiter=',', kv_delimiter='=')
| project-rename
    SrcIpAddr=['Remote-Address']
    , TargetIpAddr =['Device IP Address']
| where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
| extend DvcHostname = coalesce(NetworkDeviceName, Computer, HostName)
| extend ActorUsername = coalesce(['User-Name'], UserName, User)
| extend ActorUsernameType = _ASIM_GetUsernameType(ActorUsername)      
| where (array_length(actorusername_has_any) == 0 or ActorUsername has_any (actorusername_has_any))
| extend 
    DvcIpAddr = iif(isnotempty(HostIP) and HostIP != "Unknown IP", HostIP, extract(@"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})", 1, Computer)) 
    , EventStartTime = coalesce(EventTime, TimeGenerated)
    , EventEndTime = coalesce(EventTime, TimeGenerated)
    , EventVendor = "Cisco"
    , EventProduct = "ISE"
    , EventProductVersion = "3.2"
    , EventCount = int(1)
    , EventSchema = "AuditEvent"
    , EventSchemaVersion = "0.1.0"
    , ObjectType = "Configuration Atom"
    , TargetAppName = "ISE"
    , TargetAppType = "Service"
// ***************** <Aliases> ********************
| extend 
    Dvc = coalesce(DvcIpAddr, DvcHostname)
    , Application = TargetAppName
    , IpAddr = coalesce(SrcIpAddr, TargetIpAddr)
    , Dst = TargetIpAddr
    , Src = SrcIpAddr
    , User = ActorUsername
// ***************** </Aliases> *******************
| project-away
    EventTime,
    Computer,
    HostName,
    SyslogMessage,
    NetworkDeviceName,
    ['User-Name'],
    UserName
};
CiscoISEAuditParser(
    starttime = starttime,
    endtime = endtime,
    srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
    actorusername_has_any = actorusername_has_any,
    eventtype_in = eventtype_in,
    eventresult = eventresult,
    operation_has_any = operation_has_any,
    object_has_any=object_has_any,
    newvalue_has_any=newvalue_has_any,
    disabled=disabled
)
}



//
// Function Name: vimAuditEventCiscoMeraki
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'meraki_CL' table  to the ASIM Audit Event normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventCiscoMeraki(    ['disabled']:bool=False,
    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]))
{
let EventFieldsLookup = datatable(TempOperation: string, Operation: string, EventResult: string, EventType: string)
[
  "vpn_connectivity_change", "VPN connectivity change","Success", "Set",
  "purging ISAKMP-SA", "Purging ISAKMP-SA","Partial", "Delete",
  "purged ISAKMP-SA", "Purged ISAKMP-SA","Success", "Delete",
  "ISAKMP-SA deleted", "ISAKMP-SA deleted","Success", "Delete",
  "IPsec-SA request", "IPsec-SA request queued","Failure", "Other",
  "failed to get sainfo", "Failed to get sainfo","Failure", "Other",
  "failed to pre-process ph2 packet", "Failed to pre-process ph2 packet","Failure", "Other",
  "phase2 negotiation failed", "Phase2 negotiation failed","Failure", "Other",
  "initiate new phase 1 negotiation", "Initiate new phase 1 negotiation","Success", "Initialize",
  "ISAKMP-SA established", "ISAKMP-SA established","Success", "Create",
  "initiate new phase 2 negotiation", "Initiate new phase 2 negotiation","Partial", "Initialize",
  "IPsec-SA established", "IPsec-SA established","Success", "Create",
  "STP role", "Spanning-tree interface role change","Success", "Set",
  "STP BPDU", "Spanning-tree guard state change", "", "",
  "VRRP transition", "VRRP transition","Success", "Set",
  "port status change", "Port status change", "", ""
];
let EventSeverityLookup=datatable(EventResult: string, EventSeverity: string)[
    "Success", "Informational",
    "Partial", "Informational",
    "Failure", "Low"
];
let parser=(disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([]), eventtype_in: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([]), actorusername_has_any: dynamic=dynamic([]), object_has_any: dynamic=dynamic([]), newvalue_has_any: dynamic=dynamic([])) {
let allData = union isfuzzy=true
    (
    meraki_CL
    | project-rename LogMessage =  Message
    );
let PreFilteredData = allData
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime) 
        and array_length(newvalue_has_any) == 0
        and array_length(object_has_any) == 0
        and array_length(actorusername_has_any) == 0
        and LogMessage has "events"
        and (LogMessage has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or LogMessage has_cs "Site-to-site" or LogMessage has_cs "Port")
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
    Epoch = tostring(Parser[0])
    | extend EpochTimestamp = split(Epoch, ".")
    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
    | extend LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | where LogType == "events";
let SiteToSiteData = PreFilteredData
    | where Substring has_cs "Site-to-site";
let SiteToSite_deleted = SiteToSiteData
    | where Substring has "ISAKMP-SA deleted"
    | extend TempOperation = "ISAKMP-SA deleted"
    | parse Substring with * " deleted " temp_deletedSrcIp:string  "-" temp_deletedTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_deletedSrcIp,
            temp_targetipport = temp_deletedTargetIp;
let SiteToSite_negotiation = SiteToSiteData
    | where Substring has_any("initiate new phase 1 negotiation", "initiate new phase 2 negotiation")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ": " temp_negotiationSrcIp:string "<=>" temp_negotiationTargetIp:string
    | extend temp_srcipport = temp_negotiationSrcIp,
            temp_targetipport = temp_negotiationTargetIp;
let SiteToSite_ESP = SiteToSiteData
    | where Substring has "phase2 negotiation failed due to time up waiting for phase1"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " due to " EventResultDetails " ESP " temp_espSrcIp:string "->" temp_espTargetIp:string
    | extend temp_srcipport = temp_espSrcIp,
            temp_targetipport = temp_espTargetIp;
let SiteToSite_tunnel = SiteToSiteData
    | where Substring has "IPsec-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ":" * "Tunnel " temp_tunnelSrcIp:string "->" temp_tunnelTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_tunnelSrcIp,
            temp_targetipport = temp_tunnelTargetIp;
let SiteToSite_ISAKMPestablished = SiteToSiteData
    | where Substring has "ISAKMP-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " established " temp_estSrcIp:string "-" temp_estTargetIp:string " " temp_restmessage:string
    | extend TempOperation = strcat(TempOperation, ' ', 'established'),
            temp_srcipport = temp_estSrcIp,
            temp_targetipport = temp_estTargetIp;
let SiteToSite_IPsecSArequest = SiteToSiteData
    | where Substring has "IPsec-SA request"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " for " temp_forTaregtSrcIp:string " " * " due to" EventResultDetails:string
    | extend temp_targetipport = temp_forTaregtSrcIp;
let SiteToSite_purging = SiteToSiteData
    | where Substring has_any("purging ISAKMP-SA", "purged ISAKMP-SA")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " spi=" temp_restmessage:string;
let SiteToSite_failed = SiteToSiteData
    | where Substring has_any ("failed to get sainfo", "failed to pre-process ph2 packet")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string
    | extend TempOperation = tostring(split(TempOperation, ' (')[0]);
let VPNConnectivityChangeData = PreFilteredData
    | where Substring has "vpn_connectivity_change"
    | parse-kv Substring as (type: string, peer_contact: string, connectivity: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend type = trim('"', type),
            connectivity = trim('"', connectivity)
    | extend TempOperation = type,
            temp_srcipport = peer_contact;
let StatusChangedData = PreFilteredData
    | where Substring has "status changed"
    | parse Substring with * "port " port:string " " portnextpart:string
    | extend TempOperation = "port status change";
let PortData = PreFilteredData
    | where Substring has_cs "Port"
    | parse Substring with * "Port " Port1:string " received an " TempOperation1:string " from " STPMac:string " " temp_restmessage:string
    | parse Substring with * "Port " Port2:string " changed " TempOperation2:string " from " PortNextPart:string
    | extend Port = coalesce(Port1,Port2)
    | extend TempOperation = coalesce(TempOperation1, TempOperation2);
let VRRPData = PreFilteredData
    | where Substring has_any("VRRP active", "VRRP passive")
    | extend TempOperation = "VRRP transition";
union VPNConnectivityChangeData, StatusChangedData, PortData, VRRPData, SiteToSite_deleted, SiteToSite_ESP, SiteToSite_failed, SiteToSite_IPsecSArequest, SiteToSite_ISAKMPestablished, SiteToSite_negotiation, SiteToSite_purging, SiteToSite_tunnel
    | lookup EventFieldsLookup on TempOperation
    | where (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
    | extend EventResult = case(
                            (Operation == "Port status change" and Substring has "from Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("connected", "forwarding")),
                            "Success",
                            (Operation == "Port status change" and Substring has "to Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("disconnected", "error disabled", "blocked", "disabled", "not configured")),
                            "Failure",
                            Operation has_cs "Spanning-tree guard state change" and Substring has "learning",
                            "Partial",
                            EventResult
                        )
    | where (eventresult == "*" or EventResult =~ eventresult)
    | extend EventType = case(Operation in("Port status change", "Spanning-tree guard state change") and EventResult == "Success", "Enable",
        (Operation == "Port status change" and EventResult == "Failure") or (Operation == "Spanning-tree guard state change" and EventResult in ("Partial", "Failure")), "Disable",
        EventType
    )
    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
    | extend 
        temp_srcipport = iff(temp_srcipport has "]" and temp_srcipport !has ":", trim(']', temp_srcipport), temp_srcipport),
        temp_targetipport = iff(temp_targetipport has "]" and temp_targetipport !has ":", trim(']', temp_targetipport), temp_targetipport)
    | extend 
        temp_srcipport = iff(temp_srcipport has "[" and temp_srcipport !has ":", replace_string(temp_srcipport,'[',':'), temp_srcipport),
        temp_targetipport = iff(temp_targetipport has "[" and temp_targetipport !has ":", replace_string(temp_targetipport,'[',':'), temp_targetipport),
        DvcMacAddr = iff(Operation == "Spanning-tree guard state change" and isnotempty(STPMac) and STPMac matches regex "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})\'*", STPMac, "")
    | extend temp_srcipport = iff(isempty(DvcMacAddr) and isnotempty(STPMac) and Operation == "Spanning-tree guard state change", STPMac, temp_srcipport)
    | extend
        temp_srcipport = trim("'", temp_srcipport),
        temp_targetipport = trim("'", temp_targetipport)
    | extend 
        temp_srcipport = trim('"', temp_srcipport),
        temp_targetipport = trim('"', temp_targetipport)
    | parse temp_srcipport with * "[" temp_srcip "]:" temp_srcport
    | extend SrcIpAddr = iff(temp_srcipport has ".", split(temp_srcipport, ":")[0], coalesce(temp_srcip, temp_srcipport))
    | extend
    temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)
    | where (array_length(srcipaddr_has_any_prefix) == 0 or temp_SrcMatch)
    | parse temp_targetipport with * "[" temp_targetip "]:" temp_targetport
    | extend TargetIpAddr = iff(temp_targetipport has ".", split(temp_targetipport, ":")[0], coalesce(temp_targetip, temp_targetipport))
    | extend TargetPortNumber = iff(TargetIpAddr has ".", toint(split(temp_targetipport, ":")[1]), toint(coalesce(temp_targetport, "")))
    | extend SrcPortNumber = case(
                            isnotempty(temp_srcipport),
                            iff(SrcIpAddr has ".", toint(split(temp_srcipport, ":")[1]), toint(coalesce(temp_srcport, ""))),
                            Substring has_cs "Port",
                            toint(Port),
                            Operation == "Port status change",
                            toint(port),
                            int(null)
                        )
    | lookup EventSeverityLookup on EventResult
    | extend
        EventResultDetails = case(
                                Operation == "VPN connectivity change" and isnotempty(connectivity), strcat("connectivity=", connectivity),
                                Operation == "IPsec-SA request queued" or Operation == "Phase2 negotiation failed", split(Substring, 'due to')[1], 
                                Substring has "Site-to-site", split(Substring, 'Site-to-site ')[1],
                                Substring
                            ),
        EventMessage = Substring,
        EventOriginalType = LogType,
        EventUid = _ResourceId
    | extend Device = tostring(Parser[1])
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | extend
        Dvc = DvcHostname,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        EventEndTime = EventStartTime, 
        EventCount = int(1),
        EventProduct = "Meraki",
        EventVendor = "Cisco",
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1"
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Substring,
        TempOperation*,
        temp*,
        STPMac,
        peer_contact,
        connectivity,
        Port*,
        port,
        portnextpart,
        LogType,
        type,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG,
        ManagementGroupName,
        RawData
};
parser(disabled=disabled, starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, actorusername_has_any=actorusername_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any)
}



//
// Function Name: vimAuditEventCiscoMerakiSyslog
// Description: This ASIM parser supports normalizing Cisco Meraki logs ingested in 'Syslog' table to the ASIM Audit Event normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventCiscoMerakiSyslog(    ['disabled']:bool=False,
    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]))
{
let EventFieldsLookup = datatable(TempOperation: string, Operation: string, EventResult: string, EventType: string)
[
  "vpn_connectivity_change", "VPN connectivity change","Success", "Set",
  "purging ISAKMP-SA", "Purging ISAKMP-SA","Partial", "Delete",
  "purged ISAKMP-SA", "Purged ISAKMP-SA","Success", "Delete",
  "ISAKMP-SA deleted", "ISAKMP-SA deleted","Success", "Delete",
  "IPsec-SA request", "IPsec-SA request queued","Failure", "Other",
  "failed to get sainfo", "Failed to get sainfo","Failure", "Other",
  "failed to pre-process ph2 packet", "Failed to pre-process ph2 packet","Failure", "Other",
  "phase2 negotiation failed", "Phase2 negotiation failed","Failure", "Other",
  "initiate new phase 1 negotiation", "Initiate new phase 1 negotiation","Success", "Initialize",
  "ISAKMP-SA established", "ISAKMP-SA established","Success", "Create",
  "initiate new phase 2 negotiation", "Initiate new phase 2 negotiation","Partial", "Initialize",
  "IPsec-SA established", "IPsec-SA established","Success", "Create",
  "STP role", "Spanning-tree interface role change","Success", "Set",
  "STP BPDU", "Spanning-tree guard state change", "", "",
  "VRRP transition", "VRRP transition","Success", "Set",
  "port status change", "Port status change", "", ""
];
let EventSeverityLookup=datatable(EventResult: string, EventSeverity: string)[
    "Success", "Informational",
    "Partial", "Informational",
    "Failure", "Low"
];
let parser=(disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([]), eventtype_in: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([]), actorusername_has_any: dynamic=dynamic([]), object_has_any: dynamic=dynamic([]), newvalue_has_any: dynamic=dynamic([])) {
let allData = union isfuzzy=true
    (
    Syslog
    | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))
    | project-rename LogMessage =  SyslogMessage
    );
let PreFilteredData = allData
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime) 
        and array_length(newvalue_has_any) == 0
        and array_length(object_has_any) == 0
        and array_length(actorusername_has_any) == 0
        and LogMessage has "events"
        and (LogMessage has_any ("vpn_connectivity_change", "status changed", "VRRP active", "VRRP passive") or LogMessage has_cs "Site-to-site" or LogMessage has_cs "Port")
    | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
    | extend
    Epoch = tostring(Parser[0])
    | extend EpochTimestamp = split(Epoch, ".")
    | extend EventStartTime = unixtime_seconds_todatetime(tolong(EpochTimestamp[0]))
    | extend LogType = tostring(Parser[2]),
        Substring = tostring(Parser[3])
    | where LogType == "events";
let SiteToSiteData = PreFilteredData
    | where Substring has_cs "Site-to-site";
let SiteToSite_deleted = SiteToSiteData
    | where Substring has "ISAKMP-SA deleted"
    | extend TempOperation = "ISAKMP-SA deleted"
    | parse Substring with * " deleted " temp_deletedSrcIp:string  "-" temp_deletedTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_deletedSrcIp,
            temp_targetipport = temp_deletedTargetIp;
let SiteToSite_negotiation = SiteToSiteData
    | where Substring has_any("initiate new phase 1 negotiation", "initiate new phase 2 negotiation")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ": " temp_negotiationSrcIp:string "<=>" temp_negotiationTargetIp:string
    | extend temp_srcipport = temp_negotiationSrcIp,
            temp_targetipport = temp_negotiationTargetIp;
let SiteToSite_ESP = SiteToSiteData
    | where Substring has "phase2 negotiation failed due to time up waiting for phase1"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " due to " EventResultDetails " ESP " temp_espSrcIp:string "->" temp_espTargetIp:string
    | extend temp_srcipport = temp_espSrcIp,
            temp_targetipport = temp_espTargetIp;
let SiteToSite_tunnel = SiteToSiteData
    | where Substring has "IPsec-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string ":" * "Tunnel " temp_tunnelSrcIp:string "->" temp_tunnelTargetIp:string " " temp_restmessage:string
    | extend temp_srcipport = temp_tunnelSrcIp,
            temp_targetipport = temp_tunnelTargetIp;
let SiteToSite_ISAKMPestablished = SiteToSiteData
    | where Substring has "ISAKMP-SA established"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " established " temp_estSrcIp:string "-" temp_estTargetIp:string " " temp_restmessage:string
    | extend TempOperation = strcat(TempOperation, ' ', 'established'),
            temp_srcipport = temp_estSrcIp,
            temp_targetipport = temp_estTargetIp;
let SiteToSite_IPsecSArequest = SiteToSiteData
    | where Substring has "IPsec-SA request"
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " for " temp_forTaregtSrcIp:string " " * " due to" EventResultDetails:string
    | extend temp_targetipport = temp_forTaregtSrcIp;
let SiteToSite_purging = SiteToSiteData
    | where Substring has_any("purging ISAKMP-SA", "purged ISAKMP-SA")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string " spi=" temp_restmessage:string;
let SiteToSite_failed = SiteToSiteData
    | where Substring has_any ("failed to get sainfo", "failed to pre-process ph2 packet")
    | parse Substring with * "Site-to-site VPN: " TempOperation:string
    | extend TempOperation = tostring(split(TempOperation, ' (')[0]);
let VPNConnectivityChangeData = PreFilteredData
    | where Substring has "vpn_connectivity_change"
    | parse-kv Substring as (type: string, peer_contact: string, connectivity: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
    | extend type = trim('"', type),
            connectivity = trim('"', connectivity)
    | extend TempOperation = type,
            temp_srcipport = peer_contact;
let StatusChangedData = PreFilteredData
    | where Substring has "status changed"
    | parse Substring with * "port " port:string " " portnextpart:string
    | extend TempOperation = "port status change";
let PortData = PreFilteredData
    | where Substring has_cs "Port"
    | parse Substring with * "Port " Port1:string " received an " TempOperation1:string " from " STPMac:string " " temp_restmessage:string
    | parse Substring with * "Port " Port2:string " changed " TempOperation2:string " from " PortNextPart:string
    | extend Port = coalesce(Port1,Port2)
    | extend TempOperation = coalesce(TempOperation1, TempOperation2);
let VRRPData = PreFilteredData
    | where Substring has_any("VRRP active", "VRRP passive")
    | extend TempOperation = "VRRP transition";
union VPNConnectivityChangeData, StatusChangedData, PortData, VRRPData, SiteToSite_deleted, SiteToSite_ESP, SiteToSite_failed, SiteToSite_IPsecSArequest, SiteToSite_ISAKMPestablished, SiteToSite_negotiation, SiteToSite_purging, SiteToSite_tunnel
    | lookup EventFieldsLookup on TempOperation
    | where (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
    | extend EventResult = case(
                            (Operation == "Port status change" and Substring has "from Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("connected", "forwarding")),
                            "Success",
                            (Operation == "Port status change" and Substring has "to Down") or (Operation has_cs "Spanning-tree guard state change" and Substring has_any ("disconnected", "error disabled", "blocked", "disabled", "not configured")),
                            "Failure",
                            Operation has_cs "Spanning-tree guard state change" and Substring has "learning",
                            "Partial",
                            EventResult
                        )
    | where (eventresult == "*" or EventResult =~ eventresult)
    | extend EventType = case(Operation in("Port status change", "Spanning-tree guard state change") and EventResult == "Success", "Enable",
        (Operation == "Port status change" and EventResult == "Failure") or (Operation == "Spanning-tree guard state change" and EventResult in ("Partial", "Failure")), "Disable",
        EventType
    )
    | where (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
    | extend 
        temp_srcipport = iff(temp_srcipport has "]" and temp_srcipport !has ":", trim(']', temp_srcipport), temp_srcipport),
        temp_targetipport = iff(temp_targetipport has "]" and temp_targetipport !has ":", trim(']', temp_targetipport), temp_targetipport)
    | extend 
        temp_srcipport = iff(temp_srcipport has "[" and temp_srcipport !has ":", replace_string(temp_srcipport,'[',':'), temp_srcipport),
        temp_targetipport = iff(temp_targetipport has "[" and temp_targetipport !has ":", replace_string(temp_targetipport,'[',':'), temp_targetipport),
        DvcMacAddr = iff(Operation == "Spanning-tree guard state change" and isnotempty(STPMac) and STPMac matches regex "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9a-fA-F]{4}\\.[0-9a-fA-F]{4}\\.[0-9a-fA-F]{4})\'*", STPMac, "")
    | extend temp_srcipport = iff(isempty(DvcMacAddr) and isnotempty(STPMac) and Operation == "Spanning-tree guard state change", STPMac, temp_srcipport)
    | extend
        temp_srcipport = trim("'", temp_srcipport),
        temp_targetipport = trim("'", temp_targetipport)
    | extend 
        temp_srcipport = trim('"', temp_srcipport),
        temp_targetipport = trim('"', temp_targetipport)
    | parse temp_srcipport with * "[" temp_srcip "]:" temp_srcport
    | extend SrcIpAddr = iff(temp_srcipport has ".", split(temp_srcipport, ":")[0], coalesce(temp_srcip, temp_srcipport))
    | extend
    temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix)
    | where (array_length(srcipaddr_has_any_prefix) == 0 or temp_SrcMatch)
    | parse temp_targetipport with * "[" temp_targetip "]:" temp_targetport
    | extend TargetIpAddr = iff(temp_targetipport has ".", split(temp_targetipport, ":")[0], coalesce(temp_targetip, temp_targetipport))
    | extend TargetPortNumber = iff(TargetIpAddr has ".", toint(split(temp_targetipport, ":")[1]), toint(coalesce(temp_targetport, "")))
    | extend SrcPortNumber = case(
                            isnotempty(temp_srcipport),
                            iff(SrcIpAddr has ".", toint(split(temp_srcipport, ":")[1]), toint(coalesce(temp_srcport, ""))),
                            Substring has_cs "Port",
                            toint(Port),
                            Operation == "Port status change",
                            toint(port),
                            int(null)
                        )
    | lookup EventSeverityLookup on EventResult
    | extend
        EventResultDetails = case(
                                Operation == "VPN connectivity change" and isnotempty(connectivity), strcat("connectivity=", connectivity),
                                Operation == "IPsec-SA request queued" or Operation == "Phase2 negotiation failed", split(Substring, 'due to')[1], 
                                Substring has "Site-to-site", split(Substring, 'Site-to-site ')[1],
                                Substring
                            ),
        EventMessage = Substring,
        EventOriginalType = LogType,
        EventUid = _ResourceId
    | extend Device = tostring(Parser[1])
    | invoke _ASIM_ResolveDvcFQDN('Device')
    | extend
        Dvc = DvcHostname,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        EventEndTime = EventStartTime, 
        EventCount = int(1),
        EventProduct = "Meraki",
        EventVendor = "Cisco",
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1"
    | project-away
        LogMessage,
        Parser,
        Epoch,
        EpochTimestamp,
        Device,
        Substring,
        TempOperation*,
        temp*,
        STPMac,
        peer_contact,
        connectivity,
        Port*,
        port,
        portnextpart,
        LogType,
        type,
        TenantId,
        SourceSystem,
        Computer,
        _ResourceId,
        MG,
        EventTime,
        Facility,
        HostName,
        SeverityLevel,
        ProcessID,
        HostIP,
        ProcessName,CollectorHostName
};
parser(disabled=disabled, starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, actorusername_has_any=actorusername_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any)
}



//
// Function Name: vimAuditEventCrowdStrikeFalconHost
// Description: This ASIM parser supports normalizing CrowdStrike Falcon Endpoint Protection logs to the ASIM Audit Event normalized schema. These events are captured through CrowdStrike Falcon Endpoint Protection data connector which allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventCrowdStrikeFalconHost(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let EventFieldsLookup = datatable(
    Activity: string,
    Operation: string,
    EventType_lookup: string,
    EventSubType: string,
    Object: string,
    ObjectType: string
) 
    [
    "delete_report_execution", "Delete Report Execution", "Delete", "", "Report Execution", "Scheduled Task",
    "delete_scheduled_report", "Delete Scheduled Report", "Delete", "", "Scheduled Report", "Scheduled Task",
    "update_scheduled_report", "Update Scheduled Report", "Set", "", "Scheduled Report", "Scheduled Task",
    "create_scheduled_report", "Create Scheduled Report", "Create", "", "Scheduled Report", "Scheduled Task",
    "update_class_action", "Update Class Action", "Set", "", "Class Action", "Other",
    "update_policy", "Update Policy", "Set", "", "Policy", "Policy Rule",
    "enable_policy", "Enable Policy", "Enable", "", "Policy", "Policy Rule",
    "create_policy", "Create Policy", "Create", "", "Policy", "Policy Rule",
    "remove_rule_group", "Remove Rule Group", "Other", "Remove", "Rule Group", "Service",
    "create_rule_group", "Create Rule Group", "Create", "", "Rule Group", "Service",
    "delete_rule_group", "Delete Rule Group", "Delete", "", "Rule Group", "Service",
    "add_rule_group", "Add Rule Group", "Other", "Add", "Rule Group", "Service",
    "delete_rule", "Delete Rule", "Delete", "", "Rule", "Policy Rule",
    "update_rule", "Update Rule", "Set", "", "Rule", "Policy Rule",
    "create_rule", "Create Rule", "Create", "", "Rule", "Policy Rule",
    "disable_policy", "Disable Policy", "Disable", "", "Policy", "Policy Rule",
    "delete_policy", "Delete Policy", "Delete", "", "Policy", "Policy Rule",
    "update_priority", "Update Priority", "Set", "", "Policy", "Policy Rule",
    "assign_policy", "Assign Policy", "Other", "Assign", "Policy", "Policy Rule",
    "remove_policy", "Remove Policy", "Other", "Remove", "Policy", "Policy Rule",
    "ip_rules_added", "IP Rules Added", "Create", "", "Rule", "Other",
    "ip_rules_removed", "IP Rules Removed", "Delete", "", "Rule", "Other",
    "hide_host_requested", "Hide Host Requested", "Delete", "", "Host", "Other",
    "mobile_hide_host_requested", "Mobile Hide Host Requested", "Delete", "", "Mobile Host", "Other",
    "CreateAPIClient", "Create API Client", "Create", "", "API Client", "Service",
    "UpdateAPIClient", "Update API Client", "Set", "", "API Client", "Service"
];
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
    [
    "0", "Informational",
    "1", "Informational",
    "2", "Low",
    "3", "Medium",
    "4", "High",
    "5", "High"
];
let UserAuditActivities = dynamic(["delete_report_execution", "delete_scheduled_report", "update_scheduled_report", "create_scheduled_report", "update_class_action", "update_policy", "enable_policy", "create_policy", "remove_rule_group", "create_rule_group", "delete_rule_group", "add_rule_group", "delete_rule", "update_rule", "create_rule", "disable_policy", "delete_policy", "update_priority", "assign_policy", "remove_policy", "ip_rules_added", "ip_rules_removed", "hide_host_requested", "mobile_hide_host_requested"]);
let AuthAuditActivities = dynamic(["CreateAPIClient", "UpdateAPIClient"]);
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    srcipaddr_has_any_prefix: dynamic=dynamic([]), 
    eventtype_in: dynamic=dynamic([]), 
    eventresult: string='*', 
    actorusername_has_any: dynamic=dynamic([]), 
    operation_has_any: dynamic=dynamic([]), 
    object_has_any: dynamic=dynamic([]), 
    newvalue_has_any: dynamic=dynamic([]), 
    disabled: bool = false
    ) {
    CommonSecurityLog
    | where not(disabled)
    | where ((isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)) 
    | where (DeviceVendor == "CrowdStrike" and DeviceProduct == "FalconHost")
    | where (DeviceEventClassID == "UserActivityAuditEvent" and Activity in (UserAuditActivities)) or (DeviceEventCategory == "AuthActivityAuditEvent" and Activity in (AuthAuditActivities))
    | where array_length(newvalue_has_any) == 0 
        and array_length(srcipaddr_has_any_prefix) == 0
        and (array_length(actorusername_has_any) == 0 or DestinationUserName has_any (actorusername_has_any))
        and (array_length(object_has_any) == 0 or Activity has_any (object_has_any))
    | lookup EventFieldsLookup on Activity
    | lookup EventSeverityLookup on LogSeverity
    | extend EventType = EventType_lookup
    | where (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
        and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
    | extend 
        EventStartTime = case(
                    DeviceEventClassID == "UserActivityAuditEvent",
                    unixtime_milliseconds_todatetime(tolong(ReceiptTime)),
                    DeviceEventCategory == "AuthActivityAuditEvent",
                    todatetime(DeviceCustomDate1),
                    datetime(null)
                ),
        EventOriginalType = case(
                        DeviceEventClassID == "UserActivityAuditEvent",
                        DeviceEventClassID,
                        DeviceEventCategory == "AuthActivityAuditEvent",
                        DeviceEventCategory,
                        ""
                    ),
        EventResult = iff(EventOutcome == "false", "Failure", "Success"),
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1",
        EventCount = int(1),
        DvcAction = "Allowed",
        EventProduct = "FalconHost",
        EventVendor = "CrowdStrike"
    | project-rename
        ActorUsername = DestinationUserName,
        EventUid = _ItemId,
        DvcIpAddr = DestinationTranslatedAddress,
        EventOriginalSeverity = LogSeverity,
        EventProductVersion = DeviceVersion,
        TargetAppName = ProcessName,
        EventOriginalResultDetails = EventOutcome,
        EventOriginalSubType = Activity
    | extend
        EventEndTime = EventStartTime,
        Application = TargetAppName,
        TargetIpAddr = DvcIpAddr,
        User = ActorUsername,
        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
        ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
        TargetAppType = iff(isnotempty(TargetAppName), "Service", "")
    | extend
        Dvc = coalesce(DvcIpAddr, EventProduct),
        Dst = TargetIpAddr
    | project-away 
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        Computer,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        _ResourceId,
        ExtID,
        Message,
        IndicatorThreatType,
        EventType_*
};
parser(
    starttime=starttime, 
    endtime=endtime, 
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
    eventtype_in=eventtype_in, 
    eventresult=eventresult, 
    actorusername_has_any=actorusername_has_any, 
    operation_has_any=operation_has_any, 
    object_has_any=object_has_any, 
    newvalue_has_any=newvalue_has_any, 
    disabled=disabled
)
}



//
// Function Name: vimAuditEventEmpty
// Description: This function returns an empty ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventEmpty
{
let EmptyAuditEvents =datatable (
  ActorUserType:string,
  ActorUsernameType:string,
  ActorUserIdType:string,
  EventResult:string,
  EventType:string,
  EventSchema:string,
  ValueType:string,
  EventSeverity:string,
  EventVendor:string,
  EventProduct:string,
  SrcDvcIdType:string,
  TargetDvcIdType:string,
  SrcDomainType:string,
  TargetDomainType:string,
  SrcDeviceType:string,
  TargetDeviceType:string,
  ObjectType:string,
  OriginalObjectType:string,
  TargetAppType:string,
  TargetOriginalAppType:string,
  ActingAppType:string,
  ActingOriginalAppType:string,
  ThreatConfidence:int,
  SrcGeoCountry:string,
  TargetGeoCountry:string,
  EventSubType:string,
  EventResultDetails:string,
  SrcHostname:string,
  TargetHostname:string,
  SrcIpAddr:string,
  TargetIpAddr:string,
  SrcGeoRegion:string,
  SrcGeoCity:string,
  TargetGeoRegion:string,
  TargetGeoCity:string,
  ThreatRiskLevel:int,
  EventSchemaVersion:string,
  EventReportUrl:string,
  User:string,
  ActorUsername:string,
  Application:string,
  Process:string,
  Operation:string,
  Object:string,
  ObjectId:string,
  OldValue:string,
  NewValue:string,
  Value:string,
  TimeGenerated:datetime,
  _ResourceId:string,
  Type:string,
  AdditionalFields:dynamic,
  EventMessage:string,
  EventCount:int,
  EventStartTime:datetime,
  EventEndTime:datetime,
  EventOriginalUid:string,
  EventOriginalType:string,
  EventOriginalSubType:string,
  EventOriginalResultDetails:string,
  EventOriginalSeverity:string,
  EventProductVersion:string,
  EventOwner:string,
  Rule:string,
  RuleName:string,
  RuleNumber:int,
  ThreatId:string,
  ThreatName:string,
  ThreatCategory:string,
  ThreatOriginalRiskLevel:string,
  ThreatOriginalConfidence:string,
  ThreatIsActive:bool,
  ThreatIpAddr:string,
  ThreatField:string,
  ThreatFirstReportedTime:datetime,
  ThreatLastReportedTime:datetime,
  ActorUserId:string,
  ActorScopeId:string,
  ActorScope:string,
  ActorOriginalUserType:string,
  ActorSessionId:string,
  TargetAppId:string,
  TargetAppName:string,
  TargetUrl:string,
  ActingAppId:string,
  ActingAppName:string,
  HttpUserAgent:string,
  Src:string,
  SrcPortNumber:int,
  SrcDomain:string,
  SrcFQDN:string,
  SrcDvcDescription:string,
  SrcDvcId:string,
  SrcDvcScopeId:string,
  SrcDvcScope:string,
  SrcGeoLatitude:real,
  SrcGeoLongitude:real,
  Dst:string,
  TargetPortNumber:int,
  TargetDomain:string,
  TargetFQDN:string,
  TargetDvcDescription:string,
  TargetDvcId:string,
  TargetDvcScopeId:string,
  TargetDvcScope:string,
  TargetGeoLatitude:real,
  TargetGeoLongitude:real
  , Dvc: string	
  , DvcId: string
  , DvcIpAddr: string	
  , DvcHostname: string
  , DvcDomain:string
  , DvcDomainType:string
  , DvcFQDN:string
  , DvcDescription:string
  , DvcIdType:string
  , DvcMacAddr:string
  , DvcZone:string
  , DvcOs:string
  , DvcOsVersion:string
  , DvcAction:string
  , DvcOriginalAction:string
  , DvcScope:string
  , DvcScopeOd:string
)[];
EmptyAuditEvents
}



//
// Function Name: vimAuditEventMicrosoftEvent
// Description: This ASIM parser supports normalizing Microsoft Windows Events audit events (1102) logs ingested in 'Event' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventMicrosoftEvent(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let parser = (
starttime: datetime=datetime(null), 
endtime: datetime=datetime(null),
srcipaddr_has_any_prefix: dynamic=dynamic([]), 
eventtype_in: dynamic=dynamic([]),
eventresult: string='*',
actorusername_has_any: dynamic=dynamic([]),
operation_has_any: dynamic=dynamic([]),
object_has_any: dynamic=dynamic([]),
newvalue_has_any: dynamic=dynamic([]),
disabled: bool = false
) {
// Parsed Events Ids
let ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);
// Eventlog Event Ids
let EventlogEventIds = dynamic([1102]);
// Scheduled Task Event Ids
let ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);
// Active Directory Replica Source Naming Context Event Ids
let ActiveDirectoryReplicaIds = dynamic([4929]);
// Firewall Event Ids
let FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);
// Service Event Ids
let ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]);   
// EventID Lookup
// Directory Service Object Ids
let DirectoryServiceIds = dynamic([5136]);
// Clear Audit Log Event
let AuditLogClearedEventID = dynamic([1102]); 
let EventIDLookup = datatable(
EventID: int,
Operation: string,
EventType: string,
Object: string,
ObjectType: string,
EventResult: string
)
        [   
    1102, "Delete Logs", "Delete", "Security Logs", "Event Log", "Success",
    4698, "Create Scheduled Task", "Create", "", "Scheduled Task", "Success",
    4699, "Delete Scheduled Task", "Delete", "", "Scheduled Task", "Success",
    4700, "Enable Scheduled Task", "Enable", "", "Scheduled Task", "Success",
    4701, "Disable Scheduled Task ", "Disable", "", "Scheduled Task", "Success",
    4702, "Update Scheduled Task", "Set", "", "Scheduled Task", "Success",
    4929, "Remove Active Directory Replica Source Naming Context", "Delete", "", "Other", "Success",
    5025, "Stop Firewall Service", "Disable", "Firewall Service", "Service", "Success",
    5027, "Retrieve the Security Policy From The Local Storage", "Read", "Firewall Service", "Service", "Failure",
    5028, "Parse the new Security Policy", "Set", "Firewall Service", "Service", "Failure",
    5029, "Initialize the Firewall Driver", "Initialize", "Firewall Service", "Service", "Failure",
    5030, "Start the Firewall Service", "Start", "Firewall Service", "Service", "Failure",
    5034, "Stop Firewall Driver", "Stop", "Firewall Driver", "Driver", "Failure",
    5035, "Start Firewall Driver", "Start", "Firewall Driver", "Driver", "Failure",
    5037, "Terminating Firewall Driver", "Terminate", "Firewall Driver", "Driver", "Failure",
    7035, "Start Control Sent", "Execute", "Service", "Service", "Success",
    7036, "Enter Stop State", "Stop", "Service", "Service", "Success",
    7040, "Changed Service Settings", "Set", "Service", "Service", "Success",
    7045, "Install Service", "Install", "Service", "Service", "Success",
    2009, "Load Group Policy", "Other", "Service", "Service", "Failure",
    5136, "Modified Directory Services Object", "Set", "", "Directory Service Object", "Success"
];
    let FilteredEventIds = toscalar(EventIDLookup 
        | where (array_length(eventtype_in) == 0 or EventType in (eventtype_in))
            and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
            and (eventresult == '*' or EventResult == eventresult)
            and EventID != 1102 // Exclude this EventID, we have separate section for including EventID 1102
        | summarize make_set(EventID)
        );
    let ParsedEvents =
        (
            Event
                | where not(disabled)
                | where (isnull(starttime) or TimeGenerated >= starttime) 
                    and (isnull(endtime) or TimeGenerated <= endtime)
                    and EventID in(FilteredEventIds)
                | where (array_length(srcipaddr_has_any_prefix) == 0)
                    and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))
                    and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))
                | extend Operation=EventLevelName
                | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
            | parse-kv EventData as 
                (
                SubjectUserSid: string,
                SubjectUserName: string,
                SubjectDomainName: string,
                SubjectLogonId: string,
                TaskName: string,
                TaskContent: string,
                TaskContentNew: string,
                ClientProcessId: string,
                DestinationDRA: string,
                SourceDRA: string,
                SourceAddr: string,
                ObjectDN: string,
                AttributeValue: string
                ) 
                with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
            | where 
                array_length(actorusername_has_any) == 0 
                or SubjectUserName has_any (actorusername_has_any) 
                or SubjectDomainName has_any (actorusername_has_any)
            | project-away EventData
            )
        | lookup EventIDLookup on EventID
    ;
    // Parse EventLog
    let EventLog = ParsedEvents
        | where EventID in(EventlogEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;
    // Parse Scheduled Task
    let ScheduledTask = ParsedEvents
        | where EventID in(ScheduledTaskEventIds)
        | where (array_length(object_has_any) == 0 or TaskName has_any (object_has_any))
        | extend 
            Object = TaskName,
            NewValue = coalesce(
            TaskContent,
            TaskContentNew
        )
        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
        | extend 
            Value = NewValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse ADR
    let ActiveDirectoryReplica = ParsedEvents
        | where EventID in(ActiveDirectoryReplicaIds)
        | where (array_length(object_has_any) == 0 or DestinationDRA has_any (object_has_any))
        | extend 
            NewValue = SourceDRA,
            OldValue = DestinationDRA,
            SrcFQDN = SourceAddr
        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
        | extend 
            Value = NewValue,
            Object = OldValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse WindowsFirewall
    let WindowsFirewall = ParsedEvents
        | where EventID in(FirewallEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse ServiceEvent
    let ServiceEvent = ParsedEvents
        | where EventID in(ServiceEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse DirectoryService
    let DirectoryService = ParsedEvents
        | where EventID in(DirectoryServiceIds)
            and (array_length(object_has_any) == 0 or ObjectDN has_any (object_has_any))
        | extend
            Object = ObjectDN
        | project-rename 
            NewValue = AttributeValue
        | extend
            Value = NewValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN
    ;
    // Union Events
    union
        EventLog,
        ScheduledTask,
        ActiveDirectoryReplica,
        WindowsFirewall,
        ServiceEvent,
        DirectoryService
    | invoke _ASIM_ResolveDvcFQDN("Computer")
    | project-rename 
        ActorUserId = SubjectUserSid,
        ActorSessionId = SubjectLogonId,
        DvcId = _ResourceId,
        ActingAppId = ClientProcessId,
        EventUid = _ItemId
    | extend
        EventCount = int(1),
        EventStartTime = TimeGenerated, 
        EventEndTime= TimeGenerated,
        EventProduct = 'Security Events',
        EventVendor = 'Microsoft',
        EventSchemaVersion = '0.1.0',
        EventSchema = 'AuditEvent',
        EventOriginalType = tostring(EventID),
        DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
        ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
        ActorUsernameType = iff (SubjectDomainName == "", 'Simple', 'Windows'),
        ActorUserIdType = iff (ActorUserId == "", "", "SID"),
        ActingAppType = "Process"
    | extend
        User = ActorUsername,
        Dvc = DvcFQDN
    | project-away Subject*, EventID, Computer,NewValue,ObjectType,Object,OldValue,Value
};
  parser (
      starttime = starttime,
      endtime = endtime,
      srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
      actorusername_has_any = actorusername_has_any,
      eventtype_in = eventtype_in,
      eventresult = eventresult,
      operation_has_any = operation_has_any,
      object_has_any=object_has_any,
      newvalue_has_any=newvalue_has_any,
      disabled=disabled
  )
}



//
// Function Name: vimAuditEventMicrosoftExchangeAdmin365
// Description: This ASIM parser supports filtering and normalizing Microsoft Exchange 365 administrative activity in the OfficeActivity table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventMicrosoftExchangeAdmin365(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let usertypes=datatable (ActorOriginalUserType:string, ActorUserType:string)
[
 // Regular, Regular
 "Admin", "Admin"
 , "DcAdmin", "Admin"
 , "System", "System"
 , "Application", "Application"
 , "ServicePrincipal", "Service Principal"
 , "CustomPolicy", "Other"
 , "SystemPolicy", "Other"
 , "Reserved", "Other"
];
let eventtypes=datatable (op:string, EventType:string)
[
 "Remove", "Delete",
 "New", "Create",
 "Add", "Create",
 "Enable", "Enable",
 "Install", "Install",
 "Set", "Set",
 "Disable", "Disable",
 "disable", "Disable"
];
 let parser=  (
      starttime:datetime=datetime(null), 
      endtime:datetime=datetime(null),
      srcipaddr_has_any_prefix:dynamic=dynamic([]), 
      eventresult:string='*',
      actorusername_has_any:dynamic=dynamic([]),
      eventtype_in:dynamic=dynamic([]),
      operation_has_any:dynamic=dynamic([]),
      object_has_any:dynamic=dynamic([]),
      newvalue_has_any:dynamic=dynamic([]),
      disabled:bool = false
  ){
  OfficeActivity
  | where not(disabled)
  | where
      (isnull(starttime) or TimeGenerated >= starttime) 
      and (isnull(endtime) or TimeGenerated <= endtime)
  | where RecordType  in ('ExchangeAdmin')
  | where 
      (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(ClientIP,srcipaddr_has_any_prefix))
      and (array_length(actorusername_has_any) == 0 or UserId has_any (actorusername_has_any))
      and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
      and (array_length(object_has_any) == 0 or OfficeObjectId has_any (object_has_any))
      and (array_length(newvalue_has_any) == 0 or Parameters has_any (newvalue_has_any))
  | project Operation, ResultStatus, Parameters, OrganizationName, OrganizationId, OfficeObjectId, ClientIP, UserId, UserKey, UserAgent, UserType, TimeGenerated, OriginatingServer, SourceRecordId, Type, _ResourceId
  // --
  // Calculate and filter result
  | where (eventresult == "*" or (eventresult == "Success" and ResultStatus == "True"))
  | extend EventResult = iff(ResultStatus == "True", "Success", "Failure")
  // --
  // -- Calculate and filter operation and event type
  | extend 
      SplitOp = split (Operation,"-")
  | extend
      op=tostring(SplitOp[0])
  | lookup eventtypes on op
  | where array_length(eventtype_in) == 0 or EventType in (eventtype_in)
  | project-away op    
  // --
  // Calculate and post-filter source IP address and port
  | extend 
      SplitIpAddr = extract_all(@'^\[?(.*?)\]?:(\d+)$', ClientIP)[0]
  | extend 
      SrcIpAddr = iff (SplitIpAddr[1] == "", ClientIP, SplitIpAddr[0]),
      SrcPortNumber = toint(iff (SplitIpAddr[1] == "", "", SplitIpAddr[1]))
  | where (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr,srcipaddr_has_any_prefix))
  // --
  /// Calculate and post filter actor and acting app
  | parse UserId with ActorUsername " (" ActingAppName ")"
  | extend 
      ActorUsernameType = iff (ActorUsername == "", "UPN", "Windows"),
      ActorUsername = iff (ActorUsername == "", UserId, ActorUsername),
      ActingAppType = iff (ActingAppName == "", "", "Process")
  | where (array_length(actorusername_has_any) == 0 or ActorUsername has_any (actorusername_has_any))
  // --
  // Calculate Object
  | extend
      SplitObject = extract_all(@'^(.*?)[\\/](.*)$', OfficeObjectId)[0]
  | extend 
      Object = case (
          SplitObject[0] == OrganizationName, SplitObject[1], 
          OfficeObjectId == "", SplitOp[1],
          OfficeObjectId
      )
  | project-away SplitOp, OfficeObjectId
  // --
  | project-rename
      SrcDescription = OriginatingServer,
      NewValue = Parameters 
  | project-away SplitObject, UserKey, SplitIpAddr, ClientIP, UserId
  | project-rename
      HttpUserAgent = UserAgent, 
      ActorOriginalUserType = UserType,
      ActorScopeId = OrganizationId,
      ActorScope = OrganizationName,
      EventOriginalUid = SourceRecordId
  | lookup usertypes on ActorOriginalUserType
  | extend
      EventCount = int(1),
      EventStartTime = TimeGenerated, 
      EventEndTime= TimeGenerated,
      EventProduct = 'Exchange 365',
      EventVendor = 'Microsoft',
      EventSchemaVersion = '0.1.0',
      EventSchema = 'AuditEvent',
      TargetAppName = 'Exchange 365',
      TargetAppType = 'SaaS application'
  | project-away 
      ResultStatus
  | extend
      EventSeverity = iff(EventResult == "Failure", "Low", "Informational")
  // -- Aliases
  | extend 
      User=ActorUsername,
      IpAddr = SrcIpAddr,
      Value = NewValue,
      Application = TargetAppName,
      Dst = TargetAppName,
      Src = coalesce (SrcIpAddr, SrcDescription),
      Dvc = TargetAppName,
  // -- Entity identifier explicit aliases
      ActorUserUpn = iif (ActorUsernameType == "UPN", ActorUsername, ""),
      ActorWindowsUsername = iif (ActorUsernameType == "Windows", ActorUsername, "")
 };
 parser (
    starttime = starttime,
    endtime = endtime,
    srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
    actorusername_has_any = actorusername_has_any,
    eventtype_in = eventtype_in,
    eventresult = eventresult,
    operation_has_any = operation_has_any,
    object_has_any=object_has_any,
    newvalue_has_any=newvalue_has_any,
    disabled=disabled
 )
}



//
// Function Name: vimAuditEventMicrosoftSecurityEvents
// Description: This ASIM parser supports normalizing Microsoft Windows Events audit events (1102) logs ingested in 'SecurityEvent' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventMicrosoftSecurityEvents(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let parser = (
starttime: datetime=datetime(null), 
endtime: datetime=datetime(null),
srcipaddr_has_any_prefix: dynamic=dynamic([]), 
eventtype_in: dynamic=dynamic([]),
eventresult: string='*',
actorusername_has_any: dynamic=dynamic([]),
operation_has_any: dynamic=dynamic([]),
object_has_any: dynamic=dynamic([]),
newvalue_has_any: dynamic=dynamic([]),
disabled: bool = false
) {
// Parsed Events Ids
let ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);
// Eventlog Event Ids
let EventlogEventIds = dynamic([1102]);
// Scheduled Task Event Ids
let ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);
// Active Directory Replica Source Naming Context Event Ids
let ActiveDirectoryReplicaIds = dynamic([4929]);
// Firewall Event Ids
let FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);
// Service Event Ids
let ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]);   
// EventID Lookup
// Directory Service Object Ids
let DirectoryServiceIds = dynamic([5136]);
// Clear Audit Log Event
let AuditLogClearedEventID = dynamic([1102]); 
let EventIDLookup = datatable(
EventID: int,
Operation: string,
EventType: string,
Object: string,
ObjectType: string,
EventResult: string
)
        [   
    1102, "Delete Logs", "Delete", "Security Logs", "Event Log", "Success",
    4698, "Create Scheduled Task", "Create", "", "Scheduled Task", "Success",
    4699, "Delete Scheduled Task", "Delete", "", "Scheduled Task", "Success",
    4700, "Enable Scheduled Task", "Enable", "", "Scheduled Task", "Success",
    4701, "Disable Scheduled Task ", "Disable", "", "Scheduled Task", "Success",
    4702, "Update Scheduled Task", "Set", "", "Scheduled Task", "Success",
    4929, "Remove Active Directory Replica Source Naming Context", "Delete", "", "Other", "Success",
    5025, "Stop Firewall Service", "Disable", "Firewall Service", "Service", "Success",
    5027, "Retrieve the Security Policy From The Local Storage", "Read", "Firewall Service", "Service", "Failure",
    5028, "Parse the new Security Policy", "Set", "Firewall Service", "Service", "Failure",
    5029, "Initialize the Firewall Driver", "Initialize", "Firewall Service", "Service", "Failure",
    5030, "Start the Firewall Service", "Start", "Firewall Service", "Service", "Failure",
    5034, "Stop Firewall Driver", "Stop", "Firewall Driver", "Driver", "Failure",
    5035, "Start Firewall Driver", "Start", "Firewall Driver", "Driver", "Failure",
    5037, "Terminating Firewall Driver", "Terminate", "Firewall Driver", "Driver", "Failure",
    7035, "Start Control Sent", "Execute", "Service", "Service", "Success",
    7036, "Enter Stop State", "Stop", "Service", "Service", "Success",
    7040, "Changed Service Settings", "Set", "Service", "Service", "Success",
    7045, "Install Service", "Install", "Service", "Service", "Success",
    2009, "Load Group Policy", "Other", "Service", "Service", "Failure",
    5136, "Modified Directory Services Object", "Set", "", "Directory Service Object", "Success"
];
    let FilteredEventIds = toscalar(EventIDLookup 
        | where (array_length(eventtype_in) == 0 or EventType in (eventtype_in))
            and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
            and (eventresult == '*' or EventResult == eventresult)
            and EventID != 1102 // Exclude this EventID, we have separate section for including EventID 1102
        | summarize make_set(EventID)
        );
    let ParsedEvents =
        union
            (
                // SecurityEvents
                SecurityEvent
                | where not(disabled)
                | where (isnull(starttime) or TimeGenerated >= starttime) 
                    and (isnull(endtime) or TimeGenerated <= endtime)
                    and EventID in(FilteredEventIds)
                | where (array_length(srcipaddr_has_any_prefix) == 0)
                    and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))
                    and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))         
                | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
            | parse-kv EventData as 
                (
                SubjectUserSid: string,
                SubjectUserName: string,
                SubjectDomainName: string,
                SubjectLogonId: string,
                TaskName: string,
                TaskContent: string,
                TaskContentNew: string,
                ClientProcessId: string,
                DestinationDRA: string,
                SourceDRA: string,
                SourceAddr: string,
                ObjectDN: string,
                AttributeValue: string
                ) 
                with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
            | where 
                array_length(actorusername_has_any) == 0 
                or SubjectUserName has_any (actorusername_has_any) 
                or SubjectDomainName has_any (actorusername_has_any)
            | project-away EventData
            ),
            //Section for SecurityEvent(1102)
            (
            SecurityEvent
            | where not(disabled)
            | where (isnull(starttime) or TimeGenerated >= starttime) 
                and (isnull(endtime) or TimeGenerated <= endtime)
            | where EventID in (AuditLogClearedEventID) and EventSourceName == "Microsoft-Windows-Eventlog"
            | where (array_length(srcipaddr_has_any_prefix) == 0)
                and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))
                and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))
                and (array_length(eventtype_in) == 0 or 'Delete' in (eventtype_in))
                and (array_length(operation_has_any) == 0 or 'Delete Logs' has_any (operation_has_any))
                and (eventresult == '*' or 'Success' =~ eventresult)
            | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
            | extend Parsed_EventData = parse_xml(EventData)
            | extend
                SubjectUserSid = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectUserSid),
                SubjectUserName = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectUserName),
                SubjectDomainName = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectDomainName),
                SubjectLogonId = tostring(Parsed_EventData.UserData.LogFileCleared.SubjectLogonId)
            | where 
                array_length(actorusername_has_any) == 0 
                or SubjectUserName has_any (actorusername_has_any) 
                or SubjectDomainName has_any (actorusername_has_any)
                or (strcat(SubjectDomainName, '\\', SubjectUserName)) has_any (actorusername_has_any)
            | project-away EventData, Parsed_EventData
            )
        | lookup EventIDLookup on EventID
    ;
    // Parse EventLog
    let EventLog = ParsedEvents
        | where EventID in(EventlogEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;
    // Parse Scheduled Task
    let ScheduledTask = ParsedEvents
        | where EventID in(ScheduledTaskEventIds)
        | where (array_length(object_has_any) == 0 or TaskName has_any (object_has_any))
        | extend 
            Object = TaskName,
            NewValue = coalesce(
            TaskContent,
            TaskContentNew
        )
        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
        | extend 
            Value = NewValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse ADR
    let ActiveDirectoryReplica = ParsedEvents
        | where EventID in(ActiveDirectoryReplicaIds)
        | where (array_length(object_has_any) == 0 or DestinationDRA has_any (object_has_any))
        | extend 
            NewValue = SourceDRA,
            OldValue = DestinationDRA,
            SrcFQDN = SourceAddr
        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
        | extend 
            Value = NewValue,
            Object = OldValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse WindowsFirewall
    let WindowsFirewall = ParsedEvents
        | where EventID in(FirewallEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse ServiceEvent
    let ServiceEvent = ParsedEvents
        | where EventID in(ServiceEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse DirectoryService
    let DirectoryService = ParsedEvents
        | where EventID in(DirectoryServiceIds)
            and (array_length(object_has_any) == 0 or ObjectDN has_any (object_has_any))
        | extend
            Object = ObjectDN
        | project-rename 
            NewValue = AttributeValue
        | extend
            Value = NewValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN
    ;
    // Union Events
    union
        EventLog,
        ScheduledTask,
        ActiveDirectoryReplica,
        WindowsFirewall,
        ServiceEvent,
        DirectoryService
    | invoke _ASIM_ResolveDvcFQDN("Computer")
    | project-rename 
        ActorUserId = SubjectUserSid,
        ActorSessionId = SubjectLogonId,
        DvcId = _ResourceId,
        ActingAppId = ClientProcessId,
        EventUid = _ItemId
    | extend
        EventCount = int(1),
        EventStartTime = TimeGenerated, 
        EventEndTime= TimeGenerated,
        EventProduct = 'Security Events',
        EventVendor = 'Microsoft',
        EventSchemaVersion = '0.1.0',
        EventSchema = 'AuditEvent',
        EventOriginalType = tostring(EventID),
        DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
        ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
        ActorUsernameType = iff (SubjectDomainName == "", 'Simple', 'Windows'),
        ActorUserIdType = iff (ActorUserId == "", "", "SID"),
        ActingAppType = "Process"
    | extend
        User = ActorUsername,
        Dvc = DvcFQDN
    | project-away Subject*, EventID, Computer,NewValue,ObjectType,Object,OldValue,Value
};
  parser (
      starttime = starttime,
      endtime = endtime,
      srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
      actorusername_has_any = actorusername_has_any,
      eventtype_in = eventtype_in,
      eventresult = eventresult,
      operation_has_any = operation_has_any,
      object_has_any=object_has_any,
      newvalue_has_any=newvalue_has_any,
      disabled=disabled
  )
}



//
// Function Name: vimAuditEventMicrosoftWindowsEvents
// Description: This ASIM parser supports normalizing Microsoft Windows Events audit events (1102) logs ingested in 'WindowsEvent' table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventMicrosoftWindowsEvents(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let parser = (
starttime: datetime=datetime(null), 
endtime: datetime=datetime(null),
srcipaddr_has_any_prefix: dynamic=dynamic([]), 
eventtype_in: dynamic=dynamic([]),
eventresult: string='*',
actorusername_has_any: dynamic=dynamic([]),
operation_has_any: dynamic=dynamic([]),
object_has_any: dynamic=dynamic([]),
newvalue_has_any: dynamic=dynamic([]),
disabled: bool = false
) {
// Parsed Events Ids
let ParsedEventIds = dynamic([4698, 4699, 4700, 4701, 4702, 4929, 5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037, 7035, 7036, 7040, 7045, 2009, 5136]);
// Eventlog Event Ids
let EventlogEventIds = dynamic([1102]);
// Scheduled Task Event Ids
let ScheduledTaskEventIds = dynamic([4698, 4699, 4700, 4701, 4702]);
// Active Directory Replica Source Naming Context Event Ids
let ActiveDirectoryReplicaIds = dynamic([4929]);
// Firewall Event Ids
let FirewallEventIds = dynamic([5025, 5027, 5028, 5029, 5030, 5034, 5035, 5037]);
// Service Event Ids
let ServiceEventIds = dynamic([7035, 7036, 7040, 7045, 2009]);   
// EventID Lookup
// Directory Service Object Ids
let DirectoryServiceIds = dynamic([5136]);
// Clear Audit Log Event
let AuditLogClearedEventID = dynamic([1102]); 
let EventIDLookup = datatable(
EventID: int,
Operation: string,
EventType: string,
Object: string,
ObjectType: string,
EventResult: string
)
        [   
    1102, "Delete Logs", "Delete", "Security Logs", "Event Log", "Success",
    4698, "Create Scheduled Task", "Create", "", "Scheduled Task", "Success",
    4699, "Delete Scheduled Task", "Delete", "", "Scheduled Task", "Success",
    4700, "Enable Scheduled Task", "Enable", "", "Scheduled Task", "Success",
    4701, "Disable Scheduled Task ", "Disable", "", "Scheduled Task", "Success",
    4702, "Update Scheduled Task", "Set", "", "Scheduled Task", "Success",
    4929, "Remove Active Directory Replica Source Naming Context", "Delete", "", "Other", "Success",
    5025, "Stop Firewall Service", "Disable", "Firewall Service", "Service", "Success",
    5027, "Retrieve the Security Policy From The Local Storage", "Read", "Firewall Service", "Service", "Failure",
    5028, "Parse the new Security Policy", "Set", "Firewall Service", "Service", "Failure",
    5029, "Initialize the Firewall Driver", "Initialize", "Firewall Service", "Service", "Failure",
    5030, "Start the Firewall Service", "Start", "Firewall Service", "Service", "Failure",
    5034, "Stop Firewall Driver", "Stop", "Firewall Driver", "Driver", "Failure",
    5035, "Start Firewall Driver", "Start", "Firewall Driver", "Driver", "Failure",
    5037, "Terminating Firewall Driver", "Terminate", "Firewall Driver", "Driver", "Failure",
    7035, "Start Control Sent", "Execute", "Service", "Service", "Success",
    7036, "Enter Stop State", "Stop", "Service", "Service", "Success",
    7040, "Changed Service Settings", "Set", "Service", "Service", "Success",
    7045, "Install Service", "Install", "Service", "Service", "Success",
    2009, "Load Group Policy", "Other", "Service", "Service", "Failure",
    5136, "Modified Directory Services Object", "Set", "", "Directory Service Object", "Success"
];
    let FilteredEventIds = toscalar(EventIDLookup 
        | where (array_length(eventtype_in) == 0 or EventType in (eventtype_in))
            and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
            and (eventresult == '*' or EventResult == eventresult)
            and EventID != 1102 // Exclude this EventID, we have separate section for including EventID 1102
        | summarize make_set(EventID)
        );
    let ParsedEvents =
        union
            (
            WindowsEvent
            | where not(disabled)
            | where (isnull(starttime) or TimeGenerated >= starttime) 
                and (isnull(endtime) or TimeGenerated <= endtime)
                and EventID in(FilteredEventIds)
            | where (array_length(srcipaddr_has_any_prefix) == 0)
                and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))   
                and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))
            | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
            | extend
                SubjectUserSid = tostring(EventData.SubjectUserSid),
                SubjectUserName = tostring(EventData.SubjectUserName),
                SubjectDomainName = tostring(EventData.SubjectDomainName),
                SubjectLogonId = tostring(EventData.SubjectLogonId),
                TaskName = tostring(EventData.TaskName),
                TaskContent = tostring(EventData.TaskContent),
                TaskContentNew = tostring(EventData.TaskContentNew),
                ClientProcessId = tostring(EventData.ClientProcessId),
                DestinationDRA = tostring(EventData.DestinationDRA),
                SourceDRA = tostring(EventData.SourceDRA),
                SourceAddr = tostring(EventData.SourceAddr),
                ObjectDN = tostring(EventData.ObjectDN),
                AttributeValue = tostring(EventData.AttributeValue)
            | where 
                array_length(actorusername_has_any) == 0 
                or SubjectUserName has_any (actorusername_has_any) 
                or SubjectUserName has_any (actorusername_has_any)        
            | project-away EventData
            ),
            (
            WindowsEvent
            | where not(disabled)
            | where (isnull(starttime) or TimeGenerated >= starttime) 
                and (isnull(endtime) or TimeGenerated <= endtime)
            | where EventID in (AuditLogClearedEventID) and Provider == "Microsoft-Windows-Eventlog"
            | where (array_length(srcipaddr_has_any_prefix) == 0)
                and (array_length(actorusername_has_any) == 0 or EventData has_any (actorusername_has_any))
                and (array_length(newvalue_has_any) == 0 or EventData has_any (newvalue_has_any))
                and (array_length(eventtype_in) == 0 or 'Delete' in (eventtype_in))
                and (array_length(operation_has_any) == 0 or 'Delete Logs' has_any (operation_has_any))
                and (eventresult == '*' or 'Success' =~ eventresult)
            | project EventID, EventData, _ResourceId, TimeGenerated, Computer, Type, _ItemId
            | extend
                SubjectUserSid = tostring(EventData.SubjectUserSid),
                SubjectUserName = tostring(EventData.SubjectUserName),
                SubjectDomainName = tostring(EventData.SubjectDomainName),
                SubjectLogonId = tostring(EventData.SubjectLogonId)
            | where 
                array_length(actorusername_has_any) == 0 
                or SubjectUserName has_any (actorusername_has_any) 
                or SubjectDomainName has_any (actorusername_has_any)
                or (strcat(SubjectDomainName, '\\', SubjectUserName)) has_any (actorusername_has_any)
            | project-away EventData
            )
        | lookup EventIDLookup on EventID
    ;
    // Parse EventLog
    let EventLog = ParsedEvents
        | where EventID in(EventlogEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue;
    // Parse Scheduled Task
    let ScheduledTask = ParsedEvents
        | where EventID in(ScheduledTaskEventIds)
        | where (array_length(object_has_any) == 0 or TaskName has_any (object_has_any))
        | extend 
            Object = TaskName,
            NewValue = coalesce(
            TaskContent,
            TaskContentNew
        )
        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
        | extend 
            Value = NewValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse ADR
    let ActiveDirectoryReplica = ParsedEvents
        | where EventID in(ActiveDirectoryReplicaIds)
        | where (array_length(object_has_any) == 0 or DestinationDRA has_any (object_has_any))
        | extend 
            NewValue = SourceDRA,
            OldValue = DestinationDRA,
            SrcFQDN = SourceAddr
        | where (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
        | extend 
            Value = NewValue,
            Object = OldValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse WindowsFirewall
    let WindowsFirewall = ParsedEvents
        | where EventID in(FirewallEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse ServiceEvent
    let ServiceEvent = ParsedEvents
        | where EventID in(ServiceEventIds)
            and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
        | project-away Task*, *DRA, SourceAddr, ObjectDN, AttributeValue
    ;
    // Parse DirectoryService
    let DirectoryService = ParsedEvents
        | where EventID in(DirectoryServiceIds)
            and (array_length(object_has_any) == 0 or ObjectDN has_any (object_has_any))
        | extend
            Object = ObjectDN
        | project-rename 
            NewValue = AttributeValue
        | extend
            Value = NewValue
        | project-away Task*, *DRA, SourceAddr, ObjectDN
    ;
    // Union Events
    union
        EventLog,
        ScheduledTask,
        ActiveDirectoryReplica,
        WindowsFirewall,
        ServiceEvent,
        DirectoryService
    | invoke _ASIM_ResolveDvcFQDN("Computer")
    | project-rename 
        ActorUserId = SubjectUserSid,
        ActorSessionId = SubjectLogonId,
        DvcId = _ResourceId,
        ActingAppId = ClientProcessId,
        EventUid = _ItemId
    | extend
        EventCount = int(1),
        EventStartTime = TimeGenerated, 
        EventEndTime= TimeGenerated,
        EventProduct = 'Security Events',
        EventVendor = 'Microsoft',
        EventSchemaVersion = '0.1.0',
        EventSchema = 'AuditEvent',
        EventOriginalType = tostring(EventID),
        DvcIdType = iff (DvcId == "", "", "AzureResourceID"),
        ActorUsername = iff (SubjectDomainName == "", SubjectUserName, strcat (SubjectDomainName, '\\', SubjectUserName)),
        ActorUsernameType = iff (SubjectDomainName == "", 'Simple', 'Windows'),
        ActorUserIdType = iff (ActorUserId == "", "", "SID"),
        ActingAppType = "Process"
    | extend
        User = ActorUsername,
        Dvc = DvcFQDN
    | project-away Subject*, EventID, Computer
};
  parser (
      starttime = starttime,
      endtime = endtime,
      srcipaddr_has_any_prefix = srcipaddr_has_any_prefix,
      actorusername_has_any = actorusername_has_any,
      eventtype_in = eventtype_in,
      eventresult = eventresult,
      operation_has_any = operation_has_any,
      object_has_any=object_has_any,
      newvalue_has_any=newvalue_has_any,
      disabled=disabled
  )
}



//
// Function Name: vimAuditEventSentinelOne
// Description: This ASIM parser supports normalizing SentinelOne logs to the ASIM Audit Event normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventSentinelOne(    ['disabled']:bool=False,
    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]))
{
let EventFieldsLookup = datatable(
      activityType_d: real,
      Operation: string,
      EventType_activity: string,
      EventSubType: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      39, "Research Settings Modified", "", "", "Success", "Research Settings", "Policy Rule",
      41, "Learning Mode Settings Modified", "Set", "", "Success", "Mitigation policy", "Policy Rule",
      44, "Auto decommission On", "Enable", "", "Success", "Auto decommission", "Service",
      45, "Auto decommission Off", "Disable", "", "Success", "Auto decommission", "Service",
      46, "Auto Decommission Period Modified", "Set", "", "Success", "Auto decommission", "Service",
      56, "Auto Mitigation Actions Modified", "Set", "", "Success", "Mitigation action", "Other",
      57, "Quarantine Network Settings Modified", "", "", "Success", "NetworkSettings", "Configuration Atom",
      68, "Engine Modified In Policy", "Set", "", "Success", "Engine Policy", "Policy Rule",
      69, "Mitigation Policy Modified", "Set", "", "Success", "Threat Mitigation Policy", "Policy Rule",
      70, "Policy Setting - Agent Notification On Suspicious Modified", "", "", "Success", "Agent notification", "Service",
      82, "Monitor On Execute", "", "", "Success", "On execute setting", "Configuration Atom",
      83, "Monitor On Write", "", "", "Success", "On write setting", "Configuration Atom",
      105, "Deep Visibility Settings Modified", "", "", "Success", "Deep Visibility Setting", "Configuration Atom",
      116, "Policy Settings Modified", "Disable", "", "Success", "Policy Settings", "Policy Rule",
      150, "Live Security Updates Policy Modified", "", "", "Success", "Live Security Updates Policy", "Policy Rule",
      151, "Live Security Updates Policy Inheritance Setting Changed", "Set", "", "Success", "Live Security Updates Policy", "Policy Rule",
      200, "File Upload Settings Modified", "Set", "", "Success", "Binary Vault Settings", "Configuration Atom",
      201, "File Upload Enabled/Disabled", "", "", "Success", "Binary Vault", "Policy Rule",
      4004, "Policy Setting - Show Suspicious Activities Configuration Enabled", "Enable", "", "Success", "Policy Setting", "Policy Rule",
      4005, "Policy Setting - Show Suspicious Activities Configuration Disabled", "Disable", "", "Success", "Policy Setting", "Policy Rule",
      4104, "STAR Manual Response Marked Event As Malicious", "Set", "", "Success", "computerName", "Other",
      4105, "STAR Manual Response Marked Event As Suspicious", "Set", "", "Success", "computerName", "Other",
      5012, "Group Token Regenerated", "Create", "", "Success", "Token", "Policy Rule",
      5020, "Site Created", "Create", "", "Success", "", "Other",
      5021, "Site Modified", "Set", "", "Success", "", "Other",
      5022, "Site Deleted", "Delete", "", "Success", "", "Other",
      5024, "Site Policy Reverted", "", "", "Success", "", "Other",
      5025, "Site Marked As Expired", "Disable", "", "Success", "", "Other",
      5026, "Site Duplicated", "Create", "", "Success", "", "Other",
      5027, "Site Token Regenerated", "Create", "", "Success", "", "Other",
      6000, "Mobile Policy updated", "Set", "", "Success", "Mobile Policy", "Policy Rule",
      6001, "Mobile Policy created", "Create", "", "Success", "Mobile Policy", "Policy Rule",
      6002, "Mobile Policy removed", "Delete", "", "Success", "Mobile Policy", "Policy Rule",
      6010, "UEM Connection created", "Create", "", "Success", "MDM Connection", "Configuration Atom",
      6011, "UEM Connection updated", "Set", "", "Success", "MDM Connection", "Configuration Atom",
      6012, "UEM Connection Removed", "Delete", "", "Success", "MDM Connection", "Configuration Atom",
      73, "Scan New Agents Changed", "", "", "Success", "Scan new agents Setting", "Configuration Atom",
      76, "Anti Tampering Modified", "", "", "Success", "Anti tampering setting", "Configuration Atom",
      77, "Agent UI Settings Modified", "Set  ", "", "Success", "Agent UI setting", "Configuration Atom",
      78, "Snapshots Settings Modified", "", "", "Success", "Snapshots setting", "Configuration Atom",
      79, "Agent Logging Modified", "", "", "Success", "Agent logging setting", "Configuration Atom",
      84, "Deep Visibility Settings Modified", "", "", "Success", "Deep Visibility setting", "Configuration Atom",
      87, "Remote Shell Settings Modified", "", "", "Success", "Remote Shell Settings", "Configuration Atom",
      2100, "Upgrade Policy - Concurrency Limit Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
      2101, "Upgrade Policy - Concurrency Limit Inheritance Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
      2111, "Upgrade Policy - Maintenance Window Time Inheritance Changed", "Set", "", "Success", "Policy Upgrade", "Policy Rule",
  ];
  let EventFieldsLookupMachineActivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_machineactivity: string,
      EventSubType_machineactivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      52, "User Approved Agent Uninstall Request", "Other", "Approve", "Success", "Agent", "Service",
      53, "User Rejected Agent Uninstall Request", "Other", "Reject", "Failure", "Agent", "Service",
      54, "User Decommissioned Agent", "Disable", "", "Success", "Agent", "Service",
      55, "User Recommissioned Agent", "Enable", "", "Success", "Agent", "Service",
      61, "User Disconnected Agent From Network", "Execute", "", "Success", "Agent", "Service",
      62, "User Reconnected Agent to Network", "Execute", "", "Success", "Agent", "Service",
      63, "User Shutdown Agent", "Execute", "", "Success", "Agent", "Service",
      93, "User Reset Agent's Local Config", "Set", "", "Success", "Local config", "Configuration Atom",
      95, "User Moved Agent to Group", "Other", "Move", "Success", "Agent", "Service",
      117, "User Disabled Agent", "Execute", "", "Success", "Agent", "Service",
      118, "User Enabled Agent", "Execute", "", "Success", "Agent", "Service",
      4100, "User Marked Deep Visibility Event As Threat", "Set", "", "Success", "Deep Visibility Event", "Other",
      4101, "User Marked Deep Visibility Event As Suspicious", "Set", "", "Success", "Deep Visibility Event", "Other",
  ];
  let EventFieldsLookupAccountActivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_accountactivity: string,
      EventSubType_accountactivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      130, "Opt-in To EA program", "Create", "", "Success", "", "Other",
      131, "Opt-out From EA Program", "Delete", "", "Success", "", "Other",
      5040, "Account Created", "Create", "", "Success", "", "Other",
      5041, "Account Modified", "Set", "", "Success", "", "Other",
      5042, "Account Deleted", "Delete", "", "Success", "", "Other",
      5044, "Account Policy Reverted", "Set", "", "Success", "", "Other",
      7200, "Add cloud account", "Create", "", "Success", "", "Other",
      7201, "Disable cloud Account", "Disable", "", "Success", "", "Other",
      7202, "Enable cloud Account", "Enable", "", "Success", "", "Other"
  ];
  let EventFieldsLookup_useractivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_useractivity: string,
      EventSubType_useractivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      88, "User Remote Shell Modified", "", "", "Success", "Remote Shell", "Configuration Atom",
      114, "API Token Revoked", "Disable", "", "Success", "API Token", "Service"
  ];
  let EventFieldsLookup_otheractivity = datatable(
      activityType_d: real,
      Operation: string,
      EventType_otheractivity: string,
      EventSubType_otheractivity: string,
      EventResult: string,
      Object: string,
      ObjectType: string
  )
      [
      2, "Hash Defined as Malicious By Cloud", "Set", "", "Success", "", "Other",
      40, "Cloud Intelligence Settings Modified", "", "", "Success", "Cloud Intelligence Settings", "Policy Rule",
      58, "Notification Option Level Modified", "Set", "", "Success", "Notification Level", "Service",
      59, "Event Severity Level Modified", "Set", "", "Success", "EventSeverity Level", "Other",
      60, "Notification - Recipients Configuration Modified", "Set", "", "Success", "Recipients configuration", "Policy Rule",
      101, "User Changed Agent's Customer Identifier", "Set", "", "Success", "Customer Identifier string", "Configuration Atom",
      106, "User Commanded Agents To Move To Another Console", "Execute", "", "Failure", "Agents", "Service",
      107, "User Created RBAC Role", "Create", "", "Success", "", "Other",
      108, "User Edited RBAC Role", "Set", "", "Success", "", "Other",
      109, "User Deleted RBAC Role", "Delete", "", "Success", "", "Other",
      112, "API token Generated", "Create", "", "Success", "API Token", "Service",
      113, "API Token Revoked", "Disable", "", "Success", "API Token", "Service",
      129, "Allowed Domains Settings Changed", "Set", "", "Success", "User Domain Setting", "Other",
      1501, "Location Created", "Create", "", "Success", "", "Service",
      1502, "Location Copied", "Set", "Copy", "Success", "", "Service",
      1503, "Location Modified", "Set", "", "Success", "", "Service",
      1504, "Location Deleted", "Delete", "", "Success", "", "Service",
      2011, "User Issued Kill Command", "Execute", "", "Success", "", "Other",
      2012, "User Issued Remediate Command", "Execute", "", "Success", "", "Other",
      2013, "User Issued Rollback Command", "Execute", "", "Success", "", "Other",
      2014, "User Issued Quarantine Command", "Execute", "", "Success", "", "Other",
      2015, "User Issued Unquarantine Command", "Execute", "", "Success", "", "Other",
      2016, "User Marked Application As Threat", "Set", "", "Success", "", "Other",
      2028, "Threat Incident Status Changed", "Set", "", "Success", "", "Other",
      2029, "Ticket Number Changes", "Set", "", "Success", "", "Other",
      2030, "Analyst Verdict Changes", "Set", "", "Success", "", "Other",
      2036, "Threat Confidence Level Changed By Agent", "Set", "", "Success", "", "Other",
      2037, "Threat Confidence Level Changed By Cloud", "Set", "", "Success", "", "Other",
      3001, "User Added Hash Exclusion", "Set", "", "Success", "Hash", "Other",
      3002, "User Added Blocklist Hash", "Set", "", "Success", "Hash", "Other",
      3008, "New Path Exclusion", "Create", "", "Success", "Path", "Other",
      3009, "New Signer Identity Exclusion", "Create", "", "Success", "Signer Identity", "Other",
      3010, "New File Type Exclusion", "Create", "", "Success", "File Type", "Other",
      3011, "New Browser Type Exclusion", "Create", "", "Success", "Browser Type", "Other",
      3012, "Path Exclusion Modified", "Set", "", "Success", "Path", "Other",
      3013, "Signer Identity Exclusion Modified", "Set", "", "Success", "Signer Identity", "Other",
      3014, "File Type Exclusion Modified", "Set", "", "Success", "File Type", "Other",
      3015, "Browser Type Exclusion Modified", "Set", "", "Success", "Browser Type", "Other",
      3016, "Path Exclusion Deleted", "Delete", "", "Success", "Path", "Other",
      3017, "Signer Identity Exclusion Deleted", "Delete", "", "Success", "Signer Identity", "Other",
      3018, "File Type Exclusion Deleted", "Delete", "", "Success", "File Type", "Other",
      3019, "Browser Type Exclusion Deleted", "Delete", "", "Success", "Browser Type", "Other",
      3020, "User Deleted Hash From Blocklist", "Delete", "", "Success", "Hash", "Other",
      3021, "User Deleted Hash Exclusion", "Delete", "", "Success", "Hash", "Other",
      3100, "User Added Package", "Create", "", "Success", "Package", "Other",
      3101, "User Modified Package", "Set", "", "Success", "Package", "Other",
      3102, "User Deleted Package", "Delete", "", "Success", "Package", "Other",
      3103, "Package Deleted By System - Too Many Packages", "Delete", "", "Success", "Package", "Other",
      3500, "User Toggled Ranger Status", "Set", "", "Success", "Ranger Settings", "Other",
      3501, "Ranger Settings Modified", "Set", "", "Success", "Ranger Settings", "Configuration Atom",
      3502, "Ranger Network Settings Modified", "Set", "", "Success", "Ranger Network Setting", "Other",
      3506, "Ranger - Device Review Modified", "Set", "", "Success", "Device Review", "Other",
      3507, "Ranger - Device Tag Modified On Host", "Set", "", "Success", "Device Tag", "Other",
      3521, "Ranger Deploy Initiated", "Initialize", "", "Success", "Ranger Deploy", "Other",
      3525, "Ranger Deploy - Credential Created", "Create", "", "Success", "Credential", "Configuration Atom",
      3526, "Ranger Deploy - Credential Deleted", "Delete", "", "Success", "Credential", "Configuration Atom",
      3527, "Ranger Deploy - Credential Overridden", "Set", "", "Success", "Credential", "Configuration Atom",
      3530, "Ranger Labels Updated", "Set", "", "Success", "Ranger Labels", "Other",
      3531, "Ranger labels reverted", "Set", "", "Success", "Ranger Labels", "Other",
      3600, "Custom Rules - User Created A Rule", "Create", "", "Success", "", "Policy Rule",
      3601, "Custom Rules - User Changed A Rule", "Set", "", "Success", "", "Policy Rule",
      3602, "Custom Rules - User Deleted A Rule", "Delete", "", "Success", "", "Policy Rule",
      3603, "Custom Rules - Rule Status Changed", "Set", "", "Success", "", "Policy Rule",
      3604, "Custom Rules - Rule Status Change Failed", "Set", "", "Failure", "", "Policy Rule",
      3626, "User 2FA Email Verification Changed", "Set", "", "Success", "", "Service",
      3628, "2FA Code Verification", "Set", "", "Success", "2FA", "Service",
      3641, "Ranger self Provisioning Default Features Modified", "Set", "", "Success", "", "Other",
      3650, "Tag Manager - User Created New Tag", "Create", "", "Success", "Tag", "Other",
      3651, "Tag Manager - User Modified Tag", "Set", "", "Success", "Tag", "Other",
      3652, "Tag Manager - User Deleted Tag", "Delete", "", "Success", "Tag", "Other",
      3653, "Tag Manager - User Attached Tag", "Other", "Attach", "Success", "Tags", "Other",
      3654, "Tag Manager - User Detached Tag", "Detach", "", "Success", "Tags", "Other", 
      3750, "Auto-Upgrade Policy Created", "Create", "", "Success", "", "Policy Rule",
      3751, "Auto-Upgrade Policy Disabled", "Disable", "", "Success", "", "Policy Rule",
      3752, "Auto-Upgrade Policy Activated", "Enable", "", "Success", "", "Policy Rule",
      3753, "Auto-Upgrade Policy Deleted", "Delete", "", "Success", "", "Policy Rule",
      3754, "Auto-Upgrade Policy Reordered", "Other", "Reorder", "Success", "", "Policy Rule",
      3755, "Upgrade Policy Inheritance Setting Changed", "Set", "", "Success", "Upgrade Policy", "Policy Rule",
      3756, "Auto-Upgrade Policy Edited", "Set", "", "Success", "", "Policy Rule",
      3767, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
      3768, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
      3769, "Local Upgrade Authorized", "Other", "Authorize", "Success", "Local Upgrade Authorization", "Service",
      3770, "Local Upgrade Authorization Expiry Date Changed", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      3771, "Local Upgrade Authorization Expiry Date Changed", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      3772, "Local Upgrade Unauthorized", "Other", "Unauthorize", "Failure", "Local Upgrade Authorization", "Service",
      3773, "Local Upgrade Authorization Inherits from Site Level", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      3774, "Local Upgrade Authorization Inherits from Site Level", "Set", "", "Success", "Local Upgrade Authorization", "Service",
      4001, "Suspicious Threat Was Marked As Threat", "Set", "", "Success", "", "Other",
      4002, "Suspicious Threat Was Resolved", "Set", "", "Success", "", "Other",
      4006, "Remember Me Length Modified", "Set", "", "Success", "Stay Sign in Duration", "Policy Rule",
      4007, "Suspicious Threat Was Marked As Benign", "Set", "", "Success", "", "Other",
      4008, "Threat Mitigation Status Changed", "Set", "", "Success", "", "Other",
      4009, "Process Was Marked As Threat", "Set", "", "Success", "", "Other",
      4011, "Suspicious Threat Was Unresolved", "Set", "", "Failure", "", "Other",
      4012, "UI Inactivity Timeout Modified", "Set", "", "Success", "Inactivity timeout", "Configuration Atom",
      5242, "Ranger - Device Tag Created", "Create", "", "Success", "", "Other",
      5243, "Ranger - Device Tag Updated", "Set", "", "Success", "", "Other",
      5244, "Ranger - Device Tag Deleted", "Delete", "", "Success", "", "Other",
      5250, "Firewall Control Tag Created", "Create", "", "Success", "", "Other",
      5251, "Firewall Control Tag Updated", "Set", "", "Success", "", "Other",
      5252, "Firewall Control Tag Updated", "Delete", "", "Success", "", "Other",
      5253, "Network Quarantine Control Tag Created", "Create", "", "Success", "", "Other",
      5254, "Network Quarantine Control Tag Updated", "Set", "", "Success", "", "Other",
      5255, "Network Quarantine Control Tag Deleted", "Delete", "", "Success", "", "Other",
      5256, "Firewall Control Tag Added/Removed From Rule", "", "", "Success", "", "Policy Rule",
      5257, "Firewall Control Tag Inherited", "Set", "", "Success", "Firewall Control tags", "Other",
      5258, "Network Quarantine Control Tag Added/Removed From Rule", "", "", "Success", "", "Policy Rule",
      5259, "Network Quarantine Control Tag Inherited", "Set", "", "Success", "Network Quarantine Control Tag", "Other",
      7500, "Remote Ops Password Configured", "Set", "", "Success", "Remote Ops password configuration", "Configuration Atom",
      7501, "Remote Ops Password Deleted", "Delete", "", "Success", "Remote Ops password configuration", "Configuration Atom",
      7602, "User Edited Run Script Guardrails", "Set", "", "Success", "Guardrails", "Service",
      7603, "User Enabled Run Script Guardrails", "Enable", "", "Success", "Guardrails", "Service",
      7604, "User Disabled Run Script Guardrails", "Disable", "", "Success", "Guardrails", "Service",
      5120, "Device Rule Created", "Create", "", "Success", "", "Policy Rule",
      5121, "Device Rule Modified", "Set", "", "Success", "", "Policy Rule",
      5122, "Device Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
      5123, "Device Rules Reordered", "Set", "", "Success", "", "Policy Rule",
      5124, "Device Rules Settings Modified", "Set", "", "Success", "Device Control settings", "Policy Rule",
      5129, "Device Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
      5220, "Firewall Rule Created", "Create", "", "Success", "", "Policy Rule",
      5221, "Firewall Rule Modified", "Set/Other", "", "Success", "", "Policy Rule",
      5222, "Firewall Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
      5225, "Firewall Control Settings Modified", "Set", "", "Success", "Firewall Rule", "Policy Rule",
      5226, "Firewall Rules Reordered", "Set", "", "Success", "Firewall Rule", "Policy Rule",
      5231, "Firewall Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
      5234, "Network Quarantine Rule Created", "Create", "", "Success", "", "Policy Rule",
      5235, "Network Quarantine Rule Modified", "Set", "", "Success", "", "Policy Rule",
      5236, "Network Quarantine Rule Deleted", "Delete", "", "Success", "", "Policy Rule",
      5237, "Network Quarantine Control Settings Modified", "Set", "", "Success", "Network Quarantine Rule", "Policy Rule",
      5238, "Network Quarantine Rules Reordered", "Set", "", "Success", "Network Quarantine Rule", "Policy Rule",
      5241, "Network Quarantine Rule Copied To Scope", "Set", "", "Success", "", "Policy Rule",
      6030, "Mobile Device Updated", "Other", "", "Success", "Device", "Other",
      6053, "Mobile Incident Resolved", "Set", "", "Success", "", "Other",
      6054, "Mobile Incident Status Changed", "Set", "", "Success", "", "Other",
      6055, "Mobile Incident Analyst Verdict Changed", "Set", "", "Success", "", "Other"
  ];
  let EventTypeLookup_onoff = datatable(
      field: string,
      EventType_field: string,
      NewValue_field: string
  )
      [
      "true", "Enable", "on",
      "false", "Disable", "off"
  ];
  let EventTypeLookup_enableddisabled = datatable(
      field: string,
      EventType_fieldenableddisabled: string,
      NewValue_fieldenableddisabled: string
  )
      [
      "true", "Enable", "enabled",
      "false", "Disable", "disabled"
  ];
  let EventSeverityLookup = datatable (EventResult: string, EventSeverity_lookup: string)
      [
      "Success", "Informational",
      "Failure", "Low"
  ];
  let EventSeverityLookup_activity = datatable (activityType_d: real, EventSeverity_activity: string)
      [
      4100, "Medium",
      4101, "High",
      2016, "Medium",
      2028, "Low",
      4001, "Medium",
      4002, "Low",
      4007, "Low",
      4008, "Medium",
      4009, "Medium",
      4011, "High",
      2, "Medium",
      2011, "Low",
      2012, "Low",
      2013, "Medium",
      2014, "Low",
      2015, "Low",
      4002, "Low",
      4104, "High",
      4105, "Medium"
  ];
  let ThreatConfidenceLookup_undefined = datatable(
      threatInfo_analystVerdict_s: string,
      ThreatConfidence_undefined: int
  )
      [
      "false_positive", 5,
      "undefined", 15,
      "suspicious", 25,
      "true_positive", 33 
  ];
  let ThreatConfidenceLookup_suspicious = datatable(
      threatInfo_analystVerdict_s: string,
      ThreatConfidence_suspicious: int
  )
      [
      "false_positive", 40,
      "undefined", 50,
      "suspicious", 60,
      "true_positive", 67 
  ];
  let ThreatConfidenceLookup_malicious = datatable(
      threatInfo_analystVerdict_s: string,
      ThreatConfidence_malicious: int
  )
      [
      "false_positive", 75,
      "undefined", 80,
      "suspicious", 90,
      "true_positive", 100 
  ];
  let parser=(disabled: bool = false, starttime: datetime=datetime(null), endtime: datetime=datetime(null), eventresult: string='*', operation_has_any: dynamic=dynamic([]), eventtype_in: dynamic=dynamic([]), srcipaddr_has_any_prefix: dynamic=dynamic([]), actorusername_has_any: dynamic=dynamic([]), object_has_any: dynamic=dynamic([]), newvalue_has_any: dynamic=dynamic([])) {
      let AllActivityIdsForAudit = dynamic([39, 41, 44, 45, 46, 56, 57, 68, 69, 70, 82, 83, 105, 116, 150, 151, 200, 201, 4004, 4005, 4104, 4105, 5012, 5020, 5021, 5022, 5024, 5025, 5026, 5027, 6000, 6001, 6002, 6010, 6011, 6012, 73, 76, 77, 78, 79, 84, 87, 2100, 2101, 2111, 52, 53, 54, 55, 61, 62, 63, 93, 95, 117, 118, 4100, 4101, 130, 131, 5040, 5041, 5042, 5044, 7200, 7201, 7202, 7203, 2, 40, 58, 59, 60, 101, 106, 107, 108, 109, 112, 113, 129, 1501, 1502, 1503, 1504, 2011, 2012, 2013, 2014, 2015, 2016, 2028, 2029, 2030, 2036, 2037, 3001, 3002, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3100, 3101, 3102, 3103, 3500, 3501, 3502, 3506, 3507, 3521, 3525, 3526, 3527, 3530, 3531, 3600, 3601, 3602, 3603, 3604, 3626, 3628, 3641, 3650, 3651, 3652, 3653, 3654, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 4001, 4002, 4006, 4007, 4008, 4009, 4011, 4012, 5242, 5243, 5244, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 7500, 7501, 7602, 7603, 7604, 5120, 5121, 5122, 5123, 5124, 5129, 5220, 5221, 5222, 5225, 5226, 5231, 5234, 5235, 5236, 5237, 5238, 5241, 6030, 6053, 6054, 6055]);
      let RawOtherActivityIds = dynamic([2, 40, 58, 59, 60, 101, 106, 107, 108, 109, 112, 113, 129, 1501, 1502, 1503, 1504, 2011, 2012, 2013, 2014, 2015, 2016, 2028, 2029, 2030, 2036, 2037, 3001, 3002, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3100, 3101, 3102, 3103, 3500, 3501, 3502, 3506, 3507, 3521, 3525, 3526, 3527, 3530, 3531, 3600, 3601, 3602, 3603, 3604, 3626, 3628, 3641, 3650, 3651, 3652, 3653, 3654, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 4001, 4002, 4006, 4007, 4008, 4009, 4011, 4012, 5242, 5243, 5244, 5250, 5251, 5252, 5253, 5254, 5255, 5256, 5257, 5258, 5259, 7500, 7501, 7602, 7603, 7604, 5120, 5121, 5122, 5123, 5124, 5129, 5220, 5221, 5222, 5225, 5226, 5231, 5234, 5235, 5236, 5237, 5238, 5241, 6030, 6053, 6054, 6055]);
      let activitydata = SentinelOne_CL
          | where not(disabled) and (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime) 
              and event_name_s == "Activities." 
              and activityType_d in (AllActivityIdsForAudit)
              and (array_length(actorusername_has_any) == 0 or primaryDescription_s has_any (actorusername_has_any))
              and (array_length(newvalue_has_any) == 0 or primaryDescription_s has_any (newvalue_has_any) or DataFields_s has_any (newvalue_has_any))
              and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(DataFields_s, srcipaddr_has_any_prefix))
          | project-away
              threatInfo_confidenceLevel_s,
              threatInfo_analystVerdict_s,
              threatInfo_threatName_s,
              threatInfo_incidentStatus_s,
              threatInfo_identifiedAt_t,
              threatInfo_updatedAt_t,
              threatInfo_threatId_s,
              mitigationStatus_s;
      let rawgroupsiteactivitydata = activitydata
          | where activityType_d in (39, 41, 44, 45, 46, 56, 57, 68, 69, 70, 82, 83, 105, 116, 150, 151, 200, 201, 4004, 4005, 4104, 4105, 5012, 5020, 5021, 5022, 5024, 5025, 5026, 5027, 6000, 6001, 6002, 6010, 6011, 6012, 73, 76, 77, 78, 79, 84, 87, 2100, 2101, 2111)
          | parse-kv DataFields_s as (username: string, userName: string, userFullName: string, newValue: string, policyEnabled: string, siteName: string, oldValue: string, ipAddress: string, oldSiteName: string, policy: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | parse-kv policy as (id: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | project-rename ObjectId = id
          | lookup EventFieldsLookup on activityType_d;
      let groupsiteactivitydata_onoff = rawgroupsiteactivitydata
          | where activityType_d in(39, 41, 57, 105, 200, 73, 76, 78, 79, 84, 87, 150)
          | lookup EventTypeLookup_onoff on $left.newValue == $right.field
          | lookup EventTypeLookup_onoff on $left.policyEnabled == $right.field
          | extend
              EventType = coalesce(EventType_field, EventType_field1),
              NewValue = coalesce(NewValue_field, NewValue_field1);
      let groupsiteactivitydata_enabledisabled = rawgroupsiteactivitydata
          | where activityType_d in (70, 82, 83, 201)
          | lookup EventTypeLookup_enableddisabled on $left.newValue == $right.field
          | extend
              EventType = EventType_fieldenableddisabled,
              NewValue = NewValue_fieldenableddisabled;
      let groupsiteactivitydata_other = rawgroupsiteactivitydata
          | where activityType_d !in(39, 41, 57, 105, 200, 73, 76, 78, 79, 84, 87, 150, 70, 82, 83, 201)
          | extend EventType = EventType_activity;
      let groupsiteactivitydata = union
              groupsiteactivitydata_onoff,
              groupsiteactivitydata_enabledisabled,
              groupsiteactivitydata_other
          | extend
              ActorUsername = coalesce(username, userName, userFullName),
              Object = coalesce(Object, siteName, oldSiteName),
              NewValue = coalesce(NewValue, newValue),
              OldValue = oldValue;
      let machineactivitydata = activitydata
          | where activityType_d in (52, 53, 54, 55, 61, 62, 63, 93, 95, 117, 118, 4100, 4101)
          | parse-kv DataFields_s as (username: string, userName: string, computerName: string, threatClassification: string, ipAddress: string, groupName: string, targetGroupName: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookupMachineActivity on activityType_d
          | extend
              EventType = EventType_machineactivity,
              EventSubType = EventSubType_machineactivity,
              ThreatCategory = threatClassification,
              OldValue = groupName,
              NewValue = targetGroupName,
              ObjectId = agentId_s
          | extend ActorUsername = coalesce(username, userName)
          | invoke _ASIM_ResolveDvcFQDN('computerName');
      let accountactivitydata = activitydata
          | where activityType_d in (130, 131, 5040, 5041, 5042, 5044, 7200, 7201, 7202, 7203)
          | parse-kv DataFields_s as (username: string, accountName: string, cloudProviderAccountName: string, ipAddress: string, accountId: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookupAccountActivity on activityType_d
          | extend
              EventType = EventType_accountactivity,
              EventSubType = EventSubType_accountactivity,
              Object = coalesce(accountName, cloudProviderAccountName),
              ObjectId = accountId;
      let useractivitydata = activitydata
          | where activityType_d in (88, 114)
          | parse-kv DataFields_s as (username: string, byUser: string, newValue: string, ipAddress: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookup_useractivity on activityType_d
          | lookup EventTypeLookup_enableddisabled on $left.newValue == $right.field
          | extend
              ActorUsername = byUser,
              EventType = coalesce(EventType_useractivity, EventType_fieldenableddisabled),
              EventSubType = EventSubType_useractivity,
              NewValue = NewValue_fieldenableddisabled;
      let rawotheractivitydata = activitydata
          | where activityType_d in (RawOtherActivityIds)
          | parse-kv DataFields_s as (username: string, userName: string, email: string, globalTwoFaEnabled: string, cloudIntelligenceOn: string, fileDisplayName: string, roleName: string, oldIncidentStatusTitle: string, oldTicketId: string, oldAnalystVerdictTitle: string, oldConfidenceLevel: string, previous: string, oldStatus: string, oldTagName: string, oldTagDescription: string, newIncidentStatusTitle: string, newTicketId: string, newAnalystVerdictTitle: string, newConfidenceLevel: string, newStatus: string, current: string, Status: string, newTagName: string, newTagDescription: string, value: string, rulesAdded: string, rulesRemoved: string, tagsAdded: string, tagsRemoved: string, incidentName: string, ruleName: string, deviceId: string, ip: string, externalIp: string, affectedDevices: string, featureValue: string, featureName: string, recoveryEmail: string, policyName: string, tagName: string, gatewayExternalIp: string, gatewayMac: string, threatClassification: string, ipAddress: string, applicationPath: string, externalId: string, consoleUrl: string, ruleId: string, policyId: string) with (pair_delimiter=",", kv_delimiter=":", quote='"')
          | lookup EventFieldsLookup_otheractivity on activityType_d
          | lookup EventTypeLookup_onoff on $left.cloudIntelligenceOn == $right.field
          | lookup EventTypeLookup_onoff on $left.globalTwoFaEnabled == $right.field
          | extend
              ActorUsername = coalesce(username, userName),
              EventType = coalesce(EventType_otheractivity, EventType_field, EventType_field1),
              EventSubType = EventSubType_otheractivity,
              Object = coalesce(Object, fileDisplayName, applicationPath, roleName, ruleName, incidentName, recoveryEmail, featureName, policyName, tagName),
              NewValue = coalesce(newIncidentStatusTitle, newTicketId, newAnalystVerdictTitle, newConfidenceLevel, newStatus, current, Status, newTagName, newTagDescription, featureValue),
              OldValue = coalesce(oldIncidentStatusTitle, oldTicketId, oldAnalystVerdictTitle, oldConfidenceLevel, oldStatus, previous, oldTagName, oldTagDescription),
              TargetIpAddr = coalesce(externalIp, ip, gatewayExternalIp),
              ThreatCategory = threatClassification,
              RuleName = ruleName,
              TargetDvcId = deviceId,
              ObjectId = coalesce(ruleId, policyId, externalId, deviceId)
          | invoke _ASIM_ResolveDstFQDN('affectedDevices')
          | project-rename
              TargetHostname = DstHostname,
              TargetDomain = DstDomain,
              TargetDomainType = DstDomainType,
              TargetFQDN = DstFQDN,
              TargetUrl = consoleUrl;
      let parsedotheractivitydata_eventtype = rawotheractivitydata
          | where activityType_d in (5256, 5258)
          | extend EventType = case(
                          isnotempty(rulesAdded) or isnotempty(tagsAdded),
                          "Create",
                          isnotempty(rulesRemoved) or isnotempty(tagsRemoved),
                          "Delete",
                          "Set"
                      );
      let parsedotheractivitydata_objectvalue = rawotheractivitydata
          | where activityType_d in (3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3650, 3651, 3652, 3653, 3654)
          | extend Object = strcat(Object, ' ', value);
      let parsedotheractivitydata_severity = rawotheractivitydata
          | where activityType_d in (2036, 2037, 2030)
          | where (eventresult == "*" or EventResult =~ eventresult)
              and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
              and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
              and (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
              and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
              and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(ipAddress, srcipaddr_has_any_prefix))
          | extend EventSeverity_specific = case(
                                      primaryDescription_s has_any ("to malicious", "to True positive"),
                                      "High", 
                                      primaryDescription_s has_any ("to suspicious", "to Undefined"),
                                      "Medium",
                                      primaryDescription_s has "to False positive",
                                      "Low",
                                      "Informational"
                                  );
      let ParsedActivitydata = union
              groupsiteactivitydata,
              machineactivitydata,
              accountactivitydata,
              useractivitydata,
              rawotheractivitydata,
              parsedotheractivitydata_eventtype,
              parsedotheractivitydata_objectvalue
          | where activityType_d !in(2030, 2036, 2037)
          | lookup EventSeverityLookup on EventResult
          | lookup EventSeverityLookup_activity on activityType_d
          | where (eventresult == "*" or EventResult =~ eventresult)
              and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
              and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
              and (array_length(newvalue_has_any) == 0 or NewValue has_any (newvalue_has_any))
              and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
              and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(ipAddress, srcipaddr_has_any_prefix));
      let UnParsedActivitydatawithThreat = union ParsedActivitydata, parsedotheractivitydata_severity
          | where isnotempty(threatId_s)
          | join kind=inner (SentinelOne_CL
              | where event_name_s == "Threats."
              | project
                  TimeGenerated,
                  threatInfo_confidenceLevel_s,
                  threatInfo_analystVerdict_s,
                  threatInfo_threatName_s,
                  threatInfo_incidentStatus_s,
                  threatInfo_identifiedAt_t,
                  threatInfo_updatedAt_t,
                  threatInfo_threatId_s,
                  mitigationStatus_s)
              on $left.threatId_s == $right.threatInfo_threatId_s
          | where TimeGenerated1 >= TimeGenerated
          | summarize arg_min(TimeGenerated1, *) by activityType_d, threatId_s, createdAt_t, TimeGenerated;
      let undefineddata = UnParsedActivitydatawithThreat
          | where threatInfo_confidenceLevel_s == "Undefined"
          | lookup ThreatConfidenceLookup_undefined on threatInfo_analystVerdict_s;
      let suspiciousdata = UnParsedActivitydatawithThreat
          | where threatInfo_confidenceLevel_s == "suspicious"
          | lookup ThreatConfidenceLookup_suspicious on threatInfo_analystVerdict_s;
      let maliciousdata = UnParsedActivitydatawithThreat
          | where threatInfo_confidenceLevel_s == "malicious"
          | lookup ThreatConfidenceLookup_malicious on threatInfo_analystVerdict_s;
      let ParsedActivitydatawithThreat = union undefineddata, suspiciousdata, maliciousdata
          | extend
              ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious),
              AdditionalFields = bag_pack(
                      "threatUpdatedAt",
                      threatInfo_updatedAt_t,
                      "threatAnalystVerdict",
                      threatInfo_analystVerdict_s,
                      "threatIncidentStatus",
                      threatInfo_incidentStatus_s,
                      "mitigationStatus",
                      mitigationStatus_s
                  )
          | project-rename
              ThreatId = threatId_s,
              ThreatName = threatInfo_threatName_s,
              ThreatFirstReportedTime = threatInfo_identifiedAt_t,
              ThreatCategory_threats = threatInfo_classification_s,
              ThreatOriginalConfidence = threatInfo_confidenceLevel_s;
      let ParsedActivitydatawithoutThreat = ParsedActivitydata
          | where isempty(threatId_s);
      union ParsedActivitydatawithThreat, ParsedActivitydatawithoutThreat
      | extend 
          EventSeverity = coalesce(EventSeverity_specific, EventSeverity_activity, EventSeverity_lookup),
          EventProduct = "SentinelOne",
          EventVendor = "SentinelOne",
          EventSchema = "AuditEvent",
          EventSchemaVersion = "0.1",
          EventCount = toint(1),
          AdditionalFields = bag_merge(AdditionalFields, todynamic(DataFields_s)),
          EventOriginalType = tostring(toint(activityType_d)),
          SrcIpAddr = iff(ipAddress != "null", ipAddress, ""),
          DvcAction = iff(EventResult == "Success", "Allow", "Deny")
      | project-rename
          EventStartTime = createdAt_t,
          EventUid = _ItemId,
          EventMessage = primaryDescription_s,
          ActorUserId = userId_s,
          DvcId = agentId_s,
          EventOriginalUid = activityUuid_g
      | extend
          ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
          ActorUserType = _ASIM_GetUserType(ActorUsername, ActorUserId),
          ActorUserIdType = iff(isnotempty(ActorUserId), "Other", ""),
          DvcIdType = iff(isnotempty(DvcId), "Other", ""),
          TargetDvcIdType = iff(isnotempty(TargetDvcId), "Other", ""),
          ValueType = iff(isnotempty(NewValue), "Other", "")
      | extend
          EventEndTime = EventStartTime,
          User = ActorUsername,
          IpAddr = SrcIpAddr,
          Dvc = coalesce(DvcHostname, DvcId, EventProduct),
          Dst = coalesce(TargetHostname, TargetIpAddr),
          Src = SrcIpAddr,
          Rule = RuleName,
          Value = NewValue
      | project-away
          *_d,
          *_s,
          *_t,
          *_g,
          *_b,
          Computer,
          MG,
          ManagementGroupName,
          RawData,
          SourceSystem,
          TenantId,
          username,
          userName,
          userFullName,
          newValue,
          policyEnabled,
          siteName,
          oldValue,
          computerName,
          accountName,
          cloudProviderAccountName,
          email,
          globalTwoFaEnabled,
          cloudIntelligenceOn,
          fileDisplayName,
          roleName,
          oldIncidentStatusTitle,
          oldTicketId,
          oldAnalystVerdictTitle,
          oldConfidenceLevel,
          previous,
          oldStatus,
          oldTagName,
          oldTagDescription,
          newIncidentStatusTitle,
          newTicketId,
          newAnalystVerdictTitle,
          newConfidenceLevel,
          newStatus,
          current,
          Status,
          newTagName,
          newTagDescription,
          value,
          rulesAdded,
          rulesRemoved,
          tagsAdded,
          tagsRemoved,
          incidentName,
          ruleName,
          deviceId,
          ip,
          externalIp,
          affectedDevices,
          featureValue,
          featureName,
          recoveryEmail,
          policyName,
          policy,
          tagName,
          gatewayExternalIp,
          gatewayMac,
          threatClassification,
          applicationPath,
          externalId,
          groupName,
          oldSiteName,
          targetGroupName,
          ipAddress,
          EventType_*,
          EventSubType_*,
          EventSeverity_*,
          NewValue_*,
          _ResourceId,
          TimeGenerated1,
          ThreatCategory_*,
          ThreatConfidence_*,
          accountId,
          policyId,
          ruleId,
          byUser
  };
  parser(disabled=disabled, starttime=starttime, endtime=endtime, eventresult=eventresult, operation_has_any=operation_has_any, eventtype_in=eventtype_in, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, actorusername_has_any=actorusername_has_any, object_has_any=object_has_any, newvalue_has_any=newvalue_has_any)
}



//
// Function Name: vimAuditEventVectraXDRAudit
// Description: This ASIM parser supports filtering and normalizing Vectra XDR Audit Logs Event in the Audits_Data_CL table to the ASIM Audit Event schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventVectraXDRAudit(    ['disabled']:bool=False,
    ['eventresult']:string='*',
    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['object_has_any']:dynamic=dynamic([]))
{
let parser = (disabled:bool = false, eventresult:string='*', starttime:datetime=datetime(null), endtime:datetime=datetime(null), actorusername_has_any:dynamic=dynamic([]),operation_has_any:dynamic=dynamic([]),object_has_any:dynamic=dynamic([]))
{
  Audits_Data_CL
  | where not(disabled) and event_action_s !in ("login","logout")
  | where (isnull(starttime) or event_timestamp_t >= starttime) and (isnull(endtime) or event_timestamp_t <= endtime) and (array_length(actorusername_has_any) == 0 or tostring(toint(user_id_d)) has_any (actorusername_has_any)) or (array_length(actorusername_has_any) == 0 or username_s has_any (actorusername_has_any)) and (array_length(operation_has_any) == 0 or event_action_s has_any (operation_has_any)) and (array_length(object_has_any) == 0 or event_object_s has_any (object_has_any))
  | extend
        EventEndTime = event_timestamp_t,
        EventProduct = 'XDR',
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1.0",
        EventStartTime = event_timestamp_t,
        EventType = 'Other',
        EventVendor = 'Vectra',
        Type = "Audit Log",
        EventUid = tostring(toint(id_d)),
        ActorUserId = tostring(toint(user_id_d)),
        ActorUserIdType = "UID",
        ActorUsernameType = "UPN",
        EventResult = case(result_status_s=="success", "Success", result_status_s=="failure", "Failure","NA")
  | project-rename
        Dvc = source_ip_s,
        Operation = event_action_s,
        ActorUsername = username_s,
        Object = event_object_s,
        ActorOriginalUserType = user_type_s,
        EventMessage = Message,
        EventProductVersion = version_s
  | where ('*' in (eventresult) or EventResult in (eventresult))
  | extend User = ActorUsername
  | project-away
        id_d, user_id_d, user_role_s, result_status_s,event_timestamp_t, event_data_s, api_client_id_g, TenantId, _ResourceId, RawData, SourceSystem, Computer, MG, ManagementGroupName
};
parser (disabled=disabled, eventresult=eventresult, starttime=starttime, endtime=endtime, actorusername_has_any=actorusername_has_any,operation_has_any=operation_has_any,object_has_any=object_has_any)
}



//
// Function Name: vimAuditEventVMwareCarbonBlackCloud
// Description: This ASIM parser supports normalizing VMware Carbon Black Cloud logs to the ASIM Audit Event normalized schema. VMware Carbon Black Cloud events are captured through VMware Carbon Black Cloud data connector which ingests Carbon Black Audit, Notification and Event data into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimAuditEventVMwareCarbonBlackCloud(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['eventtype_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['actorusername_has_any']:dynamic=dynamic([]),
    ['operation_has_any']:dynamic=dynamic([]),
    ['object_has_any']:dynamic=dynamic([]),
    ['newvalue_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=False)
{
let EventTypeLookup = datatable(temp_type: string, EventType: string)[
    "created", "Create",
    "updated", "Set",
    "deleted", "Delete",
    "added", "Create",
    "modified", "Set"
];
let parser=(
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null), 
    srcipaddr_has_any_prefix: dynamic=dynamic([]), 
    eventtype_in: dynamic=dynamic([]), 
    eventresult: string='*', 
    actorusername_has_any: dynamic=dynamic([]), 
    operation_has_any: dynamic=dynamic([]), 
    object_has_any: dynamic=dynamic([]), 
    newvalue_has_any: dynamic=dynamic([]), 
    disabled: bool = false
    ) {
    let allData = CarbonBlackAuditLogs_CL
        | where not(disabled)
        | where ((isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime))
            and not(description_s has_any ("logged in", "login"))
            and (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(clientIp_s, srcipaddr_has_any_prefix))
            and (array_length(actorusername_has_any) == 0 or loginName_s has_any (actorusername_has_any))
            and (array_length(object_has_any) == 0 or description_s has_any (object_has_any))
            and (array_length(newvalue_has_any) == 0 or description_s has_any (newvalue_has_any))
            and (array_length(operation_has_any) == 0 or description_s has_any (operation_has_any));
    let Enabled = allData
        | where description_s has_cs "Enabled"
        | parse description_s with "Enabled " temp_object1: string " in policy " temp_restmessage1: string
        | parse description_s with "Enabled " temp_object2: string " with " temp_restmessage2: string
        | parse description_s with temp_object3: string " Enabled " temp_restmessage3: string
        | extend
            EventType = "Enable",
            Operation = description_s,
            Object = coalesce(temp_object1, temp_object2, temp_object3),
            ObjectType = iff(description_s has "policy", "Policy Rule", "Configuration Atom"),
            EventSeverity1 = iff(description_s has "Sensor Bypass", "Low", "Informational");
    let Set = allData
          | where description_s startswith "Set"
          | parse description_s with "Set " temp_field_s: string  " to " NewValue: string " for device(s): " temp_deviceid_s: string
          | parse temp_deviceid_s with TargetFQDN: string " (ID: " TargetDvcId: string ")" *
          | invoke _ASIM_ResolveFQDN ("TargetFQDN")
          | extend
              Object = temp_field_s,
              EventType = "Set",
              Operation = strcat("Set ", temp_field_s, " to ", NewValue),
              ObjectType = "Configuration Atom",
              AdditionalFields = bag_pack("devices", temp_deviceid_s);
    let AlertNotify = allData
        | where description_s has "alert notification"
        | parse-kv description_s as (name: string) with (pair_delimiter=" ", kv_delimiter=":")
        | parse description_s with temp_type: string " alert notification " temp_restmessage: string
        | extend
            Operation = strcat(temp_type, " alert notification"),
            temp_type = tolower(temp_type),
            Object = coalesce(name, "alert notification"),
            ObjectType = "Service"
        | lookup EventTypeLookup on temp_type;
    let CustomRole = allData
        | where description_s has "custom role"
        | parse description_s with temp_type1: string " custom role " temp_rolename1: string " (psc:role:" temp_roleid1: string ")" temp_restmessage1: string 
        | parse description_s with * " role " temp_rolename2: string " (psc:role:" temp_roleid2: string ") " temp_type2: string " with" temp_restmessage2: string
        | extend
            temp_type = tolower(coalesce(temp_type1, temp_type2)),
            Object = coalesce(temp_rolename1, temp_rolename2),
            ObjectType = "Other"
        | lookup EventTypeLookup on temp_type
        | extend
            Operation = strcat(temp_type, " custom role ", Object),
            AdditionalFields = bag_pack("role id", coalesce(temp_roleid1, temp_roleid2));
    let Policy = allData
        | where description_s startswith "Policy"
        | parse description_s with "Policy " temp_policyname1: string " (ID: " temp_policyid1 ") " temp_type1: string " successfully"
        | parse description_s with "Policy " temp_policyname2: string " (ID: " temp_policyid2: string ") " temp_type2: string " and renamed to " NewValue: string " (ID: " temp_restmessage2: string
        | parse description_s with "Policy " temp_policyname3: string " (ID: " temp_policyid3 ") " temp_type3: string
        | extend
            Object = coalesce(temp_policyname1, temp_policyname2, temp_policyname3),
            ObjectType = "Policy Rule",
            temp_type = replace_regex(coalesce(temp_type1, temp_type2, temp_type3), @'[is,was]* (\S+)', @'\1'),
            OldValue = temp_policyname2,
            AdditionalFields = bag_pack("policy id", coalesce(temp_policyid1, temp_policyid2, temp_policyid3))
        | lookup EventTypeLookup on temp_type
        | extend
            Operation = iff(isnotempty(temp_type2), strcat("Policy ", Object, " ", temp_type, " and renamed to ", NewValue), strcat("Policy ", Object, " ", temp_type));
    let Changed = allData
          | where description_s startswith "Changed policy"
          | parse description_s with temp_operation_s: string " to " NewValue: string ")" * "device(s): " temp_deviceid_s: string 
          | extend
              EventType = "Set",
              Operation = strcat(temp_operation_s, " to ", NewValue),
              Object = NewValue,
              ObjectType = "Policy Rule",
              AdditionalFields = bag_pack("devices", temp_deviceid_s),
              TargetDvcId = iff(temp_deviceid_s contains ',', split(temp_deviceid_s, ',', 0), temp_deviceid_s);
    let ParamsUpdated = allData
        | where description_s startswith "Parameters updated"
        | parse description_s with "Parameters updated for " temp_config1: string " (ID: " temp_configid1: string ") for policy " temp_policyname1: string " (ID: " temp_policyid1: string ")" temp_restmessage1: string
        | parse description_s with "Parameters updated for " temp_config2: string " (ID: " temp_configid2: string ") for policy with ID " temp_policyid2: string
        | extend
            temp_operation = coalesce(temp_config1, temp_config2),
            temp_configid = coalesce(temp_configid1, temp_configid2)
        | extend
            EventType = "Set", 
            Operation = strcat("Parameters updated for ", temp_operation, " for policy ", temp_policyname1, tostring(split(temp_policyid2, "{")[0])),
            Object = strcat("Policy ", coalesce(temp_policyname1, temp_policyid2)),
            ObjectType = "Policy Rule",
            AdditionalFields = bag_pack("config id", temp_configid);
    let Reputation = allData
        | where description_s has_cs "Reputation"
        | parse description_s with "User " * " " temp_type1: string " Reputation" * " for Organization ID " temp_orgid1: string " of type " temp_reptype1: string " to " temp_list1: string " with content: " temp_content1: string " | " temp_restmessage1: string
        | parse description_s with "User " * " " temp_type2: string " Reputation" * " for Organization ID " temp_orgid2: string ": " temp_content2: string " | " temp_restmessage2: string
        | extend
            temp_type = coalesce(temp_type1, temp_type2),
            Object = iff(isnotempty(temp_reptype1), strcat("Reputation Override of type ", temp_reptype1), "Reputation Override"),
            ObjectType = "Configuration Atom"
        | lookup EventTypeLookup on temp_type
        | extend
            Operation = strcat(temp_type, " ", Object),
            ActorScopeId = coalesce(temp_orgid1, temp_orgid2),
            AdditionalFields = bag_pack("reputation value", coalesce(temp_content1, temp_content2));
      let PolicyUpdateApplied = allData
          | where description_s has "Policy update applied"
          | parse description_s with * "policy to " Object: string
          | extend
              EventType = "Set",
              Operation = "Policy update applied",
              ObjectType = "Policy Rule",
              OriginalObjectType = "Policy"
      ;
      let auto_deletion = allData
          | where description_s has_all ("auto-deletion", "devices")
          | parse description_s with TargetFQDN: string " " *
          | invoke _ASIM_ResolveFQDN ("TargetFQDN")
          | extend
              EventType = "Delete",
              Operation = "auto-deletion",
              Object = TargetFQDN,
              ObjectType = "Directory Service Object",
              OriginalObjectType = "Device";
      let Hash_Deleted = allData
          | where description_s startswith "Hash - "
          | parse description_s with "Hash - " HashName_s: string " " * "on device " TargetFQDN: string
          | invoke _ASIM_ResolveFQDN ("TargetFQDN")
          | extend
              EventType = "Delete",
              Operation = "Delete Request",
              Object = HashName_s,
              ObjectType = "Configuration Atom",
              OriginalObjectType = "Hash";
      let Failure_Deleting_Hash = allData
          | where description_s startswith "Failure deleting hash"
          | parse description_s with "Failure deleting hash '" HashName_s: string "'" * "device '" TargetDvcId: string "'" * "Reason: " EventResultDetails: string
          | extend
              EventType = "Delete",
              Operation = "Deleting hash",
              Object = HashName_s,
              ObjectType = "Configuration Atom",
              OriginalObjectType = "Hash",
              EventResult = "Failure";
      let Delete_Hash = allData
          | where description_s startswith "Delete Hash"
          | parse description_s with "Delete Hash " HashName_s: string " " * "device(s): " temp_deviceid_s: string
          | extend
              EventType = "Delete",
              Operation = "Delete Hash",
              Object = HashName_s,
              ObjectType = "Configuration Atom",
              OriginalObjectType = "Hash",
              AdditionalFields = bag_pack("devices", temp_deviceid_s),
              TargetDvcId = iff(temp_deviceid_s contains ',', split(temp_deviceid_s, ',', 0), temp_deviceid_s);
      let Success_Deleting_Hash = allData
          | where description_s startswith "Success deleting hash"
          | parse description_s with "Success deleting hash '" HashName_s: string "'" * "device '" TargetDvcId: string "'" * "Reason: " EventResultDetails: string
          | extend
              EventType = "Delete",
              Operation = "Deleting hash",
              Object = HashName_s,
              ObjectType = "Configuration Atom",
              OriginalObjectType = "Hash",
              EventResult = "Success";
      let DeviceUninstalled = allData
          | where description_s has_all ("Device", "uninstalled")
          | parse description_s with "Device " TargetFQDN: string " with deviceId " TargetDvcId: string " " *
          | invoke _ASIM_ResolveFQDN ("TargetFQDN")
          | extend
              EventType = "Uninstall",
              Operation = "Uninstall",
              Object = TargetFQDN,
              ObjectType = "Directory Service Object",
              OriginalObjectType = "Device";
      let DeviceReset = allData
          | where description_s startswith ("Device reset requested")
          | parse description_s with "Device reset requested on device " TargetDvcId: string
          | extend 
              EventType = "Set",
              Operation = "Device reset",
              Object = TargetDvcId,
              ObjectType = "Directory Service Object",
              OriginalObjectType = "Device";
      let CreateOrModifyPolicy = allData
          | where description_s startswith "Request received to"
          | parse description_s with * "policy " Object: string
          | extend
              EventType = case(
                  description_s has "modify policy",
                  "Set", 
                  description_s has "create new policy",
                  "Create",
                  ""
              ),
              Operation = case(
                  description_s has "modify policy",
                  "modify policy", 
                  description_s has "create new policy",
                  "create new policy",
                  ""
              ),
              Object = replace_string(Object, "- ", ""),
              ObjectType = "Policy Rule",
              OriginalObjectType = "Policy";
      let LogsRequested = allData
          | where description_s startswith ("Logs requested")
          | parse description_s with "Logs requested for device " TargetDvcId: string
          | extend 
              EventType = "Read",
              Operation = "Logs requested",
              Object = TargetDvcId,
              ObjectType = "Directory Service Object",
              OriginalObjectType = "Device";
      let Re_Registration = allData
      | where description_s startswith "Re-registration of device"
      | parse description_s with "Re-registration of device" TargetFQDN: string " of " TargetDvcId: string " device completed" *
      | invoke _ASIM_ResolveFQDN ("TargetFQDN")
      | extend
          EventType = "Enable",
          Operation = "Re-registration of device",
          Object = TargetFQDN,
          ObjectType = "Directory Service Object",
          OriginalObjectType = "Device";
    union
        Enabled,
          Set,
          AlertNotify,
          CustomRole,
          Policy,
          Changed,
          ParamsUpdated,
          Reputation,
          PolicyUpdateApplied,
          auto_deletion,
          Hash_Deleted,
          Failure_Deleting_Hash,
          Delete_Hash,
          Success_Deleting_Hash,
          DeviceUninstalled,
          DeviceReset,
          CreateOrModifyPolicy,
          LogsRequested,
          Re_Registration
    | extend EventResult = iif(isnotempty(EventResult), EventResult, "Success")
    | where (eventresult == "*" or EventResult =~ eventresult)
        and (array_length(eventtype_in) == 0 or EventType has_any (eventtype_in))
        and (array_length(operation_has_any) == 0 or Operation has_any (operation_has_any))
        and (array_length(object_has_any) == 0 or Object has_any (object_has_any))
    | extend
        EventStartTime = unixtime_milliseconds_todatetime(eventTime_d),
        EventSeverity = coalesce(EventSeverity1, "Informational"),
        AdditionalFields = bag_merge(AdditionalFields, bag_pack("flagged", flagged_b, "request url", requestUrl_s))
    | extend
        EventProduct = "Carbon Black Cloud",
        EventSchema = "AuditEvent",
        EventSchemaVersion = "0.1",
        EventVendor = "VMware",
        EventCount = int(1)
    | project-rename
        ActorUsername = loginName_s,
        EventUid = _ItemId,
        SrcIpAddr = clientIp_s,
        EventMessage = description_s,
        EventOriginalUid = eventId_g,
        ActorScope = orgName_s
    | extend
        ActorUsernameType = _ASIM_GetUsernameType(ActorUsername),
        ActorUserType = _ASIM_GetUserType(ActorUsername, ""),
        TargetDvcIdType = iff(isnotempty(TargetDvcId), "Other", ""),
        EventEndTime = EventStartTime,
        Src = SrcIpAddr,
        IpAddr = SrcIpAddr,
        Dvc = EventProduct,
        User = ActorUsername,
        Value = NewValue,
        ValueType = iff(isnotempty(NewValue), "Other", "")
    | project-away 
        *_s,
        *_d,
        *_b,
        temp*,
        Computer,
        MG,
        ManagementGroupName,
        RawData,
        SourceSystem,
        TenantId,
        _ResourceId,
        name,
        EventSeverity1
};
parser(
    starttime=starttime, 
    endtime=endtime, 
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
    eventtype_in=eventtype_in, 
    eventresult=eventresult, 
    actorusername_has_any=actorusername_has_any, 
    operation_has_any=operation_has_any, 
    object_has_any=object_has_any, 
    newvalue_has_any=newvalue_has_any, 
    disabled=disabled
)
}



