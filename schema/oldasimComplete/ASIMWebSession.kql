//
// Function Name: ASimWebSession
// Description: This ASIM parser supports normalizing Web Session logs from all supported sources to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSession(    ['pack']:bool=false)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludeASimWebSession') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser| where isnotempty(SourceSpecificParser));
let ASimBuiltInDisabled=toscalar('ExcludeASimWebSession' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
let parser=(pack:bool=false){
union isfuzzy=true
  vimWebSessionEmpty,
  ASimWebSessionSquidProxy (ASimBuiltInDisabled or ('ExcludeASimWebSessionSquidProxy' in (DisabledParsers))),
  ASimWebSessionZscalerZIA (ASimBuiltInDisabled or ('ExcludeASimWebSessionZscalerZIA' in (DisabledParsers))),
  ASimWebSessionNative (disabled=(ASimBuiltInDisabled or ('ExcludeASimWebSessionNative' in (DisabledParsers)))),
  ASimWebSessionVectraAI (pack=pack, disabled=(ASimBuiltInDisabled or ('ExcludeASimWebSessionVectraAI' in (DisabledParsers)))),
  ASimWebSessionIIS (disabled=(ASimBuiltInDisabled or ('ExcludeASimWebSessionIIS' in (DisabledParsers)))),
  ASimWebSessionPaloAltoCEF (ASimBuiltInDisabled or ('ExcludeASimWebSessionPaloAltoCEF' in (DisabledParsers))),
  ASimWebSessionApacheHTTPServer (ASimBuiltInDisabled or ('ExcludeASimWebSessionApacheHTTPServer' in (DisabledParsers))),
  ASimWebSessionFortinetFortiGate (ASimBuiltInDisabled or ('ExcludeASimWebSessionFortinetFortiGate' in (DisabledParsers))),
  ASimWebSessionCiscoMeraki (ASimBuiltInDisabled or ('ExcludeASimWebSessionCiscoMeraki' in (DisabledParsers))),
  ASimWebSessionBarracudaWAF (ASimBuiltInDisabled or ('ExcludeASimWebSessionBarracudaWAF' in (DisabledParsers))),
  ASimWebSessionBarracudaCEF (ASimBuiltInDisabled or ('ExcludeASimWebSessionBarracudaCEF' in (DisabledParsers))),
  ASimWebSessionCitrixNetScaler (ASimBuiltInDisabled or ('ExcludeASimWebSessionCitrixNetScaler' in (DisabledParsers))),
  ASimWebSessionCiscoFirepower (ASimBuiltInDisabled or ('ExcludeASimWebSessionCiscoFirepower' in (DisabledParsers))),
  ASimWebSessionF5ASM (ASimBuiltInDisabled or ('ExcludeASimWebSessionF5ASM' in (DisabledParsers))),
  ASimWebSessionPaloAltoCortexDataLake (ASimBuiltInDisabled or ('ExcludeASimWebSessionPaloAltoCortexDataLake' in (DisabledParsers))),
  ASimWebSessionSonicWallFirewall (ASimBuiltInDisabled or ('ExcludeASimWebSessionSonicWallFirewall' in (DisabledParsers)))
}; 
parser(pack=pack)
}



//
// Function Name: ASimWebSessionApacheHTTPServer
// Description: This ASIM parser supports filtering and normalizing Apache HTTP Server logs produced by the Microsoft Sentinel Apache connector to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionApacheHTTPServer(    ['disabled']:bool=false)
{
let Parser=(disabled:bool=false){
  ApacheHTTPServer_CL
  | where not(disabled)
  | project  RawData, TimeGenerated, Computer, _ResourceId, Type, _ItemId
  | where not (RawData startswith "[") 
  | where RawData has_any ("GET", "HEAD", "POST", "PUT", "DELETE", "CONNECT", "OPTIONS", "TRACE", "PATCH")
  | parse RawData with * '] ' Temp'"' *
  | extend DstHostname = tostring(split(trim_end(" ",Temp),":",0)[0])
  | parse RawData with SrcIpAddr " " ClientIdentity " " SrcUsername " [" Date ']' * '"' HttpRequestMethod " " Url " " Protocol '" ' EventResultDetails " " DstBytes:long ' "' HttpReferrer '" "' HttpUserAgent '"' *
  | project-away RawData, Date, ClientIdentity, Temp
  | parse _ResourceId with * "/subscriptions/" DvcScopeId "/" *
  | project-rename 
      DvcHostname    = Computer,
      DvcId          = _ResourceId,
      EventUid       = _ItemId
  | extend 
      HttpVersion    = tostring(split(Protocol,"/")[1]),
      EventStartTime = TimeGenerated,
      EventEndTime   = TimeGenerated,
      DvcIdType      = iff (DvcId == "", "", "AzureResourceID")
  | extend 
      HttpStatusCode = EventResultDetails,
      UserAgent      = HttpUserAgent,
      EventResult    = iff (
        toint(EventResultDetails) < 400, "Success", 
        "Failure"
      ),
      IpAddr         = SrcIpAddr,
      Dvc            = DvcHostname,
      User           = SrcUsername,
      SrcUsername    = case(SrcUsername == "-", "", SrcUsername),
      HttpReferrer   = case(HttpReferrer == "-", "", HttpReferrer),
      HttpUserAgent  = case(HttpUserAgent == "-", "", HttpUserAgent),
      DstHostname    = case(DstHostname == "-", "", DstHostname)
  | extend SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
  | project-away Protocol
  | extend
      EventType          = "WebServerSession", 
      EventSchema        = "WebSession",
      EventSchemaVersion = "0.2.6",
      EventCount         = int(1),
      EventVendor        = "Apache",
      EventProduct       = "HTTP Server",
      EventSeverity      = "Informational"
};
Parser (disabled=disabled)
}



//
// Function Name: ASimWebSessionBarracudaCEF
// Description: This ASIM parser supports normalizing the Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionBarracudaCEF(    ['disabled']:bool=false)
{
let SeverityLookup = datatable (severity: int, EventSeverity: string)
  [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let EventResultWFLookup = datatable (
    Action_s: string,
    EventResult_WF: string,
    DvcAction: string
)
    [
    "LOG", "Success", "Allow",
    "DENY", "Failure", "Deny",
    "WARNING", "Success", "Allow"
];
let EventTypeLookup = datatable (
    LogType_s: string,
    EventType_lookup: string,
    EventOriginalType: string
)
    [
    "WF", "HTTPsession", "Web Firewall",
    "TR", "WebServerSession", "Access"
];
let parser = (disabled: bool=false)
{
let BarracudaCEF = 
    CommonSecurityLog
    | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
    | where DeviceEventCategory in ("WF", "TR")
    | lookup EventResultWFLookup on $left.DeviceAction == $right.Action_s
    | lookup EventTypeLookup on $left.DeviceEventCategory == $right.LogType_s
    | extend
        EventType = EventType_lookup,
        severity = toint(LogSeverity)
    | lookup SeverityLookup on severity
    | extend
        Dst = DestinationIP,
        EventCount = toint(1),
        EventProduct = "WAF",
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventVendor = "Barracuda",
        status_code = toint(EventOutcome)
    | extend
        EventResult_TR = case(
                    status_code between (200 .. 299),
                    "Success", 
                    status_code between (400 .. 599),
                    "Failure",
                    status_code between (300 .. 399),
                    "Partial",
                    "NA"
                ),
        RuleName = iff(DeviceEventCategory == "WF", DeviceCustomString3, "")
    | extend
        Dvc = DeviceName,
        EventResult = iff(DeviceEventCategory == "TR", EventResult_TR, EventResult_WF),
        EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
        DstIpAddr = DestinationIP,
        SrcIpAddr = SourceIP,
        DstBytes = tolong(ReceivedBytes),
        DstPortNumber = toint(coalesce(DestinationPort,FieldDeviceCustomNumber1)),
        HttpCookie = RequestCookies,
        HttpReferrer = RequestContext,
        HttpRequestBodyBytes = tolong(ReceivedBytes),
        HttpRequestMethod = RequestMethod,
        HttpResponseBodyBytes = tolong(SentBytes),
        NetworkDuration = toint(FlexNumber2),
        HttpUserAgent = RequestClientApplication,
        NetworkSessionId = SourceUserID,
        Rule = RuleName,
        SrcPortNumber = toint(SourcePort),
        SrcUsername = SourceUserName,
        DstUsername = DestinationUserName,
        Url = RequestURL,
        HttpResponseCacheControl = iff(
                              FieldDeviceCustomNumber2 == 0,
                              "Response from the server",
                              "Response from the cache"
                          ),
        AdditionalFields = bag_pack(
                      "ProxyIP",
                      iff(DeviceEventCategory == "WF", DeviceCustomString5, DeviceCustomString3),
                      "ProxyPort",
                      FieldDeviceCustomNumber3
                  ),
        DvcHostname = DeviceName,
        DvcIpAddr = DeviceAddress,
        EventResultDetails = EventOutcome,
        HttpVersion = FlexString1
    | extend 
        SrcUsernameType = iff(isnotempty(SrcUsername), "Simple", ""),
        DstUsernameType = iff(isnotempty(DstUsername), "Simple", "")
    | extend
        Duration = NetworkDuration,
        SessionId = NetworkSessionId,
        EventEndTime = EventStartTime,
        UserAgent = HttpUserAgent,
        User = SrcUsername,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        HttpStatusCode = EventResultDetails
    | project-away
        ThreatConfidence,
        CommunicationDirection,
        AdditionalExtensions,
        Device*,
        Source*,
        Destination*,
        Activity,
        LogSeverity,
        ApplicationProtocol,
        ProcessID,
        ExtID,
        Protocol,
        Reason,
        ReceiptTime,
        SimplifiedDeviceAction,
        OriginalLogSeverity,
        ProcessName,
        EndTime,
        ExternalID,
        File*,
        ReceivedBytes,
        Message,
        Old*,
        EventOutcome,
        Request*,
        StartTime,
        Field*,
        Flex*,
        Remote*,
        Malicious*,
        severity,
        ThreatSeverity,
        IndicatorThreatType,
        ThreatDescription,
        _ResourceId,
        SentBytes,
        ReportReferenceLink,
        Computer,
        EventResult_*,
        status_code,
        EventType_lookup,
        TenantId,
        CollectorHostName;
    BarracudaCEF
};
parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionBarracudaWAF
// Description: This ASIM parser supports normalizing the Barracuda WAF logs ingested in 'barracuda_CL' table to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionBarracudaWAF(    ['disabled']:bool=false)
{
let barracudaSchema = datatable(
    ServerIP_s: string,
    UnitName_s: string,
    HTTPStatus_s: string,
    Action_s: string,
    Severity_s: string,
    DeviceReceiptTime_s: string,
    LogType_s: string,
    ClientIP_s: string,
    host_s: string,
    HostIP_s: string,
    BytesReceived_d: real,
    ServerPort_d: real,
    Cookie_s: string,
    Referer_s: string,
    Method_s: string,
    BytesSent_d: real,
    SessionID_s: string,
    ClientPort_d: real,
    AuthenticatedUser_s: string,
    CertificateUser_s: string,
    UserAgent_s: string,
    URL_s: string,
    CacheHit_d: real,
    ProxyIP_s: string,
    ProxyPort_d: real,
    RuleType_s: string,
    ServiceIP_s: string,
    TimeTaken_d: real,
    ServicePort_d: real,
    ProtocolVersion_s: string,
    _ResourceId: string,
    RawData: string,
    SourceIP: string,
    Message: string,
    Computer: string,
    MG: string,
    ManagementGroupName: string,
    TenantId: string,
    SourceSystem: string
)[];
let SeverityLookup = datatable (severity: int, EventSeverity: string)
  [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let EventResultWFLookup = datatable (
    Action_s: string,
    EventResult_WF: string,
    DvcAction: string
)
    [
    "LOG", "Success", "Allow",
    "DENY", "Failure", "Deny",
    "WARNING", "Success", "Allow"
];
let EventTypeLookup = datatable (
    LogType_s: string,
    EventType_lookup: string,
    EventOriginalType: string
)
    [
    "WF", "HTTPsession", "Web Firewall",
    "TR", "WebServerSession", "Access"
];
let parser = (disabled: bool=false)
{
let BarracudaCustom = 
    union isfuzzy=true
        barracudaSchema,
        barracuda_CL
    | where not(disabled) and (LogType_s in ("WF", "TR"))
    | lookup EventResultWFLookup on Action_s
    | lookup EventTypeLookup on LogType_s
    | extend
        EventType = EventType_lookup,
        severity = toint(Severity_s)
    | lookup SeverityLookup on severity
    | extend
        Dst = iff(LogType_s == "WF", ServiceIP_s, ServerIP_s),
        EventCount = toint(1),
        EventProduct = "WAF",
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventVendor = "Barracuda",
        status_code = toint(HTTPStatus_s)
    | extend
        EventResult_TR = case(
                    status_code between (200 .. 299),
                    "Success", 
                    status_code between (400 .. 599),
                    "Failure",
                    status_code between (300 .. 399),
                    "Partial",
                    "NA"
                ),
        RuleName = RuleType_s
    | extend
        Dvc = UnitName_s,
        EventResult = iff(LogType_s == "TR", EventResult_TR, EventResult_WF),
        EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s))),
        DstIpAddr = ServerIP_s,
        SrcIpAddr = ClientIP_s,
        DstBytes = tolong(BytesReceived_d),
        DstPortNumber = toint(coalesce(ServerPort_d,ServicePort_d)),
        HttpCookie = Cookie_s,
        HttpReferrer = Referer_s,
        HttpRequestBodyBytes = tolong(BytesReceived_d),
        HttpRequestMethod = Method_s,
        HttpResponseBodyBytes = tolong(BytesSent_d),
        NetworkDuration = toint(TimeTaken_d),
        HttpUserAgent = UserAgent_s,
        NetworkSessionId = SessionID_s,
        Rule = RuleName,
        SrcPortNumber = toint(ClientPort_d),
        SrcUsername = CertificateUser_s,
        DstUsername = AuthenticatedUser_s,
        Url = URL_s,
        HttpResponseCacheControl = iff(
                              CacheHit_d == 0,
                              "Response from the server",
                              "Response from the cache"
                          ),
        AdditionalFields = bag_pack(
                      "ProxyIP",
                      ProxyIP_s,
                      "ProxyPort",
                      ProxyPort_d
                  ),
        DvcHostname = host_s,
        DvcIpAddr = HostIP_s,
        EventResultDetails = HTTPStatus_s,
        HttpVersion = ProtocolVersion_s
    | extend 
        SrcUsernameType = iff(isnotempty(SrcUsername), "Simple", ""),
        DstUsernameType = iff(isnotempty(DstUsername), "Simple", "")
    | extend
        Duration = NetworkDuration,
        SessionId = NetworkSessionId,
        EventEndTime = EventStartTime,
        UserAgent = HttpUserAgent,
        User = SrcUsername,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        HttpStatusCode = EventResultDetails
    | project-away
        *_d,
        *_s,
        _ResourceId,
        severity,
        status_code,
        RawData,
        EventResult_*,
        SourceIP,
        Message,
        EventType_lookup,
        Computer,
        MG,
        ManagementGroupName,
        TenantId,
        SourceSystem;
    BarracudaCustom
};
parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionCiscoFirepower
// Description: This ASIM parser supports normalizing commonly used Cisco Firepower messages collected using the CEF Data Connector to the ASIM WebSession normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionCiscoFirepower(    ['disabled']:bool=false)
{
let EventFieldsLookup = datatable(
      DeviceAction: string, 
      DvcAction: string,
      EventResult: string
  )
      [
      "Detect", "Allow", "Partial",
      "Block", "Deny", "Failure",
      "Malware Cloud Lookup", "Deny", "Failure",
      "Malware Block", "Deny", "Failure",
      "Malware Allow List", "Allow", "Success",
      "Cloud Lookup Timeout", "Deny", "Failure",
      "Custom Detection", "Allow", "Partial",
      "Custom Detection Block", "Deny", "Failure",
      "Archive Block-Depth Exceeded", "Deny", "Failure",
      "Archive Block-Encrypted", "Encrypt", "Failure",
      "Archive Block-Failed to Inspect", "Deny", "Failure"
  ];
  let DirectionLookup = datatable (CommunicationDirection: string, NetworkDirection: string)[
      "1", "Inbound",
      "2", "Outbound"
  ];
  let parser=(disabled: bool=false) {
      CommonSecurityLog
      | where not(disabled) 
      | where DeviceVendor == "Cisco" and DeviceProduct == "Firepower"
          and DeviceEventClassID in("File:500:1", "FileMalware:502:1", "FireAMP:125:1")
      | parse-kv AdditionalExtensions as (start: long) with (pair_delimiter=';', kv_delimiter='=')
      | extend
          EventMessage = iff(DeviceEventClassID == "FireAMP:125:1", DeviceCustomString5, ""),
          ThreatName = iff(DeviceEventClassID == "FireAMP:125:1", DeviceCustomString2, ""),
          Disposition = case(
                  DeviceEventClassID == "FireAMP:125:1",
                  DeviceCustomString3,
                  DeviceEventClassID in ("File:500:1", "FileMalware:502:1"),
                  DeviceCustomString2,
                  ""
              ),
          AdditionalFields = todynamic(
                      case(
                              DeviceEventClassID == "FireAMP:125:1",
                              bag_pack(
                                      "policy", DeviceCustomString1,
                                      "process", SourceProcessName,
                                      "connectionInstance", ProcessID,
                                      "disposition", DeviceCustomString3,
                                      "event type id", EventOutcome
                                  ),
                              DeviceEventClassID in ("File:500:1", "FileMalware:502:1"),
                              bag_pack(
                                      "connectionInstance", ProcessID,
                                      "signaturedata", DeviceCustomString4,
                                      "disposition", DeviceCustomString2
                                  ),
                              ""
                          )
                  )
      | invoke _ASIM_ResolveNetworkProtocol('Protocol')
      | extend NetworkProtocol = iff(NetworkProtocol == "Unassigned" and Protocol !in (63, 68, 99, 114, 253, 254), Protocol, NetworkProtocol)
      | lookup DirectionLookup on CommunicationDirection
      | lookup EventFieldsLookup on DeviceAction
      | extend
          EventStartTime = coalesce(unixtime_milliseconds_todatetime(start), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
          DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
          SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
          EventSeverity = case(
                      DvcAction == "Allow" and Disposition =~ "Malware",
                      "High",
                      DvcAction == "Deny" and Disposition =~ "Malware",
                      "Medium",
                      DvcAction == "Deny" and Disposition !~ "Malware",
                      "Low",
                      "Informational"
                  ),
          EventOriginalType = case(
                          DeviceEventClassID has "File:500:1",
                          "File Event",
                          DeviceEventClassID has "FileMalware:502:1",
                          "FileMalware Event",
                          Activity
                      ),
          FileContentType = FileType,
          HttpContentType = FileType,
          FileSize = tolong(FileSize),
          ThreatCategory = iff(Disposition =~ "Malware", Disposition, "")
      | extend Ip_device = iff(DeviceName matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", DeviceName, "")
      | extend
          DvcIpAddr = Ip_device,
          DeviceName = iff(isempty(Ip_device), DeviceName, "")
      | extend host = coalesce(DeviceName, Computer)
      | invoke _ASIM_ResolveDvcFQDN('host')
      | extend 
          EventCount = int(1),
          EventSchema = "WebSession",
          EventSchemaVersion = "0.2.6",
          EventType = "HTTPsession"
      | project-rename
          EventVendor = DeviceVendor,
          EventProduct = DeviceProduct,
          EventProductVersion = DeviceVersion,
          DstPortNumber = DestinationPort,
          SrcUsername = SourceUserName,
          DstUsername = DestinationUserName,
          Url = RequestURL,
          FileSHA256 = FileHash,
          SrcPortNumber = SourcePort,
          EventOriginalSeverity = LogSeverity,
          EventOriginalUid = ExtID,
          NetworkApplicationProtocol = ApplicationProtocol,
          EventUid = _ItemId,
          DvcId = DeviceExternalID,
          DvcOriginalAction = DeviceAction,
          HttpUserAgent = RequestClientApplication
      | extend
          SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
          SrcUserType = _ASIM_GetUserType(SrcUsername, ""),
          DstUsernameType = _ASIM_GetUsernameType(DstUsername),
          DstUserType = _ASIM_GetUserType(DstUsername, ""),
          HashType = "SHA256",
          DvcIdType = "Other",
          NetworkProtocolVersion=case(DstIpAddr has ".", "IPv4", DstIpAddr has ":", "IPv6", ""),
          IpAddr = SrcIpAddr,
          Hash = FileSHA256,
          User = SrcUsername,
          UserAgent = HttpUserAgent,
          EventEndTime = EventStartTime,
          Dst = DstIpAddr,
          Src = SrcIpAddr,
          Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr)
      | project-away
          Source*,
          Destination*,
          Device*,
          start,
          AdditionalExtensions,
          Activity,
          CommunicationDirection,
          Computer,
          EndTime,
          EventOutcome,
          FieldDevice*,
          Flex*,
          FileID,
          FileModificationTime,
          Old*,
          FileCreateTime,
          FilePermission,
          IndicatorThreatType,
          MaliciousIP*,
          Message,
          OriginalLogSeverity,
          Process*,
          Protocol,
          ReceivedBytes,
          SentBytes,
          Remote*,
          Request*,
          SimplifiedDeviceAction,
          StartTime,
          TenantId,
          ThreatDescription,
          ThreatSeverity,
          FilePath,
          FileType,
          Reason,
          ReceiptTime,
          ExternalID,
          ReportReferenceLink,
          Ip_*,
          host*,
          _ResourceId,
          NetworkProtocolNumber,
          Disposition,
          ThreatConfidence
  };
  parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionCiscoMeraki
// Description: This ASIM parser supports normalizing Cisco Meraki logs to the ASIM Web Session normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionCiscoMeraki(    ['disabled']:bool=false)
{
let ActionLookup = datatable (action: string, DvcAction: string, EventResult: string, EventSeverity: string)  [
  'allow', 'Allow', 'Success', 'Informational',
  'log', 'Allow', 'Success', 'Informational',
  'accept', 'Allow', 'Success', 'Informational',
  'block', 'Deny', 'Failure', 'Low',
  'deny', 'Deny', 'Failure', 'Low',
  'quarantine', 'Deny', 'Failure', 'Low'
  ];
  let parser=(disabled: bool=false) {
      let allData = union isfuzzy=true
          (
          meraki_CL
          | project-rename LogMessage =  Message
          ),
          (
          Syslog
          | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))
          | project-rename LogMessage =  SyslogMessage
          );
      let PreFilteredData = allData
          | where not(disabled) and (LogMessage has "urls" or LogMessage has_all("security_event", "security_filtering_file_scanned"))
          | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
          | extend
              LogType = tostring(Parser[2]),
              Substring = tostring(Parser[3])
          | where LogType in ("security_event", "urls");
      let SecurityEventData = PreFilteredData
          | where LogType == "security_event"
          | parse Substring with LogSubType: string " " temp_RestMessage: string
          | where LogSubType == "security_filtering_file_scanned"
          | parse-kv Substring as (disposition: string, action: string, sha256: string, name: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
          | parse Substring with * " sha256" fsha256: string " "restmessage: string
          | extend
              disposition = trim('"', disposition),
              action = trim('"', action),
              sha256 = trim('"', sha256),
              fsha256 = trim('"', fsha256),
              name = trim('"', name)
          | lookup ActionLookup on action;
      let UrlsData = PreFilteredData
          | where LogType == "urls"
          | parse Substring with * "request:" request: string " " urls: string;
      union SecurityEventData, UrlsData
      | parse-kv Substring as (src: string, dst: string, url: string, mac: string, agent: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
      | extend
          src = trim('"', src),
          dst = trim('"', dst)
      | parse src with *  "[" temp_srcip: string "]:" temp_srcport: string
      | parse dst with *  "[" temp_dstip: string "]:" temp_dstport: string
      | extend
          Epoch = tostring(Parser[0]),
          Device = tostring(Parser[1])
      | extend
          EventStartTime = unixtime_seconds_todatetime(tolong(split(Epoch, ".")[0]))
      | extend agent = trim("'", agent)
      | extend
          agent= trim('"', agent),
          mac = trim('"', mac),
          url = trim('"', url),
          urls = trim('"', urls)
      | extend Url = coalesce(url, urls)
      | extend
          EventResult=case(
                          LogType == "urls", "Success",
                          isempty(EventResult), "NA",
                          EventResult                        
                      ),
          EventSeverity=case(
                  DvcAction == "Deny" and disposition == "malicious",
                  "Medium",
                  DvcAction == "Allow" and disposition == "malicious",
                  "High",
                  isnotempty(EventSeverity), EventSeverity,
                  "Informational"
              )
      | extend SrcIpAddr = iff(
                              src has ".",
                              split(src, ":")[0], 
                              coalesce(temp_srcip, src)
                          )
      | extend SrcPortNumber = toint(
                            iff (
                                src has ".",
                                split(src, ":")[1],
                                temp_srcport
                            )
                        )
      | extend DstIpAddr = iff(
                              dst has ".",
                              split(dst, ":")[0], 
                              coalesce(temp_dstip, dst)
                          )
      | extend DstPortNumber = toint(
                            iff (
                                dst has ".",
                                split(dst, ":")[1],
                                temp_dstport
                            )
                        )
      | extend
          EventType = "HTTPsession",
          HttpUserAgent = agent,
          HttpRequestMethod = request,
          FileSHA256 = coalesce(sha256, fsha256),
          FileName = name,
          DvcMacAddr = mac,
          EventOriginalType = LogType,
          EventOriginalSubType = LogSubType,
          EventUid = _ResourceId 
      | invoke _ASIM_ResolveDvcFQDN('Device')
      | extend
          Dst = DstIpAddr,
          Src = SrcIpAddr,
          Dvc = DvcHostname,
          IpAddr = SrcIpAddr,
          UserAgent = HttpUserAgent,
          EventEndTime = EventStartTime
      | extend
          EventCount = int(1),
          EventProduct = "Meraki",
          EventVendor = "Cisco",
          EventSchema = "WebSession",
          EventSchemaVersion = "0.2.6"
      | project-away
          LogMessage,
          Parser,
          LogType,
          LogSubType,
          Epoch,
          Device,
          src,
          dst,
          mac,
          url,
          urls,
          disposition,
          action,
          request,
          name,
          sha256,
          fsha256,
          agent,
          restmessage,
          temp*,
          Substring,
          TenantId,
          SourceSystem,
          Computer,
          _ResourceId,
          MG,
          ManagementGroupName,
          RawData,
          EventTime,
          Facility,
          HostName,
          SeverityLevel,
          ProcessID,
          HostIP,
          ProcessName
  };
  parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionCitrixNetScaler
// Description: This ASIM parser supports normalizing Citrix NetScaler WAF(Web Application Firewall) logs to the ASIM Web Session normalized schema. Citrix NetScaler WAF(Web Application Firewall) events are captured through Citrix WAF (Web App Firewall) data connector which ingests web attack logs into Microsoft Sentinel in CEF format via Syslog.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionCitrixNetScaler(    ['disabled']:bool=false)
{
let EventSeverityLookup = datatable (DeviceCustomString4: string, EventSeverity: string)
[
    "EMERGENCY", "High",
    "ALERT", "High",
    "CRITICAL", "High",
    "ERROR", "Medium",
    "WARNING", "Low",
    "NOTICE", "Low",
    "INFORMATIONAL", "Informational",
    "DEBUG", "Informational",
    "INFO", "Informationl",
    "WARN", "Low",
    "ERR", "Medium"
];
let EventFieldsLookup = datatable(
    DeviceAction: string,
    DvcAction: string,
    EventResult: string
)
[
    "blocked", "Deny", "Failure",
    "not blocked", "Allow", "Success",
    "transformed", "Allow", "Success"
];
let parser = (disabled: bool=false) {
    CommonSecurityLog
    | where not(disabled)
    | where DeviceVendor == "Citrix" and DeviceProduct == "NetScaler"
    | where DeviceEventClassID == "APPFW" and Activity has_any ("APPFW_STARTURL", "APPFW_XML_cross-site scripting", "APPFW_SAFECOMMERCE", "APPFW_SAFECOMMERCE_XFORM", "APPFW_SIGNATURE_MATCH", "APPFW_XML_ERR_NOT_WELLFORMED", "APPFW_FIELDCONSISTENCY", "APPFW_SQL", "APPFW_BUFFEROVERFLOW_URL", "APPFW_BUFFEROVERFLOW_COOKIE", "APPFW_cross-site scripting", "APPFW_FIELDFORMAT", "APPFW_REFERER_HEADER", "APPFW_XSS")
    | parse-kv AdditionalExtensions as (method: string, geolocation: string, script: string) with (pair_delimiter=";", kv_delimiter="=")
    | parse RequestURL with * "://" host: string "/" *
    | extend
        DeviceAction = trim("[*]+", DeviceAction),
        Ip_host = iff(host matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", host, ""),
        Ip_computer = iff(Computer matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", Computer, ""),
        HttpHost = host
    | lookup EventFieldsLookup on DeviceAction
    | lookup EventSeverityLookup on DeviceCustomString4
    | extend
        host = iff(isempty(Ip_host), host, ""),
        Computer = iff(isempty(Ip_computer), Computer, ""),
        AdditionalFields = bag_pack(
                      "Script", script,
                      "Event ID", FieldDeviceCustomNumber1,
                      "HTTP Transaction ID", FieldDeviceCustomNumber2,
                      "Profile Name", DeviceCustomString1,
                      "PPE ID", DeviceCustomString2,
                      "Signature Violation Category", DeviceCustomString6
                  )
    | invoke _ASIM_ResolveDvcFQDN('Computer')
    | invoke _ASIM_ResolveDstFQDN('host')
    | extend
        DstIpAddr = tostring(split(Ip_host, ":")[0]),
        DstPortNumber = toint(split(Ip_host, ":")[1]),
        DvcIpAddr = tostring(split(Ip_computer, ":")[0])
    | extend 
        DstHostname = coalesce(DstIpAddr, DstHostname)
    | extend
        EventProduct = "NetScaler",
        EventVendor = "Citrix",
        EventCount = int(1),
        EventStartTime = TimeGenerated,
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-rename
        EventUid = _ItemId,
        SrcIpAddr = SourceIP,
        DvcOriginalAction = DeviceAction,
        EventMessage = Message,
        EventOriginalSeverity = DeviceCustomString4,
        EventProductVersion = DeviceVersion,
        HttpRequestMethod = method,
        NetworkSessionId = DeviceCustomString3,
        SrcPortNumber = SourcePort,
        Url = RequestURL,
        EventOriginalType = DeviceEventClassID,
        EventOriginalSubType = Activity,
        SrcGeoCountry = geolocation
    | extend
        EventEndTime = EventStartTime,
        Dvc = coalesce(DvcFQDN, DvcHostname, DvcIpAddr),
        Src = SrcIpAddr,
        Dst = DstHostname,
        Hostname = DstHostname,
        IpAddr = SrcIpAddr,
        SessionId = NetworkSessionId
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        Computer,
        EndTime,
        EventOutcome,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        Indicator*,
        Ip_*,
        LogSeverity,
        _ResourceId,
        host,
        script,
        ExtID
};
parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionF5ASM
// Description: This ASIM parser supports normalizing F5 Big IP ASM(Application Security Manager) logs to the ASIM Web Session normalized schema. F5 Big IP ASM events are captured through F5 Network data connector which ingests attack events and data into Microsoft Sentinel in CEF format over Syslog using F5's technology partner Arcsight.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionF5ASM(    ['disabled']:bool=false)
{
let DvcActionLookup = datatable (DeviceAction: string, DvcAction: string)
[
    "Blocked", "Deny",
    "blocked", "Deny",
    "Passed", "Allow",
    "passed", "Allow",
    "Alerted", "Deny",
    "alerted", "Deny"
];
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
[
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Medium",
    "5", "Medium",
    "6", "Medium",
    "7", "High",
    "8", "High",
    "9", "High",
    "10", "High"
];
let parser=(disabled: bool=false) {
    let DeviceEventClassIDList = dynamic(["Brute Force Attack", "IP Enforcer Attack", "Web Scraping Attack", "DoS Attack"]);
    let AllData = CommonSecurityLog
        | where not(disabled)
        | where DeviceVendor == "F5" and DeviceProduct == "ASM"
        | invoke _ASIM_ResolveDvcFQDN('DeviceName')
        | project-rename DvcIpAddr = DeviceAddress;
    let GeneralEnforcementData = AllData
        | where ((substring(DeviceEventClassID, 0, 1) == "2" and strlen(DeviceEventClassID) == 9) or DeviceEventClassID == Activity) 
              and DeviceEventClassID !in (DeviceEventClassIDList)
        | parse-kv DeviceCustomString3 as (Host: string, ["User-Agent"]: string, Cookie: string, Referer: string) with (pair_delimiter="\\r\\n", kv_delimiter=":")
        | parse DeviceCustomString3 with * "HTTP/" HttpVersion: string "\\r\\n" rest: string
        | extend
            EventResultDetails = tostring(FieldDeviceCustomNumber1)
        | project-rename 
            DstIpAddr = DestinationIP,
            DstPortNumber = DestinationPort,
            EventOriginalUid = ExtID,
            HttpRequestMethod = RequestMethod,
            NetworkApplicationProtocol = ApplicationProtocol,
            HttpCookie = Cookie,
            HttpHost = Host,
            HttpReferrer = Referer,
            HttpUserAgent = ['User-Agent'],
            HttpRequestXff = DeviceCustomString5
        | extend
            EventResult = iff(toint(EventResultDetails) >= 400 or DeviceAction =~ "blocked", "Failure", "Success"),
            HttpStatusCode = EventResultDetails,
            AdditionalFields = bag_pack(
                      "Full Request", DeviceCustomString3, 
                      "Policy Name", DeviceCustomString1,
                      "Attack Type", DeviceCustomString4,
                      "Policy Apply Date", DeviceCustomDate1,
                      "Web Application Name", DeviceCustomString2
                  ),
            Dst = DstIpAddr;
    let AnomalyDetectionData = AllData
        | where DeviceEventClassID in (DeviceEventClassIDList)
        | extend
            EventResult = iff(DeviceAction =~ "passed", "Success", "Failure"),
            AdditionalFields = bag_pack(
                      "Detection Average", FieldDeviceCustomNumber1,
                      "Dropped Requests", FieldDeviceCustomNumber2,
                      "Attack Status", DeviceCustomString4,
                      "Detection Mode", DeviceCustomString5,
                      "Web Application Name", DeviceCustomString2
                  ),
            ThreatId = tostring(FieldDeviceCustomNumber3)
        | project-away ApplicationProtocol, ExtID;
    union GeneralEnforcementData, AnomalyDetectionData
    | lookup DvcActionLookup on DeviceAction
    | lookup EventSeverityLookup on LogSeverity
    | extend 
        EventStartTime = todatetime(ReceiptTime),
        EventOriginalType = iff(isempty(toint(DeviceEventClassID)), DeviceEventClassID, Activity)
    | extend
        EventCount = int(1),
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-rename 
        EventProduct = DeviceProduct,
        EventVendor = DeviceVendor,
        EventUid = _ItemId,
        EventOriginalSeverity = LogSeverity,
        DvcOriginalAction = DeviceAction,
        Url = RequestURL,
        SrcIpAddr = SourceIP,
        SrcGeoCountry = DeviceCustomString6,
        SrcPortNumber = SourcePort,
        SrcUserId = SourceUserID,
        SrcUsername = SourceUserName,
        EventMessage = Message,
        EventProductVersion = DeviceVersion,
        RuleName = DeviceCustomString1
    | extend 
        SrcUserIdType = iff(isnotempty(SrcUserId), "Other", ""),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        SrcUserType = _ASIM_GetUserType(SrcUsername, SrcUserId),
        Dvc = coalesce(DvcFQDN, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        Src = SrcIpAddr,
        IpAddr = SrcIpAddr,
        UserAgent = HttpUserAgent,
        User = SrcUsername,
        Rule = RuleName
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        Activity,
        CommunicationDirection,
        Computer,
        EndTime,
        EventOutcome,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        IndicatorThreatType,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        ThreatDescription,
        ThreatSeverity,
        ThreatConfidence,
        Reason,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        rest,
        _ResourceId
};
parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionFortinetFortiGate
// Description: This ASIM parser supports filtering and normalizing Fortinet FortiGate logs produced by the Microsoft Sentinel Fortinet connector to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionFortinetFortiGate(    ['disabled']:bool=false)
{
let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string)
[
  "passthrough","Allow","Success"
  , "blocked","Deny","Failure"
];
// -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels
let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
[
  "1", "Informational", // Debug
  "2", "Informational", // Information
  "3", "Informational", // Notification
  "4", "Low", // Warning
  "5", "Low", // Error
  "6", "High", // Critical
  "7", "Medium", // Alert
  "8", "High" // Emergency
];
let parser=(disabled:bool=false){
  CommonSecurityLog
  | where not(disabled)
  | where DeviceVendor  == "Fortinet" 
      and DeviceProduct startswith "Fortigate"
      and Activity has_all ('webfilter', 'utm')
  | extend 
      EventResultDetails = "NA"
  | lookup EventLookup on DeviceAction 
  | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, EventResultDetails, DvcAction, RequestURL, RequestContext, DestinationHostName, SourceHostName, SourceUserName, DestinationUserName
  | project-rename 
    Url                     = RequestURL
    , UrlCategory           = RequestContext
    , DstBytes              = ReceivedBytes
    , DstInterfaceName      = DeviceOutboundInterface
    , DstIpAddr             = DestinationIP
    , DstPortNumber         = DestinationPort
    , DvcHostname           = Computer
    , EventMessage          = Activity
    , EventOriginalSeverity = LogSeverity
    , EventProduct          = DeviceProduct
    , EventProductVersion   = DeviceVersion
    , SrcBytes              = SentBytes
    , SrcInterfaceName      = DeviceInboundInterface
    , SrcIpAddr             = SourceIP
    , SrcPortNumber         = SourcePort
    , DvcId                 = DeviceExternalID
    , EventUid              = _ItemId
    , DstHostname           = DestinationHostName
    , SrcHostname           = SourceHostName
    , SrcUsername           = SourceUserName
    , DstUsername           = DestinationUserName
  | invoke _ASIM_ResolveNetworkProtocol ('Protocol')
  | extend 
      DstUsernameType = _ASIM_GetUsernameType(DstUsername)
      , SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
  | project-rename DvcOriginalAction = DeviceAction
  | parse-kv AdditionalExtensions as (
          FortinetFortiGatestart:datetime,
          FortinetFortiGatesrcintfrole:string,
          FortinetFortiGatedstintfrole:string,
          FortinetFortiGateexternalID:string,
          FortinetFortiGatepolicyid:int,
          FortinetFortiGatedstcountry:string,
          FortinetFortiGatesrccountry:string,
          FortinetFortiGatecrscore:string,
          FortinetFortiGateduration:int,
          FortinetFortiGatesentpkt:long,
          FortinetFortiGatercvdpkt:long,
          ['ad.referralurl']:string,
          ['ad.httpmethod']:string,
          ['ad.agent']:string
      ) with (pair_delimiter=';', kv_delimiter='=')
  | parse AdditionalExtensions with * "x-forwarded-for=" HttpRequestXff:string ";" *
  | project-rename
      HttpReferrer            = ['ad.referralurl'],
      HttpRequestMethod       = ['ad.httpmethod'],
      HttpUserAgent           = ['ad.agent'],
      EventStartTime          = FortinetFortiGatestart,
      SrcZone                 = FortinetFortiGatesrcintfrole,
      DstZone                 = FortinetFortiGatedstintfrole,
      NetworkSessionId        = FortinetFortiGateexternalID,
      RuleNumber              = FortinetFortiGatepolicyid,
      NetworkDuration         = FortinetFortiGateduration,
      DstGeoCountry           = FortinetFortiGatedstcountry,
      SrcGeoCountry           = FortinetFortiGatesrccountry,
      ThreatOriginalRiskLevel = FortinetFortiGatecrscore,
      SrcPackets              = FortinetFortiGatesentpkt,
      DstPackets              = FortinetFortiGatercvdpkt
  | parse AdditionalExtensions with * "Method=" temp_HttpRequestMethod "|User-Agent=" temp_HttpUserAgent ";" *
  | extend 
      HttpRequestMethod = coalesce(temp_HttpRequestMethod,HttpRequestMethod),
      HttpUserAgent = coalesce(temp_HttpUserAgent,HttpUserAgent)
  | project-away temp_*
  | extend 
    EventCount               = int(1)
    , EventSchema            = "WebSession"
    , EventSchemaVersion     = "0.2.6"
    , EventType              = "HTTPsession"
    , EventVendor            = "Fortinet"
    , DvcIdType              = "Other"
    , NetworkBytes           = DstBytes + SrcBytes
    , EventEndTime           = TimeGenerated
    , EventStartTime         = coalesce(EventStartTime, TimeGenerated)
    , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
        , DstIpAddr contains ":", "IPv6"
        , "")
    , NetworkPackets         = DstPackets + SrcPackets
    , UserAgent              = HttpUserAgent
    , Dvc                    = DvcHostname
    , User                   = SrcUsername
    , Hostname               = DstHostname
  | lookup SeverityLookup on EventOriginalSeverity
  | extend 
      Src       = SrcIpAddr,
      Dst       = DstIpAddr,
      SessionId = NetworkSessionId,
      IpAddr    = SrcIpAddr,
      Duration  = NetworkDuration,
      Rule      = tostring(RuleNumber)
  | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber
};
parser (disabled=disabled)
}



//
// Function Name: ASimWebSessionIIS
// Description: This ASIM parser supports normalizing IIS logs produced to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionIIS(    ['disabled']:bool=false)
{
let parser = (disabled: bool = false)
      {
      W3CIISLog
      | where not(disabled)
      | extend
              EventResult = iff ( toint(scStatus) < 400, "Success", "Failure"),
              EventResultDetails = tostring(scStatus), 
              csUriQuery = iff(csUriQuery == "-", "", csUriQuery),
              csUserName = iff(csUserName == "-", "", csUserName),
              HttpVersion = iff((csVersion has "HTTP"), split(csVersion, "/")[1], ""), // there is a limited chance that something connects over non-HTTP
              HttpHost = iff (sSiteName in ("Default Web Site", "-"), "", sSiteName)
      | project-rename 
              HttpRequestMethod = csMethod,
              User = csUserName, //probably won't have this one often
              Dvc = Computer,
              Dst = sIP,
              Src = cIP,
              UserAgent = csUserAgent,
              ThreatCategory = IndicatorThreatType,
              SrcGeoCountry = RemoteIPCountry,
              SrcGeoLatitude = RemoteIPLatitude,
              SrcGeoLongitude = RemoteIPLongitude,
              ThreatOriginalConfidence = Confidence,
              ThreatIpAddr = MaliciousIP,
              EventReportUrl = ReportReferenceLink,
              EventUid = _ItemId,
              DvcId = _ResourceId
      | extend
              EventOriginalSeverity = tostring(Severity),
              ThreatIsActive = tobool(IsActive),
              ThreatFirstReportedTime = todatetime(FirstReportedDateTime),
              ThreatLastReportedTime = todatetime(LastReportedDateTime),
              SrcUsername = iff ( User == "-", "", User),
              HttpReferrer = iff ( csReferer == "-", "", csReferer),
              DvcIdType = "AzureResourceId"
      | project-away IsActive, FirstReportedDateTime, LastReportedDateTime, Severity, sSiteName
      | extend 
              SrcUsernameType = _ASIM_GetUsernameType (SrcUsername),
              DstNatIpAddr = iff(csHost <> "", Dst, ""),
              EventType = 'WebServerSession',            
              EventVendor = 'Microsoft',
              EventSchemaVersion = '0.2.6',
              EventSchema = 'WebSession', 
              EventProduct = 'IIS',
              DvcOs = 'Windows',
              EventCount = int(1),
              SrcIpAddr = Src,
              IpAddr = Src,
              HttpUserAgent = UserAgent,
              HttpStatusCode = tostring(EventResultDetails),
              EventStartTime = ( (TimeGenerated) - (TimeTaken * 1ms)), // TimeTaken field is in Milliseconds 
              EventEndTime =  TimeGenerated,
              EventSeverity = iff(EventResult == "Success", "Low", "Informational"),
              Url = iff(csUriQuery == "", csUriStem, strcat(csUriStem,"?",csUriQuery)),
              sPort = tostring(sPort),
              HttpHost = iff ( HttpHost == "-", "", HttpHost),
              csHost = iff ( csHost == "-", "", csHost),  //remove empty values
              EventOriginalResultDetails = iff(scSubStatus <> "0", strcat (scStatus, ".", scSubStatus), scStatus)
      | extend 
              ipv6_parts = extract_all (@'^\[(.+)\](?:\:(\d+))?$',csHost)[0],
              ipv4_parts = extract_all (@'^(\d+\.\d+\.\d+\.\d+)(?:\:(\d+))?$',csHost)[0],
              host_parts = extract_all (@'^([^\\\d:]+)(?:\:(\d+))?$',csHost)[0]
      | extend         
              DstIpAddr = tostring(coalesce(ipv4_parts[0], ipv6_parts[0])),
              DstPortNumber = toint(coalesce(ipv4_parts[1], ipv6_parts[1], host_parts[1])),
              HttpHost = tostring(coalesce(host_parts[0], HttpHost))
      | project-away ipv4_parts, ipv6_parts, host_parts              
      | extend
          DstHostname = HttpHost,
          Hostname = HttpHost
      | extend 
               ThreatField = case(
                                  ThreatIpAddr <> "" and ThreatIpAddr == SrcIpAddr, "SrcIpAddr"
                                 ,ThreatIpAddr <> "" and ThreatIpAddr == DstIpAddr, "DstIpAddr"
                                 ,"")
      | project-away 
              AdditionalInformation,
              AzureDeploymentID,
              Date,
              Description,
              DvcOs,
              FileOffset,
              FileUri,
              MG, 
              ManagementGroupName,
              Role*,
              sComputerName,
              SourceSystem,
              TLPLevel,
              TenantId,
              TimeTaken,
              Time,
              cs*,
              sPort,
              sc*,
              StorageAccount
    };
    parser  (disabled=disabled)
}



//
// Function Name: ASimWebSessionNative
// Description: This ASIM parser supports normalizing the native Microsoft Sentinel Web Session table (ASimWebSessionLogs) to the ASIM WebSession normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionNative(    ['disabled']:bool=false)
{
let parser=(disabled:bool=false) 
{
  ASimWebSessionLogs  | where not(disabled)
    // 
    // -- Schema fixed
    | extend
        FileSize = tolong(FileSize)
    //
    // -- Log Analytics global fields renaming
    | project-rename
        EventUid          = _ItemId,
        DvcScopeId        = _SubscriptionId
    //
    // -- ASIM Global fields
    | extend          
        EventSchema       = "WebSession"
    | extend
        //
        // -- Default values
        EventEndTime      = coalesce (EventEndTime, TimeGenerated),
        EventStartTime    = coalesce (EventStartTime, TimeGenerated),
        //
        // -- Multi-source aliases
        Dvc = iff (EventType == 'HTTPSession',
          coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct)),
          coalesce (DvcFQDN, DvcHostname, DstFQDN, DstHostname, DvcIpAddr, DstIpAddr, DvcId, DstDvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct))
        ),
        Dst               = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),
        Src               = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
        Rule              = coalesce(RuleName, tostring(RuleNumber)),
        //
        // -- Aliases which depend on EventType
        Hostname = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), SrcHostname, DstHostname),
        IpAddr = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), DstIpAddr, SrcIpAddr),
        //
        // -- Simple aliases
        Duration          = NetworkDuration,
        SessionId         = NetworkSessionId,
        User              = SrcUsername,
        HttpStatusCode    = EventResultDetails,
        UserAgent         = HttpUserAgent
        // --
        // -- Aliased fields not implemented in ASimWebSessionLogs yet 
        //InnerVlanId     = SrcVlanId,
        //OuterVlanId     = DstVlanId,
        //DvcInterface    = coalesce(DvcInterface, DvcInboundInterface, DvcOutboundInterface), 
    | project-away
        TenantId, SourceSystem, _ResourceId
};
parser  (disabled=disabled)
}



//
// Function Name: ASimWebSessionPaloAltoCEF
// Description: This ASIM parser supports normalizing Palo Alto PanOS threat event logs delivered using CEF to the ASIM WebSession normalized schema. The Palo Alto threat events are generated by the Palo Alto URL filtering module and collected using the Palo Alto Networks connectors, Common Event Format (CEF) via AMA connector, or the Common Event Format (CEF) via Legacy Agent connector to the CommonSecurityLog table.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionPaloAltoCEF(    ['disabled']:bool=false)
{
let parser=(disabled:bool=false){
    let EventLookup=datatable(DeviceAction:string, DvcAction:string,EventResult:string,HttpStatusCode:string)
    [
        "alert", "Allow", "Success","200"
        , "allow", "Allow", "Success", "200"
        , "continue", "Allow", "Success", "200"
        , "override", "Allow", "Success", "200"
        , "block-continue", "Allow", "Partial", "200"
        , "block-url", "Deny", "Failure", "503"
        , "block-override", "Deny", "Failure", "302"
        , "override-lockout", "Deny", "Failure","503"
        , "reset client", "Reset Source", "Failure", "503"
        , "reset server", "Reset Destination", "Failure", "503"
        , "reset both", "Reset", "Failure", "503"
        , "deny", "Deny", "Failure", "503"
        , "drop", "Drop", "Failure", "503"
        , "drop ICMP", "Drop ICMP", "Failure", "503"
    ];
    let SeverityLookup=datatable(LogSeverity:string,EventSeverity:string)
    [   1, "Informational" 
        , 2, "Low" 
        , 3, "Medium"
        , 4, "Medium" 
        , 5, "High"
    ];
    CommonSecurityLog
    | where DeviceVendor == "Palo Alto Networks"
        and DeviceProduct == "PAN-OS"
        and Activity == "THREAT"
        and DeviceEventClassID == "url"
    | parse-kv AdditionalExtensions as (PanOSXForwarderfor:string, PanXFFIP:string, PanOSReferer:string, PanOSRuleUUID:string, PanSrcHostname:string, PanSrcMac:string, PanSrcDeviceCat:string, PanSrcDAG:string, PanOSSrcUUID:string, PanSrcDeviceProf:string, PanSrcDeviceModel:string, PanSrcDeviceVendor:string, PanSrcDeviceOS:string, PanSrcDeviceOSv:string, PanDstHostname:string, PanDstMac:string, PanDstDeviceCat:string, PanDstDAG:string, PanOSDstUUID:string, PanDstDeviceProf:string, PanDstDeviceModel:string, PanDstDeviceVendor:string, PanDstDeviceOS:string, PanDstDeviceOSv:string) with (pair_delimiter=';', kv_delimiter='=')
    | extend 
        HttpRequestXff            = coalesce(PanOSXForwarderfor, PanXFFIP)
    | lookup EventLookup on DeviceAction
    | lookup SeverityLookup on LogSeverity
    | project-rename 
        DvcHostname                 = Computer
        , HttpReferrer                = PanOSReferer
        , DstMacAddr                = PanDstMac
        , SrcMacAddr                = PanSrcMac
        , DstHostname               = PanDstHostname
        , SrcHostname               = PanSrcHostname
        , Url                       = RequestURL
        , DvcId                     = DeviceExternalID
        , SrcZone                   = DeviceCustomString4
        , DstZone                   = DeviceCustomString5
        , UrlCategory               = DeviceCustomString2
        , DvcOriginalAction         = DeviceAction
        , EventUid                  = _ItemId
        , EventOriginalSeverity     = LogSeverity
        , EventProductVersion       = DeviceVersion
        , DvcInboundInterface       = DeviceInboundInterface
        , DvcOutboundInterface      = DeviceOutboundInterface
        , DstIpAddr                 = DestinationIP
        , DstPortNumber             = DestinationPort
        , SrcIpAddr                 = SourceIP
        , SrcPortNumber             = SourcePort
        , SrcUsername               = SourceUserName
        , DstUsername               = DestinationUserName
        , NetworkRuleName           = DeviceCustomString1
        , ThreatOriginalConfidence  = ThreatConfidence
        , DstNatIpAddr              = DestinationTranslatedAddress
        , DstNatPortNumber          = DestinationTranslatedPort
        , SrcNatIpAddr              = SourceTranslatedAddress
        , SrcNatPortNumber          = SourceTranslatedPort
        , HttpUserAgent             = RequestClientApplication
    | extend
        Dvc                         = DvcHostname
        , DvcIdType                 = "Other"
        , EventType                 = "HTTPsession"
        , EventSchema               = "WebSession"
        , EventSchemaVersion        = "0.2.5"
        , EventVendor               = "Palo Alto"
        , EventProduct              = "PanOS"
        , EventStartTime            = TimeGenerated
        , EventEndTime              = TimeGenerated
        , HttpRequestMethod         = toupper(RequestMethod)
        , EventResultDetails        = "NA"
        , HttpContentFormat         = RequestContext
        , DstFQDN                   = iif(Url contains ":", split(tostring(split(trim('"',Url),"/")[0]),":")[0],tostring(split(trim('"',Url),"/")[0]))
        , DstDomainType             = "FQDN"
        , Src                       = SrcIpAddr
        , SrcUsernameType           = "Windows"
        , DstUsernameType           = "Windows"
        , NetworkProtocolVersion    = case(
            DstIpAddr contains "."  , "IPv4"
            , DstIpAddr contains ":", "IPv6"
            , "")
        , NetworkDirection          = case(
            FlexString2 == "client-to-server", "Outbound"
            , FlexString2 == "server-to-client", "Inbound"
            , "")
        , IpAddr                    = SrcIpAddr
        , NetworkProtocol           = toupper(Protocol)
        , User                      = SrcUsername
        , Rule                      = NetworkRuleName
        , NetworkSessionId          = tostring(DeviceCustomNumber1)
        , DvcInterface              = DvcInboundInterface
        , Hostname                  = DstHostname
        , UserAgent                 = HttpUserAgent
    | extend 
        SessionId                 = NetworkSessionId
        , ThreatField               = case(
          isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr"
          , isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr"
          , "")
        , Dst                       = DstFQDN
    | extend 
        ThreatIpAddr                = case(
          ThreatField == "SrcIpAddr", SrcIpAddr
        , ThreatField == "DstIpAddr", DstIpAddr
        , "")
    | project DeviceVendor, Dst, DstDomainType, DstFQDN, DstHostname, DstIpAddr, DstMacAddr, DstNatIpAddr, DstNatPortNumber, DstPortNumber, DstUsername, DstUsernameType, DstZone, Dvc, DvcAction, DvcHostname, DvcId, DvcIdType, DvcInboundInterface, DvcInterface, DvcOriginalAction, DvcOutboundInterface, EventCount, EventEndTime, EventOriginalSeverity, EventProduct, EventProductVersion, EventResult, EventResultDetails, EventSchema, EventSchemaVersion, EventSeverity, EventStartTime, EventType, EventUid, EventVendor, Hostname, HttpContentFormat, HttpRequestMethod, HttpRequestXff, HttpStatusCode, IpAddr, NetworkDirection, NetworkProtocol, NetworkProtocolVersion, NetworkRuleName, NetworkSessionId, Protocol, RequestContext, RequestMethod, Rule, SessionId, Src, SrcHostname, SrcIpAddr, SrcMacAddr, SrcNatIpAddr, SrcNatPortNumber, SrcPortNumber, SrcUsername, SrcUsernameType, SrcZone, ThreatField, ThreatIpAddr, ThreatOriginalConfidence, TimeGenerated, Type, Url, UrlCategory, User, HttpUserAgent, UserAgent
};
parser (disabled)
}



//
// Function Name: ASimWebSessionPaloAltoCortexDataLake
// Description: This ASIM parser supports normalizing Palo Alto Cortex Data Lake logs to the ASIM Web Session normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionPaloAltoCortexDataLake(    ['disabled']:bool=false)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
[
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Low",
    "5", "Low",
    "6", "Medium",
    "7", "Medium",
    "8", "Medium",
    "9", "High",
    "10", "High"
];
let EventLookup=datatable(
    DeviceAction: string,
    DvcAction: string,
    EventResult: string
)
    [
    "alert", "Allow", "Success",
    "continue", "Allow", "Success",
    "override", "Allow", "Success",
    "block-continue", "Allow", "Partial",
    "block-url", "Deny", "Failure",
    "block-override", "Deny", "Failure",
    "override-lockout", "Deny", "Failure",
];
let ThreatRiskLevelLookup = datatable(PanOSApplicationRisk: string, ThreatRiskLevel: int)
    [
    "1", 20,
    "2", 40,
    "3", 60,
    "4", 80,
    "5", 100
];
let parser = (disabled: bool=false) {
    CommonSecurityLog
    | where not(disabled)
        and DeviceVendor == "Palo Alto Networks" and DeviceProduct == "LF"
        and DeviceEventClassID == "THREAT" and Activity == "url"
    | parse-kv AdditionalExtensions as (PanOSDestinationUUID: string, PanOSDestinationLocation: string, PanOSDestinationDeviceMac: string, PanOSSourceUUID: string, PanOSSourceDeviceMac: string, PanOSReferer: string, PanOSIsClienttoServer: string, PanOSSourceDeviceHost: string, PanOSDestinationDeviceHost: string, start: string, PanOSApplicationCategory: string, PanOSApplicationSubcategory: string, PanOSApplicationTechnology: string, PanOSDestinationDeviceOS: string, PanOSDestinationDeviceOSFamily: string, PanOSDestinationDeviceOSVersion: string, PanOSHostID: string, PanOSHTTPHeaders: string, PanOSInlineMLVerdict: string, PanOSInboundInterfaceDetailsType: string, PanOSOutboundInterfaceDetailsType: string, PanOSParentSessionID: string, PanOSContainerName: string, PanOSContainerNameSpace: string, PanOSHTTPRefererFQDN: string, PanOSHTTPRefererPort: string, PanOSHTTPRefererProtocol: string, PanOSHTTPRefererURLPath: string, PanOSRuleUUID: string, PanOSURLCategoryList: string, PanOSURLDomain: string, PanOSURLCounter: string, PanOSUsers: string, PanOSVendorSeverity: string, ["PanOSX-Forwarded-For"]: string, ["PanOSX-Forwarded-ForIP"]: string, PanOSIsSaaSApplication: string, PanOSLogSource: string, PanOSSourceLocation: string, PanOSCortexDataLakeTenantID: string, PanOSApplicationRisk: string) with (pair_delimiter=";", kv_delimiter="=")
    | invoke _ASIM_ResolveDvcFQDN('DeviceName')
    | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')
    | invoke _ASIM_ResolveDstFQDN('PanOSDestinationDeviceHost')
    | lookup EventSeverityLookup on LogSeverity
    | lookup EventLookup on DeviceAction
    | lookup ThreatRiskLevelLookup on PanOSApplicationRisk
    | extend
        EventStartTime = todatetime(coalesce(start, ReceiptTime)),
        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
        DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
        HttpRequestMethod = toupper(RequestMethod),
        NetworkProtocol = toupper(Protocol),
        NetworkSessionId = tostring(FieldDeviceCustomNumber1),
        SrcDomain = coalesce(SourceNTDomain, SrcDomain),
        DstDomain = coalesce(DestinationNTDomain, DstDomain),
        AdditionalFields = bag_pack(
                      "DirectionOfAttack",
                      FlexString2,
                      "VirtualLocation",
                      DeviceCustomString3,
                      "PanOSApplicationCategory",
                      PanOSApplicationCategory,
                      "PanOSApplicationSubcategory",
                      PanOSApplicationSubcategory,
                      "PanOSApplicationTechnology",
                      PanOSApplicationTechnology,
                      "PanOSDestinationDeviceOS",
                      PanOSDestinationDeviceOS,
                      "PanOSDestinationDeviceOSFamily",
                      PanOSDestinationDeviceOSFamily,
                      "PanOSDestinationDeviceOSVersion",
                      PanOSDestinationDeviceOSVersion,
                      "PanOSHostID",
                      PanOSHostID,
                      "PanOSHTTPHeaders",
                      PanOSHTTPHeaders,
                      "PanOSInlineMLVerdict",
                      PanOSInlineMLVerdict,
                      "PanOSInboundInterfaceDetailsType",
                      PanOSInboundInterfaceDetailsType,
                      "PanOSOutboundInterfaceDetailsType",
                      PanOSOutboundInterfaceDetailsType,
                      "PanOSParentSessionID",
                      PanOSParentSessionID,
                      "PanOSContainerName",
                      PanOSContainerName,
                      "PanOSContainerNameSpace",
                      PanOSContainerNameSpace,
                      "PanOSHTTPRefererFQDN",
                      PanOSHTTPRefererFQDN,
                      "PanOSHTTPRefererPort",
                      PanOSHTTPRefererPort,
                      "PanOSHTTPRefererProtocol",
                      PanOSHTTPRefererProtocol,
                      "PanOSHTTPRefererURLPath",
                      PanOSHTTPRefererURLPath,
                      "PanOSRuleUUID",
                      PanOSRuleUUID,
                      "PanOSURLCategoryList",
                      PanOSURLCategoryList,
                      "PanOSURLDomain",
                      PanOSURLDomain,
                      "PanOSURLCounter",
                      PanOSURLCounter,
                      "PanOSUsers",
                      PanOSUsers,
                      "PanOSVendorSeverity",
                      PanOSVendorSeverity,
                      "PanOSX-Forwarded-For",
                      ["PanOSX-Forwarded-For"],
                      "PanOSX-Forwarded-ForIP",
                      ["PanOSX-Forwarded-ForIP"],
                      "PanOSLogSource",
                      PanOSLogSource
                  ),
        HttpContentType = RequestContext
    | project-rename
        DvcIpAddr = Computer,
        EventUid = _ItemId,
        DstDvcId = PanOSDestinationUUID,
        DstGeoCountry = PanOSDestinationLocation,
        DstMacAddr = PanOSDestinationDeviceMac,
        DstNatIpAddr = DestinationTranslatedAddress,
        DstNatPortNumber = DestinationTranslatedPort,
        DstPortNumber = DestinationPort,
        DstUsername = DestinationUserName,
        DstZone = DeviceCustomString5,
        DvcId = DeviceExternalID,
        DvcOriginalAction = DeviceAction,
        EventOriginalSeverity = LogSeverity,
        EventOriginalType = DeviceEventClassID,
        EventOriginalUid = ExtID,
        EventProductVersion = DeviceVersion,
        HttpContentFormat = RequestContext,
        HttpReferrer = PanOSReferer,
        RuleName = DeviceCustomString1,
        SrcDvcId = PanOSSourceUUID,
        SrcMacAddr = PanOSSourceDeviceMac,
        SrcNatIpAddr = SourceTranslatedAddress,
        SrcNatPortNumber = SourceTranslatedPort,
        SrcPortNumber = SourcePort,
        SrcUsername = SourceUserName,
        SrcZone = DeviceCustomString4,
        Url = RequestURL,
        UrlCategory = DeviceCustomString2,
        EventOriginalSubType = Activity,
        DvcOutboundInterface = DeviceOutboundInterface,
        DvcInboundInterface = DeviceInboundInterface,
        DstUserId = DestinationUserID,
        SrcUserId = SourceUserID,
        HttpUserAgent = RequestClientApplication,
        SrcGeoCountry = PanOSSourceLocation,
        DvcScopeId = PanOSCortexDataLakeTenantID,
        SrcAppName = ApplicationProtocol,
        ThreatOriginalRiskLevel = PanOSApplicationRisk
    | extend
        Dst = coalesce(DstFQDN, DstDvcId, DstHostname, DstIpAddr),
        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        Src = coalesce(SrcFQDN, SrcDvcId, SrcHostname, SrcIpAddr),
        NetworkProtocolVersion = case(
                            DstIpAddr contains ".",
                            "IPv4",       
                            DstIpAddr contains ":",
                            "IPv6", 
                            ""
                        ),
        NetworkDirection = iff(PanOSIsClienttoServer == "true", "Outbound", "Inbound"),
        Rule = RuleName,
        SrcUserType = _ASIM_GetUserType(SrcUsername, SrcUserId),
        DstUserType = _ASIM_GetUserType(DstUsername, DstUserId),
        User = SrcUsername,
        Hostname = DstHostname,
        IpAddr = SrcIpAddr,
        SessionId = NetworkSessionId,
        UserAgent = HttpUserAgent,
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        SrcDvcIdType = iff(isnotempty(SrcDvcId), "Other", ""),
        DstDvcIdType = iff(isnotempty(DstDvcId), "Other", ""),
        SrcDomainType = iff(isnotempty(SourceNTDomain), "Windows", SrcDomainType),
        DstDomainType = iff(isnotempty(DestinationNTDomain), "Windows", DstDomainType),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        DstUsernameType = _ASIM_GetUsernameType(DstUsername),
        SrcUserIdType = iff(isnotempty(SrcUserId), "UID", ""),
        DstUserIdType = iff(isnotempty(DstUserId), "UID", ""),
        SrcAppType = case(
                isnotempty(SrcAppName) and PanOSIsSaaSApplication == "true",
                "SaaS Application",
                isnotempty(SrcAppName) and PanOSIsSaaSApplication == "false",
                "Other",
                ""
            )
    | extend
        EventProduct = "Cortex Data Lake",
        EventVendor = "Palo Alto",
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        EventOutcome,
        PanOS*,
        Protocol,
        ExternalID,
        Message,
        start,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        Indicator*,
        _ResourceId,
        ThreatConfidence,
        ThreatDescription,
        ThreatSeverity
};
parser(disabled=disabled)
}



//
// Function Name: ASimWebSessionSonicWallFirewall
// Description: This ASIM parser supports normalizing SonicWall SonicOS ArcSight-formatted syslog received via the SonicWall Firewall/Common Event Format data connectors and ingested to the CommonSecurityLog table by Microsoft Sentinel to the ASIM WebSession normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionSonicWallFirewall(    ['disabled']:bool=false)
{
let parser=(disabled:bool=false){
    let Actions=datatable(fw_action:string, DvcAction:string, EventSeverity:string)
      [ "\"forward\"", "Allow", "Informational"
      , "\"mgmt\"", "Other", "Informational"
      , "\"NA\"", "Other", "Informational"
      , "\"drop\"", "Drop", "Low"
    ];
    CommonSecurityLog
    | where not(disabled)
        and DeviceVendor == "SonicWall"
        and DeviceEventClassID in (14, 97)
        and Protocol has_any(dynamic(["udp/http", "tcp/http", "udp/https", "tcp/https"]))
    | parse-kv AdditionalExtensions as (['gcat']:string, ['app']:string, ['arg']:string, ['dstV6']:string, ['srcV6']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string, ['uuid']:string) with (pair_delimiter=";", kv_delimiter="=")
    | extend
      SrcIpAddr = coalesce(SourceIP, srcV6)
      , DstIpAddr = coalesce(DestinationIP, dstV6)
    | where (isnotempty(SrcIpAddr) or isnotempty(DstIpAddr))
        and isnotempty(fw_action)
    | extend RequestURL_ = extract(@"(?:[.*;]+?)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)(?:;fw_action)", 1, AdditionalExtensions)
    | extend RequestURL_ = iif(RequestURL_ startswith "snpt" or RequestURL_ startswith "dnpt" or RequestURL_ startswith "appid" or RequestURL_ startswith "appName", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), RequestURL_)
    | extend RequestURL_ = iif(RequestURL_ matches regex @"^(.{2,6}=.{1,6})", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), iif(RequestURL_ matches regex @"^\w=\d$", "", RequestURL_))
    | extend RequestURL_ = iif(RequestURL_ has_any(dynamic(["af_polid=", "ipscat=", "snpt=", "dnpt="])), "", RequestURL_)
    | extend RequestURL = iif(isnotempty(RequestURL), RequestURL, iif(RequestURL_ contains "/" and RequestURL_ contains ".", RequestURL_, ""))
    | where isnotempty(RequestURL)
    | lookup Actions on fw_action
    | extend EventResult = case(DvcAction == "Allow", "Success",
          DvcAction == "Management", "NA",
          DvcAction == "NA", "NA",
          DvcAction == "Other", "NA",
          "Failure"
          )
    | extend sosLogMsgSeverity = case(LogSeverity == 10, "Emergency (0)",
          LogSeverity == 9, "Alert (1)",
          LogSeverity == 8, "Critical (2)",
          LogSeverity == 7, "Error (3)",
          LogSeverity == 6, "Warning (4)",
          LogSeverity == 5, "Notice (5)",
          LogSeverity == 4, "Info (6)/Debug (7)",
          LogSeverity == 3, "Not Mapped (3)",
          LogSeverity == 2, "Not Mapped (2)",
          LogSeverity == 1, "Not Mapped (1)",
          "Not Mapped"
          )
    | extend EventSeverity = case(tolong(LogSeverity) <= 4, "Informational"
                                  , tolong(LogSeverity) <= 6, "Low"
                                  , tolong(LogSeverity) <= 8, "Medium"
                                  , tolong(LogSeverity) > 8, "High"
                                  , ""
                                  )
    | extend HttpRequestMethod = case(tolong(RequestMethod) == 0, ""
                                      , tolong(RequestMethod) == 1, "GET"
                                      , tolong(RequestMethod) == 2, "POST"
                                      , tolong(RequestMethod) == 3, "HEAD"
                                      , tolong(RequestMethod) == 4, "PUT"
                                      , tolong(RequestMethod) == 5, "CONNECT"
                                      , tolong(RequestMethod) == 6, ""
                                      , ""
                                      )
    | extend NetworkProtocolVersion = case(DestinationIP has ".", "IPv4"
                                          , DestinationIP has ":", "IPv6"
                                          , ""
                                          )
          , NetworkProtocol = toupper(iff(Protocol contains "-" and Protocol !contains "/", toupper(trim_start(@".*-", Protocol)), toupper(trim_end(@"/.*", Protocol))))
          , NetworkApplicationProtocol = tostring(toupper(trim_start(@".*/", Protocol)))
          , EventOriginalType = DeviceEventClassID
    | project-rename
        DstMacAddr = DestinationMACAddress
        , SrcMacAddr = SourceMACAddress
        , DstPortNumber = DestinationPort
        , SrcPortNumber = SourcePort
        , EventMessage = Activity
        , sosEventMessageDetail = Message
        , EventProductVersion = DeviceVersion
        , Dvc = Computer
        , DvcOutboundInterface = DeviceOutboundInterface
        , DvcInboundInterface = DeviceInboundInterface
        , sosApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).
        , sosCFSFullString = Reason // CFS Block Category ID and Name
        , RuleName = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.
        , sosSourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.
        , sosDestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.
        , sosLogMsgNote = DeviceCustomString6 // "Note" field. Additional information that is application-dependent.
        , SrcNatIpAddr = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.
        , DstNatIpAddr = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.
        , SrcZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.
        , DstZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.
        , sosUserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.
        , sosUserSessionDuration = DeviceCustomString6Label // User session duration in seconds.
        , SrcUsername = SourceUserName
        , ThreatOriginalConfidence = ThreatConfidence
        , HttpUserAgent = RequestClientApplication
        , Url = RequestURL
| extend sosLogMsgCategory = case(gcat == 1, "System (1)",
                                              gcat == 2, "Log (2)",
                                              gcat == 3, "Security Services (3)",
                                              gcat == 4, "Users (4)",
                                              gcat == 5, "Firewall Settings (5)",
                                              gcat == 6, "Network (6)",
                                              gcat == 7, "VPN (7)",
                                              gcat == 8, "High Availability (8)",
                                              gcat == 9, "3G/4G, Modem, and Module (9)",
                                              gcat == 10, "Firewall (10)",
                                              gcat == 11, "Wireless (11)",
                                              gcat == 12, "VoIP (12)",
                                              gcat == 13, "SSL VPN (13)",
                                              gcat == 14, "Anti-Spam (14)",
                                              gcat == 15, "WAN Acceleration (15)",
                                              gcat == 16, "Object (16)",
                                              gcat == 17, "SD-WAN (17)",
                                              gcat == 18, "Multi-Instance (18)",
                                              gcat == 19, "Unified Policy Engine (19)",
                                              "Log Category Not Mapped"
                                              )
| extend EventOriginalSubType = case(DeviceEventCategory == 0, "None (0)",
                                            DeviceEventCategory == 1, "System Maintenance (1)",
                                            DeviceEventCategory == 2, "System Errors (2)",
                                            DeviceEventCategory == 4, "Blocked Web Sites (4)",
                                            DeviceEventCategory == 8, "Blocked Java Etc. (8)",
                                            DeviceEventCategory == 16, "User Activity (16)",
                                            DeviceEventCategory == 32, "Attacks (32)",
                                            DeviceEventCategory == 64, "Dropped TCP (64)",
                                            DeviceEventCategory == 128, "Dropped UDP (128)",
                                            DeviceEventCategory == 256, "Dropped ICMP (256)",
                                            DeviceEventCategory == 512, "Network Debug (512)",
                                            DeviceEventCategory == 1024, "Connection Closed (1024)",
                                            DeviceEventCategory == 2048, "Dropped LAN TCP (2048)",
                                            DeviceEventCategory == 4096, "Dropped LAN UDP (4096)",
                                            DeviceEventCategory == 8192, "Dropped LAN ICMP (8192)",
                                            DeviceEventCategory == 32768, "Modem Debug (32768)",
                                            DeviceEventCategory == 65536, "VPN Tunnel Status (65536)",
                                            DeviceEventCategory == 131072, "IEEE 802.11 Management (131072)",
                                            DeviceEventCategory == 262144, "Connection Opened (262144)",
                                            DeviceEventCategory == 524288, "System Environment (524288)",
                                            DeviceEventCategory == 1048576, "Expanded - VoIP Activity (1048576)",
                                            DeviceEventCategory == 2097152, "Expanded - WLAN IDS Activity (2097152)",
                                            DeviceEventCategory == 4194304, "Expanded - SonicPoint Activity (4194304)",
                                            DeviceEventCategory == 8388608, "Expanded - Unified Policy Engine (8388608)",
                                            "Legacy Category Not Mapped"
                                            )
| extend sosIPSPriority = case(ipspri == 1, "High (1)",
                                            ipspri == 2, "Medium (2)",
                                            ipspri == 3, "Low (3)",
                                            ""
                                            )
| extend sosAntiSpywarePriority = case(spypri == 1, "High (1)",
                                      spypri == 2, "Medium (2)",
                                      spypri == 3, "Low (3)",
                                      ""
                                      )
| extend
    EventVendor = "SonicWall"
    , EventProduct = "Firewall"
    , DvcOs = "SonicOS"
    , DvcOsVersion = EventProductVersion
    , DvcIdType = "Other"
    , DvcDescription = DeviceProduct
    , Rule = RuleName
    , NetworkBytes = tolong(coalesce(toint(ReceivedBytes), 0) + coalesce(toint(SentBytes), 0))
    , sosIPSFullString = ipscat
    , ipscat = extract(@'^"?([a-zA-Z-\/]+)', 1, ipscat) // IPS Category/Signature
    , sosIPSSignatureName = extract(@'[ ](.*)\S', 1, ipscat) // IPS Signature name
    , FileSize = tolong(coalesce(FileSize, long(null)))
    , sosAppControlFileName = extract(@'.*Filename: (.*)\"', 1, sosEventMessageDetail) // App Control Filename Logging
    , HttpReferrer = extract(@'Referer: (.*)\"$', 1, coalesce(sosLogMsgNote, ""))
    , sosHttpRequestMethod_ = extract(@'Command: (.\w+)', 1, coalesce(sosLogMsgNote, ""))
    , sosCaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\. ', 1, sosEventMessageDetail)
    , sosGAVSignatureName = extract(@'Gateway Anti-Virus Alert: (.*) blocked\.', 1, sosEventMessageDetail)
    , sosASWSignatureName = extract(@'Anti-Spyware Detection Alert: (.*)\. ', 1, sosEventMessageDetail)
    , sosCountry = extract(@'Country Name:(.*)\"$', 1, sosEventMessageDetail)
    , sosCFSCategoryID = extract(@'(\d+)\s', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
    , sosCFSCategoryName = extract(@'.*-("(.*))', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
    , sosCFSPolicyName = extract(@'Policy: (.*), Info:', 1, coalesce(sosLogMsgNote, ""))
    , EventOriginalSeverity = LogSeverity
    , Dst = DstIpAddr
    , Src = SrcIpAddr
    , IpAddr = SrcIpAddr
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = "HTTPsession"
    , EventSchemaVersion = "0.2.5"
    , EventSchema = "WebSession"
    , EventCount = toint(1)
    , EventUid = _ItemId
    , EventResultDetails = ""
    , ASimMatchingIpAddr = "-"
    , UserAgent = HttpUserAgent
    , ThreatConfidence = coalesce(toint(ThreatOriginalConfidence), int(null))
| extend
    UrlCategory = sosCFSCategoryName
    , HttpRequestMethod = coalesce(HttpRequestMethod, sosHttpRequestMethod_)
    , HttpStatusCode = EventResultDetails
    , SrcUsername = coalesce(susr, SrcUsername)
    , FileName = coalesce(FileName, sosAppControlFileName)
    , NetworkDirection = case(SrcZone == "" and DstZone == "", "NA"
                              , SrcZone == "WAN" and (DstZone == "WAN" and DstIpAddr !has ".255"), "Inbound"
                              , SrcZone == "WAN" and DstZone == "WAN", "External"
                              , SrcZone == "WAN" and DstZone != "WAN", "Inbound"
                              , SrcZone == "VPN" and DstZone == "WAN", "Outbound"
                              , SrcZone == "VPN" and DstZone != "WAN", "Inbound"
                              , DstZone == "MULTICAST", "NA"
                              , DstZone == "WAN", "Outbound"
                              , "Local"
                              )
| extend
    SrcUsernameType = case(SrcUsername has "=", "DN",
                                  SrcUsername has "\\", "Windows",
                                  SrcUsername has "@", "UPN",
                                  SrcUsername == "Unknown (external IP)", "",
                                  SrcUsername == "Unknown (SSO bypassed)", "",
                                  isnotempty(SrcUsername), "Simple",
                                  ""
                                  )
    , User = SrcUsername
    , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr"
                        , isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr"
                        , ""
                        )
| extend
    ThreatIpAddr = case(ThreatField == "SrcIpAddr", SrcIpAddr
                        , ThreatField == "DstIpAddr", DstIpAddr
                        , ""
                        )
| extend
  SrcGeoCountry = iff(NetworkDirection == "Inbound", sosCountry, "")
  , DstGeoCountry = iff(NetworkDirection == "Outbound", sosCountry, "")
  , SrcAppName = iff(NetworkDirection in ("Inbound", "Local", "NA"), coalesce(appcat, appName), "")
  , DstAppName = iff(NetworkDirection in ("Outbound", "Local", "NA"), coalesce(appcat, appName), "")
  , SrcAppId = iff(NetworkDirection in ("Inbound", "Local", "NA"), sid, "")
  , DstAppId = iff(NetworkDirection in ("Outbound", "Local", "NA"), sid, "")
  , SrcBytes = case(NetworkDirection == "Outbound", tolong(SentBytes)
                  , NetworkDirection == "Inbound", tolong(ReceivedBytes)
                  , NetworkDirection == "Local" and SrcZone == "WAN", tolong(ReceivedBytes)
                  , NetworkDirection == "Local" and SrcZone != "WAN", tolong(SentBytes)
                  , tolong(long(null))
                  )
  , DstBytes = case(NetworkDirection == "Outbound", tolong(ReceivedBytes)
                  , NetworkDirection == "Inbound", tolong(SentBytes)
                  , NetworkDirection == "Local" and DstZone == "WAN", tolong(SentBytes)
                  , NetworkDirection == "Local" and DstZone != "WAN", tolong(ReceivedBytes)
                  , tolong(long(null))
                  )
| extend
    SrcAppType = case(isempty(SrcAppName), ""
                    , SrcAppName contains "\'General " or SrcAppName contains "\'Service ", "Service", "Other")
  , DstAppType = case(isempty(DstAppName), ""
                    , DstAppName contains "\'General " or DstAppName contains "\'Service ", "Service", "Other")
| project-rename
    sosReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)
  , sosSentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)
| extend
    DstPackets = case(NetworkDirection == "Outbound", tolong(sosReceivedPackets)
                  , NetworkDirection == "Inbound", tolong(sosSentPackets)
                  , tolong(long(null))
                  )
  , SrcPackets = case(NetworkDirection == "Outbound", tolong(sosSentPackets)
                  , NetworkDirection == "Inbound", tolong(sosReceivedPackets)
                  , tolong(long(null))
                  )
| project-rename
    sosConnectionDuration = DeviceCustomNumber3Label // Applies to "Connection Closed"
  , sosUser = susr // Logged-in username associated with the log event.
  , sosAppRulePolicyId = af_polid // App Rule Policy ID.
  , sosAppRulePolicyName = af_policy // App Rule Policy Name.
  , sosAppRuleService = af_service // App Rule Service Name.
  , sosAppRuleType = af_type // App Rule Policy Type.
  , sosAppRuleObject = af_object // App Rule Object Name.
  , sosAppRuleObjectContent = contentObject // App Rule Object Content.
  , sosAppRuleAction = af_action
  , sosSourceIPv6Address = srcV6
  , sosDestinationIPv6Address = dstV6
  , sosAppFullString = appcat // The full "<CATEGORY> <APPNAME> -- <SIGNAME>" string.
  , sosAppIDNumber = app // Numeric Application ID. Not the same as "ApplicationProtocol".
  , sosAppID = appid // Application ID from App Control
  , sosAppCategoryID = catid // Application Category ID
  , sosAppSignatureID = sid // Application Signature ID
  , sosIPSCategoryName = ipscat // IPS Category Name
  , sosAntiSpywareCategory = spycat // Anti-Spyware Category
  , sosURLPathName = arg // URL. Represents the URL path name.
  , sosFileIdentifier = fileid // File hash or URL
  , sosDPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.
  , DstNatPortNumber = dnpt
  , SrcNatPortNumber = snpt
  , sosBladeID = bid // Blade ID
  , sosUUID = uuid
  , sosFileName = FileName
  , DvcOriginalAction = fw_action
| extend
  ThreatName = coalesce(sosASWSignatureName, sosGAVSignatureName, sosIPSSignatureName, "")
  , ThreatId = coalesce(sosAppSignatureID, "")
  , ThreatCategory = coalesce(sosIPSCategoryName, sosAntiSpywareCategory, "")
  , DstNatPortNumber = toint(DstNatPortNumber)
  , SrcNatPortNumber = toint(SrcNatPortNumber)
| extend AdditionalFields = bag_pack(
  "AppRulePolicyId", sosAppRulePolicyId
  , "AppRulePolicyName", sosAppRulePolicyName
  , "AppRuleService", sosAppRuleService
  , "AppRuleType", sosAppRuleType
  , "AppRuleObject", sosAppRuleObject
  , "AppRuleObjectContent", sosAppRuleObjectContent
  , "AppRuleAction", sosAppRuleAction
  , "AppID", sosAppID
  , "AppCategoryID", sosAppCategoryID
  , "IPSCategoryName", sosIPSCategoryName
  , "AntiSpywareCategory", sosAntiSpywareCategory
  , "URLPathName", sosURLPathName
  , "FileIdentifier", sosFileIdentifier
  , "DPIInspectedFlow", sosDPIInspectedFlow
  , "BladeID", sosBladeID
  , "UUID", sosUUID
  , "FileName", sosFileName
  , "FileSize", FileSize
  , "CaptureATPVerdict", sosCaptureATPVerdict
  , "CFSCategoryID", sosCFSCategoryID
  , "CFSCategoryName", sosCFSCategoryName
  , "CFSPolicyName", sosCFSPolicyName
  , "AppControlFileName", sosAppControlFileName
  , "IPSFullString", sosIPSFullString
  , "IPSSignatureName", sosIPSSignatureName
  , "LogMsgCategory", sosLogMsgCategory
  , "LogMsgNote", sosLogMsgNote
  , "LogMsgSeverity", sosLogMsgSeverity
  , "SourceVPNPolicyName", sosSourceVPNPolicyName
  , "DestinationVPNPolicyName", sosDestinationVPNPolicyName
  , "EventMessageDetail", sosEventMessageDetail
  , "UserSessionType", sosUserSessionType
  , "UserSessionDuration", sosUserSessionDuration
  )
| project-away
    DeviceEventCategory
  , gcat
  , RequestMethod
  , RequestURL_
  , ipspri
  , spypri
  , sos*
  , Protocol
  , appName
  , AdditionalExtensions
  , Flex*
  , Indicator*
  , Malicious*
  , Field*
  , DeviceCustom*
  , Old*
  , File*
  , Source*
  , Destination*
  , Device*
  , SimplifiedDeviceAction
  , ExternalID
  , ExtID
  , TenantId
  , ProcessName
  , ProcessID
  , ExtID
  , OriginalLogSeverity
  , LogSeverity
  , EventOutcome
  , StartTime
  , EndTime
  , ReceiptTime
  , Remote*
  , ThreatDescription
  , ThreatSeverity
  , RequestContext
  , RequestCookies
  , CommunicationDirection
  , ReportReferenceLink
  , ReceivedBytes
  , SentBytes
  , _ResourceId
  , _ItemId
| project-reorder
    TimeGenerated
  , EventVendor
  , EventProduct
  , DvcDescription
  , Dvc
  , DvcOs
  , DvcOsVersion
};
parser(disabled)
}



//
// Function Name: ASimWebSessionSquidProxy
// Description: This ASIM parser supports normalizing Squid Proxy logs produced by the Microsoft Sentinel Squid Connector to the ASIM Web Session normalized schema. The parser supports squid native log format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionSquidProxy(    ['disabled']:bool=false)
{
let parser=(disabled:bool=false){
SquidProxy_CL | where not(disabled)
  | extend AccessRawLog = extract_all(@"^(\d+\.\d+)\s+(\d+)\s(\S+)\s([A-Z_]+)\/(\d+)\s(\d+)\s([A-Z]+)\s(\S+)\s(\S+)\s([A-Z_]+)\/(\S+)\s(\S+)",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),RawData)[0]
  | project-rename
    Dvc = Computer
  | extend
    EventEndTime = unixtime_milliseconds_todatetime(todouble(tostring(AccessRawLog[0]))*1000), 
    NetworkDuration = toint(AccessRawLog[1]), 
    SrcIpAddr = tostring(AccessRawLog[2]), 
    EventOriginalResultDetails = strcat (tostring(AccessRawLog[3]), ";", PeerStatus = tostring(AccessRawLog[9])), 
    EventResultDetails = tostring(AccessRawLog[4]), 
    DstBytes = tolong(AccessRawLog[5]), 
    HttpRequestMethod = tostring(AccessRawLog[6]), 
    // -- Squid URL might be shortened by including ellipsis (...) instead of a section in the middle. This may impact the hostname part as well.
    Url = tostring(AccessRawLog[7]), 
    SrcUsername = tostring(AccessRawLog[8]), 
    DstIpAddr = tostring(AccessRawLog[10]), 
    HttpContentType = tostring(AccessRawLog[11]) 
  // -- Constant fields
  | extend 
    EventCount = int(1), 
    EventProduct = 'Squid Proxy', 
    EventVendor = 'Squid', 
    EventSchema = 'WebSession', 
    EventSchemaVersion = '0.2.3', 
    EventType = 'HTTPsession' 
  // -- Value normalization
  | extend
    SrcUsernameType = "Unknown",
    SrcUsername = iff (SrcUsername == "-", "", SrcUsername), 
    HttpContentType = iff (HttpContentType in (":", "-"), "", HttpContentType), 
    EventResult = iff (EventOriginalResultDetails has_any ('DENIED', 'INVALID', 'FAIL', 'ABORTED','TIMEOUT') or toint(EventResultDetails) >= 400, "Failure", "Success"),
    DstIpAddrIsHost = DstIpAddr matches regex @"^[^\:]*[a-zA-Z]$"
  | extend 
    FQDN = iif (DstIpAddrIsHost, DstIpAddr, tostring(parse_url(Url)["Host"])),
    DstIpAddr = iif (DstIpAddr == "-" or DstIpAddrIsHost, "", DstIpAddr)
  | extend 
    EventSeverity = iff(EventResult == "Success", "Informational", "Low")
  | invoke _ASIM_ResolveDstFQDN ('FQDN')
 // -- aliases
  | extend 
    EventStartTime = EventEndTime,
    Duration = NetworkDuration,
    HttpStatusCode = EventResultDetails,
    User = SrcUsername,
    IpAddr = SrcIpAddr,
    Src = SrcIpAddr,
    Dst = DstHostname,
    Hostname = DstHostname
  | project-away AccessRawLog, RawData, *_s, MG, ManagementGroupName, SourceSystem, TenantId, DstIpAddrIsHost
};
parser (disabled=disabled)
}



//
// Function Name: ASimWebSessionVectraAI
// Description: This ASIM parser supports normalizing Vectra AI Streams logs produced to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionVectraAI(    ['disabled']:bool=false,
    ['pack']:bool=false)
{
let parser = (disabled: bool = false, pack:bool = false)
{
  let NetworkDirectionLookup = datatable(local_orig_b:bool, local_resp_b:bool, NetworkDirection:string)
  [
      false, true, 'Inbound',
      true, false, 'Outbound',
      true, true, 'Local',
      false, false, 'Local'
  ];
  let NetworkProtocolVersionLookup = datatable(id_ip_ver_s:string, NetworkApplicationProtocol:string)
  [
      'ipv4', 'IPv4',
      'ipv6', 'IPv6'
  ];
  let HostnameRegex = @'^[a-zA-Z0-9-]{1,61}$';
  VectraStream_CL
  | where metadata_type_s == 'metadata_httpsessioninfo'
  | extend EventResult = iff(tolong(status_code_d) >= 400, "Failure", "Success")
  | project-rename
      DvcDescription = hostname_s,
      DstDescription = resp_hostname_s,
      SrcDescription = orig_hostname_s,
      DstIpAddr = id_resp_h_s,
      EventOriginalUid = uid_s,
      HttpContentType = resp_mime_types_s,
      HttpReferrer = referrer_s,
      HttpRequestMethod = method_s,
      HttpUserAgent = user_agent_s,
      DvcId = sensor_uid_s,
      // -- community id is just a hash of addresses and ports, and not unique for the session
      // NetworkSessionId = community_id_s,
      SrcIpAddr = id_orig_h_s,
      SrcSessionId = orig_sluid_s,
      DstSessionId = resp_sluid_s,
      HttpResponseCacheControl = response_cache_control_s,
      HttpRequestCacheControl = request_cache_control_s,
      HttpCookie = cookie_s,
      HttpResponseExpires = response_expires_s,
      HttpIsProxied = is_proxied_b,
      EventOriginalResultDetails = status_msg_s
  | extend
      DstHostname = iff (DstDescription startswith "IP-" or not(DstDescription matches regex HostnameRegex), "", DstDescription),
      SrcHostname = iff (SrcDescription startswith "IP-" or not(SrcDescription matches regex HostnameRegex), "", SrcDescription),
      DvcHostname = iff (DvcDescription startswith "IP-" or not(DvcDescription matches regex HostnameRegex), "", DvcDescription),
      DstBytes = tolong(resp_ip_bytes_d),
      DstPackets = tolong(resp_pkts_d),
      DstPortNumber = toint(id_resp_p_d),
      EventCount = toint(1),
      EventStartTime = unixtime_milliseconds_todatetime(ts_d),
      EventOriginalSubType = tostring(split(metadata_type_s, '_')[1]),
      EventProduct = 'Vectra Stream',
      EventResultDetails = tostring(toint(status_code_d)),
      HttpRequestBodyBytes = tolong(request_body_len_d),
      HttpResponseBodyBytes = tolong(response_body_len_d),
      HttpRequestHeaderCount = toint(request_header_count_d),
      HttpResponseHeaderCount = toint(response_header_count_d),
      EventSchema = 'WebSession',
      EventSchemaVersion='0.2.3',
      DvcIdType = 'VectraId',
      EventSeverity = iff (EventResult == 'Success', 'Informational', 'Low'),
      EventType = 'HTTPsession',
      EventVendor = 'Vectra AI',
      SrcBytes = tolong(orig_ip_bytes_d),
      SrcPackets = tolong(orig_pkts_d),
      SrcPortNumber = toint(id_orig_p_d),
      Url = strcat('http://', host_s, uri_s)
  | lookup NetworkDirectionLookup on local_orig_b, local_resp_b
  | lookup NetworkProtocolVersionLookup on id_ip_ver_s
  // -- preserving non-normalized important fields
  | extend AdditionalFields = iff (
      pack, 
      bag_pack (
        "first_orig_resp_data_pkt", first_orig_resp_data_pkt_s,
        "first_resp_orig_data_pkt", first_resp_orig_data_pkt_s,
        "orig_huid", orig_huid_s,
        "resp_huid", resp_huid_s,
        "community_id", community_id_s,
        "resp_multihome", resp_multihomed_b,
        "host_multihomed", host_multihomed_b,
        "first_orig_resp_data_pkt_time", unixtime_milliseconds_todatetime(first_orig_resp_data_pkt_time_d),
        "first_orig_resp_pkt_time", unixtime_milliseconds_todatetime(first_orig_resp_pkt_time_d),
        "first_resp_orig_data_pkt_time", unixtime_milliseconds_todatetime(first_resp_orig_data_pkt_time_d),
        "first_resp_orig_pkt_time", unixtime_milliseconds_todatetime(first_resp_orig_pkt_time_d)
      ),
      dynamic([])
    )
  | project-away
      *_d, *_s, *_b, *_g, Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  | extend
      Dst = DstIpAddr,
      Dvc = DvcId,
      EventEndTime = EventStartTime,
      Hostname = DstHostname,
      HttpStatusCode = EventResultDetails,
      IpAddr = SrcIpAddr,
      NetworkBytes = SrcBytes + DstBytes,
      NetworkPackets = SrcPackets + DstPackets,
      //SessionId = NetworkSessionId,
      Src = SrcIpAddr,
      UserAgent = HttpUserAgent 
};
parser (disabled=disabled, pack=pack)
}



//
// Function Name: ASimWebSessionZscalerZIA
// Description: This ASIM parser supports normalizing Zscaler ZIA proxy logs produced by the Microsoft Sentinel Zscaler connector to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimWebSessionZscalerZIA(    ['disabled']:bool=false)
{
let parser=(disabled:bool=false){
let DvcActionLookup = datatable (DeviceAction:string, DvcAction: string) 
[
  'Allowed', 'Allow',
  'Blocked', 'Deny'
]; 
CommonSecurityLog | where not(disabled)
| where DeviceVendor == "Zscaler"
| where DeviceProduct == "NSSWeblog"
// Event fields
| extend 
  EventCount=int(1), 
  EventStartTime=TimeGenerated,  
  EventVendor = "Zscaler", 
  EventProduct = "ZIA Proxy", 
  EventSchema = "WebSession", 
  EventSchemaVersion="0.2.3", 
  EventType = 'HTTPsession',
  EventEndTime=TimeGenerated
| project-rename
  EventProductVersion = DeviceVersion,
  NetworkApplicationProtocol = ApplicationProtocol,
  HttpContentType = FileType,
  HttpUserAgent = RequestClientApplication,
  HttpRequestMethod = RequestMethod,
  DstAppName = DestinationServiceName,
  DstIpAddr = DestinationIP,
  DstFQDN = DestinationHostName,
  SrcIpAddr = SourceIP,
  SrcUsername = SourceUserName,
  SrcNatIpAddr= SourceTranslatedAddress,
  SrcUserDepartment = SourceUserPrivileges, // Not part of the standard schema
  UrlCategory = DeviceCustomString2,
  ThreatName = DeviceCustomString5,
  FileMD5 = DeviceCustomString6,
  EventOriginalSeverity = LogSeverity,
  EventMessage = Message
// -- Parse
| parse AdditionalExtensions with 
    * "rulelabel=" RuleName:string ";"
    "ruletype=" ruletype:string ";"
    "urlclass=" urlclass:string ";"
    "devicemodel=" * 
// -- Calculated fields
| lookup DvcActionLookup on DeviceAction
| extend
  // -- Adjustment to support both old and new CSL fields.
  EventOriginalResultDetails = coalesce(
    column_ifexists("Reason", ""),
    extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string))
  ),
  EventResultDetails = coalesce(
    column_ifexists("EventOutcome", ""),
    extract(@'outcome=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string))
  ),
  ThreatRiskLevel = coalesce(
    toint(column_ifexists("FieldDeviceCustomNumber1", int(null))),
    toint(column_ifexists("DeviceCustomNumber1",int(null)))
  ),
  DvcHostname = tostring(Computer),
  SrcBytes = tolong(SentBytes),
  DstBytes = tolong(ReceivedBytes),
  Url = iff (RequestURL == "", "", strcat (tolower(NetworkApplicationProtocol), "://", url_decode(RequestURL))),
  UrlCategory = strcat (urlclass, "/", UrlCategory),
  ThreatCategory = iff(DeviceCustomString4 == "None", "", strcat (DeviceCustomString3, "/", DeviceCustomString4)),
  RuleName = iff (RuleName == "None", "", strcat (ruletype, "/", RuleName)),
  FileMD5 = iff (FileMD5 == "None", "", FileMD5),
  HttpReferrer = iff (RequestContext == "None", "", url_decode(RequestContext)),
  DstAppName = iff (DstAppName == "General Browsing", "", DstAppName),
  DstFQDNparts = split (DstFQDN, "."),
  DstHostnameNotAddr = DstIpAddr != DstFQDN
| extend
  DstHostname = iff (DstHostnameNotAddr, tostring(DstFQDNparts[0]), DstFQDN),
  DstDomain = iff (DstHostnameNotAddr, strcat_array(array_slice(DstFQDNparts,1,-1),"."), ""),
  DstFQDN = iff (DstHostnameNotAddr, DstFQDN, "") 
// -- Enrichment
| extend
  EventResult = iff (EventResultDetails == "NA" or toint(EventResultDetails) >= 400, "Failure", "Success"),
  EventSeverity = case (ThreatRiskLevel > 90, "High", ThreatRiskLevel > 60, "Medium", ThreatRiskLevel > 10, "Low",  "Informational"),
  DstAppType = "SaaS application",
  DstDomainType = iff (DstHostnameNotAddr, "FQDN", ""),
  SrcUsernameType = "UPN"
// -- Aliases
| extend
  Dvc = DvcHostname,
  Hostname = DstHostname,
  UserAgent = HttpUserAgent,
  User = SrcUsername,
  HttpStatusCode = EventResultDetails,
  IpAddr = SrcNatIpAddr,
  Hash = FileMD5,
  FileHashType = iff(FileMD5 == "", "", "MD5")
| project-away DstFQDNparts
| project-away AdditionalExtensions, CommunicationDirection, Computer, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, Activity, EventOutcome, FieldDevice*, ExtID, Reason, ReportReferenceLink, urlclass, ruletype, DstHostnameNotAddr
};
parser (disabled)
}



//
// Function Name: imWebSession
// Description: This ASIM parser supports filtering and normalizing Web Session logs from all supported sources to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) imWebSession(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['eventresultdetails_has_any']:dynamic=dynamic([]),
    ['disabled']:bool=false,
    ['pack']:bool=false)
{
let DisabledParsers=materialize(_GetWatchlist('ASimDisabledParsers') | where SearchKey in ('Any', 'ExcludevimWebSession') | extend SourceSpecificParser=column_ifexists('SourceSpecificParser','') | distinct SourceSpecificParser | where isnotempty(SourceSpecificParser));
let vimBuiltInDisabled=toscalar('ExcludevimWebSession' in (DisabledParsers) or 'Any' in (DisabledParsers)); 
let parser=(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]),
  ipaddr_has_any_prefix:dynamic=dynamic([]),
  url_has_any:dynamic=dynamic([]), 
  httpuseragent_has_any:dynamic=dynamic([]), 
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  pack:bool=false)
{
union isfuzzy=true
  vimWebSessionEmpty,
  vimWebSessionSquidProxy (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionSquidProxy' in (DisabledParsers)))),
  vimWebSessionZscalerZIA (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionZscalerZIA' in (DisabledParsers)))),
  vimWebSessionNative (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionNative' in (DisabledParsers)))),
  vimWebSessionVectraAI (pack=pack, starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionVectraAI' in (DisabledParsers)))),
  vimWebSessionIIS (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionIIS' in (DisabledParsers)))),
  vimWebSessionPaloAltoCEF (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionPaloAltoCEF' in (DisabledParsers)))),
  vimWebSessionApacheHTTPServer (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionApacheHTTPServer' in (DisabledParsers)))),
  vimWebSessionFortinetFortiGate (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionFortinetFortiGate' in (DisabledParsers)))),
  vimWebSessionCiscoMeraki (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionCiscoMeraki' in (DisabledParsers)))),
  vimWebSessionBarracudaWAF (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionBarracudaWAF' in (DisabledParsers)))),
  vimWebSessionBarracudaCEF (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionBarracudaCEF' in (DisabledParsers)))),
  vimWebSessionCitrixNetScaler (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionCitrixNetScaler' in (DisabledParsers)))),
  vimWebSessionCiscoFirepower (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionCiscoFirepower' in (DisabledParsers))))
  ,
  vimWebSessionF5ASM (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionF5ASM' in (DisabledParsers)))),
  vimWebSessionPaloAltoCortexDataLake (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionPaloAltoCortexDataLake' in (DisabledParsers)))),
  vimWebSessionSonicWallFirewall (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=(vimBuiltInDisabled or ('ExcludevimWebSessionSonicWallFirewall' in (DisabledParsers))))
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, pack=pack)
}



//
// Function Name: vimWebSessionApacheHTTPServer
// Description: This ASIM parser supports filtering and normalizing Apache HTTP Server logs produced by the Microsoft Sentinel Apache connector to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionApacheHTTPServer(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let Parser=(
  starttime:datetime               = datetime(null), 
  endtime:datetime                 = datetime(null),
  srcipaddr_has_any_prefix:dynamic = dynamic([]),
  ipaddr_has_any_prefix:dynamic    = dynamic([]), 
  url_has_any:dynamic              = dynamic([]),
  httpuseragent_has_any:dynamic    = dynamic([]),
  eventresultdetails_in:dynamic    = dynamic([]),
  eventresult:string               = '*',
  disabled:bool                    = false
){
  let src_or_any                = set_union(
    srcipaddr_has_any_prefix,
    ipaddr_has_any_prefix
  ); 
  let remove_protocol_from_list = (list:dynamic)
  {
      print list
      | mv-apply l = print_0 to typeof(string) on
        ( extend l = substring(l,indexof(l,@'//')+2))
      | project l
  };
  ApacheHTTPServer_CL
  | where not(disabled)
  | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)
  | where (array_length(url_has_any) == 0 or RawData has_any (remove_protocol_from_list(url_has_any)))
  | where (array_length(httpuseragent_has_any) == 0 or RawData has_any (httpuseragent_has_any))
  | where (array_length(src_or_any) == 0 or RawData has_any (src_or_any))
  | where (array_length(eventresultdetails_in) == 0 or RawData has_any (eventresultdetails_in))
  | project RawData, TimeGenerated, Computer, _ResourceId, Type, _ItemId
  | where not (RawData startswith "[") 
  | where RawData has_any ("GET", "HEAD", "POST", "PUT", "DELETE", "CONNECT", "OPTIONS", "TRACE", "PATCH")
  | parse RawData with * '] ' Temp'"' *
  | where (array_length(url_has_any) == 0 or Temp has_any (remove_protocol_from_list(url_has_any)))
  | extend DstHostname = tostring(split(trim_end(" ",Temp),":",0)[0])
  | parse RawData with SrcIpAddr " " ClientIdentity " " SrcUsername " [" Date ']' * '"' HttpRequestMethod " " Url " " Protocol '" ' EventResultDetails " " DstBytes:long ' "' HttpReferrer '" "' HttpUserAgent '"' *
  | project-away RawData, Date, ClientIdentity, Temp
  | where (array_length(url_has_any) == 0 or Url has_any (remove_protocol_from_list(url_has_any)))
  | where (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any (httpuseragent_has_any))
  | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) in (eventresultdetails_in))
  | extend 
      temp_SrcMatch = has_any_ipv4_prefix(SrcIpAddr,src_or_any)
  | extend ASimMatchingIpAddr = case(
      array_length(src_or_any) == 0, "-",
      temp_SrcMatch , "SrcIpAddr",
      "No match") 
  | where ASimMatchingIpAddr != "No match" 
  | project-away temp_*
  | extend EventResult    = iff (
        toint(EventResultDetails) < 400, "Success", 
        "Failure"
      )
  | where (eventresult == '*' or EventResult =~ eventresult)
  | extend SrcUsername    = case(SrcUsername == "-", "", SrcUsername),
      HttpReferrer        = case(HttpReferrer == "-", "", HttpReferrer),
      HttpUserAgent       = case(HttpUserAgent == "-", "", HttpUserAgent),
      DstHostname         = case(DstHostname == "-", "", DstHostname)    
  | extend SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
  | parse _ResourceId with * "/subscriptions/" DvcScopeId "/" *
  | project-rename 
      Dst            = DstHostname,
      DvcHostname    = Computer,
      DvcId          = _ResourceId,
      EventUid       = _ItemId
  | extend 
      HttpVersion    = tostring(split(Protocol,"/")[1]),
      EventStartTime = TimeGenerated,
      EventEndTime   = TimeGenerated,
      DvcIdType      = iff (DvcId == "", "", "AzureResourceID")
  | extend 
      HttpStatusCode = EventResultDetails,
      UserAgent      = HttpUserAgent,
      IpAddr         = SrcIpAddr,
      Dvc            = DvcHostname,
      User           = SrcUsername
  | project-away Protocol
  | extend
      EventType          = "WebServerSession", 
      EventSchema        = "WebSession",
      EventSchemaVersion = "0.2.6",
      EventCount         = int(1),
      EventVendor        = "Apache",
      EventProduct       = "HTTP Server",
      EventSeverity      = "Informational"
};
Parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionBarracudaCEF
// Description: This ASIM parser supports filtering and normalizing Barracuda WAF logs ingested in 'CommonSecurityLog' table to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionBarracudaCEF(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let SeverityLookup = datatable (severity: int, EventSeverity: string)
    [
    0, "High", 
    1, "High", 
    2, "High", 
    3, "Medium",
    4, "Low",
    5, "Low", 
    6, "Informational",
    7, "Informational" 
];
let EventResultWFLookup = datatable (
    Action_s: string,
    EventResult_WF: string,
    DvcAction: string
)
    [
    "LOG", "Success", "Allow",
    "DENY", "Failure", "Deny",
    "WARNING", "Success", "Allow"
];
let EventTypeLookup = datatable (
    LogType_s: string,
    EventType_lookup: string,
    EventOriginalType: string
)
    [
    "WF", "HTTPsession", "Web Firewall",
    "TR", "WebServerSession", "Access"
];
let parser = (
    starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]), 
    ipaddr_has_any_prefix: dynamic=dynamic([]), 
    url_has_any: dynamic=dynamic([]),
    httpuseragent_has_any: dynamic=dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string='*',
    disabled: bool=false
    ) {
let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
let BarracudaCEF = 
    CommonSecurityLog
    | where not(disabled) and DeviceVendor startswith "Barracuda" and (DeviceProduct == "WAF" or DeviceProduct == "WAAS")
    | where DeviceEventCategory in ("WF", "TR")
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
    | where (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any))
    | where (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any(httpuseragent_has_any))
    | where (array_length(eventresultdetails_in) == 0 or tostring(EventOutcome) has_any(eventresultdetails_in))
    | extend
        temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any),
        temp_DstMatch = has_any_ipv4_prefix(DestinationIP, ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr = case(
                                array_length(src_or_any) == 0,
                                "-",
                                temp_SrcMatch and temp_DstMatch,
                                "Both",
                                temp_SrcMatch,
                                "SrcIpAddr",
                                temp_DstMatch,
                                "DstIpAddr",
                                "No match"
                            )
    | where ASimMatchingIpAddr != "No match" 
    | lookup EventResultWFLookup on $left.DeviceAction == $right.Action_s
    | extend
        status_code = toint(EventOutcome)
    | extend EventResult_TR = case(
                              status_code between (200 .. 299),
                              "Success", 
                              status_code between (400 .. 599),
                              "Failure",
                              status_code between (300 .. 399),
                              "Partial",
                              "NA"
                          )
    | extend EventResult = iff(DeviceEventCategory == "TR", EventResult_TR, EventResult_WF)
    | where (eventresult == '*' or EventResult =~ eventresult)
    | lookup EventTypeLookup on $left.DeviceEventCategory == $right.LogType_s
    | extend
        EventType = EventType_lookup,
        severity = toint(LogSeverity)
    | lookup SeverityLookup on severity
    | extend
        Dst = DestinationIP,
        EventCount = toint(1),
        EventProduct = "WAF",
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventVendor = "Barracuda"
    | extend
        Dvc = DeviceName,
        DstIpAddr = DestinationIP,
        SrcIpAddr = SourceIP,
        DstBytes = tolong(ReceivedBytes),
        DstPortNumber = toint(coalesce(DestinationPort,FieldDeviceCustomNumber1)),
        HttpCookie = RequestCookies,
        HttpReferrer = RequestContext,
        HttpRequestBodyBytes = tolong(ReceivedBytes),
        HttpRequestMethod = RequestMethod,
        HttpResponseBodyBytes = tolong(SentBytes),
        NetworkDuration = toint(FlexNumber2),
        HttpUserAgent = RequestClientApplication,
        NetworkSessionId = SourceUserID,
        RuleName = iff(DeviceEventCategory == "WF", DeviceCustomString3, ""),
        SrcPortNumber = toint(SourcePort),
        SrcUsername = SourceUserName,
        DstUsername = DestinationUserName,
        Url = RequestURL,
        HttpResponseCacheControl = iff(
                              FieldDeviceCustomNumber2 == 0,
                              "Response from the server",
                              "Response from the cache"
                          ),
        AdditionalFields = bag_pack(
                      "ProxyIP",
                      iff(DeviceEventCategory == "WF", DeviceCustomString5, DeviceCustomString3),
                      "ProxyPort",
                      FieldDeviceCustomNumber3
                  ),
        DvcHostname = DeviceName,
        DvcIpAddr = DeviceAddress,
        EventResultDetails = EventOutcome,
        HttpVersion = FlexString1,
        EventStartTime = iff(isnotempty(FlexNumber2), unixtime_milliseconds_todatetime(tolong(ReceiptTime)-tolong(FlexNumber2)), unixtime_milliseconds_todatetime(tolong(ReceiptTime)))
    | extend 
        SrcUsernameType = iff(isnotempty(SrcUsername), "Simple", ""),
        DstUsernameType = iff(isnotempty(DstUsername), "Simple", ""),
        EventEndTime = EventStartTime
    | extend
        Duration = NetworkDuration,
        HttpStatusCode = EventResultDetails,
        Rule = RuleName,
        SessionId = NetworkSessionId,
        UserAgent = HttpUserAgent,
        User = SrcUsername,
        IpAddr = SrcIpAddr,
        Src = SrcIpAddr
    | project-away
        ThreatConfidence,
        CommunicationDirection,
        AdditionalExtensions,
        Device*,
        Source*,
        Destination*,
        Activity,
        LogSeverity,
        ApplicationProtocol,
        ProcessID,
        ExtID,
        Protocol,
        Reason,
        ReceiptTime,
        SimplifiedDeviceAction,
        OriginalLogSeverity,
        ProcessName,
        EndTime,
        ExternalID,
        File*,
        ReceivedBytes,
        Message,
        Old*,
        EventOutcome,
        Request*,
        StartTime,
        Field*,
        Flex*,
        Remote*,
        Malicious*,
        severity,
        ThreatSeverity,
        IndicatorThreatType,
        ThreatDescription,
        _ResourceId,
        SentBytes,
        ReportReferenceLink,
        Computer,
        EventResult_*,
        temp_*,
        status_code,
        EventType_lookup,
        TenantId,
        CollectorHostName;
    BarracudaCEF
};
parser(
    starttime=starttime, 
    endtime=endtime,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  
    ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
    url_has_any=url_has_any,
    httpuseragent_has_any=httpuseragent_has_any,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled)
}



//
// Function Name: vimWebSessionBarracudaWAF
// Description: This ASIM parser supports filtering and normalizing Barracuda WAF logs ingested in 'barracuda_CL' table to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionBarracudaWAF(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let barracudaSchema = datatable(
     ServerIP_s: string,
     UnitName_s: string,
     HTTPStatus_s: string,
     Action_s: string,
     Severity_s: string,
     DeviceReceiptTime_s: string,
     LogType_s: string,
     ClientIP_s: string,
     host_s: string,
     HostIP_s: string,
     BytesReceived_d: real,
     ServerPort_d: real,
     Cookie_s: string,
     Referer_s: string,
     Method_s: string,
     BytesSent_d: real,
     SessionID_s: string,
     ClientPort_d: real,
     AuthenticatedUser_s: string,
     CertificateUser_s: string,
     UserAgent_s: string,
     URL_s: string,
     CacheHit_d: real,
     ProxyIP_s: string,
     ProxyPort_d: real,
     RuleType_s: string,
     ServiceIP_s: string,
     TimeTaken_d: real,
     ServicePort_d: real,
     ProtocolVersion_s: string,
     _ResourceId: string,
     RawData: string,
     SourceIP: string,
     Message: string,
     Computer: string,
     MG: string,
     ManagementGroupName: string,
     TenantId: string,
     SourceSystem: string,
     TimeGenerated: datetime
 )[];
 let SeverityLookup = datatable (severity: int, EventSeverity: string)
     [
     0, "High", 
     1, "High", 
     2, "High", 
     3, "Medium",
     4, "Low",
     5, "Low", 
     6, "Informational",
     7, "Informational" 
 ];
 let EventResultWFLookup = datatable (
     Action_s: string,
     EventResult_WF: string,
     DvcAction: string
 )
     [
     "LOG", "Success", "Allow",
     "DENY", "Failure", "Deny",
     "WARNING", "Success", "Allow"
 ];
 let EventTypeLookup = datatable (
     LogType_s: string,
     EventType_lookup: string,
     EventOriginalType: string
 )
     [
     "WF", "HTTPsession", "Web Firewall",
     "TR", "WebServerSession", "Access"
 ];
 let parser = (
     starttime: datetime=datetime(null), 
     endtime: datetime=datetime(null),
     srcipaddr_has_any_prefix: dynamic=dynamic([]), 
     ipaddr_has_any_prefix: dynamic=dynamic([]), 
     url_has_any: dynamic=dynamic([]),
     httpuseragent_has_any: dynamic=dynamic([]),
     eventresultdetails_in: dynamic = dynamic([]),
     eventresult: string='*',
     disabled: bool=false
     ) {
 let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
 let BarracudaCustom = 
     union isfuzzy=true
         barracudaSchema,
         barracuda_CL
     | where not(disabled) and (LogType_s in ("WF", "TR"))
     | where (isnull(starttime) or TimeGenerated >= starttime)
         and (isnull(endtime) or TimeGenerated <= endtime)
     | where (array_length(url_has_any) == 0 or URL_s has_any (url_has_any))
     | where (array_length(httpuseragent_has_any) == 0 or UserAgent_s has_any(httpuseragent_has_any))
     | where (array_length(eventresultdetails_in) == 0 or tostring(HTTPStatus_s) has_any(eventresultdetails_in))
     | extend
         temp_SrcMatch = has_any_ipv4_prefix(ClientIP_s, src_or_any),
         temp_DstMatch = has_any_ipv4_prefix(ServerIP_s, ipaddr_has_any_prefix)
     | extend ASimMatchingIpAddr = case(
                                 array_length(src_or_any) == 0,
                                 "-",
                                 temp_SrcMatch and temp_DstMatch,
                                 "Both",
                                 temp_SrcMatch,
                                 "SrcIpAddr",
                                 temp_DstMatch,
                                 "DstIpAddr",
                                 "No match"
                             )
     | where ASimMatchingIpAddr != "No match" 
     | lookup EventResultWFLookup on Action_s
     | extend
         status_code = toint(HTTPStatus_s)
     | extend EventResult_TR = case(
                               status_code between (200 .. 299),
                               "Success", 
                               status_code between (400 .. 599),
                               "Failure",
                               status_code between (300 .. 399),
                               "Partial",
                               "NA"
                           )
     | extend EventResult = iff(LogType_s == "TR", EventResult_TR, EventResult_WF)
     | where (eventresult == '*' or EventResult =~ eventresult)
     | lookup EventTypeLookup on LogType_s
     | extend
         EventType = EventType_lookup,
         severity = toint(Severity_s)
     | lookup SeverityLookup on severity
     | extend
         Dst = iff(LogType_s == "WF", ServiceIP_s, ServerIP_s),
         EventCount = toint(1),
         EventProduct = "WAF",
         EventSchema = "WebSession",
         EventSchemaVersion = "0.2.6",
         EventVendor = "Barracuda"
     | extend
         Dvc = UnitName_s,
         DstIpAddr = ServerIP_s,
         SrcIpAddr = ClientIP_s,
         DstBytes = tolong(BytesReceived_d),
         DstPortNumber = toint(coalesce(ServerPort_d,ServicePort_d)),
         HttpCookie = Cookie_s,
         HttpReferrer = Referer_s,
         HttpRequestBodyBytes = tolong(BytesReceived_d),
         HttpRequestMethod = Method_s,
         HttpResponseBodyBytes = tolong(BytesSent_d),
         NetworkDuration = toint(TimeTaken_d),
         HttpUserAgent = UserAgent_s,
         NetworkSessionId = SessionID_s,
         RuleName = RuleType_s,
         SrcPortNumber = toint(ClientPort_d),
         SrcUsername = CertificateUser_s,
         Url = URL_s,
         HttpResponseCacheControl = iff(
                               CacheHit_d == 0,
                               "Response from the server",
                               "Response from the cache"
                           ),
         AdditionalFields = bag_pack(
                       "ProxyIP",
                       ProxyIP_s,
                       "ProxyPort",
                       ProxyPort_d
                   ),
         DvcHostname = host_s,
         DvcIpAddr = HostIP_s,
         EventResultDetails = HTTPStatus_s,
         DstUsername = AuthenticatedUser_s,
         HttpVersion = ProtocolVersion_s,
         EventStartTime = iff(isnotempty(TimeTaken_d), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)-tolong(TimeTaken_d)), unixtime_milliseconds_todatetime(tolong(DeviceReceiptTime_s)))
     | extend 
         SrcUsernameType = iff(isnotempty(SrcUsername), "Simple", ""),
         DstUsernameType = iff(isnotempty(DstUsername), "Simple", ""),
         EventEndTime = EventStartTime
     | extend
         Duration = NetworkDuration,
         HttpStatusCode = EventResultDetails,
         Rule = RuleName,
         SessionId = NetworkSessionId,
         UserAgent = HttpUserAgent,
         User = SrcUsername,
         IpAddr = SrcIpAddr,
         Src = SrcIpAddr
     | project-away
         *_d,
         *_s,
         _ResourceId,
         severity,
         EventType_lookup,
         status_code,
         RawData,
         EventResult_*,
         SourceIP,
         Message,
         Computer,
         MG,
         ManagementGroupName,
         TenantId,
         SourceSystem,
         temp_*;
     BarracudaCustom
 };
 parser(
     starttime=starttime, 
     endtime=endtime,
     srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  
     ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
     url_has_any=url_has_any,
     httpuseragent_has_any=httpuseragent_has_any,
     eventresultdetails_in=eventresultdetails_in,
     eventresult=eventresult,
     disabled=disabled
 )
}



//
// Function Name: vimWebSessionCiscoFirepower
// Description: This ASIM parser supports normalizing commonly used Cisco Firepower messages collected using the CEF Data Connector to the ASIM WebSession normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionCiscoFirepower(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let EventFieldsLookup = datatable(
    DeviceAction: string, 
    DvcAction: string,
    EventResult: string
)
    [
    "Detect", "Allow", "Partial",
    "Block", "Deny", "Failure",
    "Malware Cloud Lookup", "Deny", "Failure",
    "Malware Block", "Deny", "Failure",
    "Malware Allow List", "Allow", "Success",
    "Cloud Lookup Timeout", "Deny", "Failure",
    "Custom Detection", "Allow", "Partial",
    "Custom Detection Block", "Deny", "Failure",
    "Archive Block-Depth Exceeded", "Deny", "Failure",
    "Archive Block-Encrypted", "Encrypt", "Failure",
    "Archive Block-Failed to Inspect", "Deny", "Failure"
];
let DirectionLookup = datatable (CommunicationDirection: string, NetworkDirection: string)[
    "1", "Inbound",
    "2", "Outbound"
];
let parser=(starttime: datetime=datetime(null), 
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    ipaddr_has_any_prefix: dynamic=dynamic([]), 
    url_has_any: dynamic=dynamic([]),
    httpuseragent_has_any: dynamic=dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string='*',
    disabled: bool=false) {
    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
    CommonSecurityLog
    | where not(disabled) 
    | where (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
        and DeviceVendor == "Cisco" and DeviceProduct == "Firepower"
        and DeviceEventClassID in("File:500:1", "FileMalware:502:1", "FireAMP:125:1")
        and array_length(eventresultdetails_in) == 0
        and array_length(httpuseragent_has_any) == 0
        and ((array_length(url_has_any) == 0) or RequestURL has_any (url_has_any))
    | extend
        temp_isSrcMatch=has_any_ipv4_prefix(SourceIP, src_or_any), 
        temp_isDstMatch=has_any_ipv4_prefix(DestinationIP, ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0,
                                  "-",
                                  (temp_isSrcMatch and temp_isDstMatch),
                                  "Both", 
                                  temp_isSrcMatch,
                                  "SrcIpAddr",
                                  temp_isDstMatch,
                                  "DstIpAddr",
                                  "No match"
                              )
    | where ASimMatchingIpAddr != "No match"
    | lookup EventFieldsLookup on DeviceAction
    | where eventresult == '*' or EventResult =~ eventresult
    | parse-kv AdditionalExtensions as (start: long) with (pair_delimiter=';', kv_delimiter='=')
    | extend
        EventMessage = iff(DeviceEventClassID == "FireAMP:125:1", DeviceCustomString5, ""),
        ThreatName = iff(DeviceEventClassID == "FireAMP:125:1", DeviceCustomString2, ""),
        Disposition = case(
                  DeviceEventClassID == "FireAMP:125:1",
                  DeviceCustomString3,
                  DeviceEventClassID in ("File:500:1", "FileMalware:502:1"),
                  DeviceCustomString2,
                  ""
              ),
        AdditionalFields = todynamic(
                            case(
                                DeviceEventClassID == "FireAMP:125:1",
                                bag_pack(
                                        "policy", DeviceCustomString1,
                                        "process", SourceProcessName,
                                        "connectionInstance", ProcessID,
                                        "disposition", DeviceCustomString3,
                                        "event type id", EventOutcome
                                    ),
                                DeviceEventClassID in ("File:500:1", "FileMalware:502:1"),
                                bag_pack(
                                        "connectionInstance", ProcessID,
                                        "signaturedata", DeviceCustomString4,
                                        "disposition", DeviceCustomString2
                                    ),
                                ""
                            )
                        )
    | invoke _ASIM_ResolveNetworkProtocol('Protocol')
    | extend NetworkProtocol = iff(NetworkProtocol == "Unassigned" and Protocol !in (63, 68, 99, 114, 253, 254), Protocol, NetworkProtocol)
    | lookup DirectionLookup on CommunicationDirection
    | extend
        EventStartTime = coalesce(unixtime_milliseconds_todatetime(start), unixtime_milliseconds_todatetime(tolong(ReceiptTime))),
        DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
        EventSeverity = case(
                    DvcAction == "Allow" and Disposition =~ "Malware",
                    "High",
                    DvcAction == "Deny" and Disposition =~ "Malware",
                    "Medium",
                    DvcAction == "Deny" and Disposition !~ "Malware",
                    "Low",
                    "Informational"
                ),
        EventOriginalType = case(
                        DeviceEventClassID has "File:500:1",
                        "File Event",
                        DeviceEventClassID has "FileMalware:502:1",
                        "FileMalware Event",
                        Activity
                    ),
        FileContentType = FileType,
        HttpContentType = FileType,
        FileSize = tolong(FileSize),
        ThreatCategory = iff(Disposition =~ "Malware", Disposition, "")
    | extend Ip_device = iff(DeviceName matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", DeviceName, "")
    | extend
        DvcIpAddr = Ip_device,
        DeviceName = iff(isempty(Ip_device), DeviceName, "")
    | extend host = coalesce(DeviceName, Computer)
    | invoke _ASIM_ResolveDvcFQDN('host')
    | extend 
        EventCount = int(1),
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-rename
        EventVendor = DeviceVendor,
        EventProduct = DeviceProduct,
        EventProductVersion = DeviceVersion,
        DstPortNumber = DestinationPort,
        SrcUsername = SourceUserName,
        DstUsername = DestinationUserName,
        Url = RequestURL,
        FileSHA256 = FileHash,
        SrcPortNumber = SourcePort,
        EventOriginalSeverity = LogSeverity,
        EventOriginalUid = ExtID,
        NetworkApplicationProtocol = ApplicationProtocol,
        EventUid = _ItemId,
        DvcId = DeviceExternalID,
        DvcOriginalAction = DeviceAction,
        HttpUserAgent = RequestClientApplication
    | extend
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        SrcUserType = _ASIM_GetUserType(SrcUsername, ""),
        DstUsernameType = _ASIM_GetUsernameType(DstUsername),
        DstUserType = _ASIM_GetUserType(DstUsername, ""),
        HashType = "SHA256",
        DvcIdType = "Other",
        NetworkProtocolVersion=case(DstIpAddr has ".", "IPv4", DstIpAddr has ":", "IPv6", ""),
        IpAddr = SrcIpAddr,
        Hash = FileSHA256,
        User = SrcUsername,
        UserAgent = HttpUserAgent,
        EventEndTime = EventStartTime,
        Dst = DstIpAddr,
        Src = SrcIpAddr,
        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr)
    | project-away
        Source*,
        Destination*,
        Device*,
        start,
        AdditionalExtensions,
        Activity,
        CommunicationDirection,
        Computer,
        EndTime,
        EventOutcome,
        FieldDevice*,
        Flex*,
        FileID,
        FileModificationTime,
        Old*,
        FileCreateTime,
        FilePermission,
        IndicatorThreatType,
        MaliciousIP*,
        Message,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        ThreatDescription,
        ThreatSeverity,
        FilePath,
        FileType,
        Reason,
        ReceiptTime,
        ExternalID,
        ReportReferenceLink,
        Ip_*,
        host*,
        _ResourceId,
        temp*,
        NetworkProtocolNumber,
        Disposition,
        ThreatConfidence
};
parser(
    starttime=starttime, 
    endtime=endtime,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
    ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
    url_has_any=url_has_any,
    httpuseragent_has_any=httpuseragent_has_any,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimWebSessionCiscoMeraki
// Description: This ASIM parser supports normalizing Cisco Meraki logs to the ASIM Web Session normalized schema. Cisco Meraki events are generated from network activity and security events from Meraki devices such as firewalls, switches, and access points. These logs are captured through the Cisco Meraki Sentinel connector which uses a Linux agent to collect logs in Syslog format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionCiscoMeraki(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let ActionLookup = datatable (action: string, DvcAction: string, EventResult: string, EventSeverity: string)  [
   'allow', 'Allow', 'Success', 'Informational',
   'log', 'Allow', 'Success', 'Informational',
   'accept', 'Allow', 'Success', 'Informational',
   'block', 'Deny', 'Failure', 'Low',
   'deny', 'Deny', 'Failure', 'Low',
   'quarantine', 'Deny', 'Failure', 'Low'
   ];
 let parser=(
     starttime: datetime=datetime(null), 
     endtime: datetime=datetime(null),
     srcipaddr_has_any_prefix: dynamic=dynamic([]),
     ipaddr_has_any_prefix: dynamic=dynamic([]), 
     url_has_any: dynamic=dynamic([]),
     httpuseragent_has_any: dynamic=dynamic([]),
     eventresultdetails_in: dynamic = dynamic([]),
     eventresult: string='*',
     disabled: bool=false
     ) {
     let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
     let allData = union isfuzzy=true
             (
             meraki_CL
             | project-rename LogMessage =  Message
             ),
             (
             Syslog
             | where Computer in (_ASIM_GetSourceBySourceType('CiscoMeraki'))
             | project-rename LogMessage =  SyslogMessage
             );
     let PreFilteredData = allData
         | where not(disabled) and (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
             and (LogMessage has "urls" or LogMessage has_all("security_event", "security_filtering_file_scanned")) and (array_length(eventresultdetails_in) == 0)
         | extend Parser = extract_all(@"(\d+.\d+)\s([\w\-\_]+)\s([\w\-\_]+)\s([\S\s]+)$", dynamic([1, 2, 3, 4]), LogMessage)[0]
         | extend
             Epoch = tostring(Parser[0]),
             LogType = tostring(Parser[2]),
             Substring = tostring(Parser[3])
         | extend EventStartTime = unixtime_seconds_todatetime(tolong(split(Epoch, ".")[0]))
         | where (array_length(url_has_any) == 0 or LogMessage has_any (url_has_any))
             and (array_length(httpuseragent_has_any) == 0 or LogMessage has_any(httpuseragent_has_any))
         | where LogType in ("security_event", "urls");
     let SecurityEventData = PreFilteredData
         | where LogType == "security_event"
         | parse Substring with LogSubType: string " " temp_RestMessage: string
         | where LogSubType == "security_filtering_file_scanned"
         | parse-kv Substring as (disposition: string, action: string, sha256: string, name: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
         | parse Substring with * " sha256" fsha256: string " "restmessage: string
         | extend disposition = trim('"', disposition),
                 action = trim('"', action),
                 sha256 = trim('"', sha256),
                 fsha256 = trim('"', fsha256),
                 name = trim('"', name)
         | lookup ActionLookup on action;
     let UrlsData = PreFilteredData
         | where LogType == "urls"
         | parse Substring with * "request:" request: string " " urls: string;
     union SecurityEventData, UrlsData
     | parse-kv Substring as (src: string, dst: string, url: string, mac: string, agent: string) with (pair_delimiter=" ", kv_delimiter="=", quote="'")
     | where (array_length(httpuseragent_has_any) == 0 or agent has_any(httpuseragent_has_any))
     | extend
         src = trim('"', src),
         dst = trim('"', dst),
         url = trim('"', url),
         urls = trim('"', urls)
     | extend Url = coalesce(url, urls)
     | where array_length(url_has_any) == 0 or Url has_any (url_has_any)
     | extend EventResult=case(
                           LogType == "urls", "Success",
                           isempty(EventResult), "NA",
                           EventResult                        
                       )
     | where (eventresult == '*' or EventResult =~ eventresult)
     | parse src with *  "[" temp_srcip: string "]:" temp_srcport: string
     | parse dst with *  "[" temp_dstip: string "]:" temp_dstport: string
     | extend
         agent= trim('"', agent),
         mac = trim('"', mac)
     | extend SrcIpAddr = iff(
                         src has ".",
                         split(src, ":")[0], 
                         coalesce(temp_srcip, src)
                     )
     | extend DstIpAddr = iff(
                         dst has ".",
                         split(dst, ":")[0], 
                         coalesce(temp_dstip, dst)
                     )
     | extend
         temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr, src_or_any),
         temp_DstMatch=has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix)
     | extend ASimMatchingIpAddr=case(
                                   array_length(src_or_any) == 0,
                                   "-",
                                   temp_SrcMatch and temp_DstMatch,
                                   "Both",
                                   temp_SrcMatch,
                                   "SrcIpAddr",
                                   temp_DstMatch,
                                   "DstIpAddr",
                                   "No match"
                               )
     | where ASimMatchingIpAddr != "No match"
     | extend SrcPortNumber = toint(
                                 iff (
                                     src has ".",
                                     split(src, ":")[1],
                                     temp_srcport
                                 )
                             )
     | extend DstPortNumber = toint(
                                 iff (
                                     dst has ".",
                                     split(dst, ":")[1],
                                     temp_dstport
                                 )
                             )
     | extend
         EventSeverity=case(
                   DvcAction == "Deny" and disposition == "malicious",
                   "Medium",
                   DvcAction == "Allow" and disposition == "malicious",
                   "High",
                   isnotempty(EventSeverity), EventSeverity,
                   "Informational"
               )
     | extend
         EventType = "HTTPsession",
         HttpUserAgent = agent,
         HttpRequestMethod = request,
         FileSHA256 = coalesce(sha256, fsha256),
         FileName = name,
         DvcMacAddr = mac,
         EventOriginalType = LogType,
         EventOriginalSubType = LogSubType,
         EventUid = _ResourceId
     | extend Device = tostring(Parser[1])
     | invoke _ASIM_ResolveDvcFQDN('Device')
     | extend 
         Dst = DstIpAddr,
         Src = SrcIpAddr,
         Dvc = DvcHostname,
         IpAddr = SrcIpAddr,
         UserAgent = HttpUserAgent,
         EventEndTime = EventStartTime
     | extend
         EventCount=int(1),
         EventProduct="Meraki",
         EventVendor="Cisco",
         EventSchema="WebSession",
         EventSchemaVersion="0.2.6"
     | project-away
         LogMessage,
         Parser,
         LogType,
         LogSubType,
         Epoch,
         Device,
         src,
         dst,
         mac,
         url,
         urls,
         disposition,
         action,
         request,
         name,
         sha256,
         fsha256,
         agent,
         restmessage,
         temp*,
         Substring,
         TenantId,
         SourceSystem,
         Computer,
         _ResourceId,
         MG,
         ManagementGroupName,
         RawData,
         EventTime,
         Facility,
         HostName,
         SeverityLevel,
         ProcessID,
         HostIP,
         ProcessName
 };
 parser(
     starttime=starttime, 
     endtime=endtime,
     srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,
     ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
     url_has_any=url_has_any,
     httpuseragent_has_any=httpuseragent_has_any,
     eventresultdetails_in=eventresultdetails_in,
     eventresult=eventresult,
     disabled=disabled
 )
}



//
// Function Name: vimWebSessionCitrixNetScaler
// Description: This ASIM parser supports normalizing Citrix NetScaler WAF(Web Application Firewall) logs to the ASIM Web Session normalized schema. Citrix NetScaler WAF(Web Application Firewall) events are captured through Citrix WAF (Web App Firewall) data connector which ingests web attack logs into Microsoft Sentinel in CEF format via Syslog.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionCitrixNetScaler(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let EventSeverityLookup = datatable (DeviceCustomString4: string, EventSeverity: string)
[
    "EMERGENCY", "High",
    "ALERT", "High",
    "CRITICAL", "High",
    "ERROR", "Medium",
    "WARNING", "Low",
    "NOTICE", "Low",
    "INFORMATIONAL", "Informational",
    "DEBUG", "Informational",
    "INFO", "Informationl",
    "WARN", "Low",
    "ERR", "Medium"
];
let EventFieldsLookup = datatable(
    DeviceAction: string,
    DvcAction: string,
    EventResult: string
)
[
    "blocked", "Deny", "Failure",
    "not blocked", "Allow", "Success",
    "transformed", "Allow", "Success"
];
let parser = (starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    ipaddr_has_any_prefix: dynamic=dynamic([]),
    url_has_any: dynamic=dynamic([]),
    httpuseragent_has_any: dynamic=dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string='*',
    disabled: bool=false) {
    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
    CommonSecurityLog
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and (DeviceVendor == "Citrix" and DeviceProduct == "NetScaler")
    | where DeviceEventClassID == "APPFW" and Activity has_any ("APPFW_STARTURL", "APPFW_XML_cross-site scripting", "APPFW_SAFECOMMERCE", "APPFW_SAFECOMMERCE_XFORM", "APPFW_SIGNATURE_MATCH", "APPFW_XML_ERR_NOT_WELLFORMED", "APPFW_FIELDCONSISTENCY", "APPFW_SQL", "APPFW_BUFFEROVERFLOW_URL", "APPFW_BUFFEROVERFLOW_COOKIE", "APPFW_cross-site scripting", "APPFW_FIELDFORMAT", "APPFW_REFERER_HEADER", "APPFW_XSS")
    | where array_length(httpuseragent_has_any) == 0
    | where array_length(eventresultdetails_in) == 0
    | where (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any))
    | parse-kv AdditionalExtensions as (method: string, geolocation: string, script: string) with (pair_delimiter=";", kv_delimiter="=")
    | parse RequestURL with * "://" host: string "/" *
    | extend
        DeviceAction = trim("[*]+", DeviceAction),
        temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any),
        temp_DstMatch = has_any_ipv4_prefix(RequestURL, ipaddr_has_any_prefix)
    | lookup EventFieldsLookup on DeviceAction
    | lookup EventSeverityLookup on DeviceCustomString4
    | where eventresult == '*' or EventResult =~ eventresult
    | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch,
                                  "DstIpAddr",
                                  "No match"
                              )
    | where ASimMatchingIpAddr != "No match"
    | extend 
        Ip_host = iff(host matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", host, ""),
        Ip_computer = iff(Computer matches regex "(([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.(([0-9]{1,3})))", Computer, ""),
        HttpHost = host
    | extend
        host = iff(isempty(Ip_host), host, ""),
        Computer = iff(isempty(Ip_computer), Computer, ""),
        AdditionalFields = bag_pack(
                      "Script", script,
                      "Event ID", FieldDeviceCustomNumber1,
                      "HTTP Transaction ID", FieldDeviceCustomNumber2,
                      "Profile Name", DeviceCustomString1,
                      "PPE ID", DeviceCustomString2,
                      "Signature Violation Category", DeviceCustomString6
                  )
    | invoke _ASIM_ResolveDvcFQDN('Computer')
    | invoke _ASIM_ResolveDstFQDN('host')
    | extend
        DstIpAddr = tostring(split(Ip_host, ":")[0]),
        DstPortNumber = toint(split(Ip_host, ":")[1]),
        DvcIpAddr = tostring(split(Ip_computer, ":")[0])
    | extend 
        DstHostname = coalesce(DstIpAddr, DstHostname)
    | extend
        EventProduct = "NetScaler",
        EventVendor = "Citrix",
        EventCount = int(1),
        EventStartTime = TimeGenerated,
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-rename
        EventUid = _ItemId,
        SrcIpAddr = SourceIP,
        DvcOriginalAction = DeviceAction,
        EventMessage = Message,
        EventOriginalSeverity = DeviceCustomString4,
        EventProductVersion = DeviceVersion,
        HttpRequestMethod = method,
        NetworkSessionId = DeviceCustomString3,
        SrcPortNumber = SourcePort,
        Url = RequestURL,
        EventOriginalType = DeviceEventClassID,
        EventOriginalSubType = Activity,
        SrcGeoCountry = geolocation
    | extend
        EventEndTime = EventStartTime,
        Dvc = coalesce(DvcFQDN, DvcHostname, DvcIpAddr),
        Src = SrcIpAddr,
        Dst = DstHostname,
        Hostname = DstHostname,
        IpAddr = SrcIpAddr,
        SessionId = NetworkSessionId
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        Computer,
        EndTime,
        EventOutcome,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        Threat*,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        ApplicationProtocol,
        Indicator*,
        Ip_*,
        LogSeverity,
        _ResourceId,
        host,
        script,
        temp*,
        ExtID
};
parser(
    starttime=starttime, 
    endtime=endtime,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  
    ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
    url_has_any=url_has_any,
    httpuseragent_has_any=httpuseragent_has_any,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimWebSessionEmpty
// Description: This function returns an empty ASIM Web Session schema

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionEmpty
{
let parser=datatable(
   TimeGenerated:datetime
 , _ResourceId:string
 , Type:string
 // -- Event Fields
 , EventMessage:string // Optional
 , EventCount:int // Mandatory
 , EventStartTime:datetime // Mandatory
 , EventEndTime:datetime // Alias
 , EventType:string // Mandatory
 , EventSubType:string // Optional
 , EventResult:string // Mandatory
 , EventResultDetails:string // Optional
 , EventOriginalResultDetails:string // Optional
 , EventSeverity:string // Mandatory
 , EventOriginalSeverity:string // Optional
 , EventOriginalUid:string // Optional
 , EventOriginalType:string // Optional
 , EventProduct:string // Mandatory
 , EventProductVersion:string // Optional
 , EventVendor:string // Mandatory
 , EventSchema:string // Mandatory
 , EventSchemaVersion:string // Mandatory
 , EventReportUrl:string // Mandatory
 , Dvc:string // Alias
 , DvcIpAddr:string // Mandatory
 , DvcHostname:string // Mandatory
 , DvcDomain:string // Recommended
 , DvcDomainType:string // Recommended
 , DvcFQDN:string // Optional
 , DvcId:string // Optional
 , DvcIdType:string // Optional
 , DvcMacAddr:string // Optional
 , DvcZone:string // Optional 
 , DvcAction:string // Optional
 , DvcOriginalAction:string // Optional
 // -- Network Session Fields
 , Dst:string // Alias
 , DstIpAddr:string // Recommended
 , DstPortNumber:int // Optional
 , DstHostname:string // Recommended
 , Hostname:string // Alias
 , DstDomain:string // Recommended
 , DstDomainType:string // Recommended
 , DstFQDN:string // Optional
 , DstDvcId:string // Optional
 , DstDvcIdType:string // Optional
 , DstDeviceType:string // Optional
 , DstUserId:string // Optional
 , DstUserIdType:string // Optional
 , DstUsername:string // Optional
 , User:string // Alias
 , DstUsernameType:string // Alias
 , DstUserType:string // Optional
 , DstOriginalUserType:string // Optional
 , DstUserDomain:string // Optional
 , DstAppName:string // Optional
 , DstAppId:string // Optional
 , DstAppType:string // Optional
 , DstZone:string // Optional
 , DstInterfaceName:string // Optional
 , DstInterfaceGuid:string // Optional
 , DstMacAddr:string // Optional
 , DstGeoCountry:string // Optional
 , DstGeoCity:string // Optional
 , DstGeoLatitude:real // Optional
 , DstGeoLongitude:real // Optional
 , Src:string // Alias
 , SrcIpAddr:string // Recommended
 , SrcPortNumber:int // Optional
 , SrcHostname:string // Recommended
 , SrcDomain:string // Recommended
 , SrcDomainType:string // Recommended
 , SrcFQDN:string // Optional
 , SrcDvcId:string // Optional
 , SrcDvcIdType:string // Optional
 , SrcDeviceType:string // Optional
 , SrcUserId:string // Optional
 , SrcUserIdType:string // Optional
 , SrcUsername:string // Optional
 , SrcUsernameType:string // Alias
 , SrcUserType:string // Optional
 , SrcOriginalUserType:string // Optional
 , SrcUserDomain:string // Optional
 , SrcAppName:string // Optional
 , SrcAppId:string // Optional
 , IpAddr:string // Alias
 , SrcAppType:string // Optional
 , SrcZone:string // Optional
 , SrcInterfaceName:string // Optional
 , SrcInterfaceGuid:string // Optional
 , SrcMacAddr:string // Optional
 , SrcGeoCountry:string // Optional
 , SrcGeoCity:string // Optional
 , SrcGeoLatitude:real // Optional
 , SrcGeoLongitude:real // Optional
 , NetworkApplicationProtocol:string // Optional
 , NetworkProtocol:string // Optional
 , NetworkProtocolVersion:string // Optional
 , NetworkDirection:string // Optional
 , NetworkDuration:int // Optional
 , Duration:int // Alias
 , NetworkIcmpCode:int // Optional
 , NetworkIcmpType:string // Optional
 , DstBytes:long // Optional
 , SrcBytes:long // Optional
 , NetworkBytes:long // Optional
 , DstPackets:long // Optional
 , SrcPackets:long // Optional
 , NetworkPackets:long // Optional
 , NetworkSessionId:string // Optional
 , SessionId:string // Alias
 , NetworkConnectionHistory:string // Optional
 , SrcVlanId:string // Optional
 , DstVlanId:string // Alias
 , InnerVlanId:string // Optional
 , OuterVlanId: string // Alias
 // -- Intermediary device fields
 , DstNatIpAddr:string // Optional
 , DstNatPortNumber:int // Optional
 , SrcNatIpAddr:string // Optional
 , SrcNatPortNumber:int // Optional
 , DvcInboundInterface:string // Optional
 , DvcOutboundInterface:string // Optional
 , DvcInterface:string // Optional
 // -- HTTP session fields
 , Url:string // Mandatory
 , UrlCategory:string // Optional
 , UrlOriginal:string // Optional
 , HttpVersion:string // Optional
 , HttpRequestMethod:string // Optional
 , HttpStatusCode:string // Alias
 , HttpContentType:string // Optional
 , HttpContentFormat:string // Optional
 , HttpReferrer:string // Optional
 , HttpUserAgent:string // Optional
 , UserAgent:string // Alias
 , HttpRequestXff:string // Optional
 , HttpRequestTime:int // Optional
 , HttpResponseTime:int // Optional
 , FileName:string // Optional
 , FileMD5:string // Optional
 , FileSHA1:string // Optional 
 , FileSHA256:string // Optional
 , FileSHA512:string // Optional
 , FileSize:long // Optional
 , FileContentType:string // Optional
 , RuleName:string // Optional
 , RuleNumber:int // Optional
 , Rule:string // Alias
 , ThreatId:string // Optional
 , ThreatName:string // Optional
 , ThreatCategory:string // Optional
 , ThreatRiskLevel:int // Optional
 , ThreatOriginalRiskLevel:string // Optional
 , DvcSubscriptionId:string // Optional
 , SrcSubscriptionId:string // Optional
 , DstSubscriptionId:string // Optional 
 )[];
 parser
}



//
// Function Name: vimWebSessionF5ASM
// Description: This ASIM parser supports normalizing F5 Big IP ASM(Application Security Manager) logs to the ASIM Web Session normalized schema. F5 Big IP ASM events are captured through F5 Network data connector which ingests attack events and data into Microsoft Sentinel in CEF format over Syslog using F5's technology partner Arcsight.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionF5ASM(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let DvcActionLookup = datatable (DeviceAction: string, DvcAction: string)
[
    "Blocked", "Deny",
    "blocked", "Deny",
    "Passed", "Allow",
    "passed", "Allow",
    "Alerted", "Deny",
    "alerted", "Deny"
];
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
    [
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Medium",
    "5", "Medium",
    "6", "Medium",
    "7", "High",
    "8", "High",
    "9", "High",
    "10", "High"
];
let parser = (
    starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    ipaddr_has_any_prefix: dynamic=dynamic([]),
    url_has_any: dynamic=dynamic([]),
    httpuseragent_has_any: dynamic=dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string='*',
    disabled: bool=false
    ) {
    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
    let DeviceEventClassIDList = dynamic(["Brute Force Attack", "IP Enforcer Attack", "Web Scraping Attack", "DoS Attack"]);
    let AllData = CommonSecurityLog
        | where not(disabled)
        | where (isnull(starttime) or TimeGenerated >= starttime)
            and (isnull(endtime) or TimeGenerated <= endtime)
            and DeviceVendor == "F5"
            and DeviceProduct == "ASM"
        | where ((substring(DeviceEventClassID, 0, 1) == "2" and strlen(DeviceEventClassID) == 9) or (DeviceEventClassID == Activity)) or (DeviceEventClassID in (DeviceEventClassIDList))
        | where (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any))
        | extend
            temp_SrcMatch = has_any_ipv4_prefix(SourceIP, src_or_any)
        | invoke _ASIM_ResolveDvcFQDN('DeviceName')
        | project-rename DvcIpAddr = DeviceAddress;
    let GeneralEnforcementData = AllData
        | where ((substring(DeviceEventClassID, 0, 1) == "2" and strlen(DeviceEventClassID) == 9) or (DeviceEventClassID == Activity)) and (DeviceEventClassID !in (DeviceEventClassIDList))
        | where (array_length(httpuseragent_has_any) == 0 or DeviceCustomString3 has_any(httpuseragent_has_any))
        | where (array_length(eventresultdetails_in) == 0 or tostring(FieldDeviceCustomNumber1) has_any(eventresultdetails_in))
        | extend temp_DstMatch1 = has_any_ipv4_prefix(DestinationIP, ipaddr_has_any_prefix)
        | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch1,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch1,
                                  "DstIpAddr",
                                  "No match"
                              )
        | where ASimMatchingIpAddr != "No match"
        | parse-kv DeviceCustomString3 as (Host: string, ["User-Agent"]: string, Cookie: string, Referer: string) with (pair_delimiter="\\r\\n", kv_delimiter=":")
        | parse DeviceCustomString3 with * "HTTP/" HttpVersion: string "\\r\\n" rest: string
        | extend
            EventResultDetails = tostring(FieldDeviceCustomNumber1)
        | extend
            EventResult = iff(toint(EventResultDetails) >= 400 or DeviceAction =~ "blocked", "Failure", "Success")
        | where eventresult == '*' or EventResult =~ eventresult
        | project-rename 
            DstIpAddr = DestinationIP,
            DstPortNumber = DestinationPort,
            EventOriginalUid = ExtID,
            HttpRequestMethod = RequestMethod,
            NetworkApplicationProtocol = ApplicationProtocol,
            HttpCookie = Cookie,
            HttpHost = Host,
            HttpReferrer = Referer,
            HttpUserAgent = ['User-Agent'],
            HttpRequestXff = DeviceCustomString5
        | extend
            HttpStatusCode = EventResultDetails,
            AdditionalFields = bag_pack(
                      "Full Request", DeviceCustomString3,
                      "Attack Type", DeviceCustomString4,
                      "Policy Apply Date", DeviceCustomDate1,
                      "Web Application Name",
                      DeviceCustomString2
                  ),
            Dst = DstIpAddr;
    let AnomalyDetectionData = AllData
        | where DeviceEventClassID in (DeviceEventClassIDList)
        | where array_length(httpuseragent_has_any) == 0 
        | where array_length(eventresultdetails_in) == 0
        | extend temp_DstMatch2 = has_any_ipv4_prefix(DvcIpAddr, ipaddr_has_any_prefix)
        | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch2,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch2,
                                  "DstIpAddr",
                                  "No match"
                              ),
              EventResult = iff(DeviceAction =~ "passed", "Success", "Failure")
        | where ASimMatchingIpAddr != "No match"
        | where eventresult == '*' or EventResult =~ eventresult
        | extend
            AdditionalFields = bag_pack(
                      "Detection Average",
                      FieldDeviceCustomNumber1,
                      "Dropped Requests",
                      FieldDeviceCustomNumber2,
                      "Attack Status",
                      DeviceCustomString4,
                      "Detection Mode",
                      DeviceCustomString5,
                      "Web Application Name",
                      DeviceCustomString2
                  ),
            ThreatId = tostring(FieldDeviceCustomNumber3)
        | project-away ApplicationProtocol, ExtID;
    union GeneralEnforcementData, AnomalyDetectionData
    | lookup DvcActionLookup on DeviceAction
    | lookup EventSeverityLookup on LogSeverity
    | extend 
        EventStartTime = todatetime(ReceiptTime),
        EventOriginalType = iff(isempty(toint(DeviceEventClassID)), DeviceEventClassID, Activity)
    | extend
        EventCount = int(1),
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-rename 
        EventProduct = DeviceProduct,
        EventVendor = DeviceVendor,
        EventUid = _ItemId,
        EventOriginalSeverity = LogSeverity,
        DvcOriginalAction = DeviceAction,
        Url = RequestURL,
        SrcIpAddr = SourceIP,
        SrcGeoCountry = DeviceCustomString6,
        SrcPortNumber = SourcePort,
        SrcUserId = SourceUserID,
        SrcUsername = SourceUserName,
        EventMessage = Message,
        EventProductVersion = DeviceVersion,
        RuleName = DeviceCustomString1
    | extend 
        SrcUserIdType = iff(isnotempty(SrcUserId), "Other", ""),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        SrcUserType = _ASIM_GetUserType(SrcUsername, SrcUserId),
        Dvc = coalesce(DvcFQDN, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        Src = SrcIpAddr,
        IpAddr = SrcIpAddr,
        UserAgent = HttpUserAgent,
        User = SrcUsername,
        Rule = RuleName
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        Activity,
        CommunicationDirection,
        Computer,
        EndTime,
        EventOutcome,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        IndicatorThreatType,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        Protocol,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        ThreatDescription,
        ThreatSeverity,
        ThreatConfidence,
        Reason,
        ExternalID,
        ReportReferenceLink,
        ReceiptTime,
        rest,
        temp_*,
        _ResourceId
};
parser(
    starttime=starttime, 
    endtime=endtime,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  
    ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
    url_has_any=url_has_any,
    httpuseragent_has_any=httpuseragent_has_any,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimWebSessionFortinetFortiGate
// Description: This ASIM parser supports filtering and normalizing Fortinet FortiGate logs produced by the Microsoft Sentinel Fortinet connector to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionFortinetFortiGate(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let parser=(
  starttime:datetime               = datetime(null), 
  endtime:datetime                 = datetime(null),
  srcipaddr_has_any_prefix:dynamic = dynamic([]),
  ipaddr_has_any_prefix:dynamic    = dynamic([]), 
  url_has_any:dynamic              = dynamic([]),
  httpuseragent_has_any:dynamic    = dynamic([]),
  eventresultdetails_in:dynamic    = dynamic([]),
  eventresult:string               = '*',
  disabled:bool                    = false
){
  let src_or_any                = set_union(
    srcipaddr_has_any_prefix,
    ipaddr_has_any_prefix
  ); 
  let remove_protocol_from_list = (list:dynamic)
  {
      print list
      | mv-apply l = print_0 to typeof(string) on
        ( extend l = substring(l,indexof(l,@'//')+2))
      | project l
  };
  let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string)
  [
      "passthrough","Allow","Success"
      , "blocked","Deny","Failure"
  ];
  // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels
  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
  [
    "1", "Informational", // Debug
    "2", "Informational", // Information
    "3", "Informational", // Notification
    "4", "Low", // Warning
    "5", "Low", // Error
    "6", "High", // Critical
    "7", "Medium", // Alert
    "8", "High" // Emergency
  ];     
  CommonSecurityLog
  | where not(disabled)
  | where (isnull(starttime) or TimeGenerated>=starttime) and (isnull(endtime) or TimeGenerated<=endtime)
  | where DeviceVendor == "Fortinet" 
    and DeviceProduct  startswith "Fortigate"
    and Activity has_all ('webfilter', 'utm')
  | where (array_length(url_has_any) == 0 or RequestURL has_any (remove_protocol_from_list(url_has_any)))
  | where (array_length(httpuseragent_has_any) == 0 or AdditionalExtensions has_any(httpuseragent_has_any))
  | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP,src_or_any)
  | extend temp_DstMatch = has_any_ipv4_prefix(DestinationIP,ipaddr_has_any_prefix)
  | extend ASimMatchingIpAddr = case(
      array_length(src_or_any) == 0, "-",
      temp_DstMatch and temp_SrcMatch, "Both",
      temp_SrcMatch , "SrcIpAddr",
      temp_DstMatch, "DstIpAddr",
      "No match") 
  | where ASimMatchingIpAddr != "No match" 
  | project-away temp_*
  | extend 
      EventResultDetails = "NA"
  | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in)) 
  | lookup EventLookup on DeviceAction 
  | where (eventresult == '*' or EventResult =~ eventresult)
  | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, EventResultDetails, DvcAction, RequestURL, RequestContext, DestinationHostName, SourceHostName, SourceUserName, DestinationUserName, ASimMatchingIpAddr
  | project-rename 
    Url                     = RequestURL
    , UrlCategory           = RequestContext
    , DstBytes              = ReceivedBytes
    , DstInterfaceName      = DeviceOutboundInterface
    , DstIpAddr             = DestinationIP
    , DstPortNumber         = DestinationPort
    , DvcHostname           = Computer
    , EventMessage          = Activity
    , EventOriginalSeverity = LogSeverity
    , EventProduct          = DeviceProduct
    , EventProductVersion   = DeviceVersion
    , SrcBytes              = SentBytes
    , SrcInterfaceName      = DeviceInboundInterface
    , SrcIpAddr             = SourceIP
    , SrcPortNumber         = SourcePort
    , DvcId                 = DeviceExternalID
    , EventUid              = _ItemId
    , DstHostname           = DestinationHostName
    , SrcHostname           = SourceHostName
    , SrcUsername           = SourceUserName
    , DstUsername           = DestinationUserName
  | invoke _ASIM_ResolveNetworkProtocol ('Protocol')
  | extend 
      DstUsernameType = _ASIM_GetUsernameType(DstUsername),
      SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
  | project-rename DvcOriginalAction = DeviceAction
  | parse-kv AdditionalExtensions as (
          FortinetFortiGatestart:datetime,
          FortinetFortiGatesrcintfrole:string,
          FortinetFortiGatedstintfrole:string,
          FortinetFortiGateexternalID:string,
          FortinetFortiGatepolicyid:int,
          FortinetFortiGatedstcountry:string,
          FortinetFortiGatesrccountry:string,
          FortinetFortiGatecrscore:string,
          FortinetFortiGateduration:int,
          FortinetFortiGatesentpkt:long,
          FortinetFortiGatercvdpkt:long,
          ['ad.referralurl']:string,
          ['ad.httpmethod']:string,
          ['ad.agent']:string
      ) with (pair_delimiter=';', kv_delimiter='=')
  | parse AdditionalExtensions with * "x-forwarded-for=" HttpRequestXff:string ";" *
  | project-rename
      HttpReferrer            = ['ad.referralurl'],
      HttpRequestMethod       = ['ad.httpmethod'],
      HttpUserAgent           = ['ad.agent'],
      EventStartTime          = FortinetFortiGatestart,
      SrcZone                 = FortinetFortiGatesrcintfrole,
      DstZone                 = FortinetFortiGatedstintfrole,
      NetworkSessionId        = FortinetFortiGateexternalID,
      RuleNumber              = FortinetFortiGatepolicyid,
      NetworkDuration         = FortinetFortiGateduration,
      DstGeoCountry           = FortinetFortiGatedstcountry,
      SrcGeoCountry           = FortinetFortiGatesrccountry,
      ThreatOriginalRiskLevel = FortinetFortiGatecrscore,
      SrcPackets              = FortinetFortiGatesentpkt,
      DstPackets              = FortinetFortiGatercvdpkt
  | parse AdditionalExtensions with * "Method=" temp_HttpRequestMethod "|User-Agent=" temp_HttpUserAgent ";" *
  | extend 
      HttpRequestMethod = coalesce(temp_HttpRequestMethod,HttpRequestMethod),
      HttpUserAgent = coalesce(temp_HttpUserAgent,HttpUserAgent)
  | project-away temp_*
  | where (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))
  | extend 
      EventCount               = int(1)
      , EventSchema            = "WebSession"
      , EventSchemaVersion     = "0.2.6"
      , EventType              = "HTTPsession"
      , EventVendor            = "Fortinet"
      , DvcIdType              = "Other"
      , NetworkBytes           = DstBytes + SrcBytes
      , EventEndTime           = TimeGenerated
      , EventStartTime         = coalesce(EventStartTime, TimeGenerated)
      , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
          , DstIpAddr contains ":", "IPv6"
          , "")
      , NetworkPackets         = DstPackets + SrcPackets
      , UserAgent              = HttpUserAgent
      , Dvc                    = DvcHostname
      , User                   = SrcUsername
      , Hostname               = DstHostname
  | lookup SeverityLookup on EventOriginalSeverity
  | extend 
      Src       = SrcIpAddr,
      Dst       = DstIpAddr,
      SessionId = NetworkSessionId,
      IpAddr    = SrcIpAddr,
      Duration  = NetworkDuration,
      Rule      = tostring(RuleNumber)
  | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionIIS
// Description: This ASIM parser supports filtering and normalizing IIS logs produced to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionIIS(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let parser=(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]),
  ipaddr_has_any_prefix:dynamic=dynamic([]), 
  url_has_any:dynamic=dynamic([]),
  httpuseragent_has_any:dynamic=dynamic([]),
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
)
{
      let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
      W3CIISLog
      | where not(disabled)
      | where (isnull(starttime) or TimeGenerated >= starttime)
          and (isnull(endtime) or TimeGenerated <= endtime)
      | extend
          EventResult = iff ( toint(scStatus) < 400, "Success", "Failure")
      | where (eventresult == '*' or EventResult =~ eventresult)
      | where (array_length(url_has_any) == 0 or csUriStem has_any (url_has_any) or csUriQuery has_any (url_has_any))
      | where (array_length(httpuseragent_has_any) == 0 or csUserAgent has_any(httpuseragent_has_any))
      | where (array_length(eventresultdetails_in) == 0 or scStatus has_any (eventresultdetails_in))
      | extend temp_SrcMatch=has_any_ipv4_prefix(cIP,src_or_any)
      | extend ASimMatchingIpAddr=case(
          array_length(src_or_any) == 0 ,"-",
          temp_SrcMatch, "Both",
          temp_SrcMatch, "SrcIpAddr",
          "No match"
      )
      | where ASimMatchingIpAddr != "No match" 
      | project-away temp_*
      | extend
              EventResult = iff ( toint(scStatus) < 400, "Success", "Failure"),
              EventResultDetails = tostring(scStatus), 
              csUriQuery = iff(csUriQuery == "-", "", csUriQuery),
              csUserName = iff(csUserName == "-", "", csUserName),
              HttpVersion = iff((csVersion has "HTTP"), split(csVersion, "/")[1], ""), // there is a limited chance that something connects over non-HTTP
              HttpHost = iff (sSiteName in ("Default Web Site", "-"), "", sSiteName)
      | project-rename 
              HttpRequestMethod = csMethod,
              User = csUserName, //probably won't have this one often
              Dvc = Computer,
              Dst = sIP,
              Src = cIP,
              UserAgent = csUserAgent,
              ThreatCategory = IndicatorThreatType,
              SrcGeoCountry = RemoteIPCountry,
              SrcGeoLatitude = RemoteIPLatitude,
              SrcGeoLongitude = RemoteIPLongitude,
              ThreatOriginalConfidence = Confidence,
              ThreatIpAddr = MaliciousIP,
              EventReportUrl = ReportReferenceLink,
              EventUid = _ItemId,
              DvcId = _ResourceId
      | extend
              EventOriginalSeverity = tostring(Severity),
              ThreatIsActive = tobool(IsActive),
              ThreatFirstReportedTime = todatetime(FirstReportedDateTime),
              ThreatLastReportedTime = todatetime(LastReportedDateTime),
              SrcUsername = iff ( User == "-", "", User),
              HttpReferrer = iff ( csReferer == "-", "", csReferer),
              DvcIdType = "AzureResourceId"
      | project-away IsActive, FirstReportedDateTime, LastReportedDateTime, Severity, sSiteName
      | extend 
              SrcUsernameType = _ASIM_GetUsernameType (SrcUsername),
              DstNatIpAddr = iff(csHost <> "", Dst, ""),
              EventType = 'WebServerSession',            
              EventVendor = 'Microsoft',
              EventSchemaVersion = '0.2.6',
              EventSchema = 'WebSession', 
              EventProduct = 'IIS',
              DvcOs = 'Windows',
              EventCount = int(1),
              SrcIpAddr = Src,
              IpAddr = Src,
              HttpUserAgent = UserAgent,
              HttpStatusCode = tostring(EventResultDetails),
              EventStartTime = ( (TimeGenerated) - (TimeTaken * 1ms)), // TimeTaken field is in Milliseconds 
              EventEndTime =  TimeGenerated,
              EventSeverity = iff(EventResult == "Success", "Low", "Informational"),
              Url = iff(csUriQuery == "", csUriStem, strcat(csUriStem,"?",csUriQuery)),
              sPort = tostring(sPort),
              HttpHost = iff ( HttpHost == "-", "", HttpHost),
              csHost = iff ( csHost == "-", "", csHost),  //remove empty values
              EventOriginalResultDetails = iff(scSubStatus <> "0", strcat (scStatus, ".", scSubStatus), scStatus)
      | extend 
              ipv6_parts = extract_all (@'^\[(.+)\](?:\:(\d+))?$',csHost)[0],
              ipv4_parts = extract_all (@'^(\d+\.\d+\.\d+\.\d+)(?:\:(\d+))?$',csHost)[0],
              host_parts = extract_all (@'^([^\\\d:]+)(?:\:(\d+))?$',csHost)[0]
      | extend         
              DstIpAddr = tostring(coalesce(ipv4_parts[0], ipv6_parts[0])),
              DstPortNumber = toint(coalesce(ipv4_parts[1], ipv6_parts[1], host_parts[1])),
              HttpHost = tostring(coalesce(host_parts[0], HttpHost))
      | project-away ipv4_parts, ipv6_parts, host_parts              
      | extend
          DstHostname = HttpHost,
          Hostname = HttpHost
      | extend 
               ThreatField = case(
                                  ThreatIpAddr <> "" and ThreatIpAddr == SrcIpAddr, "SrcIpAddr"
                                 ,ThreatIpAddr <> "" and ThreatIpAddr == DstIpAddr, "DstIpAddr"
                                 ,"")
      | project-away 
              AdditionalInformation,
              AzureDeploymentID,
              Date,
              Description,
              DvcOs,
              FileOffset,
              FileUri,
              MG, 
              ManagementGroupName,
              Role*,
              sComputerName,
              SourceSystem,
              TLPLevel,
              TenantId,
              TimeTaken,
              Time,
              cs*,
              sPort,
              sc*,
              StorageAccount
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionNative
// Description: This ASIM parser supports filtering and normalizing the native Microsoft Sentinel Web Session table (ASimWebSessionLogs) to the ASIM WebSession normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionNative(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let parser=(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]), 
  ipaddr_has_any_prefix:dynamic=dynamic([]), 
  url_has_any:dynamic=dynamic([]),
  httpuseragent_has_any:dynamic=dynamic([]),
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
)
{
  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  ASimWebSessionLogs
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
    | where (array_length(url_has_any) == 0 or Url has_any (url_has_any))
    | where (array_length(httpuseragent_has_any) == 0 or HttpUserAgent has_any(httpuseragent_has_any))
    | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))
    | where (eventresult == '*' or EventResult =~ eventresult)
    | extend temp_SrcMatch=has_any_ipv4_prefix(SrcIpAddr,src_or_any)
          , temp_DstMatch=has_any_ipv4_prefix(DstIpAddr,ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr=case(
                                  array_length(src_or_any) == 0 ,"-",
                                  temp_SrcMatch and temp_DstMatch, "Both",
                                  temp_SrcMatch, "SrcIpAddr",
                                  temp_DstMatch, "DstIpAddr",
                                  "No match"
                              )
    | where ASimMatchingIpAddr != "No match" 
    | project-away temp_*
    // 
    // -- Schema fixed
    | extend
        FileSize = tolong(FileSize)
    //
    // -- Log Analytics global fields renaming
    | project-rename
        EventUid          = _ItemId,
        DvcScopeId        = _SubscriptionId
    //
    // -- ASIM Global fields
    | extend          
        EventSchema       = "WebSession"
    | extend
        //
        // -- Default values
        EventEndTime      = coalesce (EventEndTime, TimeGenerated),
        EventStartTime    = coalesce (EventStartTime, TimeGenerated),
        //
        // -- Multi-source aliases
        Dvc = iff (EventType == 'HTTPSession',
          coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct)),
          coalesce (DvcFQDN, DvcHostname, DstFQDN, DstHostname, DvcIpAddr, DstIpAddr, DvcId, DstDvcId, DstMacAddr, _ResourceId, strcat (EventVendor,'/', EventProduct))
        ),
        Dst               = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),
        Src               = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
        Rule              = coalesce(RuleName, tostring(RuleNumber)),
        //
        // -- Aliases which depend on EventType
        Hostname = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), SrcHostname, DstHostname),
        IpAddr = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), DstIpAddr, SrcIpAddr),
        //
        // -- Simple aliases
        Duration          = NetworkDuration,
        SessionId         = NetworkSessionId,
        User              = SrcUsername,
        HttpStatusCode    = EventResultDetails,
        UserAgent         = HttpUserAgent
        // --
        // -- Aliased fields not implemented in ASimWebSessionLogs yet 
        //InnerVlanId     = SrcVlanId,
        //OuterVlanId     = DstVlanId,
        //DvcInterface    = coalesce(DvcInterface, DvcInboundInterface, DvcOutboundInterface), 
    | project-away
        TenantId, SourceSystem, _ResourceId
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionPaloAltoCEF
// Description: This ASIM parser supports filtering and normalizing Palo Alto PanOS threat event logs delivered using CEF to the ASIM WebSession normalized schema. The Palo Alto threat events are generated by the Palo Alto URL filtering module and collected using the Palo Alto Networks connectors, Common Event Format (CEF) via AMA connector, or the Common Event Format (CEF) via Legacy Agent connector to the CommonSecurityLog table.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionPaloAltoCEF(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let parser=(
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]),
  ipaddr_has_any_prefix:dynamic=dynamic([]), 
  url_has_any:dynamic=dynamic([]),
  httpuseragent_has_any:dynamic=dynamic([]),
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
)
{
    let src_or_any                = set_union(
      srcipaddr_has_any_prefix,
      ipaddr_has_any_prefix
    ); 
    let EventLookup=datatable(DeviceAction:string, DvcAction:string,EventResult:string,HttpStatusCode:string)
    [
      "alert", "Allow", "Success","200",
      "allow", "Allow", "Success", "200",
      "continue", "Allow", "Success", "200",
      "override", "Allow", "Success", "200",
      "block-continue", "Allow", "Partial", "200",
      "block-url", "Deny", "Failure", "503",
      "block-override", "Deny", "Failure", "302",
      "override-lockout", "Deny", "Failure","503",
      "reset client", "Reset Source", "Failure", "503",
      "reset server", "Reset Destination", "Failure", "503",
      "reset both", "Reset", "Failure", "503",
      "deny", "Deny", "Failure", "503",
      "drop", "Drop", "Failure", "503",
      "drop ICMP", "Drop ICMP", "Failure", "503"
    ];
    let SeverityLookup=datatable(LogSeverity:string,EventSeverity:string)
    [   
      1, "Informational", 
      2, "Low",
      3, "Medium",
      4, "Medium", 
      5, "High"
    ];
    let remove_protocol_from_list = (list:dynamic)
    {
      print list
      | mv-apply l = print_0 to typeof(string) on
      ( extend l = replace_regex (tostring(l), "^(?i:.*?)://", "") )
      | project l
    };
    CommonSecurityLog
    | where not(disabled)
    | where (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
    | where DeviceVendor == "Palo Alto Networks"
      and DeviceProduct == "PAN-OS"
      and Activity == "THREAT"
      and DeviceEventClassID == "url"
    | where (array_length(url_has_any) == 0 or RequestURL has_any (remove_protocol_from_list(url_has_any)))
    | where (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))
    | extend temp_SrcMatch = has_any_ipv4_prefix(SourceIP,src_or_any)
    | extend temp_DstMatch = has_any_ipv4_prefix(DestinationIP,ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr = case(
        array_length(src_or_any) == 0, "-",
        temp_DstMatch and temp_SrcMatch, "Both",
        temp_SrcMatch , "SrcIpAddr",
        temp_DstMatch, "DstIpAddr",
        "No match") 
    | where ASimMatchingIpAddr != "No match" 
    | project-away temp_*
    | extend EventResultDetails     = "NA"
    | where (array_length(eventresultdetails_in) == 0 or tostring(EventResultDetails) has_any(eventresultdetails_in))
    | lookup EventLookup on DeviceAction
    | where (eventresult == '*' or EventResult =~ eventresult)
    | lookup SeverityLookup on LogSeverity
    | parse-kv AdditionalExtensions as (
        PanOSXForwarderfor:string,
        PanXFFIP:string,
        PanOSReferer:string,
        PanOSRuleUUID:string,
        PanSrcHostname:string,
        PanSrcMac:string,
        PanSrcDeviceCat:string,
        PanSrcDAG:string,
        PanOSSrcUUID:string,
        PanSrcDeviceProf:string,
        PanSrcDeviceModel:string,
        PanSrcDeviceVendor:string,
        PanSrcDeviceOS:string,
        PanSrcDeviceOSv:string,
        PanDstHostname:string,
        PanDstMac:string,
        PanDstDeviceCat:string,
        PanDstDAG:string,
        PanOSDstUUID:string,
        PanDstDeviceProf:string,
        PanDstDeviceModel:string,
        PanDstDeviceVendor:string,
        PanDstDeviceOS:string,
        PanDstDeviceOSv:string
      ) with (pair_delimiter=';', kv_delimiter='=')
    | extend 
      HttpRequestXff            = coalesce(PanOSXForwarderfor, PanXFFIP)
    | project-rename 
      DvcHostname               = Computer,
      HttpReferrer              = PanOSReferer,
      DstMacAddr                = PanDstMac,
      SrcMacAddr                = PanSrcMac,
      DstHostname               = PanDstHostname,
      SrcHostname               = PanSrcHostname,
      DvcId                     = DeviceExternalID,
      SrcZone                   = DeviceCustomString4,
      DstZone                   = DeviceCustomString5,
      UrlCategory               = DeviceCustomString2,
      DvcOriginalAction         = DeviceAction,
      EventUid                  = _ItemId,
      EventOriginalSeverity     = LogSeverity,
      EventProductVersion       = DeviceVersion,
      DvcInboundInterface       = DeviceInboundInterface,
      DvcOutboundInterface      = DeviceOutboundInterface,
      DstIpAddr                 = DestinationIP,
      DstPortNumber             = DestinationPort,
      SrcIpAddr                 = SourceIP,
      SrcPortNumber             = SourcePort,
      SrcUsername               = SourceUserName,
      DstUsername               = DestinationUserName,
      NetworkRuleName           = DeviceCustomString1,
      ThreatOriginalConfidence  = ThreatConfidence,
      DstNatIpAddr              = DestinationTranslatedAddress,
      DstNatPortNumber          = DestinationTranslatedPort,
      SrcNatIpAddr              = SourceTranslatedAddress,
      SrcNatPortNumber          = SourceTranslatedPort,
      HttpUserAgent             = RequestClientApplication
    | extend
      Dvc                       = DvcHostname,
      DvcIdType                 = "Other",
      EventType                 = "HTTPsession",
      EventSchema               = "WebSession",
      EventSchemaVersion        = "0.2.5",
      EventVendor               = "Palo Alto",
      EventProduct              = "PanOS",
      EventStartTime            = TimeGenerated,
      EventEndTime              = TimeGenerated,
      HttpRequestMethod         = toupper(RequestMethod),
      HttpContentFormat         = RequestContext,
      DstDomainType             = "FQDN",
      Src                       = SrcIpAddr,
      SrcUsernameType           = case(isempty(SrcUsername), "", 
        "Windows"),
      DstUsernameType           = case(isempty(DstUsername), "", 
        "Windows"),
      NetworkProtocolVersion    = case(
        DstIpAddr contains "."  , "IPv4",
        DstIpAddr contains ":"  , "IPv6",
        ""),
      NetworkDirection          = case(
        FlexString2 == "client-to-server", "Outbound",
        FlexString2 == "server-to-client", "Inbound",
        ""),
      IpAddr                    = SrcIpAddr,
      NetworkProtocol           = toupper(Protocol),
      User                      = SrcUsername,
      Rule                      = NetworkRuleName,
      NetworkSessionId          = tostring(DeviceCustomNumber1),
      DvcInterface              = DvcInboundInterface,
      Hostname                  = DstHostname,
      Url                       = trim('"', RequestURL),
      UserAgent                 = HttpUserAgent
    | extend
      DstFQDN                   = iif(Url contains ":", split(Url, ":")[0], split(Url, "/")[0]),
      SessionId                 = NetworkSessionId,
      ThreatField               = case(
        isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr",
        isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr",
        "")
    | extend 
      ThreatIpAddr                = case(
        ThreatField == "SrcIpAddr", SrcIpAddr,
        ThreatField == "DstIpAddr", DstIpAddr,
        ""),
      Dst                       = DstFQDN
    | project ASimMatchingIpAddr, DeviceVendor, Dst, DstDomainType, DstFQDN, DstHostname, DstIpAddr, DstMacAddr, DstNatIpAddr, DstNatPortNumber, DstPortNumber, DstUsername, DstUsernameType, DstZone, Dvc, DvcAction, DvcHostname, DvcId, DvcIdType, DvcInboundInterface, DvcInterface, DvcOriginalAction, DvcOutboundInterface, EventCount, EventEndTime, EventOriginalSeverity, EventProduct, EventProductVersion, EventResult, EventResultDetails, EventSchema, EventSchemaVersion, EventSeverity, EventStartTime, EventType, EventUid, EventVendor, Hostname, HttpContentFormat, HttpRequestMethod, HttpRequestXff, HttpStatusCode, IpAddr, NetworkDirection, NetworkProtocol, NetworkProtocolVersion, NetworkRuleName, NetworkSessionId, Protocol, RequestContext, Rule, SessionId, Src, SrcHostname, SrcIpAddr, SrcMacAddr, SrcNatIpAddr, SrcNatPortNumber, SrcPortNumber, SrcUsername, SrcUsernameType, SrcZone, ThreatField, ThreatIpAddr, ThreatOriginalConfidence, TimeGenerated, Type, Url, UrlCategory, User, HttpUserAgent, UserAgent
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionPaloAltoCortexDataLake
// Description: This ASIM parser supports normalizing Palo Alto Cortex Data Lake logs to the ASIM Web Session normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionPaloAltoCortexDataLake(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
[
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Low",
    "5", "Low",
    "6", "Medium",
    "7", "Medium",
    "8", "Medium",
    "9", "High",
    "10", "High"
];
let EventLookup=datatable(
    DeviceAction: string,
    DvcAction: string,
    EventResult: string
)
    [
    "alert", "Allow", "Success",
    "continue", "Allow", "Success",
    "override", "Allow", "Success",
    "block-continue", "Allow", "Partial",
    "block-url", "Deny", "Failure",
    "block-override", "Deny", "Failure",
    "override-lockout", "Deny", "Failure",
];
let ThreatRiskLevelLookup = datatable(PanOSApplicationRisk: string, ThreatRiskLevel: int)
    [
    "1", 20,
    "2", 40,
    "3", 60,
    "4", 80,
    "5", 100
];
let parser = (
    starttime: datetime=datetime(null),
    endtime: datetime=datetime(null),
    srcipaddr_has_any_prefix: dynamic=dynamic([]),
    ipaddr_has_any_prefix: dynamic=dynamic([]),
    url_has_any: dynamic=dynamic([]),
    httpuseragent_has_any: dynamic=dynamic([]),
    eventresultdetails_in: dynamic = dynamic([]),
    eventresult: string='*',
    disabled: bool=false
    ) {
    let src_or_any = set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
    CommonSecurityLog
    | where not(disabled)
        and (isnull(starttime) or TimeGenerated >= starttime)
        and (isnull(endtime) or TimeGenerated <= endtime)
        and DeviceVendor == "Palo Alto Networks" and DeviceProduct == "LF"
        and DeviceEventClassID == "THREAT" and Activity == "url"
        and (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))
        and array_length(eventresultdetails_in) == 0
        and (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any))
    | parse-kv AdditionalExtensions as (PanOSDestinationUUID: string, PanOSDestinationLocation: string, PanOSDestinationDeviceMac: string, PanOSSourceUUID: string, PanOSSourceDeviceMac: string, PanOSReferer: string, PanOSIsClienttoServer: string, PanOSSourceDeviceHost: string, PanOSDestinationDeviceHost: string, start: string, PanOSApplicationCategory: string, PanOSApplicationSubcategory: string, PanOSApplicationTechnology: string, PanOSDestinationDeviceOS: string, PanOSDestinationDeviceOSFamily: string, PanOSDestinationDeviceOSVersion: string, PanOSHostID: string, PanOSHTTPHeaders: string, PanOSInlineMLVerdict: string, PanOSInboundInterfaceDetailsType: string, PanOSOutboundInterfaceDetailsType: string, PanOSParentSessionID: string, PanOSContainerName: string, PanOSContainerNameSpace: string, PanOSHTTPRefererFQDN: string, PanOSHTTPRefererPort: string, PanOSHTTPRefererProtocol: string, PanOSHTTPRefererURLPath: string, PanOSRuleUUID: string, PanOSURLCategoryList: string, PanOSURLDomain: string, PanOSURLCounter: string, PanOSUsers: string, PanOSVendorSeverity: string, ["PanOSX-Forwarded-For"]: string, ["PanOSX-Forwarded-ForIP"]: string, PanOSIsSaaSApplication: string, PanOSLogSource: string, PanOSSourceLocation: string, PanOSCortexDataLakeTenantID: string, PanOSApplicationRisk: string) with (pair_delimiter=";", kv_delimiter="=")
    | lookup EventLookup on DeviceAction
    | where (eventresult == '*' or EventResult =~ eventresult)
    | extend
        temp_SrcMatch = has_any_ipv4_prefix(coalesce(DeviceCustomIPv6Address2, SourceIP), src_or_any),
        temp_DstMatch = has_any_ipv4_prefix(coalesce(DeviceCustomIPv6Address3, DestinationIP), ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr = case(
                                  array_length(src_or_any) == 0,
                                  "-",
                                  temp_SrcMatch and temp_DstMatch,
                                  "Both",
                                  temp_SrcMatch,
                                  "SrcIpAddr",
                                  temp_DstMatch,
                                  "DstIpAddr",
                                  "No match"
                              )
    | where ASimMatchingIpAddr != "No match"
    | invoke _ASIM_ResolveDvcFQDN('DeviceName')
    | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')
    | invoke _ASIM_ResolveDstFQDN('PanOSDestinationDeviceHost')
    | lookup EventSeverityLookup on LogSeverity
    | lookup ThreatRiskLevelLookup on PanOSApplicationRisk
    | extend
        EventStartTime = todatetime(coalesce(start, ReceiptTime)),
        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
        DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
        HttpRequestMethod = toupper(RequestMethod),
        NetworkProtocol = toupper(Protocol),
        NetworkSessionId = tostring(FieldDeviceCustomNumber1),
        SrcDomain = coalesce(SourceNTDomain, SrcDomain),
        DstDomain = coalesce(DestinationNTDomain, DstDomain),
        AdditionalFields = bag_pack(
                      "DirectionOfAttack",
                      FlexString2,
                      "VirtualLocation",
                      DeviceCustomString3,
                      "PanOSApplicationCategory",
                      PanOSApplicationCategory,
                      "PanOSApplicationSubcategory",
                      PanOSApplicationSubcategory,
                      "PanOSApplicationTechnology",
                      PanOSApplicationTechnology,
                      "PanOSDestinationDeviceOS",
                      PanOSDestinationDeviceOS,
                      "PanOSDestinationDeviceOSFamily",
                      PanOSDestinationDeviceOSFamily,
                      "PanOSDestinationDeviceOSVersion",
                      PanOSDestinationDeviceOSVersion,
                      "PanOSHostID",
                      PanOSHostID,
                      "PanOSHTTPHeaders",
                      PanOSHTTPHeaders,
                      "PanOSInlineMLVerdict",
                      PanOSInlineMLVerdict,
                      "PanOSInboundInterfaceDetailsType",
                      PanOSInboundInterfaceDetailsType,
                      "PanOSOutboundInterfaceDetailsType",
                      PanOSOutboundInterfaceDetailsType,
                      "PanOSParentSessionID",
                      PanOSParentSessionID,
                      "PanOSContainerName",
                      PanOSContainerName,
                      "PanOSContainerNameSpace",
                      PanOSContainerNameSpace,
                      "PanOSHTTPRefererFQDN",
                      PanOSHTTPRefererFQDN,
                      "PanOSHTTPRefererPort",
                      PanOSHTTPRefererPort,
                      "PanOSHTTPRefererProtocol",
                      PanOSHTTPRefererProtocol,
                      "PanOSHTTPRefererURLPath",
                      PanOSHTTPRefererURLPath,
                      "PanOSRuleUUID",
                      PanOSRuleUUID,
                      "PanOSDestinationDeviceOS",
                      PanOSDestinationDeviceOS,
                      "PanOSDestinationDeviceOSFamily",
                      PanOSDestinationDeviceOSFamily,
                      "PanOSDestinationDeviceOSVersion",
                      PanOSDestinationDeviceOSVersion,
                      "PanOSURLCategoryList",
                      PanOSURLCategoryList,
                      "PanOSURLDomain",
                      PanOSURLDomain,
                      "PanOSURLCounter",
                      PanOSURLCounter,
                      "PanOSUsers",
                      PanOSUsers,
                      "PanOSVendorSeverity",
                      PanOSVendorSeverity,
                      "PanOSX-Forwarded-For",
                      ["PanOSX-Forwarded-For"],
                      "PanOSX-Forwarded-ForIP",
                      ["PanOSX-Forwarded-ForIP"],
                      "PanOSLogSource",
                      PanOSLogSource
                  ),
        HttpContentType = RequestContext
    | project-rename
        DvcIpAddr = Computer,
        EventUid = _ItemId,
        DstDvcId = PanOSDestinationUUID,
        DstGeoCountry = PanOSDestinationLocation,
        DstMacAddr = PanOSDestinationDeviceMac,
        DstNatIpAddr = DestinationTranslatedAddress,
        DstNatPortNumber = DestinationTranslatedPort,
        DstPortNumber = DestinationPort,
        DstUsername = DestinationUserName,
        DstZone = DeviceCustomString5,
        DvcId = DeviceExternalID,
        DvcOriginalAction = DeviceAction,
        EventOriginalSeverity = LogSeverity,
        EventOriginalType = DeviceEventClassID,
        EventOriginalUid = ExtID,
        EventProductVersion = DeviceVersion,
        HttpContentFormat = RequestContext,
        HttpReferrer = PanOSReferer,
        RuleName = DeviceCustomString1,
        SrcDvcId = PanOSSourceUUID,
        SrcMacAddr = PanOSSourceDeviceMac,
        SrcNatIpAddr = SourceTranslatedAddress,
        SrcNatPortNumber = SourceTranslatedPort,
        SrcPortNumber = SourcePort,
        SrcUsername = SourceUserName,
        SrcZone = DeviceCustomString4,
        Url = RequestURL,
        UrlCategory = DeviceCustomString2,
        EventOriginalSubType = Activity,
        DvcOutboundInterface = DeviceOutboundInterface,
        DvcInboundInterface = DeviceInboundInterface,
        DstUserId = DestinationUserID,
        SrcUserId = SourceUserID,
        EventOwner = PanOSLogSource,
        HttpUserAgent = RequestClientApplication,
        SrcGeoCountry = PanOSSourceLocation,
        DvcScopeId = PanOSCortexDataLakeTenantID,
        SrcAppName = ApplicationProtocol,
        ThreatOriginalRiskLevel = PanOSApplicationRisk
    | extend
        Dst = coalesce(DstFQDN, DstDvcId, DstHostname, DstIpAddr),
        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        Src = coalesce(SrcFQDN, SrcDvcId, SrcHostname, SrcIpAddr),
        NetworkProtocolVersion = case(
                            DstIpAddr contains ".",
                            "IPv4",       
                            DstIpAddr contains ":",
                            "IPv6", 
                            ""
                        ),
        NetworkDirection = iff(PanOSIsClienttoServer == "true", "Outbound", "Inbound"),
        Rule = RuleName,
        SrcUserType = _ASIM_GetUserType(SrcUsername, SrcUserId),
        DstUserType = _ASIM_GetUserType(DstUsername, DstUserId),
        User = SrcUsername,
        Hostname = DstHostname,
        IpAddr = SrcIpAddr,
        SessionId = NetworkSessionId,
        UserAgent = HttpUserAgent,
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        SrcDvcIdType = iff(isnotempty(SrcDvcId), "Other", ""),
        DstDvcIdType = iff(isnotempty(DstDvcId), "Other", ""),
        SrcDomainType = iff(isnotempty(SourceNTDomain), "Windows", SrcDomainType),
        DstDomainType = iff(isnotempty(DestinationNTDomain), "Windows", DstDomainType),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        DstUsernameType = _ASIM_GetUsernameType(DstUsername),
        SrcUserIdType = iff(isnotempty(SrcUserId), "UID", ""),
        DstUserIdType = iff(isnotempty(DstUserId), "UID", ""),
        SrcAppType = case(
                  isnotempty(SrcAppName) and PanOSIsSaaSApplication == "true",
                  "SaaS Application",
                  isnotempty(SrcAppName) and PanOSIsSaaSApplication == "false",
                  "Other",
                  ""
              )
    | extend
        EventProduct = "Cortex Data Lake",
        EventVendor = "Palo Alto",
        EventSchema = "WebSession",
        EventSchemaVersion = "0.2.6",
        EventType = "HTTPsession"
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        EventOutcome,
        PanOS*,
        Protocol,
        temp*,
        ExternalID,
        Message,
        start,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        SimplifiedDeviceAction,
        StartTime,
        TenantId,
        ReportReferenceLink,
        ReceiptTime,
        Reason,
        Indicator*,
        _ResourceId,
        ThreatConfidence,
        ThreatDescription,
        ThreatSeverity
};
parser(
    starttime=starttime, 
    endtime=endtime,
    srcipaddr_has_any_prefix=srcipaddr_has_any_prefix,  
    ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
    url_has_any=url_has_any,
    httpuseragent_has_any=httpuseragent_has_any,
    eventresultdetails_in=eventresultdetails_in,
    eventresult=eventresult,
    disabled=disabled
)
}



//
// Function Name: vimWebSessionSonicWallFirewall
// Description: This ASIM parser supports normalizing SonicWall SonicOS ArcSight-formatted syslog received via the SonicWall Firewall/Common Event Format data connectors and ingested to the CommonSecurityLog table by Microsoft Sentinel to the ASIM WebSession normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionSonicWallFirewall(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let parser=(
  starttime:datetime=datetime(null),
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]),
  ipaddr_has_any_prefix:dynamic=dynamic([]), 
  url_has_any:dynamic=dynamic([]),
  httpuseragent_has_any:dynamic=dynamic([]),
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
  )
  {
    let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix);
    let Actions=datatable(fw_action:string, DvcAction:string, EventSeverity:string)
      [ "\"forward\"", "Allow", "Informational"
      , "\"mgmt\"", "Other", "Informational"
      , "\"NA\"", "Other", "Informational"
      , "\"drop\"", "Drop", "Low"
    ];
    CommonSecurityLog
    | where not(disabled)
        and DeviceVendor == "SonicWall"
        and DeviceEventClassID in (14, 97)
        and (isnull(starttime) or TimeGenerated >= starttime) and (isnull(endtime) or TimeGenerated <= endtime)
        and (array_length(httpuseragent_has_any) == 0 or RequestClientApplication has_any (httpuseragent_has_any))
        and Protocol has_any(dynamic(["udp/http", "tcp/http", "udp/https", "tcp/https"]))
        and (array_length(url_has_any) == 0 or RequestURL has_any (url_has_any) or AdditionalExtensions has_any (url_has_any))
        and (array_length(eventresultdetails_in) == 0)
    | parse-kv AdditionalExtensions as (['gcat']:string, ['app']:string, ['arg']:string, ['dstV6']:string, ['srcV6']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string, ['uuid']:string) with (pair_delimiter=";", kv_delimiter="=")
    | extend
        SrcIpAddr = coalesce(SourceIP, srcV6)
      , DstIpAddr = coalesce(DestinationIP, dstV6)
    | where (isnotempty(SrcIpAddr) or isnotempty(DstIpAddr))
        and isnotempty(fw_action)
    | extend temp_SrcMatch = has_any_ipv4_prefix(SrcIpAddr, src_or_any)
      , temp_DstMatch = has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix)
    | extend ASimMatchingIpAddr = case(array_length(src_or_any) == 0, "-",
                                      temp_SrcMatch and temp_DstMatch, "Both",
                                      temp_SrcMatch, "SrcIpAddr",
                                      temp_DstMatch, "DstIpAddr",
                                      "No match")
    | where ASimMatchingIpAddr != "No match"
    | project-away temp_*
    | extend RequestURL_ = extract(@"(?:[.*;]+?)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)(?:;fw_action)", 1, AdditionalExtensions)
    | extend RequestURL_ = iif(RequestURL_ startswith "snpt" or RequestURL_ startswith "dnpt" or RequestURL_ startswith "appid" or RequestURL_ startswith "appName", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), RequestURL_)
    | extend RequestURL_ = iif(RequestURL_ matches regex @"^(.{2,6}=.{1,6})", extract(@"(?:\d;|.{1}\w.{1};)(?P<url>[a-zA-Z0-9_*.,}{&%$~:;\-=\/?[:space:]]+)", 1, RequestURL_), iif(RequestURL_ matches regex @"^\w=\d$", "", RequestURL_))
    | extend RequestURL_ = iif(RequestURL_ has_any(dynamic(["af_polid=", "ipscat=", "snpt=", "dnpt="])), "", RequestURL_)
    | extend RequestURL = iif(isnotempty(RequestURL), RequestURL, iif(RequestURL_ contains "/" and RequestURL_ contains ".", RequestURL_, ""))
    | where isnotempty(RequestURL)
    | lookup Actions on fw_action
    | extend EventResult = case(DvcAction == "Allow", "Success",
          DvcAction == "Management", "NA",
          DvcAction == "NA", "NA",
          DvcAction == "Other", "NA",
          "Failure"
          )
    | where (eventresult == "*" or EventResult =~ eventresult)
    | extend sosLogMsgSeverity = case(LogSeverity == 10, "Emergency (0)",
          LogSeverity == 9, "Alert (1)",
          LogSeverity == 8, "Critical (2)",
          LogSeverity == 7, "Error (3)",
          LogSeverity == 6, "Warning (4)",
          LogSeverity == 5, "Notice (5)",
          LogSeverity == 4, "Info (6)/Debug (7)",
          LogSeverity == 3, "Not Mapped (3)",
          LogSeverity == 2, "Not Mapped (2)",
          LogSeverity == 1, "Not Mapped (1)",
          "Not Mapped"
          )
    | extend EventSeverity = case(tolong(LogSeverity) <= 4, "Informational"
                                  , tolong(LogSeverity) <= 6, "Low"
                                  , tolong(LogSeverity) <= 8, "Medium"
                                  , tolong(LogSeverity) > 8, "High"
                                  , ""
                                  )
    | extend HttpRequestMethod = case(tolong(RequestMethod) == 0, ""
                                      , tolong(RequestMethod) == 1, "GET"
                                      , tolong(RequestMethod) == 2, "POST"
                                      , tolong(RequestMethod) == 3, "HEAD"
                                      , tolong(RequestMethod) == 4, "PUT"
                                      , tolong(RequestMethod) == 5, "CONNECT"
                                      , tolong(RequestMethod) == 6, ""
                                      , ""
                                      )
    | extend NetworkProtocolVersion = case(DestinationIP has ".", "IPv4"
                                          , DestinationIP has ":", "IPv6"
                                          , ""
                                          )
      , NetworkProtocol = toupper(iff(Protocol contains "-" and Protocol !contains "/", toupper(trim_start(@".*-", Protocol)), toupper(trim_end(@"/.*", Protocol))))
      , NetworkApplicationProtocol = tostring(toupper(trim_start(@".*/", Protocol)))
      , EventOriginalType = DeviceEventClassID
    | project-rename
        DstMacAddr = DestinationMACAddress
        , SrcMacAddr = SourceMACAddress
        , DstPortNumber = DestinationPort
        , SrcPortNumber = SourcePort
        , EventMessage = Activity
        , sosEventMessageDetail = Message
        , EventProductVersion = DeviceVersion
        , Dvc = Computer
        , DvcOutboundInterface = DeviceOutboundInterface
        , DvcInboundInterface = DeviceInboundInterface
        , sosApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).
        , sosCFSFullString = Reason // CFS Block Category ID and Name
        , RuleName = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.
        , sosSourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.
        , sosDestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.
        , sosLogMsgNote = DeviceCustomString6 // "Note" field. Additional information that is application-dependent.
        , SrcNatIpAddr = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.
        , DstNatIpAddr = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.
        , SrcZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.
        , DstZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.
        , sosUserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.
        , sosUserSessionDuration = DeviceCustomString6Label // User session duration in seconds.
        , SrcUsername = SourceUserName
        , ThreatOriginalConfidence = ThreatConfidence
        , HttpUserAgent = RequestClientApplication
        , Url = RequestURL
| where (array_length(url_has_any) == 0 or Url has_any (url_has_any))
| extend sosLogMsgCategory = case(gcat == 1, "System (1)",
                                              gcat == 2, "Log (2)",
                                              gcat == 3, "Security Services (3)",
                                              gcat == 4, "Users (4)",
                                              gcat == 5, "Firewall Settings (5)",
                                              gcat == 6, "Network (6)",
                                              gcat == 7, "VPN (7)",
                                              gcat == 8, "High Availability (8)",
                                              gcat == 9, "3G/4G, Modem, and Module (9)",
                                              gcat == 10, "Firewall (10)",
                                              gcat == 11, "Wireless (11)",
                                              gcat == 12, "VoIP (12)",
                                              gcat == 13, "SSL VPN (13)",
                                              gcat == 14, "Anti-Spam (14)",
                                              gcat == 15, "WAN Acceleration (15)",
                                              gcat == 16, "Object (16)",
                                              gcat == 17, "SD-WAN (17)",
                                              gcat == 18, "Multi-Instance (18)",
                                              gcat == 19, "Unified Policy Engine (19)",
                                              "Log Category Not Mapped"
                                              )
| extend EventOriginalSubType = case(DeviceEventCategory == 0, "None (0)",
                                            DeviceEventCategory == 1, "System Maintenance (1)",
                                            DeviceEventCategory == 2, "System Errors (2)",
                                            DeviceEventCategory == 4, "Blocked Web Sites (4)",
                                            DeviceEventCategory == 8, "Blocked Java Etc. (8)",
                                            DeviceEventCategory == 16, "User Activity (16)",
                                            DeviceEventCategory == 32, "Attacks (32)",
                                            DeviceEventCategory == 64, "Dropped TCP (64)",
                                            DeviceEventCategory == 128, "Dropped UDP (128)",
                                            DeviceEventCategory == 256, "Dropped ICMP (256)",
                                            DeviceEventCategory == 512, "Network Debug (512)",
                                            DeviceEventCategory == 1024, "Connection Closed (1024)",
                                            DeviceEventCategory == 2048, "Dropped LAN TCP (2048)",
                                            DeviceEventCategory == 4096, "Dropped LAN UDP (4096)",
                                            DeviceEventCategory == 8192, "Dropped LAN ICMP (8192)",
                                            DeviceEventCategory == 32768, "Modem Debug (32768)",
                                            DeviceEventCategory == 65536, "VPN Tunnel Status (65536)",
                                            DeviceEventCategory == 131072, "IEEE 802.11 Management (131072)",
                                            DeviceEventCategory == 262144, "Connection Opened (262144)",
                                            DeviceEventCategory == 524288, "System Environment (524288)",
                                            DeviceEventCategory == 1048576, "Expanded - VoIP Activity (1048576)",
                                            DeviceEventCategory == 2097152, "Expanded - WLAN IDS Activity (2097152)",
                                            DeviceEventCategory == 4194304, "Expanded - SonicPoint Activity (4194304)",
                                            DeviceEventCategory == 8388608, "Expanded - Unified Policy Engine (8388608)",
                                            "Legacy Category Not Mapped"
                                            )
| extend sosIPSPriority = case(ipspri == 1, "High (1)",
                                            ipspri == 2, "Medium (2)",
                                            ipspri == 3, "Low (3)",
                                            ""
                                            )
| extend sosAntiSpywarePriority = case(spypri == 1, "High (1)",
                                      spypri == 2, "Medium (2)",
                                      spypri == 3, "Low (3)",
                                      ""
                                      )
| extend
    EventVendor = "SonicWall"
    , EventProduct = "Firewall"
    , DvcOs = "SonicOS"
    , DvcOsVersion = EventProductVersion
    , DvcIdType = "Other"
    , DvcDescription = DeviceProduct
    , Rule = RuleName
    , NetworkBytes = tolong(coalesce(toint(ReceivedBytes), 0) + coalesce(toint(SentBytes), 0))
    , sosIPSFullString = ipscat
    , ipscat = extract(@'^"?([a-zA-Z-\/]+)', 1, ipscat) // IPS Category/Signature
    , sosIPSSignatureName = extract(@'[ ](.*)\S', 1, ipscat) // IPS Signature name
    , FileSize = tolong(coalesce(FileSize, long(null)))
    , sosAppControlFileName = extract(@'.*Filename: (.*)\"', 1, sosEventMessageDetail) // App Control Filename Logging
    , HttpReferrer = extract(@'Referer: (.*)\"$', 1, coalesce(sosLogMsgNote, ""))
    , sosHttpRequestMethod_ = extract(@'Command: (.\w+)', 1, coalesce(sosLogMsgNote, ""))
    , sosCFSCategoryID = extract(@'(\d+)\s', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
    , sosCFSCategoryName = extract(@'.*-("(.*))', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
    , sosCFSPolicyName = extract(@'Policy: (.*), Info:', 1, coalesce(sosLogMsgNote, ""))
    , sosCaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\. ', 1, sosEventMessageDetail)
    , sosGAVSignatureName = extract(@'Gateway Anti-Virus Alert: (.*) blocked\.', 1, sosEventMessageDetail)
    , sosASWSignatureName = extract(@'Anti-Spyware Detection Alert: (.*)\. ', 1, sosEventMessageDetail)
    , sosCountry = extract(@'Country Name:(.*)\"$', 1, sosEventMessageDetail)
    , EventOriginalSeverity = LogSeverity
    , Dst = DstIpAddr
    , Src = SrcIpAddr
    , IpAddr = SrcIpAddr
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = "HTTPsession"
    , EventSchemaVersion = "0.2.5"
    , EventSchema = "WebSession"
    , EventCount = toint(1)
    , EventUid = _ItemId
    , UserAgent = HttpUserAgent
    , ThreatConfidence = coalesce(toint(ThreatOriginalConfidence), int(null))
| extend
    UrlCategory = sosCFSCategoryName
    , HttpRequestMethod = coalesce(HttpRequestMethod, sosHttpRequestMethod_)
    , EventResultDetails = ""
    , HttpStatusCode = ""
    , SrcUsername = coalesce(susr, SrcUsername)
    , FileName = coalesce(FileName, sosAppControlFileName)
    , NetworkDirection = case(SrcZone == "" and DstZone == "", "NA"
                              , SrcZone == "WAN" and (DstZone == "WAN" and DstIpAddr !has ".255"), "Inbound"
                              , SrcZone == "WAN" and DstZone == "WAN", "External"
                              , SrcZone == "WAN" and DstZone != "WAN", "Inbound"
                              , SrcZone == "VPN" and DstZone == "WAN", "Outbound"
                              , SrcZone == "VPN" and DstZone != "WAN", "Inbound"
                              , DstZone == "MULTICAST", "NA"
                              , DstZone == "WAN", "Outbound"
                              , "Local"
                              )
    , User = SrcUsername
| extend
    SrcUsernameType = case(SrcUsername has "=", "DN",
                                  SrcUsername has "\\", "Windows",
                                  SrcUsername has "@", "UPN",
                                  SrcUsername == "Unknown (external IP)", "",
                                  SrcUsername == "Unknown (SSO bypassed)", "",
                                  isnotempty(SrcUsername), "Simple",
                                  ""
                                  )
    , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr"
                        , isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr"
                        , ""
                        )
| extend
    ThreatIpAddr = case(ThreatField == "SrcIpAddr", SrcIpAddr
                        , ThreatField == "DstIpAddr", DstIpAddr
                        , ""
                        )
| extend
  SrcGeoCountry = iff(NetworkDirection == "Inbound", sosCountry, "")
  , DstGeoCountry = iff(NetworkDirection == "Outbound", sosCountry, "")
  , SrcAppName = iff(NetworkDirection in ("Inbound", "Local", "NA"), coalesce(appcat, appName), "")
  , DstAppName = iff(NetworkDirection in ("Outbound", "Local", "NA"), coalesce(appcat, appName), "")
  , SrcAppId = iff(NetworkDirection in ("Inbound", "Local", "NA"), sid, "")
  , DstAppId = iff(NetworkDirection in ("Outbound", "Local", "NA"), sid, "")
  , SrcBytes = case(NetworkDirection == "Outbound", tolong(SentBytes)
                  , NetworkDirection == "Inbound", tolong(ReceivedBytes)
                  , NetworkDirection == "Local" and SrcZone == "WAN", tolong(ReceivedBytes)
                  , NetworkDirection == "Local" and SrcZone != "WAN", tolong(SentBytes)
                  , tolong(long(null))
                  )
  , DstBytes = case(NetworkDirection == "Outbound", tolong(ReceivedBytes)
                  , NetworkDirection == "Inbound", tolong(SentBytes)
                  , NetworkDirection == "Local" and DstZone == "WAN", tolong(SentBytes)
                  , NetworkDirection == "Local" and DstZone != "WAN", tolong(ReceivedBytes)
                  , tolong(long(null))
                  )
| extend
  SrcAppType = case(isempty(SrcAppName), ""
                    , SrcAppName contains "\'General " or SrcAppName contains "\'Service ", "Service", "Other")
  , DstAppType = case(isempty(DstAppName), ""
                    , DstAppName contains "\'General " or DstAppName contains "\'Service ", "Service", "Other")
| project-rename
    sosReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)
  , sosSentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)
| extend
    DstPackets = case(NetworkDirection == "Outbound", tolong(sosReceivedPackets)
                  , NetworkDirection == "Inbound", tolong(sosSentPackets)
                  , tolong(long(null))
                  )
  , SrcPackets = case(NetworkDirection == "Outbound", tolong(sosSentPackets)
                  , NetworkDirection == "Inbound", tolong(sosReceivedPackets)
                  , tolong(long(null))
                  )
| project-rename
    sosConnectionDuration = DeviceCustomNumber3Label // Applies to "Connection Closed"
  , sosUser = susr // Logged-in username associated with the log event.
  , sosAppRulePolicyId = af_polid // App Rule Policy ID.
  , sosAppRulePolicyName = af_policy // App Rule Policy Name.
  , sosAppRuleService = af_service // App Rule Service Name.
  , sosAppRuleType = af_type // App Rule Policy Type.
  , sosAppRuleObject = af_object // App Rule Object Name.
  , sosAppRuleObjectContent = contentObject // App Rule Object Content.
  , sosAppRuleAction = af_action // App Rule Action.
  , sosSourceIPv6Address = srcV6 // Source IPv6 IP
  , sosDestinationIPv6Address = dstV6 // Destination IPv6 IP
  , sosAppFullString = appcat // The full "<CATEGORY> <APPNAME> -- <SIGNAME>" string.
  , sosAppIDNumber = app // Numeric Application ID. Not the same as "ApplicationProtocol".
  , sosAppID = appid // Application ID from App Control
  , sosAppCategoryID = catid // Application Category ID
  , sosAppSignatureID = sid // Application Signature ID
  , sosIPSCategoryName = ipscat // IPS Category Name
  , sosAntiSpywareCategory = spycat // Anti-Spyware Category
  , sosURLPathName = arg // URL. Represents the URL path name.
  , sosFileIdentifier = fileid // File hash or URL
  , sosDPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.
  , DstNatPortNumber = dnpt
  , SrcNatPortNumber = snpt
  , sosBladeID = bid // Blade ID
  , sosUUID = uuid
  , sosFileName = FileName
  , DvcOriginalAction = fw_action
| extend
  ThreatName = coalesce(sosASWSignatureName, sosGAVSignatureName, sosIPSSignatureName, "")
  , ThreatId = coalesce(sosAppSignatureID, "")
  , ThreatCategory = coalesce(sosIPSCategoryName, sosAntiSpywareCategory, "")
  , DstNatPortNumber = toint(DstNatPortNumber)
  , SrcNatPortNumber = toint(SrcNatPortNumber)
| extend AdditionalFields = bag_pack(
  "AppRulePolicyId", sosAppRulePolicyId
  , "AppRulePolicyName", sosAppRulePolicyName
  , "AppRuleService", sosAppRuleService
  , "AppRuleType", sosAppRuleType
  , "AppRuleObject", sosAppRuleObject
  , "AppRuleObjectContent", sosAppRuleObjectContent
  , "AppRuleAction", sosAppRuleAction
  , "AppID", sosAppID
  , "AppCategoryID", sosAppCategoryID
  , "IPSCategoryName", sosIPSCategoryName
  , "AntiSpywareCategory", sosAntiSpywareCategory
  , "URLPathName", sosURLPathName
  , "FileIdentifier", sosFileIdentifier
  , "DPIInspectedFlow", sosDPIInspectedFlow
  , "BladeID", sosBladeID
  , "UUID", sosUUID
  , "FileName", sosFileName
  , "FileSize", FileSize
  , "CaptureATPVerdict", sosCaptureATPVerdict
  , "CFSCategoryID", sosCFSCategoryID
  , "CFSCategoryName", sosCFSCategoryName
  , "CFSPolicyName", sosCFSPolicyName
  , "AppControlFileName", sosAppControlFileName
  , "IPSFullString", sosIPSFullString
  , "IPSSignatureName", sosIPSSignatureName
  , "LogMsgCategory", sosLogMsgCategory
  , "LogMsgNote", sosLogMsgNote
  , "LogMsgSeverity", sosLogMsgSeverity
  , "SourceVPNPolicyName", sosSourceVPNPolicyName
  , "DestinationVPNPolicyName", sosDestinationVPNPolicyName
  , "EventMessageDetail", sosEventMessageDetail
  , "UserSessionType", sosUserSessionType
  , "UserSessionDuration", sosUserSessionDuration
  )
| project-away
    DeviceEventCategory
  , gcat
  , RequestMethod
  , RequestURL_
  , ipspri
  , spypri
  , sos*
  , Protocol
  , appName
  , AdditionalExtensions
  , Flex*
  , Indicator*
  , Malicious*
  , Field*
  , DeviceCustom*
  , Old*
  , File*
  , Source*
  , Destination*
  , Device*
  , SimplifiedDeviceAction
  , ExternalID
  , ExtID
  , TenantId
  , ProcessName
  , ProcessID
  , ExtID
  , OriginalLogSeverity
  , LogSeverity
  , EventOutcome
  , StartTime
  , EndTime
  , ReceiptTime
  , Remote*
  , ThreatDescription
  , ThreatSeverity
  , RequestContext
  , RequestCookies
  , CommunicationDirection
  , ReportReferenceLink
  , ReceivedBytes
  , SentBytes
  , _ResourceId
  , _ItemId
| project-reorder
    TimeGenerated
  , EventVendor
  , EventProduct
  , DvcDescription
  , Dvc
  , DvcOs
  , DvcOsVersion
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionSquidProxy
// Description: This ASIM parser supports filtering and normalizing Squid Proxy logs produced by the Microsoft Sentinel Squid Connector to the ASIM Web Session normalized schema. The parser supports squid native log format.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionSquidProxy(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let parser = (
  starttime:datetime=datetime(null), 
  endtime:datetime=datetime(null),
  srcipaddr_has_any_prefix:dynamic=dynamic([]), 
  ipaddr_has_any_prefix:dynamic=dynamic([]), 
  url_has_any:dynamic=dynamic([]),
  httpuseragent_has_any:dynamic=dynamic([]),
  eventresultdetails_in:dynamic=dynamic([]),
  eventresult:string='*',
  disabled:bool=false
 ){
SquidProxy_CL | where not(disabled)
  // -- Pre filtering
  | where  
    (isnull(starttime) or TimeGenerated >= starttime) 
    and (isnull(endtime) or TimeGenerated <= endtime) 
    and (array_length(httpuseragent_has_any) == 0)
    and ((array_length(url_has_any) == 0) or (RawData has_any (url_has_any)))
    and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, srcipaddr_has_any_prefix))
    and ((array_length(ipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(RawData, ipaddr_has_any_prefix))
    and ((array_length(eventresultdetails_in) == 0) or (RawData has_any (eventresultdetails_in)))
  // -- Parse
  | extend AccessRawLog = extract_all(@"^(\d+\.\d+)\s+(\d+)\s(\S+)\s([A-Z_]+)\/(\d+)\s(\d+)\s([A-Z]+)\s(\S+)\s(\S+)\s([A-Z_]+)\/(\S+)\s(\S+)",dynamic([1,2,3,4,5,6,7,8,9,10,11,12]),RawData)[0]
  // -- Post filtering
  | extend EventResultDetails = tostring(AccessRawLog[4])
  | where array_length(eventresultdetails_in) == 0 or EventResultDetails in (eventresultdetails_in)
  | extend EventOriginalResultDetails = strcat (tostring(AccessRawLog[3]), ";", PeerStatus = tostring(AccessRawLog[9]))
  | extend EventResult = iff (EventOriginalResultDetails has_any ('DENIED', 'INVALID', 'FAIL', 'ABORTED','TIMEOUT') or toint(EventResultDetails) >= 400, "Failure", "Success")
  | where eventresult == "*" or eventresult == EventResult
  // -- Map
  | project-rename
    Dvc = Computer
  | extend
    EventEndTime = unixtime_milliseconds_todatetime(todouble(tostring(AccessRawLog[0]))*1000), 
    NetworkDuration = toint(AccessRawLog[1]), 
    SrcIpAddr = tostring(AccessRawLog[2]), 
    DstBytes = tolong(AccessRawLog[5]), 
    HttpRequestMethod = tostring(AccessRawLog[6]), 
    // -- Squid URL might be shortened by including ellipsis (...) instead of a section in the middle. This may impact the hostname part as well.
    Url = tostring(AccessRawLog[7]), 
    SrcUsername = tostring(AccessRawLog[8]), 
    DstIpAddr = tostring(AccessRawLog[10]), 
    HttpContentType = tostring(AccessRawLog[11]) 
  //
  | extend 
    ASimMatchingIpAddr = case( 
      array_length(ipaddr_has_any_prefix) == 0             , "-",
      has_any_ipv4_prefix(DstIpAddr, ipaddr_has_any_prefix), "DstIpAddr",
      has_any_ipv4_prefix(SrcIpAddr, ipaddr_has_any_prefix), "SrcIpAddr"
                                                           , "No match"
          )
  // Post Filter
  | where 
      (
        (array_length(srcipaddr_has_any_prefix) == 0 or has_any_ipv4_prefix(SrcIpAddr, srcipaddr_has_any_prefix))
        and (ASimMatchingIpAddr != "No match")
      )
  // -- Constant fields
  | extend 
    EventCount = int(1), 
    EventProduct = 'Squid Proxy', 
    EventVendor = 'Squid', 
    EventSchema = 'WebSession', 
    EventSchemaVersion = '0.2.3', 
    EventType = 'HTTPsession' 
  // -- Value normalization
  | extend
    SrcUsernameType = "Unknown",
    SrcUsername = iff (SrcUsername == "-", "", SrcUsername), 
    HttpContentType = iff (HttpContentType in (":", "-"), "", HttpContentType), 
    DstIpAddrIsHost = DstIpAddr matches regex @"^[^\:]*[a-zA-Z]$"
  | extend 
    FQDN = iif (DstIpAddrIsHost, DstIpAddr, tostring(parse_url(Url)["Host"])),
    DstIpAddr = iif (DstIpAddr == "-" or DstIpAddrIsHost, "", DstIpAddr)
  | extend 
    EventSeverity = iff(EventResult == "Success", "Informational", "Low")
  | invoke _ASIM_ResolveDstFQDN ('FQDN')
  // -- aliases
  | extend 
    EventStartTime = EventEndTime,
    Duration = NetworkDuration,
    HttpStatusCode = EventResultDetails,
    User = SrcUsername,
    IpAddr = SrcIpAddr,
    Src = SrcIpAddr,
    Dst = DstHostname,
    Hostname = DstHostname
  | project-away AccessRawLog, RawData, *_s, MG, ManagementGroupName, SourceSystem, TenantId, DstIpAddrIsHost
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled)
}



//
// Function Name: vimWebSessionVectraAI
// Description: This ASIM parser supports filtering and normalizing Vectra AI Streams logs produced to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionVectraAI(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false,
    ['pack']:bool=false)
{
let parser = (starttime: datetime = datetime(null),
              endtime: datetime = datetime(null),
              srcipaddr_has_any_prefix: dynamic = dynamic([]),
              ipaddr_has_any_prefix: dynamic = dynamic([]),
              url_has_any: dynamic = dynamic([]),
              httpuseragent_has_any: dynamic = dynamic([]),
              eventresultdetails_in: dynamic = dynamic([]),
              eventresult: string = '*',
              disabled: bool = false,
              pack:bool = false)
{
  let NetworkDirectionLookup = datatable(local_orig_b:bool, local_resp_b:bool, NetworkDirection:string)
  [
      false, true, 'Inbound',
      true, false, 'Outbound',
      true, true, 'Local',
      false, false, 'Local'
  ];
  let NetworkProtocolVersionLookup = datatable(id_ip_ver_s:string, NetworkApplicationProtocol:string)
  [
      'ipv4', 'IPv4',
      'ipv6', 'IPv6'
  ];
  let HostnameRegex = @'^[a-zA-Z0-9-]{1,61}$';
  let remove_protocol_from_urls =  
      materialize (
          print url_has_any 
          | mv-apply l = print_0 to typeof(string) on ( 
            extend l = extract(@'^(?i:.*?://)?(.*)$', 1, l)
          ) 
          | project l
      );
  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  VectraStream_CL
  | where not(disabled)
  | where (isnull(starttime) or TimeGenerated >= starttime)
      and (isnull(endtime) or TimeGenerated <= endtime)
  | where metadata_type_s == 'metadata_httpsessioninfo'
  | where 
      (array_length(url_has_any) == 0 
      or host_s has_any(remove_protocol_from_urls) 
      or uri_s has_any (remove_protocol_from_urls) 
      or strcat(host_s, uri_s) has_any (remove_protocol_from_urls))
  | where (array_length(httpuseragent_has_any) == 0 or user_agent_s has_any(httpuseragent_has_any))
  | where (array_length(eventresultdetails_in) == 0 or tostring(status_code_d) has_any(eventresultdetails_in))
  | extend temp_SrcMatch=has_any_ipv4_prefix(id_orig_h_s,src_or_any)
         , temp_DstMatch=has_any_ipv4_prefix(id_resp_h_s,ipaddr_has_any_prefix)
  | extend ASimMatchingIpAddr=case(
                                array_length(src_or_any) == 0 ,"-",
                                temp_SrcMatch and temp_DstMatch, "Both",
                                temp_SrcMatch, "SrcIpAddr",
                                temp_DstMatch, "DstIpAddr",
                                "No match"
                            )
  | where ASimMatchingIpAddr != "No match" 
  | project-away temp_*
  | extend EventResult = iff(tolong(status_code_d) >= 400, "Failure", "Success")
  | where (eventresult == '*' or EventResult =~ eventresult)
  | project-rename
      DvcDescription = hostname_s,
      DstDescription = resp_hostname_s,
      SrcDescription = orig_hostname_s,
      DstIpAddr = id_resp_h_s,
      EventOriginalUid = uid_s,
      HttpContentType = resp_mime_types_s,
      HttpReferrer = referrer_s,
      HttpRequestMethod = method_s,
      HttpUserAgent = user_agent_s,
      DvcId = sensor_uid_s,
      // -- community id is just a hash of addresses and ports, and not unique for the session
      // NetworkSessionId = community_id_s,
      SrcIpAddr = id_orig_h_s,
      SrcSessionId = orig_sluid_s,
      DstSessionId = resp_sluid_s,
      HttpResponseCacheControl = response_cache_control_s,
      HttpRequestCacheControl = request_cache_control_s,
      HttpCookie = cookie_s,
      HttpResponseExpires = response_expires_s,
      HttpIsProxied = is_proxied_b,
      EventOriginalStatusDetails = status_msg_s
  | extend
      DstHostname = iff (DstDescription startswith "IP-" or not(DstDescription matches regex HostnameRegex), "", DstDescription),
      SrcHostname = iff (SrcDescription startswith "IP-" or not(SrcDescription matches regex HostnameRegex), "", SrcDescription),
      DvcHostname = iff (DvcDescription startswith "IP-" or not(DvcDescription matches regex HostnameRegex), "", DvcDescription),
      DstBytes = tolong(resp_ip_bytes_d),
      DstPackets = tolong(resp_pkts_d),
      DstPortNumber = toint(id_resp_p_d),
      EventCount = toint(1),
      EventStartTime = unixtime_milliseconds_todatetime(ts_d),
      EventOriginalSubType = tostring(split(metadata_type_s, '_')[1]),
      EventProduct = 'Vectra Stream',
      EventResultDetails = tostring(toint(status_code_d)),
      HttpRequestBodyBytes = tolong(request_body_len_d),
      HttpResponseBodyBytes = tolong(response_body_len_d),
      HttpRequestHeaderCount = toint(request_header_count_d),
      HttpResponseHeaderCount = toint(response_header_count_d),
      EventSchema = 'WebSession',
      EventSchemaVersion='0.2.3',
      DvcIdType = 'VectraId',
      EventSeverity = iff (EventResult == 'Success', 'Informational', 'Low'),
      EventType = 'HTTPsession',
      EventVendor = 'Vectra AI',
      SrcBytes = tolong(orig_ip_bytes_d),
      SrcPackets = tolong(orig_pkts_d),
      SrcPortNumber = toint(id_orig_p_d),
      Url = strcat('http://', host_s, uri_s)
  | lookup NetworkDirectionLookup on local_orig_b, local_resp_b
  | lookup NetworkProtocolVersionLookup on id_ip_ver_s
  // -- preserving non-normalized important fields
  | extend AdditionalFields = iff (
      pack, 
      bag_pack (
        "first_orig_resp_data_pkt", first_orig_resp_data_pkt_s,
        "first_resp_orig_data_pkt", first_resp_orig_data_pkt_s,
        "orig_huid", orig_huid_s,
        "resp_huid", resp_huid_s,
        "community_id", community_id_s,
        "resp_multihome", resp_multihomed_b,
        "host_multihomed", host_multihomed_b,
        "first_orig_resp_data_pkt_time", unixtime_milliseconds_todatetime(first_orig_resp_data_pkt_time_d),
        "first_orig_resp_pkt_time", unixtime_milliseconds_todatetime(first_orig_resp_pkt_time_d),
        "first_resp_orig_data_pkt_time", unixtime_milliseconds_todatetime(first_resp_orig_data_pkt_time_d),
        "first_resp_orig_pkt_time", unixtime_milliseconds_todatetime(first_resp_orig_pkt_time_d)
      ),
      dynamic([])
    )
  | project-away
      *_d, *_s, *_b, *_g, Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
  | extend
      Dst = DstIpAddr,
      Dvc = DvcId,
      EventEndTime = EventStartTime,
      Hostname = DstHostname,
      HttpStatusCode = EventResultDetails,
      IpAddr = SrcIpAddr,
      NetworkBytes = SrcBytes + DstBytes,
      NetworkPackets = SrcPackets + DstPackets,
      //SessionId = NetworkSessionId,
      Src = SrcIpAddr,
      UserAgent = HttpUserAgent 
};
parser (starttime=starttime, endtime=endtime, srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, ipaddr_has_any_prefix=ipaddr_has_any_prefix, url_has_any=url_has_any, httpuseragent_has_any=httpuseragent_has_any, eventresultdetails_in=eventresultdetails_in, eventresult=eventresult, disabled=disabled, pack=pack)
}



//
// Function Name: vimWebSessionZscalerZIA
// Description: This ASIM parser supports filtering and normalizing Zscaler ZIA proxy logs produced by the Microsoft Sentinel Zscaler connector to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) vimWebSessionZscalerZIA(    ['starttime']:datetime=datetime(null),
    ['endtime']:datetime=datetime(null),
    ['srcipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['ipaddr_has_any_prefix']:dynamic=dynamic([]),
    ['url_has_any']:dynamic=dynamic([]),
    ['httpuseragent_has_any']:dynamic=dynamic([]),
    ['eventresultdetails_in']:dynamic=dynamic([]),
    ['eventresult']:string='*',
    ['disabled']:bool=false)
{
let DvcActionLookup = datatable (DeviceAction:string, DvcAction: string) 
[
  'Allowed', 'Allow',
  'Blocked', 'Deny'
]; 
let remove_protocol_from_list = (list:dynamic) 
{
    print list 
    | mv-apply l = print_0 to typeof(string) on
    ( extend l = replace_regex (tostring(l), "^(?i:.*?)://", "") ) 
    | project l
};
let parser = (
starttime:datetime=datetime(null), 
endtime:datetime=datetime(null),
srcipaddr_has_any_prefix:dynamic=dynamic([]), 
ipaddr_has_any_prefix:dynamic=dynamic([]), 
url_has_any:dynamic=dynamic([]),
httpuseragent_has_any:dynamic=dynamic([]),
eventresultdetails_in:dynamic=dynamic([]),
eventresult:string='*',
disabled:bool=false
){
CommonSecurityLog | where not(disabled)
| where DeviceVendor == "Zscaler"
| where DeviceProduct == "NSSWeblog"
// -- Pre filtering
| where  
  (isnull(starttime) or TimeGenerated >= starttime) 
  and (isnull(endtime) or TimeGenerated <= endtime) 
  and ((array_length(httpuseragent_has_any) == 0) or (RequestClientApplication has_any (httpuseragent_has_any)))
  and ((array_length(srcipaddr_has_any_prefix) == 0) or has_any_ipv4_prefix(SourceIP, srcipaddr_has_any_prefix))
| extend 
    ASimMatchingIpAddr = case( 
      array_length(ipaddr_has_any_prefix) == 0 , "-",
      has_any_ipv4_prefix(DestinationIP, ipaddr_has_any_prefix), "DstIpAddr",
      has_any_ipv4_prefix(SourceIP,  ipaddr_has_any_prefix), "SrcIpAddr"
                                                           , "No match"
          )
| where
  (ASimMatchingIpAddr != "No match")
  and ((array_length(eventresultdetails_in) == 0) or (AdditionalExtensions has_any (eventresultdetails_in)))
  and ((array_length(url_has_any) == 0) or (RequestURL has_any (remove_protocol_from_list(url_has_any))))
// -- Parse
| parse AdditionalExtensions with 
    * "rulelabel=" RuleName:string ";"
    "ruletype=" ruletype:string ";"
    "urlclass=" urlclass:string ";"
    "devicemodel=" * 
 // -- Post filtering
| extend
  // -- Adjustment to support both old and new CSL fields.
  EventResultDetails = coalesce(
    column_ifexists("EventOutcome", ""),
    extract(@'outcome=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string))
  )
| where
  ((array_length(eventresultdetails_in) == 0) or (EventResultDetails in (eventresultdetails_in)))
| extend
  EventResult = iff (EventResultDetails == "NA" or toint(EventResultDetails) >= 400, "Failure", "Success")
| where eventresult == "*" or eventresult == EventResult
// -- Event fields
| lookup DvcActionLookup on DeviceAction
| extend 
  // -- Adjustment to support both old and new CSL fields.
  EventOriginalResultDetails = coalesce(
    column_ifexists("Reason", ""),
    extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string))
  ),
  ThreatRiskLevel = coalesce(
    toint(column_ifexists("FieldDeviceCustomNumber1", int(null))),
    toint(column_ifexists("DeviceCustomNumber1",int(null)))
  ),
  EventCount=int(1), 
  EventStartTime=TimeGenerated,  
  EventVendor = "Zscaler", 
  EventProduct = "ZIA Proxy", 
  EventSchema = "WebSession", 
  EventSchemaVersion="0.2.3", 
  EventType = 'HTTPsession',
  EventEndTime=TimeGenerated
// -- Field mapping
| project-rename
  EventProductVersion = DeviceVersion,
  NetworkApplicationProtocol = ApplicationProtocol,
  HttpContentType = FileType,
  HttpUserAgent = RequestClientApplication,
  HttpRequestMethod = RequestMethod,
  DstAppName = DestinationServiceName,
  DstIpAddr = DestinationIP,
  DstFQDN = DestinationHostName,
  SrcIpAddr = SourceIP,
  SrcUsername = SourceUserName,
  SrcNatIpAddr= SourceTranslatedAddress,
  SrcUserDepartment = SourceUserPrivileges, // Not part of the standard schema
  UrlCategory = DeviceCustomString2,
  ThreatName = DeviceCustomString5,
  FileMD5 = DeviceCustomString6,
  EventOriginalSeverity = LogSeverity,
  EventMessage = Message
// -- Calculated fields
| extend
  Url = iff (RequestURL == "", "", strcat (tolower(NetworkApplicationProtocol), "://", url_decode(RequestURL))),
  UrlCategory = strcat (urlclass, "/", UrlCategory),
  ThreatCategory = iff(DeviceCustomString4 == "None", "", strcat (DeviceCustomString3, "/", DeviceCustomString4)),
  RuleName = iff (RuleName == "None", "", strcat (ruletype, "/", RuleName)),
  FileMD5 = iff (FileMD5 == "None", "", FileMD5),
  HttpReferrer = iff (RequestContext == "None", "", url_decode(RequestContext)),
  DstAppName = iff (DstAppName == "General Browsing", "", DstAppName),
  DstFQDNparts = split (DstFQDN, "."),
  DstHostnameNotAddr = DstIpAddr != DstFQDN,
  DstBytes = tolong(ReceivedBytes),
  SrcBytes = tolong(SentBytes),
  DvcHostname = tostring(Computer)
| extend
  DstHostname = iff (DstHostnameNotAddr, tostring(DstFQDNparts[0]), DstFQDN),
  DstDomain = iff (DstHostnameNotAddr, strcat_array(array_slice(DstFQDNparts,1,-1),"."), ""),
  DstFQDN = iff (DstHostnameNotAddr, DstFQDN, "") 
// -- Enrichment
| extend
  EventSeverity = case (ThreatRiskLevel > 90, "High", ThreatRiskLevel > 60, "Medium", ThreatRiskLevel > 10, "Low",  "Informational"),
  DstAppType = "SaaS application",
  DstDomainType = iff (DstHostnameNotAddr, "FQDN", ""),
  SrcUsernameType = "UPN"
// -- Aliases
| extend
  Dvc = DvcHostname,
  Hostname = DstHostname,
  UserAgent = HttpUserAgent,
  User = SrcUsername,
  HttpStatusCode = EventResultDetails,
  IpAddr = SrcNatIpAddr,
  Src = SrcNatIpAddr,
  Dst = DstFQDN,
  Hash = FileMD5,
  FileHashType = iff(FileMD5 == "", "", "MD5")
| project-away DstFQDNparts
| project-away AdditionalExtensions, CommunicationDirection, Computer, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, Activity, EventOutcome, FieldDevice*, ExtID, Reason, ReportReferenceLink, urlclass, ruletype, DstHostnameNotAddr
};
parser (starttime, endtime
   , srcipaddr_has_any_prefix, ipaddr_has_any_prefix
   , url_has_any, httpuseragent_has_any
   , eventresultdetails_in, eventresult, disabled)
}



