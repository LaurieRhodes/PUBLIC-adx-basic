//
// Function Name: ASimNetworkSessionForcePointFirewall
// Description: This ASIM parser supports normalizing Force Point Firewall logs coming from CEF Data Connector to the ASIM Network Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionForcePointFirewall(    ['disabled']:bool=false)
{
let ApplicationProtocolLookup=datatable(ApplicationProtocol:string,NetworkApplicationProtocol:string)
   [
         "HTTPS","HTTPS",
         "HTTP-Over-QUIC","HTTP",
         "HTTP","HTTP",
         "DNS Over TLS","DNS",
         "HTTP proxy","HTTP",
         "IMAPS","IMAPS",
         "SMTP","SMTP",
         "IMAP","IMAP",
         "POP3S","POP3",
         "SMTP Submission Service","SMTP",
         "X11","X11",
         "RTSP","RTSP",
         "Telnet","TELNET",
         "NNTP","NNTP",
         "ISAKMP","ISAKMP","ISAKMP","ISAKMP",
         "POP3","POP3",
         "BGP","BGP",
         "FTP","FTP",
         "RIP","RIP",
         "Squid HTTP proxy","HTTP",
         "TFTP","TFTP",
         "QOTD","QOTD",
         "SCCP","SCCP",
         "Modbus","MODBUS",
         "SVN","SVN",
         "RADIUS (Accounting)","RADIUS",
         "Kerberos","KERBEROS",
         "GRE","GRE",
         "UUCP-rlogin","UUCP",
         "GTP User Data Tunneling","GTP",
         "NNTPS","NNTP",
         "GTP Control","GTP",
         "IRC-default","IRC",
         "FTPS (Control)","FTPS",
         "ICCP","ICCP",
         "IRCS","IRC",
         "Telnets","TELNET",
         "Finger","FINGER",
         "ESP","ESP",
         "Rlogin","RLP",
         "IMAP3","IMAP",
         "MGCP","MGCP",
         "RADIUS Accounting (Old)","RADIUS",
         "RADIUS (Old)","RADIUS",
         "CVS","CVS",
         "Ident","IDENT",
         "Gopher","GOPHER",
         "BGMP","BGMP",
         "FTPS (Data)","FTPS",
         "POP2","POP",
         "TLISRV","TLISRV",
         "INGRES-NET","INGRES-NET",
         "IPIP","IPIP",
         "XTP","XTP",
         "UUCP","UUCP",
         "IRC","IRC",
         "Photuris (ICMP)","ICMP",
         "TACACS-DS","TACACS-DS",
         "WESP","WESP",
         "EGP","EGP",
         "WSN","WSN",
         "XDMCP","XDMCP",
         "Kerberos IV","KERBEROS",
         "IRTP","IRTP",
         "TTP","TTP",
         "IRC-SERV","IRC",
         "I-NLSP","NLSP",
         "SNP","SNP",
         "XNS-IDP","XNS",
         "SECURE-VMTP","VMTP",
         "VMTP","VMTP",
         "IPLT","IPLT",
         "GGP","GGP",
         "MFE-NSP","NSP",
         "HIP","HIP",
         "MERIT-NSP","NSP",
         "NSFNET-IGP","IGP",
         "DCN-MEAS","DCN",
         "STP","STP",
         "SRP","SRP",
         "HMP","HMP",
         "XNET","XNET",
         "VRRP","VRRP",
         "ENCAP","ENCAP",
         "CPNX","CPNX",
         "PTP","PTP",
         "SKIP","SKIP",
         "SCPS","SCPS",
         "Sprite-RPC","RPC",
         "IPv6 ICMP","ICMP",
         "MUX","MUX",
         "CHAOS","CHAOS",
         "SSCOPMCE","SSCOPMCE",
         "CBT","CBT",
         "SPS","SPS",
         "ETHERIP","ETHERIP",
         "MTP","MTP",
         "ROHC","ROHC",
         "CRTP","CRTP",
         "PNNI","PNNI",
         "NETBLT","NETBLT",
         "TLSP","TLSP",
         "IDPR","IDPR",
         "DDX","DDX",
         "PUP","PUP",
         "DSR","DSR",
         "NARP","NARP",
         "CPHB","CPHB",
         "SMP","SMP",
         "L2TP","L2TP",
         "IPv6 ICMP/143/0","ICMP",
         "MICP","MICP",
         "GMTP","GMTP",
         "LARP","LARP",
         "IFMP","IFMP",
         "IGP","IGP",
         "CFTP","CFTP",
         "PGM","PGM",
         "DDP","DDP",
         "PIPE","PIPE",
         "IATP","IATP",
         "IGMP","IGMP",
         "3PC","3PC",
         "DGP","DGP",
         "TCF","TCF",
         "UTI","UTI",
         "DCCP","DCCP",
         "SWIPE","SWIPE",
         "EMCON","EMCON",
         "PIM","PIM",
         "RVD","RVD",
   ];
 let ActionLookup=datatable(DeviceAction:string,DvcAction_ActionLookup:string,EventResult_ActionLookup:string,EventSeverity_ActionLookup:string)
 [
           "Allow","Allow","Success","Informational",          
           "Discard","Drop","Failure","Low",
           "Permit","Allow","Success","Informational",          
           "Refuse","Deny","Failure","Low",
           "Terminate","Reset Source","Failure","Low",          
           "Terminate (failed)","","Failure","Low",
           "Terminate (passive)","Reset Destination","Failure","Low",          
           "Terminate (reset)","Reset","Failure","Low",
           "Wait for Authentication","","Success","Informational",
           "Wait for Further Actions","","Success","Informational",          
           "Wait for RPC Reply","","Success","Informational"
 ];
 let DeviceEventClassIDLookup_Packet=datatable(DeviceEventClassID:string,EventSubType:string,DvcAction_DeviceEventClassIDLookup:string,EventResult_DeviceEventClassIDLookup:string,EventSeverity_DeviceEventClassIDLookup:string) //Add more codes if needed
 [
           "70018","Start","Allow","Success","Informational", // Connection_Allowed
           "70019","End","Deny","Failure","Low", // Connection_Discarded
           "70021","End","Reset","Failure","Low", // Connection_Closed
           "70022","End","Reset","Failure","Low", // Connection_Closed-Abnormally
           "70026","","","Success","Informational", // Connection_Progress
 ];
 let DeviceEventClassIDLookup_File=datatable(DeviceEventClassID:string,DvcAction_DeviceEventClassIDLookup:string,EventResult_DeviceEventClassIDLookup:string,EventSeverity_DeviceEventClassIDLookup:string)
 [
           "76506","Allow","Success","Informational", // File_Allowed
           "76508","Deny","Failure","Low", // File_Malware-Blocked
           "76509","","Failure","Low" // File_Malware-Detected
 ];
 let MessageLookup = datatable (Message:string, DvcAction_MessageLookup:string, EventResult_MessageLookup:string, EventResultDetails:string, EventOriginalResultDetails:string)  
 [
         "Connection dropped", "Drop", "Failure","Terminated", "Connection dropped",
         "Connection removed because NGFW Engine is low on memory.","Drop", "Failure","Terminated","Connection removed because NGFW Engine is low on memory.",
         "Connection timeout in state TCP_CLOSE_WAIT", "", "Success", "Timeout",	"One end of the Connection waits for the FIN packet (passive close).",
         "Connection timeout in state TCP_CLOSE_WAIT_ACK", "", "Success", "Timeout", "One end of the Connection waits for the FIN packet (passive close)",
         "Connection timeout in state TCP_CLOSING", "", "Success", "Timeout", "Closing packet (FIN) sent by one end of the Connection (simultaneous).",
         "Connection timeout in state TCP_CLOSING_ACK", "", "Success", "Timeout", "Waiting for ACK for the FIN before going to closing status (active close).",
         "Connection timeout in state TCP_ESTABLISHED", "", "Failure", "Timeout", "Normal status of TCP Connections for data transfer.",
         "Connection timeout in state TCP_FIN_WAIT_1", "", "Success", "Timeout",	"One end of the Connection waits for sending the FIN packet (active close).",
         "Connection timeout in state TCP_FIN_WAIT_2", "", "Success", "Timeout", "One end of the Connection waits for receiving ACK packet.",
         "Connection timeout in state TCP_LAST_ACK", "",	"Success", "Timeout", "One end of the Connection sent a FIN packet (passive close).",
         "Connection timeout in state TCP_LAST_ACK_WAIT", "", "Failure",	"Timeout", "Waiting for the FIN packet to be acknowledged.",
         "Connection timeout in state TCP_SYN_ACK_SEEN", "", "Failure",	"Timeout", "Second phase of the TCP three-way handshake, the server has replied to client sent SYN with SYN+ACK, next status will be established.",
         "Connection timeout in state TCP_SYN_FIN_SEEN", "",	"Success", "Timeout", "T/TCP (Transactional TCP) Connection, RFC 1644.",
         "Connection timeout in state TCP_SYN_RETURN", "", "Failure", "Timeout", "Received simultaneous SYN from the other end (simultaneous open).",
         "Connection timeout in state TCP_SYN_SEEN", "", "Failure", "Timeout", "First packet sent by one end of the Connection.",
         "Connection timeout in state TCP_TIME_WAIT", "", "Success", "Timeout", "One end of the Connection acknowledged closing packet (FIN).",
         "Connection timeout in state TCP_TIME_WAIT_ACK", "", "Failure",	"Timeout", "Waiting for ACK for the FIN status before going to time wait status (active close).",
         "Connection timeout in state ICMP_ECHO", "", "Failure", "Timeout", "Ping reply is expected.",
         "Connection timeout in state ICMP_REPLY_WAIT", "", "Failure", "Timeout", "Other ICMP request or reply types.",
         "Connection was reset by client", "Reset Source", "Failure","Reset", "",
         "Connection was reset by server", "Reset Destination", "Failure","Reset", "",
         "invalid packet (CT)", "", "Failure", "Invalid TCP", "",
         "not a (valid) SYN packet [A] (CT)", "", "Failure", "Invalid TCP", "",
         "not a (valid) SYN packet [FA] (CT)", "", "Failure", "Invalid TCP", "",
         "not a (valid) SYN packet [FPA] (CT)", "", "Failure", "Invalid TCP", "",
         "not a (valid) SYN packet [PA] (CT)", "", "Failure", "Invalid TCP", "",
         "not a (valid) SYN packet [RA] (CT)", "", "Failure", "Invalid TCP", "",
         "not a (valid) SYN packet [SA] (CT)", "", "Failure", "Invalid TCP", "",
         "TCP state violation","Deny","Failure", "Invalid TCP", "",
         "TCP state violation: Connection end-point replied with ACK to SYN-packet. Connection refused.", "Deny", "Failure", "Invalid TCP", "",
         "TSC error: Query timed out", "", "Failure", "Timeout", ""
 ];
 let parser = (disabled:bool) { 
 let ForcePointNetwork = CommonSecurityLog
         | where not(disabled)
         | where DeviceVendor=="FORCEPOINT" and DeviceProduct=="Firewall"
         | where DeviceFacility in~ ("Inspection","Packet Filtering","File Filtering") and isnotempty(DeviceEventClassID) and DeviceEventClassID != "0" 
         ;
 let PacketFilteringData = ForcePointNetwork
         | where DeviceFacility == "Packet Filtering" and DeviceEventClassID !in ("70383","70393","70734","71009","71040")
         | lookup DeviceEventClassIDLookup_Packet on DeviceEventClassID
         | lookup MessageLookup on Message
         | extend DvcAction = coalesce(DvcAction_MessageLookup, DvcAction_DeviceEventClassIDLookup), 
                 EventResult = case (Message startswith "Referred connection not known", "Failure",
                                     coalesce(EventResult_MessageLookup, EventResult_DeviceEventClassIDLookup)), 
                 EventSeverity = case(Message startswith "Referred connection not known", "Low",
                                     EventSeverity_DeviceEventClassIDLookup),
                 EventOriginalResultDetails = case(Message startswith "Referred connection not known", Message,
                                                 EventOriginalResultDetails),
                 EventType = "NetworkSession"
         | project-away DvcAction_*, EventResult_*, EventSeverity_DeviceEventClassIDLookup;
 let FileFilteringData = ForcePointNetwork
         | where DeviceFacility == "File Filtering"
         | lookup DeviceEventClassIDLookup_File on DeviceEventClassID
         | extend ThreatName = case (DeviceEventClassID in ("76508", "76509"), Activity,
                                     "")
         | project-rename DvcAction = DvcAction_DeviceEventClassIDLookup
         | extend EventResult = case(isnotempty(Message), "Failure",
                                     EventResult_DeviceEventClassIDLookup), 
                  EventSeverity = case(isnotempty(Message), "Low",
                                     EventSeverity_DeviceEventClassIDLookup),
                  EventOriginalResultDetails = case(isnotempty(Message), Message,
                                                 ""),
                 EventType = "NetworkSession"
         | project-away *_DeviceEventClassIDLookup;
 let InspectionData = ForcePointNetwork
         | where DeviceFacility == "Inspection" or DeviceEventClassID == "70734"
         | extend MessageCode = toint(DeviceEventClassID)
         | extend EventSeverity = case (DeviceAction in~ ("Allow","Permit"), "Informational",
                                     MessageCode >= 200000, "High",
                                     MessageCode < 200000, "Low",
                                     ""),
                 EventType = case (MessageCode < 80000, "NetworkSession",
                                  "IDS")
         | extend ThreatName = Activity
         | project-away MessageCode;
 union PacketFilteringData, FileFilteringData, InspectionData
         | extend NetworkProtocol = _ASIM_LookupNetworkProtocol(Protocol)
         | lookup ActionLookup on DeviceAction
         | extend DvcAction = coalesce(DvcAction,DvcAction_ActionLookup), 
                  EventResult = coalesce(EventResult,EventResult_ActionLookup), 
                  EventSeverity = coalesce(EventSeverity, EventSeverity_ActionLookup)
         | project-away *_ActionLookup
         | lookup ApplicationProtocolLookup on ApplicationProtocol
         | extend 
                 EventCount = toint(1),
                 EventSchema = "NetworkSession",
                 EventSchemaVersion = "0.2.6",
                 EventVendor = "Forcepoint",
                 EventProduct = "Firewall"
         | parse AdditionalExtensions with * "requestURL=" requestURL            
         | project-rename
                 EventOriginalType = DeviceEventClassID,
                 DstPortNumber = DestinationPort,
                 DstIpAddr = DestinationIP,
                 SrcPortNumber = SourcePort,
                 SrcIpAddr = SourceIP,
                 DstNatIpAddr = DestinationTranslatedAddress,
                 DstNatPortNumber = DestinationTranslatedPort,
                 SrcNatIpAddr = SourceTranslatedAddress,
                 SrcNatPortNumber = SourceTranslatedPort,
                 EventProductVersion = DeviceVersion,
                 EventMessage = Message,
                 DvcOriginalAction = DeviceAction,
                 SrcBytes = SentBytes,
                 DstBytes = ReceivedBytes,
                 EventOriginalSubType = DeviceFacility,
                 DvcId = DeviceExternalID,
                 DvcInboundInterface = DeviceInboundInterface,
                 DvcOutboundInterface = DeviceOutboundInterface,
                 DvcIpAddr = DeviceAddress,
                 EventOriginalSeverity = LogSeverity,
                 ThreatId = DeviceCustomString3
         | invoke _ASIM_ResolveDvcFQDN('Computer')
         | extend
                 ThreatCategory = column_ifexists("DeviceEventCategory",""),
                 EventStartTime = todatetime(ReceiptTime),
                 EventEndTime = todatetime(ReceiptTime),
                 ipv6_parts = extract_all (@'^\[(.+)\](?:\:(\d+))?$',requestURL)[0],
                 ipv4_parts = extract_all (@'^(\d+\.\d+\.\d+\.\d+)(?:\:(\d+))?$',requestURL)[0],
                 host_parts = extract_all (@'^([^\\\d:]+)(?:\:(\d+))?$',requestURL)[0]
         | extend 
                  NetworkRuleName = case(isnotempty(DeviceCustomString2), strcat(DeviceCustomString1,',',DeviceCustomString2),
                                         DeviceCustomString1),
                  DstDomainPart = tostring(host_parts[0]),
                  DstIpAddr = coalesce(DstIpAddr, tostring(ipv4_parts[0]), tostring(ipv6_parts[0])),
                  DstPortNumber = coalesce(DstPortNumber, toint(host_parts[1]), toint(ipv4_parts[1]), toint(ipv6_parts[1]))
         | invoke _ASIM_ResolveDstFQDN('DstDomainPart')
         | extend
                  DvcIdType = case(isnotempty(DvcId), "ForcepointId",
                                 ""),
                  DstPortNumber = case(
                                 isnotempty(DstPortNumber), DstPortNumber,
                                 ApplicationProtocol startswith "TCP", toint(split(ApplicationProtocol,'/')[1]),
                                 ApplicationProtocol startswith "UDP", toint(split(ApplicationProtocol,'/')[1]),
                                 int(null)),
                  AdditionalFields = pack(iff(isnotempty(RequestMethod) and RequestMethod != "UNKNOWN", "RequestMethod", ""),RequestMethod,
                                          iff(isnotempty(DeviceCustomString4),"VirusId",""),DeviceCustomString4),
                  DstAppName = case(DestinationServiceName in~ ("Generic-Web-HTTP","Application-Unknown","Unknown-Encrypted-Application"), "",
                                     DestinationServiceName),
                  DvcIpAddr = coalesce(DvcIpAddr,DeviceName)
         | extend
                 Dvc = DvcIpAddr,
                 IpAddr = SrcIpAddr,
                 Rule = NetworkRuleName,
                 Dst = DstIpAddr,
                 Src = SrcIpAddr,
                 DvcInterface = DvcInboundInterface,
                 Hostname = DstHostname
         | project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, OriginalLogSeverity, Process*, Protocol, ReceiptTime, Remote*, ReportReferenceLink, Request*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, ExtID, EventOutcome, FieldDevice*, Reason, ApplicationProtocol, Activity, requestURL, Computer, DstDomainPart, host_parts, ipv4_parts, ipv6_parts
     };
     parser(disabled=disabled)
}



//
// Function Name: ASimNetworkSessionFortinetFortiGate
// Description: This ASIM parser supports normalizing Fortinet FortiGate logs to the ASIM Web Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionFortinetFortiGate(    ['disabled']:bool=false)
{
let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string,EventResultDetails:string)
[
  "accept","Allow","Success",""
  , "client-rst","Reset Source","Failure",""
  , "close","","Success",""
  , "deny","Deny","Failure",""
  , "ip-conn","","Failure","IP connection error"
  , "server-rst","Reset Destination","Failure",""
  , "timeout","","Failure",""
];
// -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels
let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
[
  "1", "Informational", // Debug
  "2", "Informational", // Information
  "3", "Informational", // Notification
  "4", "Low", // Warning
  "5", "Low", // Error
  "6", "Critical", // High
  "7", "Alert", // Medium
  "8", "High" // Emergency
];
let Parser=(disabled:bool=false){
   CommonSecurityLog
  | where not(disabled)
  | where DeviceVendor == "Fortinet" and DeviceProduct startswith "FortiGate" and (column_ifexists("DeviceEventCategory","") has "traffic"  or AdditionalExtensions has "cat=traffic")
  | where DeviceAction != "dns" and Activity !has "dns" 
  | parse Activity with "traffic:forward " temp_DeviceAction:string 
  | extend DeviceAction = coalesce(DeviceAction, temp_DeviceAction)  
  | lookup EventLookup on DeviceAction 
  | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, EventResultDetails, DvcAction
  | project-rename DstBytes = ReceivedBytes
    , DstInterfaceName = DeviceOutboundInterface
    , DstIpAddr = DestinationIP
    , DstPortNumber = DestinationPort
    , Dvc = Computer
    , EventMessage = Activity
    , EventOriginalSeverity = LogSeverity
    , EventProduct = DeviceProduct
    , EventProductVersion = DeviceVersion
    , SrcBytes = SentBytes
    , SrcInterfaceName = DeviceInboundInterface
    , SrcIpAddr = SourceIP
    , SrcPortNumber = SourcePort
    , DvcId = DeviceExternalID
    , EventUid = _ItemId
  | invoke _ASIM_ResolveNetworkProtocol ('Protocol')
  | project-rename DvcOriginalAction = DeviceAction
  | parse-kv AdditionalExtensions as (
          FortinetFortiGatestart:datetime,
          FortinetFortiGatesrcintfrole:string,
          FortinetFortiGatedstintfrole:string,
          FortinetFortiGateexternalID:string,
          FortinetFortiGatepolicyid:int,
          FortinetFortiGatedstcountry:string,
          FortinetFortiGatesrccountry:string,
          FortinetFortiGatecrscore:string,
          FortinetFortiGateduration:int,
          FortinetFortiGatesentpkt:long,
          FortinetFortiGatercvdpkt:long
      ) with (pair_delimiter=';', kv_delimiter='=')
  | project-rename
      EventStartTime          = FortinetFortiGatestart,
      SrcZone                 = FortinetFortiGatesrcintfrole,
      DstZone                 = FortinetFortiGatedstintfrole,
      NetworkSessionId        = FortinetFortiGateexternalID,
      NetworkRuleNumber       = FortinetFortiGatepolicyid,
      NetworkDuration         = FortinetFortiGateduration,
      DstGeoCountry           = FortinetFortiGatedstcountry,
      SrcGeoCountry           = FortinetFortiGatesrccountry,
      ThreatOriginalRiskLevel = FortinetFortiGatecrscore,
      SrcPackets              = FortinetFortiGatesentpkt,
      DstPackets              = FortinetFortiGatercvdpkt
  | extend EventCount = int(1)
    , EventSchema = "NetworkSession"
    , EventSchemaVersion = "0.2.3"
    , EventType = "NetworkSession"
    , EventVendor = "Fortinet"
    , DvcIdType = "Other"
    , NetworkBytes = DstBytes + SrcBytes
    , EventEndTime = TimeGenerated
    , EventStartTime = coalesce(EventStartTime, TimeGenerated)
    , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
        , DstIpAddr contains ":", "IPv6"
        , "")
    , NetworkPackets = DstPackets + SrcPackets
    | lookup SeverityLookup on EventOriginalSeverity
    | extend 
        Src = SrcIpAddr,
        Dst = DstIpAddr,
        SessionId = NetworkSessionId,
        IpAddr = SrcIpAddr,
        Duration = NetworkDuration,
        Rule = tostring(NetworkRuleNumber)
  | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber
};
Parser (disabled=disabled)
}



//
// Function Name: ASimNetworkSessionMD4IoTAgent
// Description: This ASIM parser supports normalizing Microsoft Defender for IoT micro agent logs to the ASIM Network Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMD4IoTAgent(    ['disabled']:bool=false)
{
let DirectionNetworkEvents =
  SecurityIoTRawEvent | where not(disabled)
  | where RawEventName == "NetworkActivity"
  | parse EventDetails with * ',"LocalPort":' LocalPort:int ',"RemotePort":' RemotePort:int ',' *
  | extend outbound = LocalPort > RemotePort
;
let parser = (T: (EventDetails: string)) {
  T 
   | parse EventDetails with 
    '{"LocalAddress":"' LocalAddress:string '",'
    '"RemoteAddress":"' RemoteAddress:string '",'
    *
    '"BytesIn":' BytesIn:long ','
    '"BytesOut":' BytesOut:long ','
    '"Protocol":"' Protocol:string '",'
    '"ProcessId":' ProcessId:string ','
    '"UserId":' UserId:string ','
    '"ApplicationProtocol":"' ApplicationProtocol:string '",'
    * // '"AzureResourceId":"' AzureResourceId:string '",'
    '"DeviceId":"' DeviceId:string '",'
    '"MessageSource":"' MessageSource:string '",'
    '"OriginalEventId":"' OriginalEventId:string '",'
    '"TimestampUTC":"' TimestampUTC:datetime '",'
    *
}
; 
let OutboundNetworkEvents = 
  DirectionNetworkEvents
  | where outbound
  | invoke parser ()
  | project-rename
     SrcBytes = BytesOut,
     DstBytes = BytesIn,
     SrcPortNumber = LocalPort,
     DstIpAddr = RemoteAddress,
     DstPortNumber = RemotePort,
     SrcProcessId = ProcessId
  | extend
     SrcIpAddr = LocalAddress,
     SrcDvcIdType = "MD4IoTid",
     SrcUserId = UserId,
     SrcUserIdType = "UID",
     SrcDvcId = DeviceId,
     Process = SrcProcessId, // alias
     SrcDvcOs = iif (MessageSource == "Linux", "Linux", "Windows")
;
let InboundNetworkEvents = 
  DirectionNetworkEvents
  | where not(outbound)
  | invoke parser ()
  | project-rename
     DstBytes = BytesOut,
     SrcBytes = BytesIn,
     DstPortNumber = LocalPort,
     SrcIpAddr = RemoteAddress,
     SrcPortNumber = RemotePort,
     DstProcessId = ProcessId
   | extend
      DstIpAddr = LocalAddress,
     DstDvcIdType = "MD4IoTid",
     DstUserId = UserId,
     DstUserIdType = "UID",
     DstDvcId = DeviceId,
     Process = DstProcessId, // alias
     DstDvcOs = iif (MessageSource == "Linux", "Linux", "Windows")
;
let NetworkSessionMD4IoT = 
  union InboundNetworkEvents, OutboundNetworkEvents
   | extend
    EventCount = int(1),
    EventProduct = 'Azure Defender for IoT', 
    EventVendor = 'Microsoft',
    EventSchemaVersion = '0.2.0',
    EventSchema = "NetworkSession", 
    EventType = 'NetworkSession',
    EventStartTime = TimeGenerated, // Open question about timestamps
    EventEndTime = TimeGenerated,  // Open question about timestamps
    EventResult = 'Success',
    EventSeverity = 'Informational'
  | project-rename
     EventProductVersion = AgentVersion, // Not available in Windows
     _ResourceId = AssociatedResourceId, 
     _SubscriptionId = AzureSubscriptionId, 
    EventOriginalUid = OriginalEventId,  // OK pending question
    DvcOs = MessageSource,
    NetworkProtocol = Protocol,
    NetworkApplicationProtocol = ApplicationProtocol,
    DvcId = DeviceId,
    DvcIpAddr = LocalAddress
  | extend
    Dvc = DvcId,
    DvcIdType = "MD4IoTid",
    User = UserId,
    IpAddr = SrcIpAddr,
    Src = SrcIpAddr,
    Dst = DstIpAddr
  | project-away outbound
;
NetworkSessionMD4IoT
}



//
// Function Name: ASimNetworkSessionMD4IoTSensor
// Description: This ASIM parser supports normalizing Microsoft Defender for IoT sensor logs to the ASIM Network Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMD4IoTSensor(    ['disabled']:bool=false)
{
let parser = (disabled:bool=false) 
{
  DefenderIoTRawEvent
  | where RawEventName == "NetworkConnectionData"
  | project-rename 
      DvcSubscriptionId = AzureSubscriptionId
  | extend 
      Dvc = tostring(EventDetails.SourceId),
      DstDvcId = tostring(EventDetails.Destination.DeviceId),
      DstMacAddr = tostring(EventDetails.Destination.MacAddress),
      DstIpAddr = tostring(EventDetails.Destination.IPAddress),
      DstPortNumber = toint(EventDetails.Destination.Port),
      DstDescription = tostring(EventDetails.Destination.DeviceName),
      SrcDvcId = tostring(EventDetails.Source.DeviceId),
      SrcMacAddr = tostring(EventDetails.Source.MacAddress),
      SrcIpAddr = tostring(EventDetails.Source.IPAddress),
      SrcPortNumber = toint(EventDetails.Source.Port),
      SrcDescription = tostring(EventDetails.Source.DeviceName),
      EventOriginalUid = tostring(EventDetails.Id),
      EventEndTime = todatetime(EventDetails.LastSeen),
      EventStartTime = todatetime(EventDetails.StartTime),
      NetworkProtocol = tostring(EventDetails.TransportProtocol)
  | extend
      EventProduct = 'Defender for IoT',
      EventResult = 'Success',
      EventSchema = 'NetworkSession',
      EventSchemaVersion='0.2.4',
      EventCount = toint(1),
      EventSeverity = 'Informational',
      EventType = iff(DstIpAddr=='' and SrcIpAddr == '','L2NetworkSession','NetworkSession'),
      NetworkDirection = iff(tobool(EventDetails.IsInternal), 'Local',''),
      EventVendor = 'Microsoft',
      DstDvcIdType = 'MD4IoTid',
      SrcDvcIdType = 'MD4IoTid'
  | extend // -- Aliases
      Dst = coalesce(DstIpAddr,DstMacAddr),
      Src = coalesce(SrcIpAddr,SrcMacAddr),
      IpAddr = SrcIpAddr,
      EventStartTime = EventEndTime
  | project-away 
      RawEventCategory, RawEventName, RawEventType, SourceSystem, TenantId, AgentVersion, IoTRawEventId, IsEmpty, AgentId, DeviceId, TimeStamp
  | project-away EventDetails, AssociatedResourceId
};
parser (disabled)
}



//
// Function Name: ASimNetworkSessionMicrosoft365Defender
// Description: This ASIM parser supports normalizing M365 Defender for Endpoint to the ASIM Network Session schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMicrosoft365Defender(    ['disabled']:bool=false)
{
let M365Defender=(disabled:bool=false){
 let DirectionLookup=datatable(ActionType:string,NetworkDirection:string,Outbound:boolean)[
   'ConnectionSuccess','Outbound', true
   ,'ConnectionFailed', 'Outbound', true
   ,'ConnectionRequest','Outbound', true
   ,'InboundConnectionAccepted', 'Inbound', false
   ,'ConnectionFound', 'Unknown', false
   ,'ListeningConnectionCreated', 'Listen', false 
 ];
 // -- Common preprocessing to both input and outbound events
 let RawNetworkEvents = (select_outbound:boolean) {
   DeviceNetworkEvents | where not(disabled) 
   | lookup DirectionLookup on ActionType
   | where Outbound == select_outbound
   | project-away AppGuardContainerId, LocalIPType, MachineGroup, RemoteIPType, Timestamp, Outbound //, SourceSystem, TenantId
   | extend
     // Event
     EventOriginalUid = tostring(ReportId),
     EventCount = int(1),
     EventProduct = 'M365 Defender for Endpoint',
     EventVendor = 'Microsoft',
     EventSchema = 'NetworkSession',
     EventSchemaVersion = '0.1.0',
     EventStartTime = TimeGenerated,
     EventEndTime = TimeGenerated,
     EventType = 'NetworkSession',
     EventResult = iff(ActionType=='ConnectionFailed','Failure','Success'),
     EventSeverity = "Informational",
     DvcIdType = 'MDEid'
   | project-away 
       ReportId
   | project-rename 
       EventOriginalResultDetails = ActionType
   | extend
     RemoteUrl = extract (@"(?:https?://)?(.*)", 1, RemoteUrl)
   | extend
     User = iff (InitiatingProcessAccountDomain == '', InitiatingProcessAccountName, strcat(InitiatingProcessAccountDomain, '\\', InitiatingProcessAccountName)),
     UsernameType = iff(InitiatingProcessAccountDomain == '','Simple', 'Windows'),
     SplitHostname = split(DeviceName,"."),
     SplitUrl = split(RemoteUrl,"."),
     NetworkProtocol = case (
       Protocol startswith "Tcp", "TCP",
       Protocol == "Unknown", "",
       toupper(Protocol)
     )
   | project-away Protocol
   | extend  
     DvcHostname = tostring(SplitHostname[0]),
     DvcDomain = tostring(strcat_array(array_slice(SplitHostname, 1, -1), '.')),
     DvcFQDN = iif (DeviceName contains ".", DeviceName, ""),
     UrlHostname = tostring(SplitUrl[0]),
     UrlDomain = tostring(strcat_array(array_slice(SplitUrl, 1, -1), '.')),
     UrlFQDN = iif(RemoteUrl contains ".", RemoteUrl, "")
   | project-away RemoteUrl, DeviceName
   | extend
     DvcDomainType = iif(DvcFQDN != "", "FQDN", ""),
     UrlDomainType = iff(UrlFQDN != "", "FQDN", ""),
     DvcIpAddr = LocalIP
   | extend
     Dvc = DvcHostname  
   | project-rename
     DvcId = DeviceId
   | project-away SplitUrl, SplitHostname
 };
 let OutboundNetworkEvents = 
   RawNetworkEvents (true)
   | project-rename
      DstIpAddr = RemoteIP,
      SrcIpAddr = LocalIP,
      DstPortNumber = RemotePort,
      SrcPortNumber = LocalPort,
      SrcUsernameType = UsernameType,
      SrcUserAadId = InitiatingProcessAccountObjectId,
      SrcUserUpn = InitiatingProcessAccountUpn,
      SrcUserId = InitiatingProcessAccountSid
   | extend
      SrcUsername = User,
      SrcDvcId = DvcId,
      SrcDvcIdType = 'MDEid',
      SrcUserIdType = iff (SrcUserId <> "S-1-0-0", "SID", ""),
      SrcUserId = iff (SrcUserId <> "S-1-0-0", SrcUserId, ""),
      DstHostname = UrlHostname
   | project-rename
      DstDomain = UrlDomain,
      DstFQDN = UrlFQDN,
      DstDomainType = UrlDomainType
   | extend  
      SrcHostname = DvcHostname,
      SrcDomain = DvcDomain,
      SrcFQDN = DvcDomain
   // Processes
   | extend
      SrcProcessId = tostring(InitiatingProcessId),
      ParentProcessId = tostring(InitiatingProcessParentId)
   | project-rename
      SrcProcessName = InitiatingProcessFileName,
      SrcProcessCommandLine = InitiatingProcessCommandLine,
      SrcProcessCreationTime = InitiatingProcessCreationTime,
      SrcProcessIntegrityLevel = InitiatingProcessIntegrityLevel,
      SrcProcessTokenElevation = InitiatingProcessTokenElevation,
      ParentProcessName = InitiatingProcessParentFileName,
      ParentProcessCreationTime = InitiatingProcessParentCreationTime
      // SrcProcessFileSize = InitiatingProcessFileSize,
      // SrcProcessCompany = InitiatingProcessVersionInfoCompanyName,
      // SrcProcessFileProduct = InitiatingProcessVersionInfoProductName,
      // SrcProcessFileVersion = InitiatingProcessVersionInfoProductVersion,
      // SrcProcessFileInternalName = InitiatingProcessVersionInfoInternalFileName,
      // SrcProcessFileOriginalName = InitiatingProcessVersionInfoOriginalFileName,
      // SrcProcessFileDescription = InitiatingProcessVersionInfoFileDescription
   | extend
      Process = SrcProcessName,
      SrcAppName = SrcProcessName,
      SrcAppType = "Process"
 ;
 let InboundNetworkEvents = 
   RawNetworkEvents (false)
   | project-rename
      SrcIpAddr = RemoteIP,
      DstIpAddr = LocalIP,
      SrcPortNumber = RemotePort,
      DstPortNumber = LocalPort,
      DstUsernameType = UsernameType,
      DstUserAadId = InitiatingProcessAccountObjectId,
      DstUserId = InitiatingProcessAccountSid,
      DstUserUpn = InitiatingProcessAccountUpn
   | extend
      DstUsername = User,
      DstDvcId = DvcId,
      DstDvcIdType = 'MDEid',
      DstUserIdType = 'SID',
      SrcHostname = UrlHostname
  | project-rename
      SrcDomain = UrlDomain,
      SrcFQDN = UrlFQDN,
      SrcDomainType = UrlDomainType,
      DstHostname = DvcHostname,
      DstDomain = DvcDomain,
      DstFQDN = DvcFQDN
   // Processes
   | extend
      DstProcessId = tostring(InitiatingProcessId),
      ParentProcessId = tostring(InitiatingProcessParentId)
   | project-rename
      DstProcessName = InitiatingProcessFileName,
      DstProcessCommandLine = InitiatingProcessCommandLine,
      DstProcessCreationTime = InitiatingProcessCreationTime,
      DstProcessIntegrityLevel = InitiatingProcessIntegrityLevel,
      DstProcessTokenElevation = InitiatingProcessTokenElevation,
      ParentProcessName = InitiatingProcessParentFileName,
      ParentProcessCreationTime = InitiatingProcessParentCreationTime
      // SrcProcessFileSize = InitiatingProcessFileSize,
      // SrcProcessCompany = InitiatingProcessVersionInfoCompanyName,
      // SrcProcessFileProduct = InitiatingProcessVersionInfoProductName,
      // SrcProcessFileVersion = InitiatingProcessVersionInfoProductVersion,
      // SrcProcessFileInternalName = InitiatingProcessVersionInfoInternalFileName,
      // SrcProcessFileOriginalName = InitiatingProcessVersionInfoOriginalFileName,
      // SrcProcessFileDescription = InitiatingProcessVersionInfoFileDescription
   | extend
      Process = DstProcessName,
      DstAppName = DstProcessName,
      DstAppType = "Process"
 ;
 union InboundNetworkEvents, OutboundNetworkEvents
 | project-rename 
    Hostname = UrlHostname
 | extend // aliases
    IpAddr = SrcIpAddr,
    Src = SrcIpAddr,
    Dst = DstIpAddr
 };
 M365Defender (disabled)
}



//
// Function Name: ASimNetworkSessionLinuxSysmon
// Description: This ASIM parser supports normalizing Sysmon for Linux event 3 to the ASIM Network Session schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionLinuxSysmon(    ['disabled']:bool=false)
{
let DirectionNetworkEvents =
 Syslog | where not(disabled)
 | project SyslogMessage, TimeGenerated, HostIP
 | where SyslogMessage has_all ('<Provider Name="Linux-Sysmon"', '<EventID>3</EventID>')
 | parse SyslogMessage with * '<Data Name="SourceIp">' SrcIpAddr:string '</Data>' *
 | extend outbound = (SrcIpAddr == HostIP or SrcIpAddr in ('127.0.0.1', '0.0.0.0'))
 ;
 let parser = (T: (SyslogMessage: string)) {
   T 
   | parse SyslogMessage with 
       *
       '<EventRecordID>' EventOriginalUid:string '</EventRecordID>'
       *
       '<Computer>' SysmonComputer:string '</Computer>'
       *
       '<Data Name="RuleName">' RuleName:string '</Data>'
       '<Data Name="UtcTime">' EventEndTime:datetime '</Data>'
       '<Data Name="ProcessGuid">{' ProcessGuid:string '}</Data>'
       '<Data Name="ProcessId">' ProcessId:string '</Data>'
       '<Data Name="Image">' Process:string '</Data>'
       '<Data Name="User">' User:string '</Data>'
       '<Data Name="Protocol">' Protocol:string '</Data>' // -- source is lowercase
       '<Data Name="Initiated">' Initiated:bool '</Data>' 
       '<Data Name="SourceIsIpv6">' SourceIsIpv6:bool '</Data>'		
       '<Data Name="SourceIp">' * '</Data>'
       '<Data Name="SourceHostname">' SrcHostname:string '</Data>'
       '<Data Name="SourcePort">' SrcPortNumber:int '</Data>'
       '<Data Name="SourcePortName">' SrcPortName:string '</Data>'
       '<Data Name="DestinationIsIpv6">' DestinationIsIpv6:bool '</Data>'
       '<Data Name="DestinationIp">' DstIpAddr:string '</Data>'
       '<Data Name="DestinationHostname">' DstHostname:string '</Data>'
       '<Data Name="DestinationPort">' DstPortNumber:int '</Data>'
       '<Data Name="DestinationPortName">' DstPortName:string '</Data>'
       *
       | project-away DstPortName, DestinationIsIpv6, Initiated, SourceIsIpv6, SrcPortName, RuleName
 };
 let OutboundNetworkEvents = 
   DirectionNetworkEvents
   | where outbound
   | invoke parser ()
   | extend
     SrcUsernameType = 'Simple',
     SrcAppType = 'Process'
   | project-rename 
     SrcUsername = User,
     SrcProcessId = ProcessId, 
     SrcProcessGuid = ProcessGuid,
     SrcProcessName = Process
   | extend
     SrcAppName = SrcProcessName
   | project-away SyslogMessage
 ;
 let InboundNetworkEvents = 
   DirectionNetworkEvents
   | where not(outbound)
   | invoke parser ()
   | extend
     DstUsernameType = 'Simple',
     DstAppType = 'Process'
   | project-rename 
     DstUsername = User,
     DstProcessId = ProcessId, 
     DstProcessGuid = ProcessGuid,
     DstProcessName = Process
   | extend
     DstAppName = DstProcessName
   | project-away SyslogMessage
 ; 
 let SysmonForLinuxNetwork=
     union OutboundNetworkEvents, InboundNetworkEvents
     | extend 
         EventType = 'NetworkSession',
         EventStartTime = EventEndTime,
         EventCount = int(1),
         EventVendor = 'Microsoft',
         EventSchemaVersion = '0.2.0',
         EventSchema = 'NetworkSession', 
         EventProduct = 'Sysmon for Linux',
         EventResult = 'Success',
         EventSeverity = 'Informational',
         DvcOs = 'Linux',
         NetworkProtocol = toupper(Protocol),
         NetworkDirection = iff(outbound, "Outbound", "Inbound"),
         EventOriginalType = '3' // Set with a constant value to avoid parsing
     | project-away
         outbound, Protocol
     | project-rename 
         DvcIpAddr = HostIP,
         DvcHostname = SysmonComputer
     | extend // aliases
         Dvc = DvcHostname,
         Hostname = DstHostname,
         IpAddr = SrcIpAddr,
         Src = SrcIpAddr,
         Dst = DstIpAddr
 ;
 SysmonForLinuxNetwork
}



//
// Function Name: ASimNetworkSessionMicrosoftSecurityEventFirewall
// Description: This ASIM parser supports normalizing Microsoft Windows Firewall Events logs ingested in 'SecurityEvent' table to the ASIM Network Session schema. Event IDs which are parsed as part of this parser: 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5167, 5158, 5159

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMicrosoftSecurityEventFirewall(    ['disabled']:bool=false)
{
// Data tables for mapping raw values into string
let LayerCodeTable = datatable (LayerCode:string,LayerName:string)[
  '%%14596', 'IP Packet',
  '%%14597', 'Transport',
  '%%14598', 'Forward',
  '%%14599', 'Stream',
  '%%14600', 'Datagram Data',
  '%%14601', 'ICMP Error',
  '%%14602', 'MAC 802.3',
  '%%14603', 'MAC Native',
  '%%14604', 'vSwitch',
  '%%14608', 'Resource Assignment',
  '%%14609', 'Listen',
  '%%14610', 'Receive/Accept',
  '%%14611', 'Connect',
  '%%14612', 'Flow Established',
  '%%14614', 'Resource Release',
  '%%14615', 'Endpoint Closure',
  '%%14616', 'Connect Redirect',
  '%%14617', 'Bind Redirect',
  '%%14624', 'Stream Packet'];
let ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[
  1, 'ICMP',
  3, 'GGP',
  6, 'TCP',
  8, 'EGP',
  12, 'PUP',
  17, 'UDP',
  20, 'HMP',
  27, 'RDP',
  46, 'RSVP',
  47, 'PPTP data over GRE',
  50, 'ESP',
  51, 'AH',
  66, 'RVD',
  88, 'IGMP',
  89, 'OSPF'];
let Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[
  '%%14592', 'Inbound', false,
  '%%14593', 'Outbound', true,
  '%%14594', 'Forward',false,
  '%%14595', 'Bidirectional', false,
  '%%14609', 'Listen', false];
///////////////////////////////////////////////////////
// this query extract data fields from EventData column from SecurityEvent table
///////////////////////////////////////////////////////
let parser = (disabled: bool=false) {
let WindowsFirewall_SecurityEvent=(){ // Event IDs between (5151 .. 5159)
// will be extracting Event specific fields from 'EventData' field
  let SecurityEventProjected =
      SecurityEvent
      | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type
  ;
  let SecurityEvent_5152 = 
      SecurityEventProjected | where not(disabled)
      | where EventID==5152
      | parse EventData with * '<Data Name="ProcessId">'ProcessId:string'</Data>'
          '\x0d\x0a  <Data Name="Application">'Application'</Data>'
          '\x0d\x0a  <Data Name="Direction">'DirectionCode'</Data>'
          '\x0d\x0a  <Data Name="SourceAddress">'SrcIpAddr:string'</Data>'
          '\x0d\x0a  <Data Name="SourcePort">'SrcPortNumber:int'</Data>'
          '\x0d\x0a  <Data Name="DestAddress">'DstIpAddr:string'</Data>'
          '\x0d\x0a  <Data Name="DestPort">'DstPortNumber:int'</Data>'
          '\x0d\x0a  <Data Name="Protocol">'Protocol:int'</Data>'
          '\x0d\x0a  <Data Name="FilterRTID">'NetworkRuleNumber:int'</Data>'
          '\x0d\x0a  <Data Name="LayerName">'LayerCode'</Data>'
          '\x0d\x0a  <Data Name="LayerRTID">'LayerRTID'</Data>'*
      | project-away EventData;
  let SecurityEvent_5154_5155_5158_5159 =
      SecurityEventProjected | where not(disabled)
      | where EventID in (5154, 5155, 5158, 5159)
      | parse EventData with * '<Data Name="ProcessId">'ProcessId:string'</Data>' 
          '\x0d\x0a  <Data Name="Application">'Application'</Data>'
          '\x0d\x0a  <Data Name="SourceAddress">'SrcIpAddr:string'</Data>'
          '\x0d\x0a  <Data Name="SourcePort">'SrcPortNumber:int'</Data>'
          '\x0d\x0a  <Data Name="Protocol">'Protocol:int'</Data>'
          '\x0d\x0a  <Data Name="FilterRTID">'NetworkRuleNumber:int'</Data>'
          '\x0d\x0a  <Data Name="LayerName">'LayerCode'</Data>'
          '\x0d\x0a  <Data Name="LayerRTID">'LayerRTID'</Data>'*
      | extend DirectionCode = "%%14609"
      | project-away EventData;
  let SecurityEvent_5156_5157 =
      SecurityEventProjected | where not(disabled)
      | where EventID in (5156, 5157)
      | parse EventData with * '<Data Name="ProcessID">'ProcessId:string'</Data>'
          '\x0d\x0a  <Data Name="Application">'Application:string'</Data>'
          '\x0d\x0a  <Data Name="Direction">'DirectionCode:string'</Data>'
          '\x0d\x0a  <Data Name="SourceAddress">'SrcIpAddr:string'</Data>'
          '\x0d\x0a  <Data Name="SourcePort">'SrcPortNumber:int'</Data>'
          '\x0d\x0a  <Data Name="DestAddress">'DstIpAddr:string'</Data>'
          '\x0d\x0a  <Data Name="DestPort">'DstPortNumber:int'</Data>'
          '\x0d\x0a  <Data Name="Protocol">'Protocol:int'</Data>'
          '\x0d\x0a  <Data Name="FilterRTID">'NetworkRuleNumber:int'</Data>'
          '\x0d\x0a  <Data Name="LayerName">'LayerCode'</Data>'
          '\x0d\x0a  <Data Name="LayerRTID">'LayerRTID'</Data>'
          '\x0d\x0a  <Data Name="RemoteUserID">'RemoteUserID'</Data>'
          '\x0d\x0a  <Data Name="RemoteMachineID">'RemoteMachineID'</Data>'*
      | project-away EventData;
  union SecurityEvent_5152, SecurityEvent_5156_5157, SecurityEvent_5154_5155_5158_5159
      | lookup Directions on DirectionCode
      | project-rename DvcHostname = Computer
      | extend
          SrcAppName = iff(isOutBound, Application, ""),
          DstAppName = iff(not(isOutBound), Application, ""),
          SrcDvcId = iff(isOutBound, RemoteMachineID, ""),
          DstDvcId = iff(not(isOutBound), RemoteMachineID, ""),
          SrcProcessId =  iff(isOutBound, tostring(ProcessId), ""),
          DstProcessId =  iff(not(isOutBound), tostring(ProcessId), ""),
          DstUserId = iff(isOutBound, RemoteUserID, ""),
          SrcUserId = iff(not(isOutBound), RemoteUserID, ""),
          DstHostname = iff(isOutBound, "", DvcHostname),
          SrcHostname = iff(isOutBound, DvcHostname, "")
      | project-away Application, RemoteMachineID, RemoteUserID, ProcessId
};
WindowsFirewall_SecurityEvent 
     | extend 
            DvcAction = iff(EventID in (5154, 5156, 5158), "Allow", "Deny"),
            DvcOs = 'Windows',
            DstAppType = "Process",
            SrcUserIdType = iff (SrcUserId <> "S-1-0-0", "SID", ""),
            SrcUserId = iff (SrcUserId <> "S-1-0-0", SrcUserId, ""),
            DstUserIdType = iff (DstUserId <> "S-1-0-0", "SID", ""),
            DstUserId = iff (DstUserId <> "S-1-0-0", DstUserId, ""),
            SrcAppType = "Process",
            EventType = "NetworkSession",
            EventSchema = "NetworkSession",
            EventSchemaVersion="0.2.0",
            EventCount=toint(1),
            EventVendor = "Microsoft",
            EventProduct = "Windows Firewall",
            EventResult = iff(EventID in (5154, 5156, 5158), "Success", "Failure"),
            EventStartTime = TimeGenerated,
            EventEndTime = TimeGenerated,
            EventSeverity = iff(EventID  in (5154, 5156, 5158), "Informational", "Low"),
            EventOriginalType = tostring(EventID),
            DstDvcIdType = iff (DstDvcId != "", "SID", ""),
            SrcDvcIdType = iff (SrcDvcId != "", "SID", "")
   // aliases
    | extend
            Dvc = DvcHostname,
            Hostname = DstHostname,
            IpAddr = SrcIpAddr,
            Src = SrcIpAddr,
            Dst = DstIpAddr,
            Rule = tostring (NetworkRuleNumber)
    | lookup LayerCodeTable on LayerCode
    | lookup ProtocolTable on Protocol
    | project-away LayerCode, DirectionCode, Protocol, isOutBound, LayerName, EventID, LayerRTID,_ResourceId,_SubscriptionId
    };
    parser(disabled=disabled)
}



//
// Function Name: ASimNetworkSessionMicrosoftSysmon
// Description: This ASIM parser supports normalizing Sysmon network session events (event 3) collected logs ingested in 'Event' table to the ASIM Process Event normalized schema. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMicrosoftSysmon(    ['disabled']:bool=false)
{
let parser = (disabled:bool = false) {
      Event
      | where not(disabled)
      | where Source == "Microsoft-Windows-Sysmon" and EventID==3
      | parse-kv EventData as (
                  SourceIp:string,
                  DestinationIp:string,
                  SourceHostname:string,
                  DestinationHostname:string,
                  Initiated:bool,  // Initiated indicates the process initiated a connection (meaning outbound)
                  RuleName:string,
                  UtcTime:datetime,
                  ProcessGuid:string,
                  ProcessId:string,
                  Image:string,
                  User:string,
                  Protocol:string,
                  SourceIsIpv6:bool,
                  SourcePort:int,
                  SourcePortName:string,
                  DestinationIsIpv6:bool,
                  DestinationPort:int,
                  DestinationPortName:string
              ) with (regex=@'<Data Name="(\w+)">{?([^>]*?)}?</Data>')
      | project-away EventData
      | project-rename
              SrcHostname = SourceHostname,
              DstHostname = DestinationHostname
      | project-away
              Source,
              EventLog,
              EventCategory,
              UserName,
              Message,
              ParameterXml,
              RenderedDescription,
              MG,
              AzureDeploymentID,
              Role
      | extend
              AppName = tostring(split(Image, "\\")[-1])
      | extend
              SrcUsernameType = iff(not(Initiated), "Windows", ""),
              SrcUsername = iff(not(Initiated), tostring(User), ""),
              SrcProcessId = iff(not(Initiated), tostring(ProcessId), ""),
              SrcProcessGuid = iff(not(Initiated), ProcessGuid, ""),
              SrcProcessName = iff(not(Initiated), tostring(Image), ""),
              SrcAppName = iff(not(Initiated), AppName, ""),
              SrcAppType = iff(not(Initiated), 'Process', ""),
              DstUsernameType = iff(Initiated, "Windows", ""),
              DstUsername = iff(Initiated, tostring(User), ""),
              DstProcessId = iff(Initiated, tostring(ProcessId), ""),
              DstProcessGuid = iff(Initiated, ProcessGuid, ""),
              DstProcessName = iff(Initiated, tostring(Image), ""),
              DstAppName = iff(Initiated, AppName, ""),
              DstAppType = iff(Initiated, 'Process', ""),
              EventUid = _ItemId
      | project-away  ProcessId, ProcessGuid, Image, AppName
      | project-rename 
              EventStartTime = UtcTime,
              Dvc = Computer,
              SrcIpAddr = SourceIp,
              DstIpAddr  = DestinationIp,
              DstPortNumber = DestinationPort,
              SrcPortNumber = SourcePort,
              NetworkRuleName = RuleName 
      | extend 
              EventEndTime = EventStartTime,
              Hostname = case(
                              Initiated, DstHostname,
                              not(Initiated), SrcHostname,
                              Dvc),
              Src = SrcIpAddr,
              Dst = DstIpAddr,
              DvcIpAddr = iff(Initiated, SrcIpAddr, DstIpAddr),
              IpAddr = SrcIpAddr,
              EventType = 'EndpointNetworkSession',
              EventCount = int(1),
              EventVendor = 'Microsoft',
              EventSchemaVersion = '0.2.5',
              EventSchema = 'NetworkSession', 
              EventProduct = 'Sysmon',
              EventResult = 'Success',
              EventSeverity = 'Informational',
              DvcOs = 'Windows',
              Protocol = toupper(Protocol),
              EventOriginalType = '3' // Set with a constant value to avoid parsing   
      | extend
              DvcHostname = Hostname
      | extend
              SrcHostname = iff( SrcHostname == "-", "", SrcHostname),
              DvcHostname = iff( DvcHostname == "-", "", DvcHostname),
              DstHostname = iff( DstHostname == "-", "", DstHostname) // let's make empty values actually empty
      | project-rename
              TmpSrcHostname = SrcHostname,
              TmpDvcHostname = DvcHostname,
              TmpDstHostname = DstHostname
      | invoke 
              _ASIM_ResolveSrcFQDN('TmpSrcHostname')
      | invoke 
              _ASIM_ResolveDvcFQDN('TmpDvcHostname')
      | invoke 
              _ASIM_ResolveDstFQDN('TmpDstHostname')
      | project-away
              TmpSrcHostname,
              TmpDvcHostname,
              TmpDstHostname
      | extend                         
              NetworkProtocolVersion = iff((DestinationIsIpv6) or (SourceIsIpv6), "IPV6", "IPV4"),
              NetworkProtocol = toupper(Protocol)
      | project-away 
              Destination*,
              Initiated,
              ManagementGroupName,
              TenantId,
              Protocol,
              Source*,
              EventID,
              EventLevelName,
              EventLevel,_ResourceId
    };
    parser (disabled)
}



//
// Function Name: ASimNetworkSessionMicrosoftSysmonWindowsEvent
// Description: This ASIM parser supports normalizing Sysmon network session events (event 3) collected using the Event or WEF (WindowsEvent table) connectors logs ingested in 'WindowsEvent' table to the ASIM Process Event normalized schema. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMicrosoftSysmonWindowsEvent(    ['disabled']:bool=false)
{
let parser = (disabled:bool = false) {
let Sysmon3_WindowsEvent=(disabled:bool=false){
      WindowsEvent
      | where not(disabled) 
      | where Provider == "Microsoft-Windows-Sysmon" and EventID == 3
      | extend
              SourceIp = tostring(EventData.SourceIp),
              DestinationIp = tostring(EventData.DestinationIp),
              DstHostname = tostring(EventData.DestinationHostname),
              SrcHostname = tostring(EventData.SrcHostname),
              RuleName = tostring(EventData.RuleName),
              UtcTime = todatetime(EventData.UtcTime),
              ProcessId = tostring(EventData.ProcessId),
              Image = tostring(EventData.Image),
              User = tostring(EventData.User),
              Protocol = tostring(EventData.Protocol),
              Initiated = tobool(EventData.Initiated), // Initiated indicates the process initiated a connection (meaning outbound)
              SourceIsIpv6 = tobool(EventData.SourceIsIpv6),
              SourcePort = toint(EventData.SourcePort),
              SourcePortName = tostring(EventData.SourcePortName),
              DestinationIsIpv6 = tobool(EventData.DestinationIsIpv6),
              DestinationPort = toint(EventData.DestinationPort),
              DestinationPortName = tostring(EventData.DestinationPortName)
      | parse EventData.ProcessGuid with "{" ProcessGuid "}"
      | project-away EventData
      | project-away
                     Provider,
                     Channel,
                     Task,
                     Data,
                     RawEventData,
                     EventOriginId
    };
Sysmon3_WindowsEvent
      | extend
              AppName = tostring(split(Image, "\\")[-1])
      | extend
              SrcUsernameType = iff(not(Initiated), "Windows", ""),
              SrcUsername = iff(not(Initiated), tostring(User), ""),
              SrcProcessId = iff(not(Initiated), tostring(ProcessId), ""),
              SrcProcessGuid = iff(not(Initiated), ProcessGuid, ""),
              SrcProcessName = iff(not(Initiated), tostring(Image), ""),
              SrcAppName = iff(not(Initiated), AppName, ""),
              SrcAppType = iff(not(Initiated), 'Process', ""),
              DstUsernameType = iff(Initiated, "Windows", ""),
              DstUsername = iff(Initiated, tostring(User), ""),
              DstProcessId = iff(Initiated, tostring(ProcessId), ""),
              DstProcessGuid = iff(Initiated, ProcessGuid, ""),
              DstProcessName = iff(Initiated, tostring(Image), ""),
              DstAppName = iff(Initiated, AppName, ""),
              DstAppType = iff(Initiated, 'Process', ""),
              EventUid = _ItemId
      | project-away  ProcessId, ProcessGuid, Image, AppName
      | project-rename 
              EventStartTime = UtcTime,
              Dvc = Computer,
              SrcIpAddr = SourceIp,
              DstIpAddr  = DestinationIp,
              DstPortNumber = DestinationPort,
              SrcPortNumber = SourcePort,
              NetworkRuleName = RuleName 
      | extend 
              EventEndTime = EventStartTime,
              Hostname = case(
                              Initiated, DstHostname,
                              not(Initiated), SrcHostname,
                              Dvc),
              Src = SrcIpAddr,
              Dst = DstIpAddr,
              DvcIpAddr = iff(Initiated, SrcIpAddr, DstIpAddr),
              IpAddr = SrcIpAddr,
              EventType = 'EndpointNetworkSession',
              EventCount = int(1),
              EventVendor = 'Microsoft',
              EventSchemaVersion = '0.2.5',
              EventSchema = 'NetworkSession', 
              EventProduct = 'Sysmon',
              EventResult = 'Success',
              EventSeverity = 'Informational',
              DvcOs = 'Windows',
              Protocol = toupper(Protocol),
              EventOriginalType = '3' // Set with a constant value to avoid parsing   
      | extend
              DvcHostname = Hostname
      | extend
              SrcHostname = iff( SrcHostname == "-", "", SrcHostname),
              DvcHostname = iff( DvcHostname == "-", "", DvcHostname),
              DstHostname = iff( DstHostname == "-", "", DstHostname) // let's make empty values actually empty
      | project-rename
              TmpSrcHostname = SrcHostname,
              TmpDvcHostname = DvcHostname,
              TmpDstHostname = DstHostname
      | invoke 
              _ASIM_ResolveSrcFQDN('TmpSrcHostname')
      | invoke 
              _ASIM_ResolveDvcFQDN('TmpDvcHostname')
      | invoke 
              _ASIM_ResolveDstFQDN('TmpDstHostname')
      | project-away
              TmpSrcHostname,
              TmpDvcHostname,
              TmpDstHostname
      | extend                         
              NetworkProtocolVersion = iff((DestinationIsIpv6) or (SourceIsIpv6), "IPV6", "IPV4"),
              NetworkProtocol = toupper(Protocol)
      | project-away 
              Destination*,
              Initiated,
              ManagementGroupName,
              TenantId,
              Protocol,
              Source*,
              EventID,
              EventLevelName,
              EventLevel,Correlation,EventRecordId,Keywords,Opcode,SystemProcessId,SystemThreadId,SystemUserId,TimeCreated,_ResourceId,Version
    };
    parser (disabled)
}



//
// Function Name: ASimNetworkSessionMicrosoftWindowsEventFirewall
// Description: This ASIM parser supports normalizing Microsoft Windows Firewall Events logs ingested in 'WindowsEvent' table to the ASIM Network Session schema. Event IDs which are parsed as part of this parser: 5150, 5151, 5152, 5153, 5154, 5155, 5156, 5167, 5158, 5159

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionMicrosoftWindowsEventFirewall(    ['disabled']:bool=false)
{
// Data tables for mapping raw values into string
let LayerCodeTable = datatable (LayerCode:string,LayerName:string)[
  '%%14596', 'IP Packet',
  '%%14597', 'Transport',
  '%%14598', 'Forward',
  '%%14599', 'Stream',
  '%%14600', 'Datagram Data',
  '%%14601', 'ICMP Error',
  '%%14602', 'MAC 802.3',
  '%%14603', 'MAC Native',
  '%%14604', 'vSwitch',
  '%%14608', 'Resource Assignment',
  '%%14609', 'Listen',
  '%%14610', 'Receive/Accept',
  '%%14611', 'Connect',
  '%%14612', 'Flow Established',
  '%%14614', 'Resource Release',
  '%%14615', 'Endpoint Closure',
  '%%14616', 'Connect Redirect',
  '%%14617', 'Bind Redirect',
  '%%14624', 'Stream Packet'];
let ProtocolTable = datatable (Protocol:int, NetworkProtocol: string)[
  1, 'ICMP',
  3, 'GGP',
  6, 'TCP',
  8, 'EGP',
  12, 'PUP',
  17, 'UDP',
  20, 'HMP',
  27, 'RDP',
  46, 'RSVP',
  47, 'PPTP data over GRE',
  50, 'ESP',
  51, 'AH',
  66, 'RVD',
  88, 'IGMP',
  89, 'OSPF'];
let Directions = datatable (DirectionCode:string,NetworkDirection:string, isOutBound:bool)[
  '%%14592', 'Inbound', false,
  '%%14593', 'Outbound', true,
  '%%14594', 'Forward',false,
  '%%14595', 'Bidirectional', false,
  '%%14609', 'Listen', false];
//////////////////////////////////////////////////////
// this query extract the data from WindowsEvent table
//////////////////////////////////////////////////////
let parser = (disabled: bool=false) {
let WindowsFirewall_WindowsEvent=(){   
      WindowsEvent | where not(disabled)
      | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Type
      | where EventID between (5150 .. 5159)
      | project-rename DvcHostname = Computer
      | extend 
          EventSeverity=tostring(EventData.Severity),
          LayerCode = tostring(EventData.LayerName),
          NetworkRuleNumber = toint(EventData.FilterRTID),
          Protocol = toint(EventData.Protocol),
          DirectionCode = iff(EventID in (5154, 5155, 5158, 5159), "%%14609",tostring(EventData.Direction))
      | lookup Directions on DirectionCode 
      | extend  SrcAppName = iff(isOutBound, tostring(EventData.Application), ""),
                  DstAppName = iff(not(isOutBound), tostring(EventData.Application), ""),
                  SrcIpAddr = tostring(EventData.SourceAddress),
                  DstIpAddr = tostring(EventData.DestAddress),
                  SrcDvcId = iff(isOutBound, tostring(EventData.RemoteMachineID), ""),
                  DstDvcId = iff(not(isOutBound), tostring(EventData.RemoteMachineID), ""),
                  SrcPortNumber=toint(EventData.SourcePort),
                  DstPortNumber=toint(EventData.DestPort),
                  SrcProcessId =  iff(isOutBound, tostring(EventData.ProcessId), ""),
                  DstProcessId =  iff(not(isOutBound), tostring(EventData.ProcessId), ""),
                  DstUserId = iff(isOutBound, tostring(EventData.RemoteUserID), ""),
                  SrcUserId = iff(not(isOutBound), tostring(EventData.RemoteUserID), ""),
                  DstHostname = iff(isOutBound, "", DvcHostname),
                  SrcHostname = iff(isOutBound, DvcHostname, "")
      | project-away EventData
  };
// Main query -> outputs both schemas as one normalized table
WindowsFirewall_WindowsEvent 
     | extend 
            DvcAction = iff(EventID in (5154, 5156, 5158), "Allow", "Deny"),
            DvcOs = 'Windows',
            DstAppType = "Process",
            SrcUserIdType = iff (SrcUserId <> "S-1-0-0", "SID", ""),
            SrcUserId = iff (SrcUserId <> "S-1-0-0", SrcUserId, ""),
            DstUserIdType = iff (DstUserId <> "S-1-0-0", "SID", ""),
            DstUserId = iff (DstUserId <> "S-1-0-0", DstUserId, ""),
            SrcAppType = "Process",
            EventType = "NetworkSession",
            EventSchema = "NetworkSession",
            EventSchemaVersion="0.2.0",
            EventCount=toint(1),
            EventVendor = "Microsoft",
            EventProduct = "Windows Firewall",
            EventResult = iff(EventID in (5154, 5156, 5158), "Success", "Failure"),
            EventStartTime = TimeGenerated,
            EventEndTime = TimeGenerated,
            EventSeverity = iff(EventID  in (5154, 5156, 5158), "Informational", "Low"),
            EventOriginalType = tostring(EventID),
            DstDvcIdType = iff (DstDvcId != "", "SID", ""),
            SrcDvcIdType = iff (SrcDvcId != "", "SID", "")
   // aliases
    | extend
            Dvc = DvcHostname,
            Hostname = DstHostname,
            IpAddr = SrcIpAddr,
            Src = SrcIpAddr,
            Dst = DstIpAddr,
            Rule = tostring (NetworkRuleNumber)
    | lookup LayerCodeTable on LayerCode
    | lookup ProtocolTable on Protocol
    | project-away LayerCode, DirectionCode, Protocol, isOutBound, LayerName, EventID,_ResourceId,_SubscriptionId
    };                    
    parser(disabled=disabled)
}



//
// Function Name: ASimNetworkSessionNative
// Description: This ASIM parser supports normalizing the native Microsoft Sentinel Network Session table (ASimNetworkSessionLogs) to the ASIM NetworkSession normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time. 

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionNative(    ['disabled']:bool=false)
{
let parser=(disabled:bool=false) 
{
  ASimNetworkSessionLogs  | where not(disabled)
    | project-rename
        EventUid = _ItemId
    | extend          
        EventSchema = "NetworkSession",
        DvcScopeId = iff(isempty(DvcSubscriptionId), _SubscriptionId, DvcSubscriptionId)
    //  -- Aliases
    | extend
        EventEndTime = iff (isnull(EventEndTime), TimeGenerated, EventEndTime),
        EventStartTime = iff (isnull(EventEndTime), TimeGenerated, EventStartTime),
        Dvc = case(EventType == 'L2NetworkSession',
              coalesce (DvcFQDN, DvcHostname, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct)),
              coalesce (DvcFQDN, DvcHostname, DvcIpAddr, DvcId, _ResourceId, strcat (EventVendor,'/', EventProduct))
        ),
        Dst = coalesce (DstFQDN, DstHostname, DstIpAddr, DstDvcId),
        Src = coalesce (SrcFQDN, SrcHostname, SrcIpAddr, SrcDvcId),
        DvcInterface = iff(isempty(DvcInterface), coalesce(DvcInboundInterface, DvcOutboundInterface), DvcInterface),
        Hostname = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), SrcHostname, DstHostname),
        IpAddr = iff  (EventType == "EndpointNetworkSession" and NetworkDirection == ("Inbound"), DstIpAddr, SrcIpAddr),
        Rule = coalesce(NetworkRuleName, tostring(NetworkRuleNumber)),
        Duration = NetworkDuration,
        SessionId = NetworkSessionId,
        User = DstUsername,
        InnerVlanId = SrcVlanId,
        OuterVlanId = DstVlanId
    | project-away
        TenantId, SourceSystem, DvcSubscriptionId, _SubscriptionId, _ResourceId
  };
parser (disabled=disabled)
}



//
// Function Name: ASimNetworkSessionPaloAltoCEF
// Description: This ASIM parser supports normalizing Palo Alto PanOS logs produced by the Microsoft Sentinel Palo Alto Networks connector to the ASIM Network Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionPaloAltoCEF(    ['disabled']:bool=false)
{
let Actions=datatable(DeviceAction:string,DvcAction:string)
[ "reset client","Reset Source"
, "reset server","Reset Destination"
, "reset both", "Reset"
, "allow","Allow"
, "deny","Deny"
, "drop", "Drop"
, "drop ICMP", "Drop ICMP"
, "reset-client","Reset Source"
, "reset-server","Reset Destination"
, "reset-both", "Reset"
, "drop-icmp", "Drop ICMP"];
let NWParser=(disabled:bool=false){
CommonSecurityLog | where not(disabled)
| where DeviceVendor == "Palo Alto Networks" and DeviceProduct == "PAN-OS" and Activity == "TRAFFIC"
| parse AdditionalExtensions with "PanOSPacketsReceived=" DstPackets:long * "PanOSPacketsSent=" SrcPackets:long *
  // -- Adjustment to support both old and new CSL fields.
| extend 
  EventStartTime =  coalesce(
    todatetime(StartTime), 
    extract(@'start=(.*?)(?:;|$)',1, AdditionalExtensions,typeof(datetime)),
    datetime(null)
  ),
  EventOriginalResultDetails = coalesce(
    column_ifexists("Reason", ""),
    extract(@'reason=(.*?)(?:;|$)',1, AdditionalExtensions, typeof(string)),
    ""
  )
| project-rename 
    EventProductVersion=DeviceVersion // Not Documented
  , Dvc=DeviceName   
  , NetworkApplicationProtocol=ApplicationProtocol
  , SrcZone=DeviceCustomString4 
  , DstZone=DeviceCustomString5
  , NetworkRuleName=DeviceCustomString1
  , SrcUsername=SourceUserName 
  , DstUsername=DestinationUserName 
  , EventOriginalSeverity=LogSeverity // not documented
  , SrcNatIpAddr=SourceTranslatedAddress
  , DstNatIpAddr=DestinationTranslatedAddress
  , PaloAltoFlags=FlexString1 // Flags
| extend
EventVendor="Palo Alto"
  ,EventProduct="PanOS" // Not Documented
  , SrcBytes=tolong(SentBytes)
  , DstBytes=tolong(ReceivedBytes) 
  , NetworkProtocol=toupper(Protocol)
  , NetworkBytes=tolong(FlexNumber1)
  , SrcUsernameType=case(isempty(SrcUsername), "", SrcUsername contains "@", "UPN", "Simple")
  , DstUsernameType=case(isempty(DstUsername), "", DstUsername contains "@", "UPN", "Simple")
  , EventType="NetworkSession"
  , EventCount=toint(1)
  , EventResult=case(DeviceAction=="allow","Success","Failure")
  // -- Adjustment to support both old and new CSL fields.
  , NetworkPackets = coalesce(
      tolong(column_ifexists("FieldDeviceCustomNumber2", long(null))),
      tolong(column_ifexists("DeviceCustomNumber2",long(null)))
    )
  , NetworkSessionId = coalesce(
      tostring(column_ifexists("FieldDeviceCustomNumber1", long(null))),
      tostring(column_ifexists("DeviceCustomNumber1",long(null)))
    )
  , NetworkDuration= coalesce(
      toint(1000*column_ifexists("FieldDeviceCustomNumber3", 0)),
      toint(1000*column_ifexists("DeviceCustomNumber3",0)),
      int(null)
    )
  , EventSchemaVersion="0.2.1"
  , EventSchema="NetworkSession"
  , EventSeverity = "Informational"
| extend hostelements=split(Dvc,'.')
| extend DvcHostname=tostring(hostelements[0])
       , DvcDomain=strcat_array( array_slice(hostelements,1,-1), '.')
| extend DvcFQDN = iff(Dvc contains ".",Dvc,"" )
      , DvcDomainType=iff(Dvc contains ".","FQDN","" )
| project-away hostelements
| lookup Actions on DeviceAction
| project-rename
  DstMacAddr=DestinationMACAddress
  , SrcMacAddr=SourceMACAddress
  , DstIpAddr=DestinationIP
  , DstPortNumber=DestinationPort
  , DstNatPortNumber=DestinationTranslatedPort
  , SrcPortNumber=SourcePort
  , SrcIpAddr=SourceIP
  , SrcNatPortNumber=SourceTranslatedPort
  , DvcOutboundInterface=DeviceOutboundInterface
  , DvcInboundInterface=DeviceInboundInterface
  , EventMessage=Message
  , DvcOriginalAction=DeviceAction
// -- Aliases
| extend
IpAddr = SrcIpAddr,
Rule=NetworkRuleName,
Dst=DstIpAddr,
// Host=DstHostname, 
User=DstUsername,
Duration=NetworkDuration,
SessionId=NetworkSessionId,
EventEndTime =EventStartTime,
Src=SrcIpAddr
| project-away AdditionalExtensions, CommunicationDirection, Device*, Destination*, EndTime, ExternalID, File*, Flex*, IndicatorThreatType, Malicious*, Old*, Process*, ReceiptTime, ReceivedBytes, Remote*, Request*, Sent*, SimplifiedDeviceAction, Source*, StartTime, TenantId, ThreatConfidence, ThreatDescription, ThreatSeverity, EventOutcome, FieldDevice*, ExtID, Reason, ReportReferenceLink, Activity, Computer, OriginalLogSeverity, PaloAltoFlags, Protocol
};
NWParser (disabled)
}



//
// Function Name: ASimNetworkSessionPaloAltoCortexDataLake
// Description: This ASIM parser supports normalizing NetworkSession logs from Palo Alto Cortex Data Lake to the ASIM NetworkSession normalized schema. These events are captured through the Palo Alto Networks CDL data connector that ingests CDL logs into Microsoft Sentinel.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionPaloAltoCortexDataLake(    ['disabled']:bool=false)
{
let EventSeverityLookup = datatable (LogSeverity: string, EventSeverity: string)
[
    "0", "Low",
    "1", "Low",
    "2", "Low",
    "3", "Low",
    "4", "Low",
    "5", "Low",
    "6", "Medium",
    "7", "Medium",
    "8", "Medium",
    "9", "High",
    "10", "High"
];
let EventResultDvcActionLookup = datatable (
    DeviceAction: string,
    DvcAction: string,
    EventResult: string
)
    [
    "allow", "Allow", "Success",
    "deny", "Deny", "Failure",
    "reset client", "Reset Source", "Failure",
    "reset server", "Reset Destination", "Failure",
    "reset both", "Reset", "Failure",
    "drop", "Drop", "Failure",
    "drop ICMP", "Drop ICMP", "Failure",
    "reset-both", "Reset", "Failure"
];
let EventResultDetailsLookup = datatable(Reason: string, EventResultDetails: string)[
    "threat", "Reset",
    "policy-deny", "Unknown",
    "decrypt-cert-validation", "Terminated",
    "decrypt-unsupport-param", "Terminated",
    "decrypt-error", "Terminated",
    "tcp-rst-from-client", "Reset",
    "tcp-rst-from-server", "Reset",
    "resources-unavailable", "Unknown",
    "tcp-fin", "Unknown",
    "tcp-reuse", "Unknown",
    "decoder", "Unknown",
    "aged-out", "Unknown",
    "unknown", "Unknown",
    "n/a", "NA",
];
let ThreatRiskLevelLookup = datatable(PanOSApplicationRisk: string, ThreatRiskLevel: int)
    [
    "1", 20,
    "2", 40,
    "3", 60,
    "4", 80,
    "5", 100
];
let parser = (disabled: bool=false) {
    CommonSecurityLog
    | where not(disabled)
        and DeviceVendor == "Palo Alto Networks" and DeviceProduct == "LF"
        and DeviceEventClassID == "TRAFFIC"
    | parse-kv AdditionalExtensions as (PanOSSessionStartTime: string, PanOSDestinationDeviceHost: string, PanOSSourceDeviceHost: string, PanOSDestinationUUID: string, PanOSDestinationLocation: string, PanOSSourceUUID: string, PanOSDestinationDeviceMac: string, PanOsBytes: long, PanOSIsClienttoServer: string, PanOSSourceLocation: string, PanOSSourceDeviceMac: string, PanOSPacketsReceived: long, PanOSPacketsSent: long, PanOSRuleUUID: int, PanOSApplicationCategory: string, PanOSApplicationSubcategory: string, PanOSChunksReceived: string, PanOSChunksSent: string, PanOSChunksTotal: string, PanOSApplicationContainer: string, PanOSDestinationDeviceCategory: string, PanOSLinkChangeCount: string, PanOSLinkSwitches: string, PanOSLogSource: string, PanOSNSSAINetworkSliceDifferentiator: string, PanOSNSSAINetworkSliceType: string, PanOSOutboundInterfaceDetailsPort: string, PanOSOutboundInterfaceDetailsSlot: string, PanOSOutboundInterfaceDetailsType: string, PanOSOutboundInterfaceDetailsUnit: string, PanOSParentSessionID: string, PanOsRuleUUID: string, PanOSSourceDeviceOS: string, PanOSSourceDeviceOSFamily: string, PanOSSourceDeviceOSVersion: string, PanOSSourceDeviceCategory: string, PanOSVirtualSystemID: string, PanOSVirtualSystemName: string, PanOSCortexDataLakeTenantID: string, PanOSApplicationRisk: string, PanOSIsSaaSApplication: string) with (pair_delimiter=";", kv_delimiter="=")
    | invoke _ASIM_ResolveDvcFQDN('DeviceName')
    | invoke _ASIM_ResolveDstFQDN('PanOSDestinationDeviceHost')
    | invoke _ASIM_ResolveSrcFQDN('PanOSSourceDeviceHost')
    | lookup EventResultDvcActionLookup on DeviceAction
    | lookup EventSeverityLookup on LogSeverity
    | lookup EventResultDetailsLookup on Reason
    | lookup ThreatRiskLevelLookup on PanOSApplicationRisk
    | extend
        EventStartTime = todatetime(PanOSSessionStartTime),
        SrcIpAddr = coalesce(SourceIP, DeviceCustomIPv6Address2),
        DstIpAddr = coalesce(DestinationIP, DeviceCustomIPv6Address3),
        NetworkSessionId = tostring(FieldDeviceCustomNumber1),
        NetworkDuration = toint(FieldDeviceCustomNumber3),
        DstBytes = tolong(ReceivedBytes),
        SrcBytes = tolong(SentBytes),
        SrcDomain = coalesce(SourceNTDomain, SrcDomain),
        DstDomain = coalesce(DestinationNTDomain, DstDomain),
        AdditionalFields = bag_pack(
                      "urlcategory",
                      DeviceCustomString2,
                      "virtualLocation",
                      DeviceCustomString3,
                      "PanOSApplicationCategory",
                      PanOSApplicationCategory,
                      "PanOSApplicationSubcategory",
                      PanOSApplicationSubcategory,
                      "PanOSChunksReceived",
                      PanOSChunksReceived,
                      "PanOSChunksSent",
                      PanOSChunksSent,
                      "PanOSChunksTotal",
                      PanOSChunksTotal,
                      "PanOSApplicationContainer",
                      PanOSApplicationContainer,
                      "PanOSDestinationDeviceCategory",
                      PanOSDestinationDeviceCategory,
                      "PanOSIsClienttoServer",
                      PanOSIsClienttoServer,
                      "PanOSLinkChangeCount",
                      PanOSLinkChangeCount,
                      "PanOSLinkSwitches",
                      PanOSLinkSwitches,
                      "PanOSLogSource",
                      PanOSLogSource,
                      "PanOSNSSAINetworkSliceDifferentiator",
                      PanOSNSSAINetworkSliceDifferentiator,
                      "PanOSNSSAINetworkSliceType",
                      PanOSNSSAINetworkSliceType,
                      "PanOSOutboundInterfaceDetailsPort",
                      PanOSOutboundInterfaceDetailsPort,
                      "PanOSOutboundInterfaceDetailsSlot",
                      PanOSOutboundInterfaceDetailsSlot,
                      "PanOSOutboundInterfaceDetailsType",
                      PanOSOutboundInterfaceDetailsType,
                      "PanOSOutboundInterfaceDetailsUnit",
                      PanOSOutboundInterfaceDetailsUnit,
                      "PanOSParentSessionID",
                      PanOSParentSessionID,
                      "PanOsRuleUUID",
                      PanOsRuleUUID,
                      "PanOSSourceDeviceOS",
                      PanOSSourceDeviceOS,
                      "PanOSSourceDeviceOSFamily",
                      PanOSSourceDeviceOSFamily,
                      "PanOSSourceDeviceOSVersion",
                      PanOSSourceDeviceOSVersion,
                      "PanOSSourceDeviceCategory",
                      PanOSSourceDeviceCategory,
                      "PanOSVirtualSystemID",
                      PanOSVirtualSystemID,
                      "PanOSVirtualSystemName",
                      PanOSVirtualSystemName
                  )
    | project-rename
        DvcIpAddr = Computer,
        EventUid = _ItemId,
        DstDvcId = PanOSDestinationUUID,
        DstGeoCountry = PanOSDestinationLocation,
        DstMacAddr = PanOSDestinationDeviceMac,
        DstNatIpAddr = DestinationTranslatedAddress,
        DstNatPortNumber = DestinationTranslatedPort,
        DstPackets = PanOSPacketsReceived,
        DstPortNumber = DestinationPort,
        DstUsername = DestinationUserName,
        DvcId = DeviceExternalID,
        DvcOriginalAction = DeviceAction,
        EventOriginalSeverity = LogSeverity,
        DstZone = DeviceCustomString5,
        EventOriginalType = DeviceEventClassID,
        EventOriginalUid = ExtID,
        EventProductVersion = DeviceVersion,
        NetworkPackets = FieldDeviceCustomNumber2,
        NetworkRuleName = DeviceCustomString1,
        SrcDvcId = PanOSSourceUUID,
        SrcGeoCountry = PanOSSourceLocation,
        SrcMacAddr = PanOSSourceDeviceMac,
        SrcNatIpAddr = SourceTranslatedAddress,
        SrcNatPortNumber = SourceTranslatedPort,
        SrcPackets = PanOSPacketsSent,
        SrcPortNumber = SourcePort,
        SrcUsername = SourceUserName,
        SrcZone = DeviceCustomString4,
        DvcScopeId = PanOSCortexDataLakeTenantID,
        EventOriginalSubType = Activity,
        DstUserId = DestinationUserID,
        EventOriginalResultDetails = Reason,
        SrcUserId = SourceUserID,
        DvcInboundInterface = DeviceInboundInterface,
        DvcOutboundInterface = DeviceOutboundInterface,
        SrcAppName = ApplicationProtocol,
        ThreatOriginalRiskLevel = PanOSApplicationRisk
    | extend
        Dvc = coalesce(DvcFQDN, DvcId, DvcHostname, DvcIpAddr),
        EventEndTime = EventStartTime,
        Dst = coalesce(DstDvcId, DstHostname, DstIpAddr),
        Src = coalesce(SrcDvcId, SrcHostname, SrcIpAddr),
        DstUserType = _ASIM_GetUserType(DstUsername, ""),
        NetworkProtocol = toupper(Protocol),
        NetworkBytes = SrcBytes + DstBytes,
        NetworkProtocolVersion = case(
                            DstIpAddr contains ".",
                            "IPv4",       
                            DstIpAddr contains ":",
                            "IPv6", 
                            ""
                        ),
        NetworkDirection = iff(PanOSIsClienttoServer == "true", "Outbound", "Inbound"),
        Rule = NetworkRuleName,
        SrcUserType = _ASIM_GetUserType(SrcUsername, ""),
        DstUsernameType = _ASIM_GetUsernameType(DstUsername),
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        Duration = NetworkDuration,
        IpAddr = SrcIpAddr,
        SessionId = NetworkSessionId,
        User = DstUsername,
        Hostname = DstHostname,
        SrcDvcIdType = iff(isnotempty(SrcDvcId), "Other", ""),
        DstDvcIdType = iff(isnotempty(DstDvcId), "Other", ""),
        SrcDomainType = iff(isnotempty(SourceNTDomain), "Windows", SrcDomainType),
        DstDomainType = iff(isnotempty(DestinationNTDomain), "Windows", DstDomainType),
        DstUserIdType = iff(isnotempty(DstUserId), "UID", ""),
        SrcUserIdType = iff(isnotempty(SrcUserId), "UID", ""),
        SrcAppType = case(
                isnotempty(SrcAppName) and PanOSIsSaaSApplication == "true",
                "SaaS Application",
                isnotempty(SrcAppName) and PanOSIsSaaSApplication == "false",
                "Other",
                ""
            )
    | extend
        EventSchema = "NetworkSession",
        EventSchemaVersion = "0.2.6",
        EventType = "NetworkSession",
        EventProduct = "Cortex Data Lake",
        EventVendor = "Palo Alto"
    | project-away
        Source*,
        Destination*,
        Device*,
        AdditionalExtensions,
        CommunicationDirection,
        EventOutcome,
        PanOS*,
        PanOs*,
        Protocol,
        SimplifiedDeviceAction,
        ExternalID,
        Message,
        EndTime,
        FieldDevice*,
        Flex*,
        File*,
        Old*,
        MaliciousIP*,
        OriginalLogSeverity,
        Process*,
        ReceivedBytes,
        SentBytes,
        Remote*,
        Request*,
        StartTime,
        TenantId,
        ReportReferenceLink,
        ReceiptTime,
        Indicator*,
        _ResourceId,
        ThreatConfidence,
        ThreatDescription,
        ThreatSeverity
};
parser(disabled=disabled)
}



//
// Function Name: ASimNetworkSessionSentinelOne
// Description: This ASIM parser supports normalizing SentinelOne logs to the ASIM Network Session normalized schema. SentinelOne events are captured through SentinelOne data connector which ingests SentinelOne server objects such as Threats, Agents, Applications, Activities, Policies, Groups, and more events into Microsoft Sentinel through the REST API.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionSentinelOne(    ['disabled']:bool=false)
{
let NetworkDirectionLookup = datatable (
    alertInfo_netEventDirection_s: string, 
    NetworkDirection: string
)[
    "OUTGOING", "Outbound",
    "INCOMING", "Inbound",
];
let DeviceTypeLookup = datatable (
    agentDetectionInfo_machineType_s: string,
    SrcDeviceType: string
)
    [
    "desktop", "Computer",
    "server", "Computer",
    "laptop", "Computer",
    "kubernetes node", "Other",
    "unknown", "Other"
];
let ThreatConfidenceLookup_undefined = datatable(
    alertInfo_analystVerdict_s: string,
    ThreatConfidence_undefined: int
)
    [
    "FALSE_POSITIVE", 5,
    "Undefined", 15,
    "SUSPICIOUS", 25,
    "TRUE_POSITIVE", 33 
];
let ThreatConfidenceLookup_suspicious = datatable(
    alertInfo_analystVerdict_s: string,
    ThreatConfidence_suspicious: int
)
    [
    "FALSE_POSITIVE", 40,
    "Undefined", 50,
    "SUSPICIOUS", 60,
    "TRUE_POSITIVE", 67 
];
let ThreatConfidenceLookup_malicious = datatable(
    alertInfo_analystVerdict_s: string,
    ThreatConfidence_malicious: int
)
    [
    "FALSE_POSITIVE", 75,
    "Undefined", 80,
    "SUSPICIOUS", 90,
    "TRUE_POSITIVE", 100 
];
let parser = (disabled: bool=false) {
    let alldata = SentinelOne_CL
        | where not(disabled) 
            and event_name_s == "Alerts." 
            and alertInfo_eventType_s == "TCPV4"
        | lookup NetworkDirectionLookup on alertInfo_netEventDirection_s
        | lookup DeviceTypeLookup on agentDetectionInfo_machineType_s;
    let undefineddata = alldata
        | where ruleInfo_treatAsThreat_s == "UNDEFINED"
        | lookup ThreatConfidenceLookup_undefined on alertInfo_analystVerdict_s;
    let suspiciousdata = alldata
        | where ruleInfo_treatAsThreat_s == "Suspicious"
        | lookup ThreatConfidenceLookup_suspicious on alertInfo_analystVerdict_s;
    let maliciousdata = alldata
        | where ruleInfo_treatAsThreat_s == "Malicious"
        | lookup ThreatConfidenceLookup_malicious on alertInfo_analystVerdict_s;
    union undefineddata, suspiciousdata, maliciousdata
    | invoke _ASIM_ResolveDvcFQDN('agentDetectionInfo_name_s')
    | extend 
        DstPortNumber = toint(alertInfo_dstPort_s),
        SrcPortNumber = toint(alertInfo_srcPort_s),
        ThreatConfidence = coalesce(ThreatConfidence_undefined, ThreatConfidence_suspicious, ThreatConfidence_malicious)
    | project-rename
        EventStartTime = sourceProcessInfo_pidStarttime_t,
        DstIpAddr = alertInfo_dstIp_s,
        EventUid = _ItemId,
        SrcIpAddr = alertInfo_srcIp_s,
        DvcId = agentDetectionInfo_uuid_g,
        DvcOs = agentDetectionInfo_osName_s,
        DvcOsVersion = agentDetectionInfo_osRevision_s,
        EventOriginalSeverity = ruleInfo_severity_s,
        EventOriginalUid = alertInfo_dvEventId_s,
        SrcProcessName = sourceProcessInfo_name_s,
        SrcProcessId = sourceProcessInfo_pid_s,
        SrcUsername = sourceProcessInfo_user_s,
        ThreatOriginalConfidence = ruleInfo_treatAsThreat_s
    | extend
        EventEndTime = EventStartTime,
        Dst = DstIpAddr,
        DvcIpAddr = SrcIpAddr,
        Src = SrcIpAddr,
        SrcHostname = DvcHostname,
        SrcDvcId = DvcId,
        IpAddr = SrcIpAddr,
        EventSeverity = iff(EventOriginalSeverity == "Critical", "High", EventOriginalSeverity),
        SrcDvcIdType = iff(isnotempty(DvcId), "Other", ""),
        DvcIdType = iff(isnotempty(DvcId), "Other", ""),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername),
        SrcUserType = _ASIM_GetUserType(SrcUsername, "")
    | extend
        Dvc = coalesce(DvcId, DvcHostname, DvcIpAddr),
        Hostname = SrcHostname
    | extend
        EventCount = int(1),
        EventProduct = "SentinelOne",
        EventResult = "Success",
        DvcAction = "Allow",
        EventSchema = "NetworkSession",
        EventSchemaVersion = "0.2.6",
        EventResultDetails = "NA",
        EventType = "EndpointNetworkSession",
        EventVendor = "SentinelOne",
        NetworkProtocol = "TCP",
        NetworkProtocolVersion = "IPv4"
    | project-away
        *_d,
        *_s,
        *_g,
        *_t,
        *_b,
        _ResourceId,
        TenantId,
        RawData,
        Computer,
        MG,
        ManagementGroupName,
        SourceSystem,
        ThreatConfidence_*
};
parser(disabled = disabled)
}



//
// Function Name: ASimNetworkSessionSonicWallFirewall
// Description: This ASIM parser supports normalizing SonicWall SonicOS ArcSight-formatted Syslog data ingested by Microsoft Sentinel into CommonSecurityLogs to the ASIM Network Session normalized schema.

// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimNetworkSessionSonicWallFirewall(    ['disabled']:bool=false)
{
let Actions=datatable(fw_action:string,DvcAction:string)
[ "reset client","Reset Source"
, "reset server","Reset Destination"
, "reset both", "Reset" 
, "allow","Allow"
, "\"forward\"","Allow"
, "\"mgmt\"","Other"
, "\"NA\"","Other"
, "deny","Deny"
, "\"drop\"", "Drop"
, "drop ICMP", "Drop ICMP"];
let Parser=(disabled:bool=false){
CommonSecurityLog
| where not(disabled)
| where DeviceVendor == "SonicWall"
| where DeviceEventClassID !in (14, 97, 1382, 440, 441, 442, 646, 647, 734, 735)
| parse-kv AdditionalExtensions as (['gcat']:string, ['app']:string, ['arg']:string, ['dstV6']:string, ['srcV6']:string, ['snpt']:string, ['dnpt']:string, ['susr']:string,['appName']:string, ['appcat']:string, ['appid']:string, ['sid']:string, ['catid']:string, ['ipscat']:string, ['ipspri']:string, ['spycat']:string, ['spypri']:string, ['fw_action']:string, ['dpi']:string, ['bid']:string, ['af_action']:string, ['af_polid']:string, ['af_policy']:string, ['af_type']:string, ['af_service']:string, ['af_object']:string, ['contentObject']:string, ['fileid']:string, ['uuid']:string) with (pair_delimiter=";", kv_delimiter="=")
| extend
  SourceIP = coalesce(SourceIP, srcV6)
  , DestinationIP = coalesce(DestinationIP, dstV6)
| where ( isnotempty(SourceIP) and isnotempty(DestinationIP) )
| where gcat in (3, 5, 6, 10) // Include only these event categories.
| lookup Actions on fw_action
// Sets the mandatory EventResult based on the DvcAction.
| extend EventResult = case(DvcAction == "Allow", "Success",
                          DvcAction == "Management", "NA",
                          DvcAction == "NA", "NA",
                          DvcAction == "Other", "NA",
                          "Failure"
                          )
| extend sosLogMsgSeverity = case(LogSeverity == 10, "Emergency (0)",
                                            LogSeverity == 9, "Alert (1)",
                                            LogSeverity == 8, "Critical (2)",
                                            LogSeverity == 7, "Error (3)",
                                            LogSeverity == 6, "Warning (4)",
                                            LogSeverity == 5, "Notice (5)",
                                            LogSeverity == 4, "Info (6)/Debug (7)",
                                            LogSeverity == 3, "Not Mapped (3)",
                                            LogSeverity == 2, "Not Mapped (2)",
                                            LogSeverity == 1, "Not Mapped (1)",
                                            "Not Mapped"
                                            )
| extend EventSeverity = case(tolong(LogSeverity) <= 4, "Informational"
                              , tolong(LogSeverity) <= 6, "Low"
                              , tolong(LogSeverity) <= 8, "Medium"
                              , tolong(LogSeverity) > 8, "High"
                              , ""
                              )
| extend NetworkProtocolVersion = case(DestinationIP has ".", "IPv4"
                                      , DestinationIP has ":", "IPv6"
                                      , ""
                                      )
  , NetworkProtocol = toupper(iff(Protocol contains "-" and Protocol !contains "/", toupper(trim_start(@".*-", Protocol)), toupper(trim_end(@"/.*", Protocol))))
  , NetworkApplicationProtocol = tostring(toupper(trim_start(@".*/", Protocol)))
  , EventOriginalType = DeviceEventClassID
| project-rename
  DstMacAddr = DestinationMACAddress
  , SrcMacAddr = SourceMACAddress
  , DstIpAddr = DestinationIP
  , SrcIpAddr = SourceIP
  , DstPortNumber = DestinationPort
  , SrcPortNumber = SourcePort
  , EventMessage = Activity
  , sosEventMessageDetail = Message
  , EventProductVersion = DeviceVersion
  , sosSerialNumber = Computer
  , DvcOutboundInterface = DeviceOutboundInterface
  , DvcInboundInterface = DeviceInboundInterface
  , sosApplicationID = ApplicationProtocol // Application ID number (when Flow Reporting is enabled).
  , sosCFSFullString = Reason // CFS Category ID and Name
  , NetworkRuleName = DeviceCustomString1 // Rule ID. Identify a policy or rule associated with an event.
  , sosSourceVPNPolicyName = DeviceCustomString2 // Displays the source VPN policy name associated with the event.
  , sosDestinationVPNPolicyName = DeviceCustomString3 // Displays the destination VPN policy name associated with the event.
  , sosLogMsgNote = DeviceCustomString6 // "Note" field. Additional information that is application-dependent.
  , SrcNatIpAddr = DeviceCustomString1Label // NAT'ed source IP4/IPv6 address.
  , DstNatIpAddr = DeviceCustomString2Label // NAT'ed destination IPv4/IPv6 address.
  , sosSourceZone = DeviceCustomString3Label // Source Zone on Gen7. Src Zone Type on Gen6.
  , sosDestinationZone = DeviceCustomString4Label // Destination Zone on Gen7. Dest Zone Type (Trusted/Untrusted, etc.) on Gen6.
  , sosUserSessionType = DeviceCustomString5Label // String indicating the user session type, determined by the auth mechanism.
  , sosUserSessionDuration = DeviceCustomString6Label // User session duration in seconds.
  , NetworkIcmpType = FieldDeviceCustomNumber1 // ICMP Type
  , NetworkIcmpCode = FieldDeviceCustomNumber2 // ICMP Code
  , SrcUsername = SourceUserName
  , ThreatOriginalConfidence = ThreatConfidence
| extend sosLogMsgCategory = case(gcat == 1, "System (1)",
                                              gcat == 2, "Log (2)",
                                              gcat == 3, "Security Services (3)",
                                              gcat == 4, "Users (4)",
                                              gcat == 5, "Firewall Settings (5)",
                                              gcat == 6, "Network (6)",
                                              gcat == 7, "VPN (7)",
                                              gcat == 8, "High Availability (8)",
                                              gcat == 9, "3G/4G, Modem, and Module (9)",
                                              gcat == 10, "Firewall (10)",
                                              gcat == 11, "Wireless (11)",
                                              gcat == 12, "VoIP (12)",
                                              gcat == 13, "SSL VPN (13)",
                                              gcat == 14, "Anti-Spam (14)",
                                              gcat == 15, "WAN Acceleration (15)",
                                              gcat == 16, "Object (16)",
                                              gcat == 17, "SD-WAN (17)",
                                              gcat == 18, "Multi-Instance (18)",
                                              gcat == 19, "Unified Policy Engine (19)",
                                              "Log Category Not Mapped"
                                              )
| extend sosLegacyMessageCategory = case(DeviceEventCategory == 0, "None (0)",
                                            DeviceEventCategory == 1, "System Maintenance (1)",
                                            DeviceEventCategory == 2, "System Errors (2)",
                                            DeviceEventCategory == 4, "Blocked Web Sites (4)",
                                            DeviceEventCategory == 8, "Blocked Java Etc. (8)",
                                            DeviceEventCategory == 16, "User Activity (16)",
                                            DeviceEventCategory == 32, "Attacks (32)",
                                            DeviceEventCategory == 64, "Dropped TCP (64)",
                                            DeviceEventCategory == 128, "Dropped UDP (128)",
                                            DeviceEventCategory == 256, "Dropped ICMP (256)",
                                            DeviceEventCategory == 512, "Network Debug (512)",
                                            DeviceEventCategory == 1024, "Connection Closed (1024)",
                                            DeviceEventCategory == 2048, "Dropped LAN TCP (2048)",
                                            DeviceEventCategory == 4096, "Dropped LAN UDP (4096)",
                                            DeviceEventCategory == 8192, "Dropped LAN ICMP (8192)",
                                            DeviceEventCategory == 32768, "Modem Debug (32768)",
                                            DeviceEventCategory == 65536, "VPN Tunnel Status (65536)",
                                            DeviceEventCategory == 131072, "IEEE 802.11 Management (131072)",
                                            DeviceEventCategory == 262144, "Connection Opened (262144)",
                                            DeviceEventCategory == 524288, "System Environment (524288)",
                                            DeviceEventCategory == 1048576, "Expanded - VoIP Activity (1048576)",
                                            DeviceEventCategory == 2097152, "Expanded - WLAN IDS Activity (2097152)",
                                            DeviceEventCategory == 4194304, "Expanded - SonicPoint Activity (4194304)",
                                            DeviceEventCategory == 8388608, "Expanded - Unified Policy Engine (8388608)",
                                            "Legacy Category Not Mapped"
                                            )
| extend sosIPSPriority = case(ipspri == 1, "High (1)",
                                            ipspri == 2, "Medium (2)",
                                            ipspri == 3, "Low (3)",
                                            ""
                                            )
| extend sosAntiSpywarePriority = case(spypri == 1, "High (1)",
                                            spypri == 2, "Medium (2)",
                                            spypri == 3, "Low (3)",
                                            ""
                                            )
| extend
    EventVendor = "SonicWall"
  , EventProduct = "Firewall"
  , DvcOs = "SonicOS"
  , DvcOsVersion = EventProductVersion
  , DvcIdType = "Other"
  , Dvc = sosSerialNumber
  , DvcDescription = DeviceProduct
  , ASimMatchingHostname = "-"
  , ASimMatchingIpAddr = "-"
  , NetworkIcmpType = tostring(NetworkIcmpType)
  , NetworkIcmpCode = toint(NetworkIcmpCode)
  , Rule = NetworkRuleName
  , NetworkBytes = tolong(coalesce(toint(ReceivedBytes), 0) + coalesce(toint(SentBytes), 0))
  , sosIPSFullString = ipscat
  , ipscat = extract(@'^"?([a-zA-Z-\/]+)', 1, ipscat) // IPS Category/Signature
  , sosIPSSignatureName = extract(@'[ ](.*)\S', 1, ipscat) // IPS Signature name
  , FileSize = tolong(coalesce(FileSize, long(null)))
  , sosAppControlFileName = extract(@'.*Filename: (.*)\"', 1, sosEventMessageDetail) // App Control Filename Logging
  , sosCaptureATPVerdict = extract(@'Gateway Anti-Virus Status: (.*)\. ', 1, sosEventMessageDetail)
  , sosGAVSignatureName = extract(@'Gateway Anti-Virus Alert: (.*) blocked\.', 1, sosEventMessageDetail)
  , sosASWSignatureName = extract(@'Anti-Spyware Detection Alert: (.*)\. ', 1, sosEventMessageDetail)
  , sosCountry = extract(@'Country Name:(.*)\"$', 1, sosEventMessageDetail)
  , SrcZone = sosSourceZone
  , DstZone = sosDestinationZone
  , EventOriginalSeverity = LogSeverity
  , Dst = DstIpAddr
  , Src = SrcIpAddr
  , IpAddr = SrcIpAddr
  , sosCFSCategoryID = extract(@'(\d+)\s', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
  , sosCFSCategoryName = extract(@'.*-("(.*))', 1, coalesce(sosCFSFullString, "")) // Application Name from App Control
  , sosCFSPolicyName = extract(@'Policy: (.*), Info:', 1, coalesce(sosLogMsgNote, ""))
  , EventStartTime = TimeGenerated
  , EventEndTime = TimeGenerated
  , EventType = "NetworkSession"
  , EventSchemaVersion = "0.2.6"
  , EventSchema = "NetworkSession"
  , EventCount = toint(1)
  , EventUid = _ItemId
  , EventResultDetails = "NA"
  , ThreatConfidence = coalesce(toint(ThreatOriginalConfidence), int(null))
| extend
    SrcUsername = coalesce(susr, SrcUsername)
    , FileName = coalesce(FileName, sosAppControlFileName)
    , NetworkDirection = case(SrcZone == "" and DstZone == "", "NA"
                              , SrcZone == "WAN" and (DstZone == "WAN" and DstIpAddr !has ".255"), "Inbound"
                              , SrcZone == "WAN" and DstZone == "WAN", "External"
                              , SrcZone == "WAN" and DstZone != "WAN", "Inbound"
                              , SrcZone == "VPN" and DstZone == "WAN", "Outbound"
                              , SrcZone == "VPN" and DstZone != "WAN", "Inbound"
                              , DstZone == "MULTICAST", "NA"
                              , DstZone == "WAN", "Outbound"
                              , "Local"
                              )
| extend
    SrcUsernameType = case(SrcUsername has "=", "DN",
                                  SrcUsername has "\\", "Windows",
                                  SrcUsername has "@", "UPN",
                                  SrcUsername == "Unknown (external IP)", "",
                                  SrcUsername == "Unknown (SSO bypassed)", "",
                                  isnotempty(SrcUsername), "Simple",
                                  ""
                                  )
    , ThreatField = case(isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Outbound", "SrcIpAddr"
                        , isnotempty(ThreatOriginalConfidence) and NetworkDirection == "Inbound", "DstIpAddr"
                        , ""
                        )
| extend
    ThreatIpAddr = case(ThreatField == "SrcIpAddr", SrcIpAddr
                        , ThreatField == "DstIpAddr", DstIpAddr
                        , ""
                        )
| extend
  SrcGeoCountry = iff(NetworkDirection == "Inbound", sosCountry, "")
  , DstGeoCountry = iff(NetworkDirection == "Outbound", sosCountry, "")
  , SrcAppName = iff(NetworkDirection in ("Inbound", "Local", "NA"), coalesce(appcat, appName), "")
  , DstAppName = iff(NetworkDirection in ("Outbound", "Local", "NA"), coalesce(appcat, appName), "")
  , SrcAppId = iff(NetworkDirection in ("Inbound", "Local", "NA"), sid, "")
  , DstAppId = iff(NetworkDirection in ("Outbound", "Local", "NA"), sid, "")
| extend
  SrcAppType = case(isempty(SrcAppName), ""
                    , SrcAppName contains "\'General " or SrcAppName contains "\'Service ", "Service", "Other")
  , DstAppType = case(isempty(DstAppName), ""
                    , DstAppName contains "\'General " or DstAppName contains "\'Service ", "Service", "Other")
| project-rename
    sosReceivedPackets = DeviceCustomNumber1Label // DeviceCustomNumberXLabel (cnXLabel=)
  , sosSentPackets = DeviceCustomNumber2Label // DeviceCustomNumberXLabel (cnXLabel=)
| extend
    DstPackets = case(NetworkDirection == "Outbound", tolong(sosReceivedPackets)
                  , NetworkDirection == "Inbound", tolong(sosSentPackets)
                  , tolong(long(null))
                  )
  , SrcPackets = case(NetworkDirection == "Outbound", tolong(sosSentPackets)
                  , NetworkDirection == "Inbound", tolong(sosReceivedPackets)
                  , tolong(long(null))
                  )
| project-rename
    sosConnectionDuration = DeviceCustomNumber3Label // Applies to "Connection Closed"
  , sosUser = susr // Logged-in username associated with the log event.
  , sosAppRulePolicyId = af_polid // App Rule Policy ID.
  , sosAppRulePolicyName = af_policy // App Rule Policy Name.
  , sosAppRuleService = af_service // App Rule Service Name.
  , sosAppRuleType = af_type // App Rule Policy Type.
  , sosAppRuleObject = af_object // App Rule Object Name.
  , sosAppRuleObjectContent = contentObject // App Rule Object Content.
  , sosAppRuleAction = af_action
  , sosSourceIPv6Address = srcV6
  , sosDestinationIPv6Address = dstV6
  , sosAppFullString = appcat // The full "<CATEGORY> <APPNAME> -- <SIGNAME>" string.
  , sosAppIDNumber = app // Numeric Application ID. Not the same as "ApplicationProtocol".
  , sosAppID = appid // Application ID from App Control
  , sosAppCategoryID = catid // Application Category ID
  , sosAppSignatureID = sid // Application Signature ID
  , sosIPSCategoryName = ipscat // IPS Category Name
  , sosAntiSpywareCategory = spycat // Anti-Spyware Category
  , sosURLPathName = arg // URL. Represents the URL path name.
  , sosFileIdentifier = fileid // File hash or URL
  , sosDPIInspectedFlow = dpi // Indicates a flow was inspected by DPI. Applies only to Connection Closed messages.
  , DstNatPortNumber = dnpt
  , SrcNatPortNumber = snpt
  , sosBladeID = bid // Blade ID
  , sosUUID = uuid
  , sosFileName = FileName
  , DvcOriginalAction = fw_action
| extend
  ThreatName = coalesce(sosASWSignatureName, sosGAVSignatureName, sosIPSSignatureName, "")
  , ThreatId = coalesce(sosAppSignatureID, "")
  , ThreatCategory = coalesce(sosIPSCategoryName, sosAntiSpywareCategory, "")
  , DstNatPortNumber = toint(DstNatPortNumber)
  , SrcNatPortNumber = toint(SrcNatPortNumber)
| extend AdditionalFields = bag_pack(
  "AppRulePolicyId", sosAppRulePolicyId
  , "AppRulePolicyName", sosAppRulePolicyName
  , "AppRuleService", sosAppRuleService
  , "AppRuleType", sosAppRuleType
  , "AppRuleObject", sosAppRuleObject
  , "AppRuleObjectContent", sosAppRuleObjectContent
  , "AppRuleAction", sosAppRuleAction
  , "AppID", sosAppID
  , "AppCategoryID", sosAppCategoryID
  , "IPSCategoryName", sosIPSCategoryName
  , "AntiSpywareCategory", sosAntiSpywareCategory
  , "FileIdentifier", sosFileIdentifier
  , "DPIInspectedFlow", sosDPIInspectedFlow
  , "BladeID", sosBladeID
  , "UUID", sosUUID
  , "FileName", sosFileName
  , "FileSize", FileSize
  , "CaptureATPVerdict", sosCaptureATPVerdict
  , "CFSCategoryID", sosCFSCategoryID
  , "CFSCategoryName", sosCFSCategoryName
  , "CFSPolicyName", sosCFSPolicyName
  , "AppControlFileName", sosAppControlFileName
  , "IPSFullString", sosIPSFullString
  , "IPSSignatureName", sosIPSSignatureName
  , "LegacyMessageCategory", sosLegacyMessageCategory
  , "LogMsgCategory", sosLogMsgCategory
  , "LogMsgNote", sosLogMsgNote
  , "LogMsgSeverity", sosLogMsgSeverity
  , "SourceVPNPolicyName", sosSourceVPNPolicyName
  , "DestinationVPNPolicyName", sosDestinationVPNPolicyName
  , "EventMessageDetail", sosEventMessageDetail
  , "UserSessionType", sosUserSessionType
  )
| project-away
    DeviceEventCategory
  , gcat
  , RequestMethod
  , ipspri
  , spypri
  , sos*
  , RequestURL
  , Protocol
  , appName
  , AdditionalExtensions
  , Flex*
  , Indicator*
  , Malicious*
  , Field*
  , DeviceCustom*
  , Old*
  , File*
  , Source*
  , Destination*
  , Device*
  , SimplifiedDeviceAction
  , ExternalID
  , ExtID
  , TenantId
  , ProcessName
  , ProcessID
  , ExtID
  , OriginalLogSeverity
  , LogSeverity
  , EventOutcome
  , StartTime
  , EndTime
  , ReceiptTime
  , Remote*
  , ThreatDescription
  , ThreatSeverity
  , RequestContext
  , RequestCookies
  , CommunicationDirection
  , ReportReferenceLink
  , ReceivedBytes
  , SentBytes
  , _ResourceId
  , _ItemId
| project-reorder
    TimeGenerated
  , EventVendor
  , EventProduct
  , DvcDescription
  , Dvc
  , DvcOs
  , DvcOsVersion
};
Parser (disabled=disabled)
}



