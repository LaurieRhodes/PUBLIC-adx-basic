//
// Function Name: ASimFileEventMicrosoftSysmon
// Description: This ASIM parser supports normalizing Sysmon logs ingested in 'Event' table to the ASIM file event schema.
// Version: 
// Last Updated: 
//
.create-or-alter function with (skipvalidation=true) ASimFileEventMicrosoftSysmon(    ['disabled']:bool=False)
{
let parser = (disabled:bool=false) {
   // -- Event parser
   let EventParser = () {
       Event
       | where not(disabled)
       | project EventID, EventData, Computer, TimeGenerated, _ResourceId, _SubscriptionId, Source, Type , _ItemId 
       | where Source == "Microsoft-Windows-Sysmon" and EventID in (11,23,26)
       | project-away Source
       | parse-kv EventData as (
             RuleName:string,
             UtcTime:datetime, 
             ProcessGuid:string,
             ProcessId:string,
             Image:string,
             User:string,
             TargetFilename:string,
             Hashes:string,
             CreationUtcTime:datetime
         )
         with (regex=@'<Data Name="(\w+)">{?([^<]*?)}?</Data>')
       | project-rename 
             ActingProcessGuid = ProcessGuid,
             ActingProcessId = ProcessId,
             ActorUsername = User,
             ActingProcessName = Image,
             TargetFileCreationTime=CreationUtcTime,
             TargetFilePath=TargetFilename,
             EventStartTime=UtcTime
       | project-away EventData
    };
    EventParser 
    | project-rename
        DvcHostname = Computer,
        DvcScopeId = _SubscriptionId,
        DvcId = _ResourceId
    | extend
        EventType=iff (EventID == 11, 'FileCreated', 'FileDeleted'),
        EventProduct = 'Sysmon',
        EventVendor = 'Microsoft',
        EventSchema = 'FileEvent',
        EventSchemaVersion = '0.2.1',
        EventResult = 'Success',
        EventSeverity = 'Informational',
        DvcOs='Windows',
        TargetFilePathType = 'Windows',
        DvcIdType = iff (DvcId != "", "AzureResourceId", ""),
        EventCount = int(1),
        EventEndTime = EventStartTime,
        EventOriginalType = tostring(EventID),
        TargetFileName = tostring(split(TargetFilePath,'\\')[-1]),
        ActorUsernameType = iff(isnotempty(ActorUsername),'Windows', ''),
        RuleName = iff (RuleName == "-", "", RuleName),
        EventUid = _ItemId
     | parse-kv Hashes as (
         MD5:string,
         SHA1:string,
         IMPHASH:string,
         SHA256:string
     )
     | project-rename
         TargetFileMD5 = MD5,
         TargetFileSHA1 = SHA1,
         TargetFileIMPHASH = IMPHASH,
         TargetFileSHA256 = SHA256
     | extend
        Hash=coalesce(TargetFileSHA256, TargetFileSHA1, TargetFileMD5, TargetFileIMPHASH)
     | extend
        HashType = tostring(dynamic(["SHA256", "SHA1", "MD5", "IMPHASH"])[array_index_of(pack_array(TargetFileSHA256, TargetFileSHA1, TargetFileMD5,TargetFileIMPHASH),Hash)])
     // -- Typed entity identifiers
     | extend
        ActorWindowsUsername = ActorUsername
     // -- Aliases
     | extend
        Process = ActingProcessName,
        Dvc = DvcHostname,
        FilePath = TargetFilePath,
        FileName = TargetFileName,
        User = ActorUsername
     | project-away EventID, Hashes,ActorWindowsUsername,TargetFileIMPHASH
 };
 parser(disabled=disabled)
}
